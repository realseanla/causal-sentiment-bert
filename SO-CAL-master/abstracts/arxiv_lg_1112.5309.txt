Most of computer science focuses on automatically solving given computational problems.
I focus on automatically inventing or discovering problems in a way inspired by the playful behavior of animals and humans, to train a more and more general problem solver from scratch in an unsupervised fashion.
At any given time, the novel algorithmic framework POWERPLAY searches the space of possible pairs of new tasks and modifications of the current problem solver, until it finds a more powerful problem solver that provably solves all previously learned tasks plus the new one, while the unmodified predecessor does not.
The new task and its corresponding task-solving skill are those first found and validated.
Newly invented tasks may require making previously learned skills more efficient.
The greedy search of typical POWERPLAY variants orders candidate pairs of tasks and solver modifications by their conditional computational complexity, given the stored experience so far.
This biases the search towards pairs that can be described compactly and validated quickly.
Standard problem solver architectures of personal computers or neural networks tend to generalize by solving numerous tasks outside the self-invented training set; POWERPLAY's ongoing search for novelty keeps fighting to extend beyond the generalization abilities of its present solver.
The continually increasing repertoire of problem solving procedures can be exploited by a parallel search for solutions to additional externally posed tasks.
POWERPLAY may be viewed as a greedy but practical implementation of basic principles of creativity.
The present paper is purely conceptual though; detailed experimental analysis of various problem solver architectures with different generalization properties is left to separate papers.
