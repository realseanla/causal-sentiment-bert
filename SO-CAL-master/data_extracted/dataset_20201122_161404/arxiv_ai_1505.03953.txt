Formal synthesis is the process of generating a program satisfying a high-level specification.
In recent times, effective formal synthesis methods have been proposed based on the use of inductive learning.
We refer to this class of methods that learn programs from examples as formal inductive synthesis.
In this paper, we present a theoretical framework for formal inductive synthesis.
We discuss how formal inductive synthesis differs from traditional machine learning.
We then describe oracle-guided inductive synthesis (OGIS), a class of synthesizers that operate by iteratively querying an oracle.
An instance of OGIS that has had much practical impact is counterexample-guided inductive synthesis (CEGIS).
We present a theoretical characterization of CEGIS for learning any program that computes a recursive language.
In particular, we analyze the relative power of CEGIS variants where the types of counterexamples generated by the oracle varies.
We also consider the impact of bounded versus unbounded memory available to the learning algorithm.
In the special case where the universe of candidate programs is finite, we relate the speed of convergence to the notion of teaching dimension studied in machine learning theory.
Altogether, the results of the paper take a first step towards a theoretical foundation for the emerging field of formal inductive synthesis.
