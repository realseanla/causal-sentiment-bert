{"reviews": [{"SUBSTANCE": "4", "APPROPRIATENESS": "5", "PRESENTATION_FORMAT": "Oral Presentation", "comments": "This paper describes a rule based approach to time expression extraction. Its\nkey insights are time expressions typically are short and contain at least 1\ntime token. It first recognizes the time token through a combination of\ndictionary lookup, regular expression match with POS tagging information. It\nthen expands the time segment from either direction of the time token until it\nreaches based on a set of heuristic rules. Finally, it merges the time segments\ninto a single time expression based on another set of rules. Evaluation of this\napproach with both rule based & ML based systems on 3 data sets show\nsignificant improvements.\n\n- Strengths:\n\nIt's well written and clearly presented. The rules are motivated by empirical\nobservations of the data, and seems to be well justified as evidenced by the\nevaluation. \n\n- Weaknesses:\n\n There are some underspecification in the paper that makes it difficult to\nreproduce the results. See below for details.\n\n- General Discussion:\n\n* Section 4.1: what are there 5 seasons? What about things such as Ramadan\nmonth or Holiday Season?\n* Section 5.1: \"two benchmark datasets\" => \"three datasets\"?\n* Section 5.2: an example without time token will be helpful.\n* Section 5.2: given this approach is close to the ceiling of performance since\n93% expressions contain time token, and the system has achieved 92% recall, how\ndo you plan to improve further?\n* Is there any plan to release the full set of rules/software used?", "SOUNDNESS_CORRECTNESS": "4", "ORIGINALITY": "3", "is_meta_review": null, "RECOMMENDATION": "4", "CLARITY": "4", "REVIEWER_CONFIDENCE": "3"}, {"SUBSTANCE": "4", "APPROPRIATENESS": "4", "PRESENTATION_FORMAT": "Poster", "comments": "The paper proposes a method to recognize time expressions from text. It is a\nsimple rule-based method, which is a strong advantage as an analysis tool since\ntime expression recognition should be a basic process in applications.\nExperiments results show that the proposed method outperforms the\nstate-of-the-art rule-based methods and machine learning based method for time\nexpression recognition. \n\nIt is great, but my concern is generality of the method. The rules in the\nmethod were designed based on observations of corpora that are used for\nevaluation as well. Hence I\u2019m afraid that the rules over-fit to these\ncorpora. Similarly, domains of these corpora may have affected the rule design.\nThere is no statistic nor discussion to show overlaps in time expressions in\nthe observed corpora. If it was shown that time expressions in these corpora\nare mostly overlap, the fact should have supported generality of the rules. \n\nAnyway, it was better that the experiments have been conducted using a new\ncorpus that was distinct from rule design process in order to show that the\nproposed method is widely effective.", "SOUNDNESS_CORRECTNESS": "4", "ORIGINALITY": "3", "is_meta_review": null, "RECOMMENDATION": "3", "CLARITY": "4", "REVIEWER_CONFIDENCE": "4"}], "abstract": "Extracting time expressions from free text is a fundamental task for many applications. We analyze the time expressions from four datasets and find that only a small group of words are used to express time information, and the words in time expressions demonstrate similar syntactic behaviour. Based on the findings, we propose a type-based approach, named SynTime, to recognize time expressions. Specifically, we define three main syntactic token types, namely time token, modifier, and numeral, to group time-related regular expressions over tokens. On the types we design general heuristic rules to recognize time expressions. In recognition, SynTime first identifies the time tokens from raw text, then searches their surroundings for modifiers and numerals to form time segments, and finally merges the time segments to time expressions. As a light-weight rule-based tagger, SynTime runs in real time, and can be easily expanded by simply adding keywords for the text of different types and of different domains. Experiment on benchmark datasets and tweets data shows that SynTime outperforms state-of-the-art methods.", "histories": [], "id": "12", "title": "Time Expression Analysis and Recognition Using Syntactic Token Types and General Heuristic Rules"}
