{
  "name" : "1702.06891.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "EVE: Explainable Vector Based Embedding Technique Using Wikipedia",
    "authors" : [ "M. Atif Qureshi", "Derek Greene" ],
    "emails" : [ "muhammad.qureshi@ucd.ie", "derek.greene@ucd.ie" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Keywords Distributional semantics · Unsupervised learning · Wikipedia"
    }, {
      "heading" : "1 Introduction",
      "text" : "Recently the European Union has approved a regulation which requires that citizens have a “right to explanation” in relation to any algorithmic decision-making (Goodman and Flaxman 2016). According to this regulation, due to come into force in 2018, an algorithm that makes an automatic decision regarding a user, entitles that user to a clear explanation as to how the decision was made. With this in mind, we present an explainable decision-making approach to generating\nM. Atif Qureshi Insight Centre for Data Analytics, University College Dublin, Dublin, Ireland E-mail: muhammad.qureshi@ucd.ie\nDerek Greene Insight Centre for Data Analytics, University College Dublin, Dublin, Ireland E-mail: derek.greene@ucd.ie\nar X\niv :1\n70 2.\n06 89\n1v 1\n[ cs\n.C L\n] 2\n2 Fe\nb 20\n17\nword embeddings, called the EVE model. Word embeddings reference to a family of techniques that simply describes a concept (i.e. word or phrase) as a vector of real numbers (Pennington et al 2014). These vectors have been shown useful in a variety of applications, such as topic modelling (Liu et al 2015), information retrieval (Diaz et al 2016), and document classification (Kusner et al 2015)\nGenerally, word embedding vectors are defined by the context in which those words appear (Baroni et al 2014). Put simply, “a word is characterized by the company it keeps” (Firth 1957). To generate these vectors, a number of unsupervised techniques have been proposed which includes applying neural networks (Mikolov et al 2013a,b; Bojanowski et al 2016), constructing a co-occurrence matrix followed by dimensionality reduction (Levy and Goldberg 2014; Pennington et al 2014), probabilistic models (Globerson et al 2007; Arora et al 2016), and explicit representation of words appearing in a context (Levy et al 2014, 2015).\nExisting word embedding techniques do not benefit from the rich semantic information present in structured or semi-structured text. Instead they are trained over a large corpus, such as a Wikipedia dump or collection of news articles, where any structure is ignored. However, in this contribution we propose a model that uses the semantic benefits of structured text for defining embeddings. Moreover, to the best of our knowledge, previous word embedding techniques do not provide human-readable vector dimensions, thus are not readily open to human interpretation. In contrast, EVE associates human-readable semantic labels with each dimension of a vector, thus making it an explainable word embedding technique.\nTo evaluate EVE, we consider its usefulness in the context of three fundamental tasks that form the basis for many data mining activities – discrimination, clustering, and ranking. We argue for the need for objective evaluation-based strategies to ensure that subjective opinions are discouraged, which may be found tasks such as finding word analogies (Mikolov et al 2013a). These tasks are applied to seven annotated datasets which differ in terms of topical content and complexity, where we demonstrate not only the ability of EVE to successfully perform these tasks, but also its ability to generate meaningful explanations to support its outputs.\nThe reminder of the paper is organized as follows. In Section 2, we provide an overview of research relevant to this work. In Section 3, we provide background material covering the structure of Wikipedia, and then describe the methodology of the EVE model in detail. In Section 4, we provide detailed experimental evaluation on the three tasks mentioned above, and also demonstrate the novelty of the EVE model in generating explanations. Finally, in Section 5, we conclude the paper with further discussion and future directions. The relevant dataset and source code for this work can be publicly accessed at http://mlg.ucd.ie/eve."
    }, {
      "heading" : "2 Related Work",
      "text" : "Assessing the similarity between words is a fundamental problem in natural language processing (NLP). Research in this area has largely proceeded along two directions: 1) techniques built upon distributional hypothesis whereby contextual information serves as the main source for word representation; 2) techniques built upon knowledge bases whereby encyclopedic knowledge is utilized for determination of word associations. In this section, we provide an overview of these directions, along with a description of some works attempting to bridge the gap between\ntechniques (1) and (2) above through knowledge-powered word embeddings. Finally, we conclude the section with an explanation of the novelty of EVE.\n2.1 From Distributional Semantic Models to Word Embeddings\nTraditional computational linguistics has shown the utility of contextual information for tasks involving word meanings, in line with the distributional hypothesis which states that “linguistic items with similar distributions have similar meanings” (Harris 1954). Concretely, distributional semantic models (DSMs) keep count-based vectors corresponding to co-occurring words, followed by a transformation of the vectors via weighting schemes or dimensionality reduction (Baroni and Lenci 2010; Gallant et al 1992; Schütze 1992). A new family of methods, generally known as “word embeddings”, learns word representations in a vector space, where vector weights are set to maximize the probability of the contexts in which the word is observed in the corpus (Bengio et al 2003; Collobert and Weston 2008).\nA more recent type of word embedding technique word2vec called into question the utility of deep models for learning useful representations, instead proposing continuous bag-of-words (Mikolov et al 2013a) and skip-gram (Mikolov et al 2013b) models built upon a simple single-layer architecture. Another recent word embedding technique by Pennington et al (2014) aims to combine best of both strategies, i.e. usage of global corpus statistics available to traditional distributional semantics models and meaningful linear substructures. Finally, Bojanowski et al (2016) proposed an improvement over word2vec by incorporating character n-grams into the model, thereby accounting for sub-word information.\n2.2 Knowledge Base Approaches for Semantic Similarity and Relatedness\nAnother category of work which measures semantic similarity and relatedness between textual units relies on pre-existing knowledge resources (e.g. thesauri, taxonomies or encyclopedias). Within the proposed works in the literature, the key differences lie in the knowledge base employed, the technique used for measurement of semantic distances, and the application domain (Hoffart et al 2012). Both Budanitsky and Hirst (2006) and Jarmasz (2012) used generalization (‘is a’) relations between words using WordNet-based techniques; Metzler et al (2007) used web search logs for measuring similarity between short texts, and both Strube and Ponzetto (2006) and Gabrilovich and Markovitch (2007) used rich encyclopedic knowledge derived from Wikipedia. Witten and Milne (2008) made use of tf.idflike measures on Wikipedia links and Yeh et al (2009) made use of random walk algorithm over the graph driven from Wikipedia’s hyperlink structure, infoboxes, and categories. Recently, Jiang et al (2015) utilize various aspects of page organizations within a Wikipedia article to extract Wikipedia-based feature sets for calculating semantic similarity between concepts. Also Qureshi (2015) presented a Wikipedia-based semantic relatedness framework which uses Wikipedia categories and their sub-categories to a certain depth count to define the relatedness between two Wikipedia articles whose categories overlap with the generated hierarchies.\n2.3 Knowledge-Powered Word Embeddings\nIn order to resolve semantic ambiguities associated with text data, researchers have recently attempted to increase the effectiveness of word embeddings by incorporate knowledge bases when learning vector representations for words Xu et al (2014). Two categories of works exist in this direction: 1) encoding entities and relations in a knowledge graph within a vector space with the goal of knowledge base completionBordes et al (2011); Socher et al (2013); 2) enriching the learned vector representations with external knowledge (from within a knowledge base) in order to improve the quality of word embeddings Bian et al (2014). The works in the first category aim to train neural tensor networks for learning a d-dimensional vector for each entity and relation in a given knowledge base. The works in the second category leverage morphological and semantic knowledge from within knowledge bases as an additional input during the process of learning word representations.\nThe EVE model relates to the works described in Section 2.1 in the sense that these models all attempt to construct word embeddings in order to characterize relatedness between words. However, like the approaches described in Section 2.2, EVE also benefits from semantic information present in structured text, albeit with the different aim of producing word embeddings. The EVE model is different from knowledge-powered word embeddings in that we produce a more general framework by learning vector representations for concepts rather than limiting the model to entities and/or relations. Furthermore, we utilize the structural organization of entities and concepts within a knowledge base to enrich the word vectors. A relevant recent work-in-progress, called ConVec (Sherkat and Milios 2017), attempts to learn Wikipedia concept embeddings by making use of anchor texts (i.e. linked Wikipedia articles). In contrast, EVE gives a more powerful representation through the combination of Wikipedia categories and articles. Finally, a key characteristic that distinguishes EVE from all existing models is its expressive mode of explanations, as enabled by the use of Wikipedia categories and articles.\n3 The EVE Model\n3.1 Background on Wikipedia\nBefore we present the methodology of the proposed EVE model, we firstly provide background information on Wikipedia, whose underlying graph structure forms the basic building blocks of the model.\nWikipedia is a multilingual collaboratively-constructed encyclopedia which is actively updated by a large community of volunteer editors. Figure 1 shows the typical Wikipedia graph structure for a set of articles and associated categories. Each article can receive an inlink from another Wikipedia article while it can also outlink to another Wikipedia article. In our example, article A1 receives inlinks from A4 and A1 outlinks to A2. In addition, each article can belong to a number of categories, which are used to group together articles on a similar subject. In Fig. 1, A1 belongs to categories C1 and C9. Furthermore, each Wikipedia category is arranged in a category taxonomy i.e. , each category can have arbitrary number of super-categories and sub-categories. In our case, C5, C6, C7 are sub-categories of C4, whereas C2 and C3 are super-categories of C4.\nTo motivate with a simple real example, the Wikipedia article “Espresso” receives inlinks from the article “Drink” and it outlinks to the article “Espresso machine”. The article “Espresso” belongs to several categories, including “Coffee drinks” and “Italian cuisine”. The category “Italian cuisine” itself has a number of super-categories (e.g. “Italian culture”, “Cuisine by nationality”) and subcategories (e.g. “Italian desserts”, “Pizza”). These Wikipedia categories serve as a semantic tag for the articles to which they link (Zesch and Gurevych 2007).\n3.2 Methodology\nWe now present the methodology for generating word embedding vectors with the EVE model. Firstly, a target word or concept is mapped to a single Wikipedia concept article1. The vector for this concept is then composed of two distinct types of dimensions. The first type quantifies the association of the concept with other Wikipedia articles, while the second type quantifies the association of the concept with Wikipedia categories. The intuition here is that related words or concepts will share both similar article link associations and similar category associations within the Wikipedia graph, while unrelated concepts will differ with respect to both criteria. The methods used to define these associations are explained next."
    }, {
      "heading" : "3.2.1 Vector dimensions related to Wikipedia articles",
      "text" : "We firstly define the strategy for generating vector dimensions corresponding to individual Wikipedia articles. Given the target concept, which is mapped to a Wikipedia article denoted Aconcept, we enumerate all incoming links and outgoing links between this article and all other articles. We then create a dimension corresponding to each of those linked articles, where the strength of association for a dimension is defined as the sum of the number of incoming and outgoing links involving an article and Aconcept. After creating dimensions for all linked articles,\n1 This can be an exact match or a partial best match using an information retrieval algorithm\nwe also add a self-link dimension2, where the association of Aconcept with itself is defined to be the twice of the maximum count received from the linking articles.\nFig. 2 shows an example of the strategy. In the first step, all inlinks and outlinks are counted for the other non-concept articles (e.g.Aconcept has 3 inlinks and 1 outlink from A3). In the next step, the self-link score is computed as twice the maximum of sum of inlinks and outlinks from all other articles (which is 8 in this case). In the final step, normalization3 of the scores takes place, dividing by the maximum score (which is 8 in this case). Articles having no links to or from Aconcept receive a score of 0. Given the sparsity of the Wikipedia link graph, the article-based dimensions are also naturally sparse."
    }, {
      "heading" : "3.2.2 Vector dimensions related to Wikipedia categories",
      "text" : "Next we define the method for generating vector dimensions corresponding to all Wikipedia categories which are related to the concept article. The strategy to assign a score to the related Wikipedia categories proceeds as follows:\n1. Start by propagating the score uniformly to the categories to which the concept article belongs to (see Fig. 1). 2. A portion of the score is further propagated by the probability of jumping from a category to the categories in the neighborhood. 3. Score propagation continues until a certain hop count is reached (i.e. a threshold value categorydepth), or there are no further categories in the neighborhood.\n2 This dimension the most relevant dimension defining the concept which is the article itself. 3 In case of best match strategy, where more than one article is mapped to a concept i.e., Aconcept1, Aconcept2, ... the score computed is further scaled by the relevance score of the each article for the top-k articles, then reduced by the vector addition, and normalized again.\nFig. 3 illustrates the process, where the concept article Aconcept has a score s, which is 14 for an exact match. First, the score is uniformly propagated across the number of Wikipedia categories and their tree structure to which the article belongs to (C1 and C7 tree receive s/2 from Aconcept). In the next step, the directly-related categories (C1 and C7) further propagate the score to their super and sub-categories, while retaining a portion of score. C1 retains a portion by the factor 1 − jumpprob of the score that it propagate to the super and subcategories. Where jumpprob is the probability of jumping from a category to either a connected super or sub-category. While C7 retains the full score since there is no super or sub-category for further propagation. In step 3 and onwards, the score continues to propagate in a direction (to either a super or sub-category) until hop count categorydepth is reached, or until there is no further category to which score could propagate to. In Fig. 3, C0 and C3 are the cases where the score cannot propagate further, while C4 is the stopping condition for the score to propagate when using a threshold categorydepth = 2."
    }, {
      "heading" : "3.2.3 Overall vector dimensions",
      "text" : "Once the sets of dimensions for related Wikipedia articles and categories have been created, we construct an overall vector for the concept article as follows. Eq. 1 shows the vector representation of a concept, where norm is a normalization function, articlesscore and categoriesscore are the two sets of dimensions, while biasarticle and biascategory are the bias weights which control the importance of the associations with the Wikipedia articles and categories respectively. The bias weights can tuned to give more importance to either type of association. In Eq. 2 we normalize the entire vector such that the sum of the scores of all dimension\n4 In case of the partial best match it is the relevance score returned by BM25 algorithm.\nequates to 1, so that a unit length vector is obtained.\nV ector(concept) =< norm(articlesscore) ∗ biasarticle, norm(categoriesscore) ∗ biascategory >\n(1)\nV ector(concept) = norm(V ector(concept)) (2)\nThe process above is repeated for each word or concept in the input dataset to generate a set of vectors, representing an embedding of the data. In this embedding, each vector dimension is labeled with a tag which corresponds to either a Wikipedia article name or a Wikipedia category name. Therefore, each dimension carries a direct human-interpretable meaning. As we see in the next section, these labeled dimensions prove useful for the generation of algorithmic explanations."
    }, {
      "heading" : "4 Evaluation",
      "text" : "In this section we investigate the extent to which embeddings generated using the EVE model are useful in three fundamental data mining tasks. Firstly, we describe a number of alternative baseline methods, along with the relevant parameter settings. Then we describe the dataset which is used for the evaluations, and finally we report the experimental results to showcase the effectiveness of the model. We also highlight the benefits of the explanations generated as part of this process.\n4.1 Baselines and Parameters\nWe compare EVE with three popular word embedding algorithms: Word2Vec, FastText, and GloVe. For Word2Vec and FastText, we trained two well-known variants of each – i.e. the continuous bag of words model (CBOW) and the skipgram model (SG). For GloVe, we trained the standard model.\nFor each baseline, we use the default implementation parameter values (window size=5, vector dimensions=100), except for the minimum document frequency threshold, which is set to 1 to generate all word vectors, even for rare words. This enables direct comparisons to be made with EVE. For EVE, we use uniform bias weights (i.e. biasarticle=0.5, biascategory=0.5). This provides equal importance to both dimension types. The parameter jumpprob=0.5 was chosen arbitrarily, so as to retain half of the score by the category while the rest is propagated.\n4.2 Dataset\nTo evaluate the performance of the different models, we constructed a new dataset from the complete 2015 English-language Wikipedia dump, composed of seven different topical types, each containing at least five sub-topical categories. On average each sub-topical category contains a list of 20 items or concepts. The usefulness of the dataset lies in the fact that the organization, from topics to categories to items, is made on the bases of factual position.\nTable 1 shows a statistical summary of the dataset. In this table, the column “Example (Category, Items)” shows an example of a category name in the “Topical Type”, together with a subset of list of items belonging to that category. For instance, in the first row “Topical Type” is Animal class and Mammal is one of the category belonging to this type, while Baleen whale is an item with in the category of Mammal. Similarly there are other categories of the type Animal class such as Reptile. Table 2 shows the list of categories for each topical type.\nAll embedding algorithms in our comparison were trained on this dataset. In case of baseline models, we use “article labels”, “article redirects”, “category labels”, and “long abstracts”, with each entry as a separate document. Note that, prior to training, we filter out four non-informative Wikipedia categories which can be viewed as being analogous to stopwords: {“articles contain video clips”, “hidden categories”, “articles created via the article wizard”, “unprintworthy redirects”}.\n4.3 Experiments\nTo compare the EVE model with the various baseline methods, we define three general purpose data mining tasks: intruder detection, ability to cluster, ability to\nsort relevant items first. In the following sections we define the tasks separately, each accompanied by experimental results and explanations."
    }, {
      "heading" : "4.3.1 Experiment 1: Intruder detection",
      "text" : "First we evaluate the performance of EVE when attempting to detect an unrelated “intruder” item from a list of n items, where the rest of the items in the list are semantically related to one another. The ground truth for the correct relations between articles are based on the “topical types” in the dataset.\nTask definition: For a given “topical type”, we randomly choose four items belonging to one category and one intruder item from a different category of the same “topical type”. After repeating this process exhaustively for all combinations for all topical types, we generated 13,532,280 results for this task. Table 3 shows the breakdown of the total number of queries for each of the “topical types”.\nExample of a query: For the “topical type” European cities, we randomly choose four related items from the “category” Great Britain such as London, Birmingham, Manchester, Liverpool, while we randomly choose an intruder item Berlin from the “category” Germany. Each of the models is presented with the five items, where the challenge is to identify Berlin as the intruder – the rest of the items are related to each other as they are cities in Great Britain, while Berlin is a city in Germany.\nStrategy: In order to discover the intruder item, we formulate the problem as a maximization of pairwise similarity across all items, the item receiving the least score is least similar to all other items, and thus identified as the intruder. Formally, for each model we compute\nscore(item(k)) = 5∑\ni=1\nsimilarity(item(k), item(i)); i 6= k (3)\nwhere the similarity function is cosine similarity (Manning et al 2008), k and i are the item positions in the list of items, and item(k) and item(i) are the vectors returned by the model under consideration.\nResults: To evaluate the effectiveness of the EVE model against the baselines for this task, we use accuracy (Manning et al 2008) as the measure for finding the intruder item. Accuracy is defined as the ratio of correct results (or correct number of intruder items) to the total number of results returned by the model:\naccuracy = | ResultsCorrect | | ResultsTotal |\n(4)\nTable 4 shows the experimental results for the six models in this task. From the table it is evident that the EVE model significantly outperforms rest of the models overall. However, in the case of two “topical types”, the FastText CBOW yields better results. To explain this, we next show explanations generated by the EVE model while making decisions for the intruder detection task.\nExplanation from the EVE model: Using the labeled dimensions in vectors produced by EVE, we define the process to generate effective explanations for the intruder detection task in Algorithm 1 as follows. The inputs to this algorithm are the vectors of items, and the intruder item identified by the EVE model. In step 1, we calculate the mean vector of all the vectors. In step 2 and 3, we subtract the influence of intruder and mean of vectors from each other to obtain dominant vector spaces to represent detected coherent items and intruder item respectively. In step 4 and 5, we order the labeled dimensions by their informativeness (i.e. the dimension with the highest score is the most informative dimension). Finally, we return a ranked list of informative vector dimensions for the both non-intruders and the intruder as an explanation for the output of the task.\nAlgorithm 1 Explanation strategy for intruder detection task\nRequire: EVE → vectorspace, vectorintruder 1: spacemean = Mean(vectorspace) 2: coherentSpaceleftover = spacemean - vectorintruder 3: intruderleftover = vectorintruder - spacemean 4: coherentSpaceinfo features = order byinfo features(coherentSpaceleftover) 5: intruderinfo features = order byinfo features(intruderleftover) 6: return coherentSpaceinfo features, intruderinfo features\nTable 5 and 6 show sample explanations generated by the EVE model, where the model has detected a correct and incorrect intruder item respectively. In Table 5, the query has items selected from “topical type” animal class, where four of the items belong to the “category” birds, while the item ‘snake’ belongs to the “category” reptile. As can be seen from the table, the bold features in the non-intruder and intruder column obviously represent bird family and snake respectively, which is the correct inference. Furthermore, the non-bold features in the non-intruder and intruder columns represent deeper relevant relations which may require some domain expertise. For instance, falconiformes are a family of 60+ species in the order of birds and turonian is the evolutionary era of the specific genera.\nIn the example in Table 6, the query has items selected from the “topical type” movie genres, where four of the items belong to the “category” horror film, while the intruder item ‘Children of Men’ belongs to the “category” science fiction film. In this example, EVE identifies the wrong intruder item according to the ground truth, recommending instead the item ‘Final Destination (film)’. From the explanation in the table, it becomes clear why the model made this recommendation. We observe that the non-intruder items have a coherent relationship with ‘post-apocalyptic films’ and ‘films based on science fiction novels’ (both ‘I am Legend (film)’ and ‘Children of Men’ belong to these categories). Whereas ‘Final Destination (film)’ was recommended by the model based on features relating to\nfilming location. A key advantage of having an explanation from the model is that it allows us to understand why a mistake occurs and how we might improve the model. In this case, one way to make improvement might be to add a rule filtering Wikipedia categories relating to locations when consider movie genres."
    }, {
      "heading" : "4.3.2 Experiment 2: Ability to cluster",
      "text" : "In this experiment, we evaluate the extent to which the distances computed on EVE embeddings can help to group semantically-related items together, while keeping unrelated items apart. This is a fundamental requirement for distancebased methods for cluster analysis.\nTask definition: For all items in a specific “topical type”, we construct an embedding space without using information about the category to which the items belong. The purpose is then to measure the extent to which these items cluster together in the space relative to the ground truth categories. This is done by measuring distances in the space between items that should belong together (i.e. intra-cluster distances) and items that should be kept apart (i.e. inter-cluster distances), as determine by the categories. Since there are seven “topical types”, there are also even queries in this task.\nExample of a query: For the “topical type” Cuisine, we are provided with a list of 100 items in total, where each of the five categories has 20 items. These correspond to cuisine items from five different countries. The idea is to measure the ability of each embedding model to cluster these 100 items back into five categories.\nStrategy: To formally measure the ability of a model to cluster items, we conduct a two-step strategy as follows:\n1. Calculate a pairwise similarity matrix between all items of a given “topical type”. The similarity function that we use for this task is the cosine similarity. 2. Transform the similarity matrix to a distance matrix5 which is used to measure inter and intra-cluster distances relative to the ground truth categories.\nResults: To evaluate the ability to cluster, there are typically two objectives: within-cluster cohesion and between-cluster separation. To this end, we use three well-known cluster validity measures in this task. Firstly, the within-cluster distance (Everitt et al 2001) is the total of the squared distances between each item xi and the centroid vector µc of the cluster Cc to which it has been assigned:\nwithin = k∑\nc=1 ∑ xi∈Cc d(xi, µc) 2 (5)\nTypically this value is normalized with respect to the number of clusters k. The higher the score, the more coherent the clusters. Secondly, the between-cluster distance is the total of the squares of the distances between the each cluster centroid and the centroid of the entire dataset, denoted µ̂:\n5 by simply, 1 - normalized similarity score over each dimension\nThis value is also normalized with respect to the number of clusters k. The lower the score, the more well-separated the clusters. Finally, the two above objectives are combined via the CH-Index (Caliński and Harabasz 1974), using the ratio:\nCH = between/(k − 1) within/(n− k) (7)\nThe higher the value of this measure, the better the overall clustering.\nFrom Table 7, we can see that EVE generally performs better than rest of the embedding methods for the within-cluster measure. In Table 8, for the betweencluster measure, EVE is outperformed by FastText CBOW, Word2Vec CBOW, and FastText SG mainly due to the “topical type” Cuisine and European cities where EVE does not perform well. Finally, in Table 9 where the combined aim of clustering is captured through the CH-Index, EVE outperforms the rest of the methods, except in the case of the “topical type” European cities.\nExplanation from the EVE model: Using labeled dimensions from the EVE model, we define a similar strategy for explanation as used in the previous task. However, now instead of discovering an intruder item, the goal is to define categories from items and to define the overall space. Algorithm 2 shows the strategy which requires three inputs: the vectorspace representing the entire embedding; the list of categories categories; the categories vectorspace which is the vector space of items belonging to each category. In step 1, we calculate the mean vector representing for the entire space. In step 2, we order the labeled dimensions of the mean vector by the informativeness. In steps 3–6 we iterate over the list of categories (of a “topical type” such as Cuisine) and calculate mean vector for each category’s vector space, which is followed by the ordering of dimensions of the mean vector of category vector space by the informativeness. Finally, we return the most informative features of the entire space and of each category’s vector space.\nAlgorithm 2 Explanation strategy for the ability to cluster task.\nRequire: EVE → vectorspace, categories, categories vectorspace 1: spacemean = Mean(vectorspace) 2: spaceinfo features = order byinfo features(spacemean) 3: for category ∈ categories do 4: categorymean = Mean(categories vectorspace[category]) 5: categoriesinfo features[category] = order byinfo features(categorymean) 6: end for 7: return spaceinfo features, categoriesinfo features\nTables 10 and 11 show the explanations generated by the EVE model, in the cases where the model performed best and worse against baselines respectively. In Table 10, the query is the list of items from “topical type” cuisine. As can be seen from the bold entries in the table, the explanation conveys the main idea about both the overall space and the individual categories. For example, in the overall space, we can see the cuisines by different nationalities, and likewise we can see the name of nationality from which the cuisine is originated from (e.g. Italian cuisine for the “Italian category” and Pakistani breads for the “Pakistani category”). As for the non-bold entries, we can also observe relevant features but at a deeper semantic level. For example, cuisine of Lombardy in “Italian category” where Lombardy is a region in Italy, and likewise tortilla-based dishes in the Mexican category where tortilla is a primary ingredient in Mexican cuisine.\nIn Table 11, the query is the list of items from “topical type” European cities and this is the example where EVE model performs worse. However, the explanation allows us to understand why this is the case. As can been from the explanation table, the bold features show historic relationships across different countries,\nsuch as “capitals of former nations”, “fortified settlements”, and “Roman sites in Spain”. Similarly, it can also be observed in non-bold features such as “former capital of Italy”. Based on this explanation, we could potentially decide to apply a rule that would exclude any historical articles or categories when generating the embedding for this type of task in future.\nVisualization: Since scatter plots are often used to represent the output of a cluster analysis process, we generate a visualization of all embeddings using T-SNE (Maaten and Hinton 2008), which is a tool to visually represent high-dimensional\ndata by reducing it to 2–3 dimensions for presentation.6. For the interest of reader, Fig. 4 shows a visualization generated using EVE and GloVe when the list of items are selected from the “topical type” country to continent. As can be seen from the plot, the ground truth categories exhibit better clustering behavior when using the space from the EVE model, when compared to the Glove model. This is also reflected in the corresponding scores in Tables 7, 8, and 9."
    }, {
      "heading" : "4.3.3 Experiment 3: Sorting relevant items first",
      "text" : "Task definition: The objective of this task is to rank a list of items based on their relevance to a given query item. According to the ground truth associated with our dataset, items which belong to the same ‘category’ of “topical type” as the query should be ranked above items which do not belong that ‘category’ (i.e. they are irrelevant to the query). In this task the total number of queries is equal to the total number of categories in the dataset – i.e. 36 (see table 1).\n6 The full set of experimental visualizations is available at http://mlg.ucd.ie/eve/\nExample of a query: Unlike the previous tasks, here ‘category’ is used as a query in this task. For example, for the ‘category’ Nobel laureates in Physics, the task is to sort all items from “topical type” Nobel laureates such that the list of items from ‘category’ Nobel laureates in Physics are ranked ahead of the rest of the items. Thus, Niels Bohr, who is a laureate in Physics, should appear near the top of the ranking, unlike Elihu Root, who is a prize winner in Peace.\nStrategy: In order to sort items relevant to a category, we define a simple two-step strategy as follows:\n1. Calculate the cosine similarity between all items and a category belonging to “topical type” in the model space. 2. Sort the list of items in descending order according to their similarity scores with the category.\nBased on this strategy, a successful model should rank items with the same ‘category’ before irrelevant items.\nResults: We use precision-at-k (P@k) and average precision (AP ) (Manning et al 2008) as the measures to evaluate the effectiveness of the sorting ability of each embedding model with respect to relevance of items to a category. P@k captures how many relevant items are calculated at a certain rank (or in the top−k results), while AP captures how early a relevant item is retrieved on average. It may happen that two models have the same value of P@k, while one of the models retrieves relevant items in an earlier order of rank, thus achieving a higher AP value. P@k is defined as the ratio of relevant items retrieved in the top − k retrieved items, whereas AP is the average of P@k values computed after each relevant item is retrieved. Equations 8 and 9 show the formal definitions of both measures.\nP@k = | ItemsRelevant | | ItemsTop-k |\n(8)\nAP = 1\n| ItemsRelevant | |Items|∑ k=1 P@k · rel(k) (9)\nwhere rel(k) = { 1, if item(k) is relevant 0, otherwise\nTables 12 and 13 show the experimental results of the sorting relevant items first task. We choose P@20 (k = 20), since on average there are 20 items in each category in the dataset. As can be seen from tables, the EVE model generally outperforms the rest of models, except for the “topical type” European cities where it gets outperformed by a factor of 1.05 and 1.09 times in terms of P@k and AP respectively, while in all other cases EVE outperforms other algorithm by at least 1.51 and 1.37 times in terms of P@k and AP respectively. On average, the EVE model outperforms the second best algorithm by a factor of 1.8 and 1.67 times in terms of P@k and AP respectively. In the next section, we show the corresponding explanations generated by the EVE model for this task.\nExplanation from the EVE model: Using the labeled dimensions provided by the EVE model, we define a strategy for generating explanations for the sorting relevant items first task in Algorithm 3. The strategy requires three inputs. The first is the vectorspace which is composed of category vector and item vectors. The second input is the Simwrt category which is a column matrix, composed of similarity score between the category vector with itself and item vectors. In this matrix the first entry is 1.0 because of the self similarity of the category vector. The final input is a list of items items. In the step 1 and 2, a weighted mean vector of space is calculated, where the weights are the similarity scores between the vectors in the space and the category vector. In steps 3–6, we iterate over the list of items and calculate the product between the weighted mean vector of the space and the item vector. After taking the product, we order the dimensions by the informativeness. Finally, we return the ranked list of informative features for each item.\nAlgorithm 3 Explanation strategy for sorting relevant items first task\nRequire: EVE → vectorspace, Simwrt category , items 1: BiasedSpace = vectorspace × SimilarityMatrix 2: BiasedSpacemean = Mean(BiasedSpace) 3: for item ∈ items do 4: itemprojection = BiasedSpacemean × vectorspace[item]T 5: itemsinfo features[item] = order byinfo features(itemprojection) 6: end for 7: return itemsinfo features\nTables 14 and 15 show sample explanations generated by the EVE model. For illustration purposes we select the “topical types” Nobel laureates and Music genres for explanations, as these are the only remaining “topical types” which we have not looked at so far in the other tasks.\nIn Table 14, the query is ‘category’ Nobel laureates in Chemistry from the “topical type” nobel laureates. We show the informative features for two cases – the first correct result which appears at rank 1 in the sorted lists produced by EVE, and the first incorrect result which appears at rank 20. The bold features indicates that both individuals are Nobel laureates in Chemistry. However, Linus Pauling also appears to be associated with the Peace category. This reflects that fact that, in fact, Linus Pauling is a two time Nobel laureate in two different categories, Chemistry and Peace. While generating the dataset used in our evaluations, the annotators randomly selected items to belong to a category from the full set of available items, without taking into account occasional cases where an item may belong into two categories. This case highlights the fact that EVE explanations are meaningful and can inform the choices made by human annotators.\nIn Table 15, the query is ‘category’ Classical music from the “topical type” music genres. We see that the first correct result is observed at rank 1 and the first incorrect result is at rank 18. The bold features show that both individuals are associated with classical music. Looking at the biography of the musician Herbie Hancock more closely, we find that he received an education in classical music and he is also well known in the classical genre, although not as strongly as he is known for Jazz music. This again goes to show that explanations generated using the EVE model are insightful and can support the activity of manual annotators."
    }, {
      "heading" : "5 Conclusion and Future Directions",
      "text" : "In this contribution, we presented a novel technique, EVE, for generating vector representations of words using information from Wikipedia. This work represents a first step in the direction of explainable word embeddings, where the core of this interpretability lies in the use of labeled vector dimensions corresponding to either Wikipedia categories or Wikipedia articles. We have demonstrated that, not only are the resulting embeddings useful for fundamental data mining tasks, but the provision of labeled dimensions readily supports the generation of task-specific explanations via simple vector operations. We do not argue that embeddings generated on structured data, such as those produced by the EVE model, would replace the prevalent existing word embedding models. Rather, we have shown that using structured data can provide additional benefits beyond those afforded by existing approaches. An interesting aspect to consider in future would be the use of hybrid models, generated on both structured data and unstructured text, which could still retain aspects of explanations as proposed in this work.\nIn future, we would like to investigate the effect of the popularity of a word or concept (i.e. the number of non-zero dimensions in the embedding). For example, a cuisine-related item might have fewer non-zero dimensions when compared to a country-related item. Similarly, an interesting direction might be to analyze embedding spaces and sub-spaces to learn more about correlations of dimensions, while addressing a task or the effects of dimensionality reduction (even though spaces may be sparse). Another interesting avenue for future work could be to explore different ways of generating task-specific explanations, and to investigate how these explanations might be presented effectively to a user.\nAcknowledgements. This publication has emanated from research conducted with the support of Science Foundation Ireland (SFI), under Grant Number SFI/12/ RC/2289."
    } ],
    "references" : [ {
      "title" : "A (2016) A latent variable model approach to pmi-based word embeddings",
      "author" : [ "S Arora", "Y Li", "Y Liang", "T Ma", "Risteski" ],
      "venue" : "Tr Assoc Computational Linguistics",
      "citeRegEx" : "Arora et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Arora et al\\.",
      "year" : 2016
    }, {
      "title" : "Distributional memory: A general framework for corpus-based semantics",
      "author" : [ "M Baroni", "A Lenci" ],
      "venue" : null,
      "citeRegEx" : "Baroni and Lenci,? \\Q2010\\E",
      "shortCiteRegEx" : "Baroni and Lenci",
      "year" : 2010
    }, {
      "title" : "Don’t count, predict! a systematic comparison of context-counting vs. context-predicting semantic vectors",
      "author" : [ "M Baroni", "G Dinu", "G Kruszewski" ],
      "venue" : "ACL",
      "citeRegEx" : "Baroni et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Baroni et al\\.",
      "year" : 2014
    }, {
      "title" : "A neural probabilistic language model",
      "author" : [ "Y Bengio", "R Ducharme", "P Vincent", "C Jauvin" ],
      "venue" : null,
      "citeRegEx" : "Bengio et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Bengio et al\\.",
      "year" : 2003
    }, {
      "title" : "Knowledge-powered deep learning for word embedding",
      "author" : [ "J Bian", "B Gao", "TY Liu" ],
      "venue" : "Joint European Conference on Machine Learning and Knowledge Discovery in Databases,",
      "citeRegEx" : "Bian et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Bian et al\\.",
      "year" : 2014
    }, {
      "title" : "Enriching word vectors with subword information",
      "author" : [ "P Bojanowski", "E Grave", "A Joulin", "T Mikolov" ],
      "venue" : null,
      "citeRegEx" : "Bojanowski et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Bojanowski et al\\.",
      "year" : 2016
    }, {
      "title" : "Learning structured embeddings of knowledge bases",
      "author" : [ "A Bordes", "J Weston", "R Collobert", "Y Bengio" ],
      "venue" : "In: Conference on artificial intelligence,",
      "citeRegEx" : "Bordes et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Bordes et al\\.",
      "year" : 2011
    }, {
      "title" : "Evaluating wordnet-based measures of lexical semantic relatedness",
      "author" : [ "A Budanitsky", "G Hirst" ],
      "venue" : "Computational Linguistics",
      "citeRegEx" : "Budanitsky and Hirst,? \\Q2006\\E",
      "shortCiteRegEx" : "Budanitsky and Hirst",
      "year" : 2006
    }, {
      "title" : "A dendrite method for cluster analysis. Communications in Statistics-theory and Methods",
      "author" : [ "T Caliński", "J Harabasz" ],
      "venue" : null,
      "citeRegEx" : "Caliński and Harabasz,? \\Q1974\\E",
      "shortCiteRegEx" : "Caliński and Harabasz",
      "year" : 1974
    }, {
      "title" : "A unified architecture for natural language processing: Deep neural networks with multitask learning",
      "author" : [ "R Collobert", "J Weston" ],
      "venue" : "Proc. ICML’2008,",
      "citeRegEx" : "Collobert and Weston,? \\Q2008\\E",
      "shortCiteRegEx" : "Collobert and Weston",
      "year" : 2008
    }, {
      "title" : "Query expansion with locally-trained word embeddings",
      "author" : [ "Qureshi M. Atif", "F Derek Greene Diaz", "B Mitra", "N Craswell" ],
      "venue" : null,
      "citeRegEx" : "Atif et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Atif et al\\.",
      "year" : 2016
    }, {
      "title" : "A synopsis of linguistic theory 1930-1955. Studies in linguistic analysis pp 1–32",
      "author" : [ "B Everitt", "S Landau", "M Leese" ],
      "venue" : "Cluster Analysis. Hodder Arnold Publication, Wiley Firth J",
      "citeRegEx" : "Everitt et al\\.,? \\Q2001\\E",
      "shortCiteRegEx" : "Everitt et al\\.",
      "year" : 2001
    }, {
      "title" : "Euclidean embedding of co-occurrence",
      "author" : [ "A Globerson", "G Chechik", "F Pereira", "N Tishby" ],
      "venue" : "SIGIR Forum, ACM,",
      "citeRegEx" : "Globerson et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Globerson et al\\.",
      "year" : 2007
    }, {
      "title" : "2016) European union regulations on algorithmic decision-making",
      "author" : [ "B Goodman", "S Flaxman" ],
      "venue" : null,
      "citeRegEx" : "Goodman and Flaxman,? \\Q2016\\E",
      "shortCiteRegEx" : "Goodman and Flaxman",
      "year" : 2016
    }, {
      "title" : "a” right to explanation",
      "author" : [ "J Hoffart", "S Seufert", "DB Nguyen", "M Theobald", "G Weikum" ],
      "venue" : "arXiv preprint arXiv:160608813 Harris ZS",
      "citeRegEx" : "Hoffart et al\\.,? \\Q1954\\E",
      "shortCiteRegEx" : "Hoffart et al\\.",
      "year" : 1954
    }, {
      "title" : "Feature-based approaches to semantic similarity",
      "author" : [ "Y Jiang", "X Zhang", "Y Tang", "R Nie" ],
      "venue" : null,
      "citeRegEx" : "Jiang et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Jiang et al\\.",
      "year" : 2015
    }, {
      "title" : "Neural word embedding as implicit matrix factorization",
      "author" : [ "O Levy", "Y Goldberg" ],
      "venue" : "Proc. ICML’2015,",
      "citeRegEx" : "Levy and Goldberg,? \\Q2014\\E",
      "shortCiteRegEx" : "Levy and Goldberg",
      "year" : 2014
    }, {
      "title" : "Ramat-Gan I (2014) Linguistic regularities in sparse and explicit word",
      "author" : [ "O Levy", "Y Goldberg" ],
      "venue" : null,
      "citeRegEx" : "Levy and Goldberg,? \\Q2014\\E",
      "shortCiteRegEx" : "Levy and Goldberg",
      "year" : 2014
    }, {
      "title" : "Improving distributional similarity with lessons learned",
      "author" : [ "O Levy", "Y Goldberg", "I Dagan" ],
      "venue" : null,
      "citeRegEx" : "Levy et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Levy et al\\.",
      "year" : 2015
    }, {
      "title" : "Topical word embeddings. In: AAAI, pp 2418–2424",
      "author" : [ "Y Liu", "Z Liu", "TS Chua", "M Sun" ],
      "venue" : "Maaten Lvd, Hinton G",
      "citeRegEx" : "Liu et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Liu et al\\.",
      "year" : 2015
    }, {
      "title" : "Efficient estimation of word representations",
      "author" : [ "T Mikolov", "K Chen", "G Corrado", "J Dean" ],
      "venue" : "European Conference on Information Retrieval,",
      "citeRegEx" : "Mikolov et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Mikolov et al\\.",
      "year" : 2013
    }, {
      "title" : "Glove: Global vectors for word representation",
      "author" : [ "J Pennington", "R Socher", "CD Manning" ],
      "venue" : "words and phrases and their compositionality. In: Proc. NIPS’2013,",
      "citeRegEx" : "Pennington et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Pennington et al\\.",
      "year" : 2014
    }, {
      "title" : "Vector embedding of wikipedia concepts and entities",
      "author" : [ "H Ireland Galway Schütze" ],
      "venue" : "Word space. In: Proc. NIPS’1992,",
      "citeRegEx" : "Schütze,? \\Q1992\\E",
      "shortCiteRegEx" : "Schütze",
      "year" : 1992
    }, {
      "title" : "A (2013) Reasoning with neural tensor networks",
      "author" : [ "R Socher", "D Chen", "CD Manning", "Ng" ],
      "venue" : null,
      "citeRegEx" : "Socher et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Socher et al\\.",
      "year" : 2013
    }, {
      "title" : "Rc-net: A general framework",
      "author" : [ "Synergy", "C pp 25–30 Xu", "Y Bai", "J Bian", "B Gao", "G Wang", "X Liu", "TY Liu" ],
      "venue" : null,
      "citeRegEx" : "Synergy et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Synergy et al\\.",
      "year" : 2014
    }, {
      "title" : "Analysis of the wikipedia category graph for nlp applications",
      "author" : [ "T Zesch", "I Gurevych" ],
      "venue" : "Natural Language Processing,",
      "citeRegEx" : "Zesch and Gurevych,? \\Q2007\\E",
      "shortCiteRegEx" : "Zesch and Gurevych",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 13,
      "context" : "Recently the European Union has approved a regulation which requires that citizens have a “right to explanation” in relation to any algorithmic decision-making (Goodman and Flaxman 2016).",
      "startOffset" : 160,
      "endOffset" : 186
    }, {
      "referenceID" : 16,
      "context" : "To generate these vectors, a number of unsupervised techniques have been proposed which includes applying neural networks (Mikolov et al 2013a,b; Bojanowski et al 2016), constructing a co-occurrence matrix followed by dimensionality reduction (Levy and Goldberg 2014; Pennington et al 2014), probabilistic models (Globerson et al 2007; Arora et al 2016), and explicit representation of words appearing in a context (Levy et al 2014, 2015).",
      "startOffset" : 243,
      "endOffset" : 290
    }, {
      "referenceID" : 1,
      "context" : "Concretely, distributional semantic models (DSMs) keep count-based vectors corresponding to co-occurring words, followed by a transformation of the vectors via weighting schemes or dimensionality reduction (Baroni and Lenci 2010; Gallant et al 1992; Schütze 1992).",
      "startOffset" : 206,
      "endOffset" : 263
    }, {
      "referenceID" : 22,
      "context" : "Concretely, distributional semantic models (DSMs) keep count-based vectors corresponding to co-occurring words, followed by a transformation of the vectors via weighting schemes or dimensionality reduction (Baroni and Lenci 2010; Gallant et al 1992; Schütze 1992).",
      "startOffset" : 206,
      "endOffset" : 263
    }, {
      "referenceID" : 9,
      "context" : "A new family of methods, generally known as “word embeddings”, learns word representations in a vector space, where vector weights are set to maximize the probability of the contexts in which the word is observed in the corpus (Bengio et al 2003; Collobert and Weston 2008).",
      "startOffset" : 227,
      "endOffset" : 273
    }, {
      "referenceID" : 7,
      "context" : "Both Budanitsky and Hirst (2006) and Jarmasz (2012) used generalization (‘is a’) relations between words using WordNet-based techniques; Metzler et al (2007) used",
      "startOffset" : 5,
      "endOffset" : 33
    }, {
      "referenceID" : 7,
      "context" : "Both Budanitsky and Hirst (2006) and Jarmasz (2012) used generalization (‘is a’) relations between words using WordNet-based techniques; Metzler et al (2007) used",
      "startOffset" : 5,
      "endOffset" : 52
    }, {
      "referenceID" : 7,
      "context" : "Both Budanitsky and Hirst (2006) and Jarmasz (2012) used generalization (‘is a’) relations between words using WordNet-based techniques; Metzler et al (2007) used",
      "startOffset" : 5,
      "endOffset" : 158
    }, {
      "referenceID" : 25,
      "context" : "These Wikipedia categories serve as a semantic tag for the articles to which they link (Zesch and Gurevych 2007).",
      "startOffset" : 87,
      "endOffset" : 112
    }, {
      "referenceID" : 8,
      "context" : "Finally, the two above objectives are combined via the CH-Index (Caliński and Harabasz 1974), using the ratio:",
      "startOffset" : 64,
      "endOffset" : 92
    } ],
    "year" : 2017,
    "abstractText" : "We present an unsupervised explainable word embedding technique, called EVE, which is built upon the structure of Wikipedia. The proposed model defines the dimensions of a semantic vector representing a word using humanreadable labels, thereby it readily interpretable. Specifically, each vector is constructed using the Wikipedia category graph structure together with the Wikipedia article link structure. To test the effectiveness of the proposed word embedding model, we consider its usefulness in three fundamental tasks: 1) intruder detection — to evaluate its ability to identify a non-coherent vector from a list of coherent vectors, 2) ability to cluster — to evaluate its tendency to group related vectors together while keeping unrelated vectors in separate clusters, and 3) sorting relevant items first — to evaluate its ability to rank vectors (items) relevant to the query in the top order of the result. For each task, we also propose a strategy to generate a task-specific human-interpretable explanation from the model. These demonstrate the overall effectiveness of the explainable embeddings generated by EVE. Finally, we compare EVE with the Word2Vec, FastText, and GloVe embedding techniques across the three tasks, and report improvements over the state-of-the-art.",
    "creator" : "LaTeX with hyperref package"
  }
}