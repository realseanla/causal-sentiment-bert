{
  "name" : "1703.09749.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "DEVELOPPEMENT DE METHODES AUTOMATIQUES POUR LA REUTILISATION DES COMPOSANTS LOGICIELS",
    "authors" : [ "KOFFI Kouakou", "Ive Arsène", "Docteur BROU", "Konan Marcellin", "OUMTAGADA Souleymane" ],
    "emails" : [ "koffiyvesarsene@gmail.com" ],
    "sections" : [ {
      "heading" : "DEVELOPPEMENT DE METHODES AUTOMATIQUES POUR LA REUTILISATION DES COMPOSANTS LOGICIELS",
      "text" : "KOFFI Kouakou Ive Arsène, Docteur BROU Konan Marcellin, Prof. OUMTAGADA Souleymane Département d’informatique Ecole Doctorale Polytechnique Institut National Polytechnique Houphouet Boigny (EDP-INPHB) YAMOUSSOUKRO CÔTE D’IVOIRE koffiyvesarsene@gmail.com"
    }, {
      "heading" : "RÉSUMÉ.La masse importanted’informationset à lacomplexité croissantedes applications",
      "text" : "contraignent les développeurs à avoir des composants autonomes et réutilisables des bibliothèques et des marchés de composants. Notre approche consiste à développer des méthodes pour évaluer la qualité du composant logiciel de ces bibliothèques d’une part et d’autre part à optimiser le coût financier et le temps d’adaptation des composants sélectionnés. Notre fonction objectif définit une métrique qui maximise la valeur de la qualité du composant logiciel en minimisant le coût financier et le temps de maintenance. Ce modèle devrait permettre de classer les composants et de les ordonner afin de choisir le plus optimisé. ABSTRACT.The large amount of information and the increasing complexity of applications constrain developers to have stand-alone and reusable components from libraries and component markets.Our approach consists in developing methods to evaluate the quality of the software component of these libraries, on the one hand and moreover to optimize the financial cost and the adaptation’s time of these selected components. Our objective function defines a metric that maximizes the value of the software component quality by minimizing the financial cost and maintenance time. This model should make it possible to classify the components and order them in order to choose the most optimized. MOTS-CLES : développement de méthode, réutilisation, composants logiciels, qualité de composant KEYWORDS:method development, reuse, software components, component quality ."
    }, {
      "heading" : "INTRODUCTION",
      "text" : "Les développeurs et les entreprises se trouvent souvent confrontées à une masse importante d’informations dans l’ingénierie des systèmes d’information. Cette masse importante d’informations a pour conséquence l’augmentation de la taille des logiciels à développer et l’accroissement de la complexité de ces applications. Pour résoudre ces difficultés, les développeurs de logiciel font de plus en plus recours à des composants réutilisables dans leurs applications. La réutilisation de ces composants nécessite le développement de modèles et de méthodes sans lesquels de nombreuses tâches sont manuelles et répétitives. Nous allons, dans ces travaux de recherche, développer des méthodes automatiques pour évaluer et améliorer la qualité des composants logiciels sélectionnés selon les critères définis par l’utilisateur. Il s’agit de :\n1. Définir un modèle de qualité du composant logiciel; 2. Définir un processus de sélection du composant pertinent et adapté au système\nlogiciel à construire;\n3. Etablir un modèle métrique pour évaluer, maximiser la qualité du composant. 4. Optimiser le coût et le temps de maintenance.\nCe travail est organisé comme suit. La première partie concerne l’état de l’art relatif à la sélection des composants réutilisables. La deuxième partie traite des différents modèles développés qui font objet de notre article. La dernière partie concerne la conclusion et les perspectives.\nSECTION 1"
    }, {
      "heading" : "1. Etat de l’art",
      "text" : "1.1. méthodes d’analyse multicritère et optimisation Pour évaluer la qualité des objets sélectionnés en général et des composants logiciels en particulier, plusieurs méthodes de prise de décision multicritère ont été réalisées. Dans l’article de E. Triantaphyllou et al.(1998), les chercheursproposentla méthode d’analyse hiérarchique des procédés (AHP).Cette technique établit une table de comparaison binaire des caractéristiques, des sous caractéristiques des composants logiciels par niveau. Ensuite détermine les poids de ces différents critères et sous critères d’une part et d’autre part évalue la cohérence de cette table. Dans les travauxde A.A. Zaidan et al.(2015), les auteurs définissent une approche de prise de décision multi-critères pour traiter les problèmes complexes. Cette approche permet de décomposer le problème en plusieurs niveaux, définissant les objectifs et fournissant un cadre d’ensemble pour l'évaluation de solutions. Ils proposent la méthode d’analyse AHP comme la meilleure alternative pour la maximisation des données complexes.Ils donnent le modèle suivant :\nDans le cadre de l’optimisation des paramètres liés aux composants sélectionnés, l’article de R. Perriot et al.(2014), donne différents modèles mathématiques d’optimisation en programmation linéaire. L’un de ces modèles établit un compromis entre le coût monétaire minimum et le temps de réponse dans les nuages informatiques. Il est formulé ci-dessous :\n1.2. Sélection de composants logiciels\nLa gestion des informations implique la recherche, la sélection et le stockage de documents pertinents en général et dans le domaine du génie logiciel, des composants logiciels en particulier. Le chercheur E. Rames (1991) définit un modèle de recherche basé sur la classification hiérarchique et thématique des composants logiciels contenus dans une base. Cependant, sa méthode de classification des composants était basée sur une technique manuelle. Dans l’article deB. George et al.(2010), un mécanisme permettant l’automatisation de la sélection d’un composant logiciel, parmi un ensemble de\n(1) * 1 max 1,2,3,....AHP ij jjA q w for i M \nminimiser( C+(1- )T\navecles contraintes\n: modèle de cout\n:\nquidefinissent\nC le\nT letemps deselectiondesvues       \n(2)\ncandidats en fonction de leurs propriétés fonctionnelles et non fonctionnelles a été étudié. Ce mécanisme permet de rendre possible l’extraction et de comparer les composants. Il s’agit après des phases de sélection de composants, de mesurer l’indice de satisfaction de ces différents composants candidats sélectionnés afin de trouver les plus pertinents. L’article de A.A. Zaidan et al.(2015) propose une étude comparative des logiciels dont le but est d’évaluer et de sélectionner des logiciels « open source » pour la gestiondes dossiers médicaux électroniques et numériques. Cette étude est réalisée avec différentes techniques de prise de décision à critères multiples. Ainsi les systèmes logiciels sont sélectionnés sur la base d'un ensemble de résultats métriques à l'aide de la technique AHP intégrée à différentes techniques de prise de décision multicritères. Dans l’article de J. Pande et al.(2013), une métrique de souplesse a étédéfinie. Cette métrique leur a permis de déterminer une sélection optimale des composants logiciels avec le modèle suivant :\nA = ensemble d’attributs de qualité ;\nSC = ensemble de composants disponibles (composants candidats) ;\nqhi= le niveau normalisé de l’attribut de qualité hϵ A pour le composant i ; Wh = poids attribué à l'attribut de qualité hϵ A ; xi = 1 si le composant i est sélectionné, sinon 0 ; Ci = coût normalisé du composant i.\n1.3. Limite des méthodes\nCompte tenu des méthodes développées, nous remarquons que différents chercheurs ont apporté d'énormes contributions. Cependant, certains aspects tels que le temps d’adaptation et de maintenance des composants logiciels d’une part et d’autre part, l’optimisation des deux paramètres coût et temps relatifs aux composants sélectionnésde ces bibliothèques n'ont pas été pris en compte.\n(3) h hi i i i h A i SC i SC p w q x c x      \nSECTION 2"
    }, {
      "heading" : "2. Problème de recherche",
      "text" : "Dans la revue de littérature, divers travaux relatifs aux méthodes de sélection de composants logiciels pertinents ont été réalisés. Les travaux que nous présentons traitent de la problématique de l’évaluation de la qualité des composants pré-faits. Il s’agit de la maximisation de leurs valeurs de qualité en optimisant le coût financier, de maintenance et le temps d’adaptation de ces composants en vue de les réutiliser dans un système logiciel. Notre objectif est donc de déterminer une métrique qui permettra de maximiser la qualité du composant logiciel sélectionné tout en minimisant le coût financier, de maintenance et le temps d’adaptation de ce composant. Il s’agit alors de définir un modèle de qualité du composant logiciel, ensuite de définir un processus de sélection des composantsadaptés au système logiciel à construire, et enfin d’établir un modèle métrique pour évaluer la qualité du composant logiciel sélectionné d’une part, et d’autre part, d’optimiser le coût financier et le temps de modification, d’adaptation de ce composant. Ceci nous amène à formuler les hypothèses de recherche suivantes : Les caractéristiques définies des composants logiciels permettent-elles d’obtenir des attributs mesurables et générant des composants logiciels de qualité ? La sélection de composant de qualité, pertinent répondant aux besoins de l’utilisateur permet-elle d’optimiser le coût financier de maintenance et le temps d’adaptation de ce composant dans un système logiciel?\nSECTION 3"
    }, {
      "heading" : "3. Phase de modélisation",
      "text" : "3.1. Proposition de modèle de qualité du composant logiciel Nous nous intéresserons à l’évaluation de la sélection et à l’intégration des composants logiciels dans un système de logiciel. Notre objectif principal est de faire le choix du « meilleur composant logiciel » d’une bibliothèque ou d’un marché de composants. Cette sélection doit répondre au mieux aux critères définis par l’utilisateur et selon le type d’application à construire. Les caractéristiques définies sont les suivantes : la capacité fonctionnelle, la fiabilité, la facilité d’utilisation, la sécurité et la maintenabilité. Ce qui nous permet de définir le modèle 1 suivant :\nFig1 modèle de qualité de composant logiciel\nCe modèle est basé sur le modèle de qualité ISO 9126 et des représentations de qualité des revues de littérature. Il permet de préciser les caractéristiques les plus importantes pour le choix des composants logiciels selon les besoins de l’utilisateur.\n1Modèle de qualité, Inspiré du modèle ISO 9126 et de la qualité logicielle définie par Jéremie Grodziski\nEn utilisant la technique Analyse Hiérarchique des Procédés (AHP), nous pourrons atteindre l’objectif qui consiste à choisir le composant logiciel qui répond le mieux possible aux besoins de l’utilisateur. Pour se faire, nous avons construit le modèle hiérarchique de qualité en fonction des caractéristiques et des sous caractéristiques des composants logiciels (fig1). Ensuite, à l’aide de la méthode d’analyse multicritère, nous avons construit une table de comparaison binaire des caractéristiques et sous caractéristiques. Ceci a permis de déterminer les poids des différents critères de qualité définis du composant logiciel d’une part et d’autre part d’évaluer la cohérence de notre travail.\n3.2. Proposition de processus de sélection du composant logiciel Nous allons donner une description du processus de sélection des composants sélectionnés puis évalués. Ceci nous amènera à faire le choix du composant pertinent et optimisé.\nFig2 Modèle d’évaluation de la qualité du composant logiciel\nEn noir : les actions à effectuerlors de la sélection\nEn rouge : les méthodes utilisées lors de la sélection\nCe processus est modélisé en UML de la manière suivante :\nFig3 processus de sélection d’un composant\nIl s’agit de définir un processus de sélection qui permettra à l’utilisateur de faire le choix du composant logiciel dans une bibliothèque. En effet sur le net, il existe de nombreuses bibliothèques telles que ComponentSource, Sourceforge, flashline,citerAlterWay, etc, permettant de programmer une interface graphique pour des applications données.\n1\n2\n3\n4\n5\n6\nLe processus de sélection suit les étapes suivantes : Etape1:L’utilisateur exprime les besoins de qualité du composant. Etape2: Une première recherche consiste à prendre en compte les propriétés fonctionnelles fournissant certains services en rapport avec le type de logiciel à construire et surtout les besoins exprimés par l’utilisateur. Nous obtenons un ensemble de composants logiciels sélectionnés dont les propriétés sont des propriétés fonctionnelles fournies par les composants logiciels. Autrement dit, il s’agit des services rendus par les différents composants. Etape3: Cette étape consiste à faire une sélection basée sur les propriétés non fonctionnelles. Il s’agit de tenir compte de la qualité du composant logiciel et comment les services sont rendus. Cette étape consiste à évaluer la qualité du composant à partir de métrique définie. On sélectionnera le composant qui répond aux mieux, aux critères de qualité définis par l’utilisateur. Etape4: Au niveau de cette étape, on évalue la maintenance c’est-à-dire, la phase de modification et d’adaptation du composant dans un système en cours d’utilisation. Elle représente la phase de simulation pour déterminer la qualité du composant. Nous appliquons à ce niveau, la métrique qui permet d’évaluer le coût financier et le temps générés. Elle évalueet produit un coût financier et un temps de maintenance. Etape5: Dans le cas où les paramètrescoût et temps sont optimisés, alors, le composant sélectionné est retenu. Etape6: Si les paramètres ne le sont pas, alors la recherche continue et le processus reprend\n3.3. Proposition de modèle pour évaluer le coût financier et le temps de\nmaintenance\nEn nous inspirant des modèles définis dans les revues de littératures, notre approche consiste à évaluer en plus du coût financier du composant, le temps mis pour réaliser la maintenance. Notre modèle a pour objectif de prendre en compte le paramètre temps lors de d’évaluation de la qualité du composant logiciel à l’aide de la programmation linéaire. Il s’agira pour nous de définir une métrique à deux paramètres dont le coût financier et le temps sont fonction de l’indice du composant choisi. Cette métrique sert à optimiser les paramètres afin de sélectionner le « meilleur composant logiciel » d’une part et d’autre part de minimiser ce coût financier et le temps d’adaptation et de modification du composant sélectionné. Nous définissons notre fonction de la manière suivante :\n   , , 1 i i f c t i c t    i sc  ;\nAvec les contraintes suivantes :\n0 1 \n(4)\nmax\ni\nt t\nT  et 0 1it \nmax\ni\nc c\nC  et 0 1ic \nOù Sc : ensemble de composants disponibles ;\nic : Coût financier normalisé de maintenance du composant i ; C : cout relatif généré par le composant i ; Cmax : Coût maximum réalisé par un des composants sélectionnés ; it : temps d’adaptation et de maintenance normalisé du composant i ; t : temps relatif, généré par le composant i ;  : Coefficient d’adaptation ; Tmax : temps maximum réalisé par un des composants sélectionnés.\nDonc la métrique pour tout composant logiciel i sélectionné sera :\nEt les contraintes\n0 1it  et\nmax\ni\nc c\nC  et 0 1ic \nOù A = ensemble des caractéristiques de qualité du logiciel; SC = ensemble de composants disponibles (composants candidats) ; qhi= le niveau normalisé de l’attribut de qualité hϵ A pour le composant i ; Wh = poids attribué à l'attribut de qualité hϵ A ; xi = 1 si le composant i est sélectionné, 0 sinon ; Ci = coût normalisé du composant i ; it : Temps normalisé de maintenance du composant i ;  : Coefficient d’adaptation à préciser Le modèle (5) représente la fonction objectif. Cette fonction permet de calculer puisd’évaluer la qualité des caractéristiques des composants logiciels sélectionnés.\ni SC \n0 1 \n(5)  1h hi i i i ii h A S w q x c t x        \nmax\ni\nt t\nT \nPourmaximiserla fonction objectif, nous devons optimiser les paramètres Temps et coût de maintenance. Alors, il nous faudrait maximiser le premier terme et minimiser le second terme de iS . Ceci revient à maximiser le terme Qi\net à minimiser le second terme mi\n 1i i i im c t x      i SC \nPour tout composant logiciel i de la bibliothèque, on obtient le système suivant :\nNous pourrons alors comparer et ordonner les différentes valeurs iS désignant les valeurs de qualité de chaque composant logiciel choisis. Ainsi plus la valeur est grande, plus le composant logiciel est de qualité avec un temps d’adaptation et un coût de maintenance réduits.\n(6)\n(7)\n   \nmax max\nmax max\nmax\nmax max\nmax( 1 ) max( ) min( 1 )\n1 1\n0 1 0 1\n0 0\n0 0\n1 0\nh hi i i i i h hi i i i ih A h A\nh hh A h A\ni i\ni i\nw q x c t x w q x c t x\nw w\nt t t et t T t et t T\nT T\nc c c et c C c et\nC C\nx siselectionné sinon x\n   \n \n \n \n                                             max 1 0 c C x siselectionné sinon x               \ni h h i\nh A Q w q x   i SC \n(8)\nSECTION 4"
    }, {
      "heading" : "4. Phase de Validation",
      "text" : "En matière de recherche, toute théorie doit passer par une phase d'expérimentation ou de simulation avant sa validation. Pour se faire, nous proposons un algorithme pour soutenir et valider la théorie développée évaluant la qualité du composant logiciel. Il s’agit également d’optimiser les deux paramètres dont le temps et le coût d’adaptation. En effet nous proposons l’algorithme SelectCompo pour résoudre le problème\n4.1. Tableau d’analyse du problème L’algorithme SelectCompo a pour but de sélectionner, dans une bibliothèque choisie, un ensemble de composants (Pi). Nous présentons dans le tableau 1, les variables et les notations utilisées dans nos algorithmes.\nIdentificateurs Types Entrée/ Sortie Rôles\nbiblio Chaine de\ncaractère\nEntrée Variable désignant l’intitulé de la bibliothèque\ncourante.\nP[], composant[ ]\nChaine de caractère Entrée Variable désignant un tableau de composants de la bibliothèque courante.\nMaxCompo Entier Entrée Variable désignant le nombre maximum de composants de la bibliothèque courante. MaxCaracter Entier Entrée Variable désignant le nombre maximum de caractéristiques et sous caractéristiques du\ncomposant courant\ni,j Entier Entrée Indices de parcours des composants\ncompo Chaine de\ncaractère\nsortie Variable désignant le composant optimisé et\nretenu.\nnom Chaine de caractère Entrée / Sortie Variable désignant le nom de la caractéristique Et de la sous caractéristique\npoids réel Entrée / Sortie Variable désignant le poids de la caractéristique\net de la sous caractéristique\nnote réel Entrée / Sortie Variable désignant le note de la caractéristique\net de la sous caractéristique\nSousCaract[ ] Chaine de\ncaractère\nEntrée / Sortie Variable désignant un tableau de\ncaractéristiques et de sous caractéristiques du composant courant\nSomme[] réel Sortie Variabledésignant un tableau de valeurs réelles\nexprimant la qualité des composantschoisis\nCr[] réel Entrée Variable désignant un tableau de cout relatif du composant courant\nTr [] réel Entrée Variable désignant un tableau de temps d’adaptation relatif du composant courant\nTableau 1\n4.2. Procédures utilisées Nous allons initialiser les 5 principales caractéristiques (fig1) définies par l’utilisateur pour faire notre étude. Après la phase de sélection de l’ensemble des composants (Pi), nous allons évaluer la qualité des caractéristiques de ses composants en fonction de leur importance (poids) et de la qualité relative du composant (note) à l’aide de la procédure evaluation(Pi,nbre). A l’étape suivante, nous allons optimiser les composants en fonction du coût et du temps de d’adaptation par laprocédure optimisation(Pi,nbre). Enfin nous allons choisir le composant le plus optimisé de l’ensemble des composants Pi avec la procédure affichage(). Ce dernier correspondra au composant ayant la valeur maximale des Pi notée Max,suite à l’application de la procédure optimisation(Pi,nbre). Alors pour écrire l’algorithme SelectCompo, nous allons utiliser différentes procédures suivantes :\na. Procédure initialisation().\nElle permet d’initialiser les caractéristiques et les sous caractéristiques définies par l’utilisateur. Toutes les valeurs décrites (fig1) sont initialisées.\nb. Procédure saisie (biblio : chaine, nbre :entier)\nCette procédure permet de saisir la bibliothèque et le nombre de composants disponibles et répondant aux critères définis par l’utilisateur en entrée.En sortie, nous récupérons la somme des poids des différentes caractéristiques.\nc. Procedure evaluation (Composant : tableau [1..MaxCompo] : chaine,\nnombre : entier)\nCette procédure permet de calculer par la métrique des valeurs de qualité définie. Elle prend en entrée une liste de composants et le nombre de composant souhaité. A la suite des tests et des contrôles, elle retourne un vecteur de valeurs réelles désignant la valeur de qualité du composant notée Somme [].\nd. Procedure optimisation (nbre : entier)\nCette procédure permet de classer et d’ordonner les valeurs de qualité retournées\npar\nla procédureevaluation. En paramètre, nous avons le nombre de composants retenus à trier.\ne. affichage()\nCette procédure permet d’affiche le composant retenu après le tri par ordre décroissant des valeurs de qualité des composants\n4.3. Présentationdes algorithmes Dans cette partie de notre travail, nous présenterons le pseudo code dans les différents algorithmes.\n4.3.1. Algorithme SelectCompo\nLe programme principal va se présenter comme suit :"
    }, {
      "heading" : "Algorithme SelectCompo",
      "text" : "Entrée : biblio,\ntableau_de_composants chaine\nNbre, i entier\nSomme [] tableau de réels\nSortie : compo chaine\nDebut\nTantque (besoins Exprimés)"
    }, {
      "heading" : "Debut",
      "text" : "saisie (biblio , nombre )\nnbre = nombre\nPour i de 1 à nbre faire\nDebut"
    }, {
      "heading" : "Selectionner (Pi, nbre)",
      "text" : "Pi = tableau_de_composants\nFinpour\ninitialisation()"
    }, {
      "heading" : "Fintanque",
      "text" : "si ((conditionsCaracterisques Remplies) et (coût et temps relatifs dans\nintervalles requis) alors\ndebut\nPour i de 1 à nbre faire\nDebut\nevaluation (Pi, nbre)\nsomme[i] = ValeurQualite(Pi)\nFinpour\nSi SatisfactionQualitéalors\nOptimisation (nbre )"
    }, {
      "heading" : "Sinon",
      "text" : "Reverser (composants dans biblio)\nfinsi\nAfichage()\nFin\nFig 4 : pseudo code de selectCompo\n4.3.2. Algorithme Evaluation\nNous avons donné la fonction objectif Si représentée par le modèle (5).Cette fonction permettra l’évaluation de la qualité du composant logiciel de la bibliothèque en tenant compte des contraintes définies au modèle (8). L’algorithmeEvaluation permet de calculer les valeurs de qualité définie par Si. Cette procédure prend en paramètre, une liste de composants et le nombre de composant\nobtenu après la phase de sélection basée sur les propriétés fonctionnelles de celui-ci. A\nla suite des tests et des contrôles, elle retourne un vecteur de valeurs réelles désignant la\nvaleur de qualité des composants.\nprocedure Evaluation(Composant : tableau [1..MaxCompo] : chaine,nombre : entier)\nEntrée :i,j entier\nSom_qlte ,\nSom_CoutTemps réel Sortie :somme somme tableau [1.. Max] de réels\ndebut\nEcrire(le nombre de composants) Lire(nombre)\nSi (nomnbre>MaxCompo) alors\nnombre = MaxCompo\npour i de 1 à nombre debut\nEcrire(cout et temps relatifs au composant courant)\nlire(cr[i], Tr[i])) Som_qlte 0 ;\nSom_coutTemps0 ;\nPour j de 1 à MaxCaracter faire\nDebut\nSi ((0≤ Caract[j].poids≤1) et (0< Caract[j].note ≤ Qmax) et Somm =1 ) alors\nDebutsi\n   .W j caract j poids\n4.3.3. Algorithme Optimisation L’algorithmeevaluation nous a permis de sélectionner un ensemble de\ncomposantsrépondant aux besoins de qualité définis par l’utilisateur. A l’aide de la\nprocédure optimisation, nous allons trier ce vecteur de réels désignant le degré de\nqualité des composants retenus.\nProcedure Optimisation (Max : entier)\nEntrée :i,j entier somme tableau [1.. Max] de réels Sortie : somme tableau [1.. Max] de réels triés par ordre décroissant\ndebut\npour i de 1 à Max -1 faire\ndebut\npour j de i +1 à Max faire\ndebut\nsi (somme [i ] >somme[j] ) alors\ndebutsi\ntampon = somme [i ]\nsomme [i ]= somme [j ]\nsomme[j]=tampon\nFinsi\nFinpour\nFinpour\nFin"
    }, {
      "heading" : "5. Conclusion",
      "text" : "Notre travail repose sur trois approches. Nous avons construit un modèle de qualité qui prend en compte les caractéristiques définissant la fiabilité et la sûreté du logiciel à construire. Ensuite nous construit un modèle de sélection de composants logiciels dans une bibliothèque ou sur le net. Enfin nous avons défini une métrique qui prend en compte le coût financier et le temps d’adaptation des composants sélectionnés. Cette métrique évalue et simule la qualité du composant en optimisant les paramètres dont le coût financier et le temps. Cette approche est soutenue par l’algorithme SelectCompo construit. Plusieurs aspects restent à développer. Il s’agit de prendre en compte la sélection de composants logiciels dans diverses bibliothèques pour toute plateforme. Cela permettra de résoudre le problème d’interopérabilité de ces composants sur différentes plateformes. Dans les futurs travaux, nous pourrons tester la facilité d’intégration de ces composants sur une plateforme donnée. Afin de résoudre les difficultés de déploiement de certains composants logiciels sur une combinaison de plateforme, de fourniture de service à des utilisateurs ou des clients anonymes, nous pourrions orienter nos recherches vers les web services. Cela aura pour avantage de réagir rapidement à tous changement en s’assurant de la fiabilité et la de sécurité de ces composants réutilisables."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2017,
    "abstractText" : "The large amount of information and the increasing complexity of applications constrain developers to have stand-alone and reusable components from libraries and component markets.Our approach consists in developing methods to evaluate the quality of the software component of these libraries, on the one hand and moreover to optimize the financial cost and the adaptation’s time of these selected components. Our objective function defines a metric that maximizes the value of the software component quality by minimizing the financial cost and maintenance time. This model should make it possible to classify the components and order them in order to choose the most optimized. MOTS-CLES : développement de méthode, réutilisation, composants logiciels, qualité de composant",
    "creator" : "Microsoft® Office Word 2007"
  }
}