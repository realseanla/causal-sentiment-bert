{
  "name" : "1704.03520.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Unsupervised Event Abstraction using Pattern Abstraction and Local Process Models",
    "authors" : [ "Felix Mannhardt" ],
    "emails" : [ "f.mannhardt@tue.nl", "n.tax@tue.nl" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Keywords: Process Discovery, Unsupervised Learning, Event Abstraction"
    }, {
      "heading" : "1 Introduction",
      "text" : "Process mining [1] is a fast growing research discipline that concerns the analysis of events that are logged during the execution of a business process. Recorded events contain information on what was done, by whom, where, when, etc. Such event data is often readily available from business information systems such as ERP, CRM, or, workflow management systems. Process discovery, the task of automatically generating a process model that accurately describes the business process based on the event data, plays a central role in the process mining field. A variety of process discovery techniques have been developed over the years [5,7,3,15], generating process models in different notations, such as Petri nets [11], EPC, and BPMN. The degree to which a discovered process model represents the event data from which is discovered is typically expressed in several quality dimensions. Two of such quality dimensions are fitness: the amount of behavior in the event log that is allowed by the model and precision: the model should not be too general by allowing for much more behavior that was not seen in the event log (i.e., it should not be underfitting).\nFor successful application of process discovery it is crucial that the events logged in the event log directly correspond to the activities that are recognizable for process stakeholders. In practice, this is not always the case, and there\nar X\niv :1\n70 4.\n03 52\n0v 1\n[ cs\n.D B\n] 1\n1 A\npr 2\n2 can be an n:m-relation between the recorded events and the business activities [4,6]. Process models that are generated by process discovery when recorded events and activities do not match have semantics that are unclear to process stakeholders. Moreover, a mismatch between events and activities can cause process discovery techniques to discover underfitting process models that allow for too much behavior (i.e., process models with low precision) [13].\nA recent approach to abstract recorded events to business activities [9] uses activity patterns to capture the domain knowledge about the relation between the high-level activities and the low-level recorded events. Each activity pattern is a process model that describes the possible behavior in terms of low-level events that are conjectured to be observed during the execution of a certain high-level activity. However, such domain knowledge might not be available, and when the process contains many activities it becomes a tedious task to model each of them manually. Local Process Model (LPM) discovery [14,12] is a technique to automatically discover frequent patterns of process behavior (i.e., LPMs) from an event log. Each LPM, like an activity pattern, is a process model that describes the behavior over only a subset of the event types in the log.\nIn this paper we explore the application of automatically discovered LPMs to replace the domain knowledge in pattern-based abstraction to form a novel, completely automated, abstraction technique. Each LPM discovered by the LPM discovery method [14,12] is assumed to represent a business activity. The LPMs are used as activity patterns of the event abstraction method in [9]. This approach aims to improve the precision of process models found by process discovery techniques by abstraction of the event log. Note that the names of the high-activities are not discovered automatically. Each LPM can be labeled to its corresponding business activity based on domain knowledge.\nIn Section 2 we introduce basic concepts and notations. Section 3 explains how LPM discovery and pattern-based abstraction can be combined to form a fully automated abstraction technique. In Section 4 we present and discuss some preliminary results, and we conclude the paper and discuss future directions in Section 5."
    }, {
      "heading" : "2 Preliminaries",
      "text" : "In this section we introduce concepts used in later sections of this paper. X∗ denotes the set of all sequences over a set X and σ = 〈a1, a2, . . . , an〉 a sequence of length n, with σ(i) = ai. 〈〉 is the empty sequence.\nIn the context of process logs, we assume the set of all process activities Σ to be given. An event e in an event log is the occurrence of an activity e∈Σ. We call a sequence of events σ∈Σ∗ a trace. An event log L∈NΣ∗ is a finite multiset of traces. For example, the event log L = [〈a, b, c〉2, 〈b, a, c〉3] consists of 2 occurrences of trace 〈a, b, c〉 and three occurrences of trace 〈b, a, c〉.\nA process model notation that is frequently used in the process mining area is the Petri net. A labeled Petri net N = 〈P, T, F, `〉 is a tuple where P is a finite set of places, T is a finite set of transitions such that P ∩ T = ∅, F ⊆ (P × T ) ∪ (T × P ) is a set of directed arcs, called the flow relation, and ` : T 9 Σ is a labeling function that assigns process activities to transitions.\nUnlabeled transitions, i.e., t∈T with t6∈dom(l), are referred to as τ -transitions, or invisible transitions.\nThe state of a Petri net is defined by its marking. The marking assigns a finite number of tokens to each place. Transition of the Petri net represent activities and can be executed. The input places of a transition t ∈ T are all places for which there is a directed edge to the transition: {p ∈ P |(p, t)∈F}. The output places of a transition are defined respectively. Executing a transition consumes one token from each of its input places and produces one token on each of its output places, i.e., the marking is changed. A transition can only be executed when there is at least one token in each of its input places.\nOften it is useful to consider a Petri net in combination with an initial marking and a final marking. This allows us to define the language, L(N), accepted by Petri net N . The language of a Petri net is defined by the set of all possible sequences of visible transition labels (i.e., ignoring τ -transitions) that start in the initial marking and end in the final marking. This allows to check whether some behavior is part of the behavior of the Petri net, i.e., can be replayed on it.\nFig. 1a shows an example of an accepting Petri net. Circles represent places and rectangles represent transitions. Invisible transitions are depicted as black rectangles. Places that belong to the initial marking contain a token and places\nbelonging to a final marking are marked as . The language of this accepting Petri net, with Σ = {A,B,C} is {〈A,B,C〉, 〈B,A,C〉, 〈A,B,B,C〉, 〈B,B,A,C〉, 〈B,A,B,C〉, . . . }. We refer to [11] for a comprehensive introduction of Petri nets."
    }, {
      "heading" : "2.1 Local Process Models",
      "text" : "LPMs [14] are process models that describe the behavior seen in the event log only partially, focusing on frequently observed behavior. Typically, LPMs describe the behavior of only up to 5 activities. LPMs can be represented in any process modeling notation, such as BPMN, UML, or EPC. Here we use Petri nets to represent LPMs. A technique to generate a ranked collection of LPMs through iterative expansion of candidate process models is proposed in [14]. The search space of process models is fixed, depending on the event log. We define LPMS (L) as the set of possible LPMs that can be constructed for given event log L. We refer the reader to [14] for a detailed description of search space LPMS (L).\nTo evaluate a given LPM on a given event log L, its traces σ∈L are first projected on the set of activities ΣM in the LPM, i.e., σ ′=σ ΣM . The projected\n4\ntrace σ′ is then segmented into γ-segments that fit the behavior of the LPM and λsegments that do not fit the behavior of the LPM, i.e., σ′=λ1γ1λ2γ2 · · ·λnγnλn+1 such that γi∈L(LPM ) and λi 6∈L(LPM ). We define Γσ,LPM to be a function that projects trace σ on the LPM activities and obtains its subsequences that fit the LPM, i.e., Γσ,LPM = γ1γ2 . . . γn.\nLet our LPM N1 under evaluation be the Petri net of Fig. 1a and let σ = 〈A,B,X,B,C,C,A,B,C,B,B,X,A,C〉 be an example trace. Function act(LPM ) obtains the set of process activities in the LPM, e.g. act(N1) = {A,B,C}. Projection on the activities of the LPM gives σ act(N1) = 〈A,B,B,C,C ,A,B,C,B,B,A,C〉. Fig. 1b shows the segmentation of the projected traces on the LPM, leading to Γσ,LPM = 〈B,B,C,B,C,A,C〉. The segmentation starts with a non-fitting segment λ1 = 〈A〉, followed by a fitting segment γ1=〈B,B,C〉, which completes one run through the model from initial to final marking. The second event C in σ cannot be replayed on LPM , since it only allows for one C and γ1 already contains a C. This results in a non-fitting segment λ2=〈C,A〉. γ2=〈B,C〉 again represents a run through the model from initial to final marking, and λ3=〈B,B〉 does not fit the LPM. γ3=〈A,C〉 again represents a run though the model, and we end with a empty non-fitting segment λ4. We lift segmentation function Γ to event logs, ΓL,LPM={Γσ,LPM |σ∈L}. An alignment-based [2] implementation of Γ , as well as a method to rank and select LPMs based on their support, i.e., the number of events in ΓL,LPM , is described in [14]."
    }, {
      "heading" : "2.2 Pattern-based Abstraction",
      "text" : "An overview of the pattern-based abstraction method proposed in [9] is depicted in Fig. 2. The input is an event log and a set of activity patterns. Each activity pattern is a process model that represents the behavior expected for one execution of a high-level activity. Moreover, a mapping from activities to life-cycle transitions of the high-level activity is required, i.e., θ : T 6→ LT with, e.g., LT = {start, complete}. Mapping θ allows to obtain information on when activities started and when they were completed, which some process discovery algorithms, such as [8], are able to leverage.\nActivity patterns are composed to an abstraction model and, then, an alignment technique is used to obtain a high-level event log. Through the use of the alignment technique, we can capture approximate executions of activity patterns. Then, we use the alignment information to create a corresponding high-level event log by only retaining those events that were aligned to activities t ∈ T that are mapped to high-level activities, i.e., t ∈ dom(θ). Activity patterns may use any kind of process models with clear semantics, thus, the abstraction method also works with LPMs. For example, assume that LPM N1 represents the behavior\nexpected for some high-level activity. Mapping function θ could be defined such that the transition corresponding to A and transition τ1 are mapped to start and the transition corresponding to C is mapped to complete. It is possible to automatically obtain such mapping function θ, e.g., by mapping the source activities to the start and the and the sink activities to the complete life-cycle transitions."
    }, {
      "heading" : "3 Unsupervised Abstraction Technique",
      "text" : "Fig. 3 gives an overview of our unsupervised abstraction method. We use discovered LPMs to replace the domain knowledge originally used in the pattern-based event abstraction method. First, we discover a fixed number of LPMs based on the ranking proposed in [14]. Then, we use those LPMs as activity patterns and obtain a high-level event log with the abstraction method described in [9]. Based on the high-level event log, we discover a high-level process model using existing methods such as the Inductive Miner (IM) [7].\nTake, e.g., LPM N1 shown in Fig. 1 and assume trace σ. We assume that LPM N1 represents the behavior of some high-level activity H. Three executions (i.e., γ-segments) of the LPM N1 are present in trace σ, thus, the high-level activity H was executed three times. When applying pattern-based abstraction, we obtain the high-level trace 〈H,H,H〉1. Some low-level events in σ could not be matched to a high-level activity, e.g., the first event of the trace: A. Since we cannot assume that the discovered LPMs represent the entire behavior of the process, we add all those low-level events. Therefore, we obtain trace 〈A,H,C,A,H,B,B,H〉, which contains less events than the original trace σ. We, now, discuss the parameters of both the LPM discovery and the abstraction technique.\nLPM Discovery The first parameter is the number of LPMs that we use as abstraction patterns. The LPM ranking obtained with the LPM discovery approach [14] is based on support (i.e., frequency). When setting the number of LPMs to use for abstraction to k, we select the top k LPMs of the discovered ranking of LPMs R. The LPMs in ranking R can overlap in the activities that they describe. For the purpose of event abstraction this can be undesirable, because this results in multiple similar patterns for pattern-based abstraction, making it unclear which low-level event belongs to which high-level activity. Therefore, we\n1 The abstraction technique also provides events for the start and complete life-cycle transitions. So far, we only use the complete transition.\n6 introduce a diversity score for the i-th LPM of LPM ranking R as one minus the Jaccard similarity with the most similar LPM that is higher in the ranking, i.e.,\ndiv(R, i)=\n{ maxi−1j=1 |act(R(i))∩act(R(j))| |act(R(i))|+|act(R(i))|−|act(R(i))∩act(R(j))| if i > 1,\n1 if i = 1.\nBased on the diversity score we introduce a diversity threshold tdiv to filter out all LPMs from R where div(R, i)≤tdiv .\nPattern-based Abstraction The pattern-based abstraction method allows defining domain knowledge in the interaction between high-level activities in the form of composition functions. In work [9] several composition functions are presented that allow fine grained control of the interaction between activities. In our case, we do not assume any domain knowledge on the process, thus, we limit the choice of composition parameter for our method to: interleaving and parallel. Interleaving means that any two high-level activities cannot occur at the same time, whereas parallel means that no such restriction is placed."
    }, {
      "heading" : "4 Preliminary Results and Discussion",
      "text" : "To be able to deal with the computational complexity of LPM mining for logs with many activities, we discover LPMs using activity clustering based on Markov clustering, as proposed in [12]. As proposed in [10], we expand high-level activities in the discovered process model with the corresponding LPMs to provide a fair comparison based on the low-level event log. The resulting expanded process model can be related to the low-level events with existing techniques that determine the models quality in terms of fitness and precision [2].\nFig. 4 shows the f-score of the process models discovered with the IM infrequent [7] process discovery algorithm with 20% noise filtering. Horizontally it shows the results for different LPM diversity thresholds (0.2 to 0.9). Vertically it shows the results for five different event logs: the BPI challenge 2013 incidents (I) and closed problems (C) log2, the CoSeLoG receipt phase log3, the road fines log4, and the sepsis log5. The results are shown for 1 to 5 LPMs used in abstraction and parallel and interleaving composition. The dotted line indicates the f-score of the process model discovered from the original event log, i.e., without abstraction.\nFig. 5 shows an expanded process model that is discovered for the BPI13-C log based on the proposed method. The LPM N1 was used as activity pattern and is part of the process model. Thus, the process model can hierarchically decomposed into sub-processes based on the activity patterns. Its precision score is improved from 0.53 to 0.86 at the expense of fitness, which drops from 0.84 to 0.65. The f-score improved from 0.65 to 0.74.\n2 http://dx.doi.org/10.4121/uuid:a7ce5c55-03a7-4583-b855-98b86e1a2b07 3 http://dx.doi.org/10.4121/uuid:a07386a5-7be3-4367-9535-70bc9e77dbe6 4 http://dx.doi.org/10.4121/uuid:270fd440-1057-4fb9-89a9-b699b47990f5 5 http://dx.doi.org/10.4121/uuid:915d2bfb-7e84-49ad-a286-dc35f063a460\nIn our preliminary results we found that for three out of five event logs the f-score of the process model can be improved by abstracting the event log prior to process discovery. Furthermore, it seems that abstracting with parallel composition does only improve the process model over abstraction with interleaving composition in one case, which is beneficial since the interleaving composition is computationally less expensive. The optimal number of LPMs used for abstraction differs between event logs, with the optimal number of LPMs being 5 for the sepsis log and 1 for the BPI13-C log. To make an abstraction technique based on LPM discovery and pattern-based abstraction fully automated, further experimentation would be needed. We need to analyze whether the optimal number of LPMs depends on properties of the event log and for which logs the good results can be expected."
    }, {
      "heading" : "5 Conclusions and Future Work",
      "text" : "In this paper we have described a technique to abstract an event log to a higherlevel event log using Local Process Model (LPM) discovery and pattern-based abstraction. We have shown on five real life event logs that the abstraction approach applied prior to process discovery can result in more precise process models.\n8 We found that (1) the number of LPMs that should be used for abstraction, (2) the diversity threshold, and (3) the composition method which result in good process models being discovered are very dependent on the event log on which the technique is applied. In future work, we want to investigate this interplay between event log properties and the parameters of the abstraction approach that are needed to discover good process models. We aim to apply this insight in the relation between parameters settings of the abstraction technique and properties of the event log in a technique that can abstract an event log completely automatically, where no manual parameter setting is needed."
    } ],
    "references" : [ {
      "title" : "Process mining: data science in action",
      "author" : [ "W.M.P. van der Aalst" ],
      "venue" : "Springer",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Replaying history on process models for conformance checking and performance analysis",
      "author" : [ "W.M.P. van der Aalst", "A. Adriansyah", "B.F. van Dongen" ],
      "venue" : "WIREs Data Min. Knowl. Discovery 2(2), 182–192",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Workflow mining: Discovering process models from event logs",
      "author" : [ "W.M.P. van der Aalst", "T. Weijters", "L. Maruster" ],
      "venue" : "IEEE Trans. Knowl. Data Eng. 16(9), 1128–1142",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Bridging abstraction layers in process mining by automated matching of events and activities",
      "author" : [ "T. Baier", "J. Mendling" ],
      "venue" : "BPM, LNCS, vol. 8094, pp. 17–32. Springer",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "BPMN miner: automated discovery of BPMN process models with hierarchical structure",
      "author" : [ "R. Conforti", "M. Dumas", "L. Garćıa-Bañuelos", "M. La Rosa" ],
      "venue" : "Information Systems 56, 284–303",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Activity mining by global trace segmentation",
      "author" : [ "C.W. Günther", "A. Rozinat", "W.M.P. van der Aalst" ],
      "venue" : "BPM. pp. 128–139. Springer",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Discovering block-structured process models from event logs containing infrequent behaviour",
      "author" : [ "S.J.J. Leemans", "D. Fahland", "W.M.P. van der Aalst" ],
      "venue" : "BPM. LNBIP, vol. 171, pp. 66–78. Springer",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Using life cycle information in process discovery",
      "author" : [ "S.J.J. Leemans", "D. Fahland", "W.M.P. van der Aalst" ],
      "venue" : "BPM. LNBIP, vol. 256, pp. 204–217. Springer",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "From low-level events to activities - a pattern-based approach",
      "author" : [ "F. Mannhardt", "M. de Leoni", "H.A. Reijers", "W.M. van der Aalst", "P.J. Toussaint" ],
      "venue" : "BPM. LNCS, vol. 9850, pp. 125–141. Springer",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Petri nets: an introduction, vol",
      "author" : [ "W. Reisig" ],
      "venue" : "4. Springer",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Heuristic approaches for generating local process models through log projections",
      "author" : [ "N. Tax", "N. Sidorova", "W.M.P. van der Aalst", "R. Haakma" ],
      "venue" : "CIDM. pp. 1–8. IEEE",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Event abstraction for process mining using supervised learning techniques",
      "author" : [ "N. Tax", "N. Sidorova", "R. Haakma", "W.M.P. van der Aalst" ],
      "venue" : "IntelliSys. IEEE",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Mining local process models",
      "author" : [ "N. Tax", "N. Sidorova", "R. Haakma", "W.M. van der Aalst" ],
      "venue" : "Journal of Innovation in Digital Ecosystems 3(2), 183–196",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Process discovery using integer linear programming",
      "author" : [ "van der Werf", "J.M.E.M.", "B.F. van Dongen", "C.A.J. Hurkens", "A. Serebrenik" ],
      "venue" : "Fundamenta Informaticae 94(3), 387– 412",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2009
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Process mining [1] is a fast growing research discipline that concerns the analysis of events that are logged during the execution of a business process.",
      "startOffset" : 15,
      "endOffset" : 18
    }, {
      "referenceID" : 4,
      "context" : "A variety of process discovery techniques have been developed over the years [5,7,3,15], generating process models in different notations, such as Petri nets [11], EPC, and BPMN.",
      "startOffset" : 77,
      "endOffset" : 87
    }, {
      "referenceID" : 6,
      "context" : "A variety of process discovery techniques have been developed over the years [5,7,3,15], generating process models in different notations, such as Petri nets [11], EPC, and BPMN.",
      "startOffset" : 77,
      "endOffset" : 87
    }, {
      "referenceID" : 2,
      "context" : "A variety of process discovery techniques have been developed over the years [5,7,3,15], generating process models in different notations, such as Petri nets [11], EPC, and BPMN.",
      "startOffset" : 77,
      "endOffset" : 87
    }, {
      "referenceID" : 13,
      "context" : "A variety of process discovery techniques have been developed over the years [5,7,3,15], generating process models in different notations, such as Petri nets [11], EPC, and BPMN.",
      "startOffset" : 77,
      "endOffset" : 87
    }, {
      "referenceID" : 9,
      "context" : "A variety of process discovery techniques have been developed over the years [5,7,3,15], generating process models in different notations, such as Petri nets [11], EPC, and BPMN.",
      "startOffset" : 158,
      "endOffset" : 162
    }, {
      "referenceID" : 3,
      "context" : "can be an n:m-relation between the recorded events and the business activities [4,6].",
      "startOffset" : 79,
      "endOffset" : 84
    }, {
      "referenceID" : 5,
      "context" : "can be an n:m-relation between the recorded events and the business activities [4,6].",
      "startOffset" : 79,
      "endOffset" : 84
    }, {
      "referenceID" : 11,
      "context" : ", process models with low precision) [13].",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 8,
      "context" : "A recent approach to abstract recorded events to business activities [9] uses activity patterns to capture the domain knowledge about the relation between the high-level activities and the low-level recorded events.",
      "startOffset" : 69,
      "endOffset" : 72
    }, {
      "referenceID" : 12,
      "context" : "Local Process Model (LPM) discovery [14,12] is a technique to automatically discover frequent patterns of process behavior (i.",
      "startOffset" : 36,
      "endOffset" : 43
    }, {
      "referenceID" : 10,
      "context" : "Local Process Model (LPM) discovery [14,12] is a technique to automatically discover frequent patterns of process behavior (i.",
      "startOffset" : 36,
      "endOffset" : 43
    }, {
      "referenceID" : 12,
      "context" : "Each LPM discovered by the LPM discovery method [14,12] is assumed to represent a business activity.",
      "startOffset" : 48,
      "endOffset" : 55
    }, {
      "referenceID" : 10,
      "context" : "Each LPM discovered by the LPM discovery method [14,12] is assumed to represent a business activity.",
      "startOffset" : 48,
      "endOffset" : 55
    }, {
      "referenceID" : 8,
      "context" : "The LPMs are used as activity patterns of the event abstraction method in [9].",
      "startOffset" : 74,
      "endOffset" : 77
    }, {
      "referenceID" : 9,
      "context" : "We refer to [11] for a comprehensive introduction of Petri nets.",
      "startOffset" : 12,
      "endOffset" : 16
    }, {
      "referenceID" : 12,
      "context" : "LPMs [14] are process models that describe the behavior seen in the event log only partially, focusing on frequently observed behavior.",
      "startOffset" : 5,
      "endOffset" : 9
    }, {
      "referenceID" : 12,
      "context" : "A technique to generate a ranked collection of LPMs through iterative expansion of candidate process models is proposed in [14].",
      "startOffset" : 123,
      "endOffset" : 127
    }, {
      "referenceID" : 12,
      "context" : "We refer the reader to [14] for a detailed description of search space LPMS (L).",
      "startOffset" : 23,
      "endOffset" : 27
    }, {
      "referenceID" : 8,
      "context" : "An overview of the pattern-based abstraction method [9].",
      "startOffset" : 52,
      "endOffset" : 55
    }, {
      "referenceID" : 1,
      "context" : "An alignment-based [2] implementation of Γ , as well as a method to rank and select LPMs based on their support, i.",
      "startOffset" : 19,
      "endOffset" : 22
    }, {
      "referenceID" : 12,
      "context" : ", the number of events in ΓL,LPM , is described in [14].",
      "startOffset" : 51,
      "endOffset" : 55
    }, {
      "referenceID" : 8,
      "context" : "An overview of the pattern-based abstraction method proposed in [9] is depicted in Fig.",
      "startOffset" : 64,
      "endOffset" : 67
    }, {
      "referenceID" : 7,
      "context" : "Mapping θ allows to obtain information on when activities started and when they were completed, which some process discovery algorithms, such as [8], are able to leverage.",
      "startOffset" : 145,
      "endOffset" : 148
    }, {
      "referenceID" : 12,
      "context" : "LPMs High-level Log High-level Model discover [14] abstract [9] discover [7]",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 8,
      "context" : "LPMs High-level Log High-level Model discover [14] abstract [9] discover [7]",
      "startOffset" : 60,
      "endOffset" : 63
    }, {
      "referenceID" : 6,
      "context" : "LPMs High-level Log High-level Model discover [14] abstract [9] discover [7]",
      "startOffset" : 73,
      "endOffset" : 76
    }, {
      "referenceID" : 12,
      "context" : "First, we discover a fixed number of LPMs based on the ranking proposed in [14].",
      "startOffset" : 75,
      "endOffset" : 79
    }, {
      "referenceID" : 8,
      "context" : "Then, we use those LPMs as activity patterns and obtain a high-level event log with the abstraction method described in [9].",
      "startOffset" : 120,
      "endOffset" : 123
    }, {
      "referenceID" : 6,
      "context" : "Based on the high-level event log, we discover a high-level process model using existing methods such as the Inductive Miner (IM) [7].",
      "startOffset" : 130,
      "endOffset" : 133
    }, {
      "referenceID" : 12,
      "context" : "The LPM ranking obtained with the LPM discovery approach [14] is based on support (i.",
      "startOffset" : 57,
      "endOffset" : 61
    }, {
      "referenceID" : 8,
      "context" : "In work [9] several composition functions are presented that allow fine grained control of the interaction between activities.",
      "startOffset" : 8,
      "endOffset" : 11
    }, {
      "referenceID" : 10,
      "context" : "To be able to deal with the computational complexity of LPM mining for logs with many activities, we discover LPMs using activity clustering based on Markov clustering, as proposed in [12].",
      "startOffset" : 184,
      "endOffset" : 188
    }, {
      "referenceID" : 1,
      "context" : "The resulting expanded process model can be related to the low-level events with existing techniques that determine the models quality in terms of fitness and precision [2].",
      "startOffset" : 169,
      "endOffset" : 172
    }, {
      "referenceID" : 6,
      "context" : "4 shows the f-score of the process models discovered with the IM infrequent [7] process discovery algorithm with 20% noise filtering.",
      "startOffset" : 76,
      "endOffset" : 79
    } ],
    "year" : 2017,
    "abstractText" : "Process mining analyzes business processes based on events stored in event logs. However, some recorded events may correspond to activities on a very low level of abstraction. When events are recorded on a too low level of granularity, process discovery methods tend to generate overgeneralizing process models. Grouping low-level events to higher level activities, i.e., event abstraction, can be used to discover better process models. Existing event abstraction methods are mainly based on common sub-sequences and clustering techniques. In this paper, we propose to first discover local process models and then use those models to lift the event log to a higher level of abstraction. Our conjecture is that process models discovered on the obtained high-level event log return process models of higher quality: their fitness and precision scores are more balanced. We show this with preliminary results on several real-life event logs.",
    "creator" : "LaTeX with hyperref package"
  }
}