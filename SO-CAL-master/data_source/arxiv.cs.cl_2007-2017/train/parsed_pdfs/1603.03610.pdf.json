{
  "name" : "1603.03610.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n60 3.\n03 61\n0v 1\n[ cs\n.F L\n] 1\n1 M\nar 2\n01 6"
    }, {
      "heading" : "1 Introduction",
      "text" : "The alphabet of the MIX language has three symbols, a, b and c. A string is in the language if and only if the number of a’s, the number of b’s, and the number of c’s are all the same. A different way of defining the MIX language is as permutation closure of the regular language (abc)∗, as noted by Bach (1981); see also Pullum (1983).\nIf a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order. This is admittedly rather unlike any actual natural language. Joshi (1985) argued that because of this, grammatical formalisms for describing natural languages should not be capable of generating MIX. He also conjectured that MIX was beyond the generative capacity of one particular formalism, namely the tree adjoining grammars. Several decades passed before Kanazawa and Salvati (2012) finally proved this conjecture.\nMIX has been studied in the context of several other formalisms. Joshi et al. (1991) showed that MIX is generated by a gener-\nalization of tree adjoining grammars that decouples local domination for linear precedence. Boullier (1999) showed that MIX is generated by a range concatenation grammar. Negative results were addressed by Sorokin (2014) for wellnested multiple context-free grammars, and by Capelletti and Tamburini (2009) for a class of categorial grammars. The MIX language is also of interest outside of computational linguistics, e.g. in computational group theory (Gilman, 2005).\nA considerable advance in the understanding of the MIX language is due to Salvati (2015), who showed that MIX is generated by a multiple context-free grammar (MCFG). The main part of the proof shows that the language O2 is generated by a MCFG. This language has four symbols, a, a, b and b. A string is in the language if and only if the number of a’s equals the number of a’s, and the number of b’s equals the number of b’s. MIX and O2 are rationally equivalent, which means that if one is generated by a multiple context-free grammar, then so is the other.\nThe proof by Salvati (2015) is remarkable, in that it is one of the few examples of geometry being used to prove a statement about formal languages. The proof has two related disadvantages however. The first is that a key element of the proof, that of the complex exponential function, is not immediately understood without background in geometry. The second is that this also seems to restrict the proof technique to two dimensions, and there is no obvious avenue to generalize the result to a variant of MIX with four or five symbols. We hope to remedy this by an alternative, self-contained proof that avoids the complex exponential function. The core idea is a straightforward normalization of paths in two dimensions, which allow simple arguments to lead to a proof by contradiction. We also sketch part of a possible proof in three dimensions."
    }, {
      "heading" : "2 Initial problem",
      "text" : "The MCFG G is defined as:\nS(xy) ← R(x, y) (1)\nR(xp, yq) ← R(x, y) R(p, q) (2)\nR(xp, qy) ← R(x, y) R(p, q) (3)\nR(xpy, q) ← R(x, y) R(p, q) (4)\nR(p, xqy) ← R(x, y) R(p, q) (5)\nR(a, a) ← (6)\nR(a, a) ← (7)\nR(b, b) ← (8)\nR(b, b) ← (9)\nR(ε, ε) ← (10)\nFor the meaning of MCFGs in general, see Seki et al. (1991); for a closely related formalism, see Vijay-Shanker et al. (1987); see Kallmeyer (2010) for an overview of mildly context-sensitive grammar formalisms.\nThe reader unfamiliar with this literature is encouraged to interpret the rules of the grammar as logical implications, with S and R representing predicates. There is an implicit conjunction between the two occurrences of R in the right-hand side of each of the rules (2) — (5). The symbols x, y, p, q are string-valued variables, with implicit universal quantification that has scope over both left-hand side and right-hand side of a rule. The rules (6) — (10) act as axioms. The symbols a, a, b, b are terminals, and ε denotes the empty string.\nWe can derive S(x) for certain strings x, and R(x, y) for certain strings x and y. Figure 1 presents an example of a derivation. The language generated by G is the set L of strings x such that S(x) can be derived.\nBy induction on the depth of derivations, one can show that if R(x, y), for strings x and y, then xy ∈ O2. Thereby, if S(x) then x ∈ O2, which means L ⊆ O2. The task ahead is to prove that if xy ∈ O2, for some x and y, then R(x, y). From this, L = O2 then follows.\nLet |x| denote the length of string x. For an inductive proof that xy ∈ O2 implies R(x, y), the base cases are as follows. If xy ∈ O2 and |x| ≤ 1 and |y| ≤ 1, then trivially R(x, y) by rules (6) — (10).\nFurthermore, if we can prove that xy ∈ O2, x 6= ε and y 6= ε together imply R(x, y), for |xy| = m, some m, then we may also prove that x′y′ ∈ O2 on its own implies R(x′, y′) for |x′y′| = m. To see this, consider m > 0 and z ∈ O2 with |z| = m, and write it as z = xy for some x 6= ε and y 6= ε. If by assumption R(x, y), then together with R(ε, ε) and rule (4) or (5) we may derive R(xy, ε) or R(ε, xy), respectively. In the light of this, the inductive step merely needs to show that if for some x and y:\n• xy ∈ O2, |x| ≥ 1, |y| ≥ 1 and |xy| > 2, and\n• pq ∈ O2 and |pq| < |xy| imply R(p, q), for all p and q,\nthen also R(x, y). One easy case is if x ∈ O2 (and thereby y ∈ O2) because then we can write x = x1x2 for some x1 6= ε and x2 6= ε. The inductive hypothesis states that R(x1, x2) and R(ε, y), which imply R(x, y) using rule (4).\nA second easy case is if x or y has a proper prefix or proper suffix that is in O2. For example, assume there are z1 6= ε and z2 6= ε such that x = z1z2 and z1 ∈ O2. Then we can use the inductive hypothesis on R(z1, ε) and R(z2, y), together with rule (2).\nAt this time, the reader may wish to read Figure 1 from the root downward. First, abababba is divided into a pair of strings, namely ababab and ba. At each branching node in the derivation, a pair of strings is divided into four strings, which are grouped into two pairs of strings, using rules (2) — (5), read from left to right. Rules (2) and (3) divide each left-hand side argument into two parts. Rule (4) divides the first left-hand side argument into three parts, and rule (5) divides the second left-hand side argument into three parts.\nWhat remains to show is that if z1z2 ∈ O2, z1 /∈ O2 and |z1z2| > 2, and no proper prefix or proper suffix of z1 or of z2 is in O2, then there is at least\none rule that allows us to divide z1 and z2 into four strings altogether, say x, y, p, q, of which at least three are non-empty, such that xy ∈ O2. This will then permit use of the inductive hypothesis on R(x, y) and on R(p, q).\nWe can in fact restrict our attention to z′1z ′ 2 ∈ O2, |z′1z ′\n2| > 2, and no non-empty substring of z′1 or of z ′\n2 is in O2, which can be justified as follows. Suppose we have z1 and z2 as in the previous paragraph, and suppose z′1 and z ′\n2 result from z1 and z2 by exhaustively removing all nonempty substrings that are in O2; note that still |z′1z ′ 2| > 2. If we can use a rule to divide z ′ 1 and z ′ 2 into x′, y′, p′, q′, of which at least three are nonempty, such that x′y′ ∈ O2, then the same rule can be used to divide z1 and z2 into x, y, p, q with the required properties, which can be found from x′, y′, p′, q′ simply by reintroducing the removed substrings at corresponding positions."
    }, {
      "heading" : "3 Geometrical view",
      "text" : "We may interpret a string x geometrically in two dimensions, as a path consisting of a series of line segments of length 1, starting in some point (i, j). Every symbol in x, from beginning to end, represents the next line segment in that path; an occurrence of a represents a line segment from the previous point (i, j) to the next point (i + 1, j), a represents a line segment from (i, j) to (i − 1, j), b represents a line segment from (i, j) to (i, j+1), and b represents a line segment from (i, j) to (i, j − 1). If x ∈ O2, then the path is closed, that is, the starting point and the ending point are the same. If we have two strings x and y such that xy ∈ O2 and x /∈ O2, then this translates to two paths, connecting two distinct points, which together form a closed path. This is illustrated in Figure 2.\nIn the following, we assume a fixed choice of some x and y such that xy ∈ O2, |xy| > 2, and no non-empty substring of x or of y is in O2. The path of x starting in (0, 0) will be called A[0]. Let (i, j) be the point where this path ends; i is the number of occurrences of a in x minus the number of occurrences of a in x; j is similarly determined. The path of y, from (i, j) back to (0, 0), will be called B[1]. We generalize this to paths called A[k] and B[k], for integer k, which are the paths of x and y, respectively, that start in (k · i, k · j). Where the starting points are irrelevant, we talk about paths A and B. We also refer to (k · i, k · j)\nas point P [k]. Let C be a path, which can be either A[k] or B[k] for some k. We write Q ∈ C to denote that Q is a point on C . Let Q = (i, j) ∈ C , not necessarily with i and j being integers. We define the path-distance dC(Q) of Q on C to be the length of the path along line segments of C to get from P [k] to Q. In Figure 2, (0,−1) has pathdistance 3 on A[0], as the path on A[0] to reach (0,−1) from P [0] = (0, 0) consists of the line segments represented by the prefix aba of x. Similarly, dA[0]((0.5,−1)) = 2.5.\nLet C be a path as above and let points Q1, Q2 ∈ C be such that dC(Q1) ≤ dC(Q2). We define the subpath D = subC(Q1, Q2) to be such that Q ∈ D if and only if Q ∈ C and dC(Q1) ≤ Q ≤ dC(Q2), and dD(Q) = dC(Q) − dC(Q1) for every Q ∈ D. For two points Q1 and Q2, the line segment between Q1 and Q2 is denoted by seg(Q1, Q2).\nThe task formulated at the end of Section 2 is accomplished if we can show that at least one of the following must hold:\n• the angle in P [0] between the beginning of A[0] and that of B[0] is 180◦ (Figure 3);\n• there is a point Q /∈ {P [0], P [1]} such that Q ∈ A[0] and Q ∈ B[1] (Figure 4);\n• there is a point Q 6= P [1] such that Q ∈ A[0], Q ∈ A[1] and dA[0](Q) > dA[1](Q) (Figure 5); or\n• there is a point Q 6= P [0] such that Q ∈ B[0], Q ∈ B[1] and dB[1](Q) > dB[0](Q) (analogous to Figure 5).\nWe will do this through a contradiction that results if we assume:\nand y = a ab ba have point (1, 1) in common. Two smaller closed paths result by applying rule (3).\naaab\nb\na a\nb a a\nba P [1]P [0] P [2]\nQ\n(iii) there is no Q ∈ (A[0] ∩ A[1]) \\ {P [1]} such that dA[0](Q) > dA[1](Q); and\n(iv) there is no Q ∈ (B[0] ∩ B[1]) \\ {P [0]} such that dB[1](Q) > dB[0](Q).\nIn the below, we will refer to these assumptions as the four constraints."
    }, {
      "heading" : "4 Continuous view",
      "text" : "Whereas paths A and B were initially formed out of line segments of length 1 between points (i, j) with integers i and j, the proof becomes considerably easier if we allow i and j to be real numbers. The benefit lies in being able to make changes to the paths that preserve the four constraints, to obtain a convenient normal form for A and B. If we can prove a contradiction on the normal form, we will have shown that no A and B can exist that satisfy the four constraints.\nWe define, for each integer k, the line ℓ[k], which is perpendicular to the line through P [k] and P [k + 1], and lies exactly half-way between P [k] and P [k + 1]. Much as before, we write Q ∈ ℓ[k] to denote that Q is a point on line ℓ[k]. We will consistently draw points . . . , P [−1], P [0], P [1], . . . in a straight line from left to right.\nLet C be a path, which can be either A[k′] or B[k′], some k′, and let Q ∈ C . We write from rightC(Q, ℓ[k]) to mean that path C is strictly to the right of ℓ[k] just before reaching Q, or formally, there is some δ > 0 such that each Q′ ∈ C with dC(Q) − δ < dC(Q′) < dC(Q) lies strictly to the right of ℓ[k]. The predicates from left , to right , to left are similarly defined.\nLet Q1, Q2 ∈ C ∩ ℓ[k], some k, such that dC(Q1) ≤ dC(Q2). We say that C has an excursion from the right between Q1 and Q2 at ℓ[k] if from rightC(Q1, ℓ[k]) and to rightC(Q2, ℓ[k]). This is illustrated in Figure 6: the path is strictly to the right of ℓ[k] just before reaching Q1. From there on it may (but need not) cross over to the left of ℓ[k]. Just after it reaches Q2, it must again be strictly to the right of ℓ[k]. The definition of excursion from the left is symmetric. Note that excursions may be nested; in Figure 6, subC(Q1, Q2) has an excursion at ℓ[k] from the left below Q2.\nIn Figure 6, the pair of points Q1 and R1 will be called a crossing of ℓ[k] from right to left, characterized by Q1, R1 ∈ ℓ[k], from rightC(Q1, ℓ[k]), to leftC(R1, ℓ[k]) and subC(Q1, R1) being a line segment. The pair of points R2 and Q2 is a crossing of ℓ[k] from left to right, where the length of seg(R2, Q2) happens to be 0. In much of the following we will simplify the discussion by assuming crossings consist of single points, as in the case of R2 = Q2. However, existence of crossings consisting of line segments of non-zero length, as in the case of Q1 and R1, would not invalidate any of the arguments of the proof.\nExcursions are the core obstacle that needs to be overcome for our proof. We can truncate an excursion at ℓ[k] by finding a suitable line m that is parallel to ℓ[k], some small distance away from it, between ℓ[k] and P [k + 1] for excursions from the right, and between ℓ[k] and P [k] for excursions from the left. We further need to find points Q′1, Q ′ 2 ∈ C ∩ m, where dC(Q ′\n1) < dC(Q1) and dC(Q2) < dC(Q ′\n2). Because our coordinates no longer need to consist of integers, it is clear that m, Q′1 and Q ′\n2 satisfying these requirements must exist.\nThe truncation consists in changing subC(Q ′ 1, Q ′ 2) to become seg(Q ′ 1, Q ′\n2), as illustrated by Figure 7. Note that if C is say A[k′], some k′, then changing the shape of C means changing the shape of A[k′′] for any other k′′ as well; the difference between A[k′] and A[k′′] is only in the starting point P [k′] versus P [k′′].\nAt this time, we must allow for the possibility that for some excursions, no m, Q′1 and Q ′\n2 can be found with which we can implement a truncation, if we also need to preserve the four constraints and preserve absence of self-intersections. There is a small number of possible causes. First, suppose that C = A[k′] and B[k′ + 1] intersects with seg(Q1, Q2). Then B[k′ + 1] may intersect with seg(Q′1, Q ′ 2) for any choice of m, Q ′ 1 and\nQ′2, and thereby no truncation is possible without violating constraint (ii). Similarly, a truncation may be blocked if C = B[k′ + 1] and A[k′] intersects with seg(Q1, Q2). Next, it could be that C = A[k′], while dA[k′](Q1) > dA[k′+1](Q) holds for some Q ∈ seg(Q1, Q2) ∩ A[k′ + 1], or dA[k′−1](Q) > dA[k′](Q2) holds for some Q ∈ seg(Q1, Q2)∩A[k\n′−1], either of which potentially blocks a truncation if constraint (iii) is to be preserved. Constraint (iv) has similar consequences. Furthermore, if we need to preserve absence of self-intersections, a truncation may be blocked if dC(Q) < dC(Q1) or dC(Q2) < dC(Q) for some Q ∈ seg(Q1, Q2) ∩ C ."
    }, {
      "heading" : "5 Normal form",
      "text" : "The regions of an excursion of C between Q1 and Q2 at ℓ[k] are those that are enclosed by (subpaths of) subC(Q1, Q2) and (subsegments of) seg(Q1, Q2), as illustrated by Figure 8(a). The area of the excursion is the surface area of all regions together. We say an excursion is filled if any of its regions contains at least one point P [k′], some integer k′, otherwise it is said to be unfilled.\nWe say A and B are in normal form if no excursion can be truncated without violating the four constraints or introducing a self-intersection. Suppose A and B are in normal form, while one or more excursions remain. Let us first consider the unfilled excursions. Among them choose one that\nhas the smallest area. By assumption, one of the four constraints must be violated or a new selfintersection must be introduced, if we were to truncate that excursion. We will consider all relevant cases.\nEach case will assume an unfilled excursion from the right (excursions from the left are symmetric) of a path C between Q1 and Q2 at ℓ[k]. We may assume that subC(Q1, Q2) ∩ ℓ[k] = {Q1, Q2}, as additional crossings of ℓ[k] would mean that excursions exist with smaller areas (cf. Figure 8(a)), contrary to the assumptions. Now assume truncation is blocked due to Q ∈ seg(Q1, Q2) ∩ C such that dC(Q) < dC(Q1) (the case dC(Q2) < dC(Q) is symmetric), as we need to preserve absence of self-intersection. Suppose Q is the only such point, so that C crosses seg(Q1, Q2) from left to right once without ever crossing it from right to left, until Q1 is reached. Then C starts in the area of the excursion, or in other words, the excursion is filled, contrary to the assumptions (cf. Figure 8(b)). Now suppose there are points Q′ and Q where C crosses seg(Q1, Q2) from right to left and from left to right, respectively and dC(Q′) < dC(Q) < dC(Q1). If there are several choices, choose Q′ and Q such that subC(Q\n′, Q) ∩ ℓ[k] = {Q′, Q}. This means the excursion between Q′ and Q has an area smaller than the one between Q1 and Q2, contrary to the assumptions (cf. Figure 8(c)).\nNote that excursions with zero area, that is, those that intersect with ℓ[k] without crossing over to the other side, can always be truncated. We can therefore further ignore non-crossing intersections.\nNow suppose a truncation would violate constraint (ii), where C = B[k′ + 1] and D = A[k′] crosses seg(Q1, Q2). Then much as above, we may distinguish two cases. In the first, D has only one crossing of seg(Q1, Q2) in some point Q, which means the excursion is filled with the starting or ending point of D, as in Figure 9(a). In the second, D has at least two consecutive crossings, say in Q and Q′, from right to left and from left to right, respectively, which means the excursion between Q and Q′ has smaller area than the one between Q1 and Q2, illustrated by shading in Figure 9(b). Both cases contradict the assumptions. For C = A[k′] and D = B[k′ + 1], the reasoning is symmetric.\nNext, suppose a truncation would violate con-\nstraint (iii), where C = A[k′] and A[k′ − 1] crosses seg(Q1, Q2) in Q, while dA[k′−1](Q) > dA[k′](Q2). If the crossing in Q is from right to left, and there is an immediately next crossing in Q′ from left to right, then we have the same situation as in Figure 9(b), involving an excursion with smaller area, contradicting the assumptions. If the crossing in Q is the only one, and it is from right to left, then we can use the fact that subA[k′](Q1, Q2) ∩ subA[k′−1](Q,P [k\n′]) = ∅, as we assume the four constraints as yet hold. This means P [k′] must be contained in the area of the excursion, as illustrated in Figure 10(a), contradicting the assumption that the excursion is unfilled. If the crossing in Q is the only one, and it is from left to right, then we can use the fact that subA[k′](Q1, Q2) ∩ subA[k′−1](Q ′\n2, Q) = ∅, for the unique Q′2 ∈ A[k\n′ − 1] ∩ ℓ[k − 1] such that dA[k′−1](Q ′\n2) = dA[k′](Q2). This means the excursion contains Q′2, which implies there is another unfilled excursion between points R1, R2 ∈ A[k′] ∩ ℓ[k − 1] with smaller area, as shaded in Figure 10(b), contrary to the assumptions.\nSuppose a truncation would violate constraint (iii), where C = A[k′] and A[k′ + 1] crosses seg(Q1, Q2) in Q, while dA[k′](Q1) > dA[k′+1](Q). The reasoning is now largely symmetric to the above, with the direction of the crossing reversed, except that the case analogous to Figure 10(b) is immediately excluded, as Q′2 cannot be both to the left and to the right of ℓ[k]. Constraint (iv) is symmetric to constraint (iii). All possible cases have been shown to lead to contradictions, and therefore we conclude that there are no unfilled excursions if A and B are in normal form.\nWe now show that there cannot be any filled excursions either. For this, assume that A[k′] has a filled excursion between Q1 and Q2 at ℓ[k] from the right. This means A[k′ − 1] has an identically shaped, filled excursion at ℓ[k − 1] from the right, between corresponding points Q′1 and Q ′\n2. Let us consider how path A[k′] proceeds after reaching Q2. There are only three possibilities:\n• it ends in P [k + 1], with k′ = k, without further crossings of ℓ[k] or ℓ[k + 1];\n• it next crosses ℓ[k] leftward; or\n• it next crosses ℓ[k + 1] in some point Q3.\nThe first of these can be excluded, in the light of dA[k′−1](Q) ≥ dA[k′](Q2) for each Q ∈ subA[k′−1](Q ′ 2, P [k ′]). Due to constraint (iii) therefore, this subpath of A[k′ − 1] cannot intersect with the excursion of A[k′] to reach P [k], and therefore A[k′] cannot reach P [k+1]. The second possibility is also excluded, as this would imply the existence of an unfilled excursion. For the remaining possibility, Q3 ∈ A[k′]∩ ℓ[k+1] may be lower down than Q2 (in the now familiar view of the points P [0], P [1], . . . being drawn from left to right along a horizontal line), or it may be higher up than Q1. These two cases are drawn in Figures 11 and 12. The choice of Q3 also determines a corresponding Q′3 ∈ A[k\n′ − 1] ∩ ℓ[k]. We now consider how A[k′] continues after Q3 in the case of Figure 11. If it next crosses ℓ[k + 1] leftward, this would imply the existence\nof an unfilled excursion. Further, dA[k′−1](Q) ≥ dA[k′](Q3) for each Q ∈ subA[k′−1](Q ′ 3, P [k ′]). Due to constraint (iii) therefore, this subpath of A[k′ − 1] cannot intersect with subA[k′](Q2, Q3), above which lies P [k + 1]. Therefore, A[k′] must cross ℓ[k + 2] in some Q4, which is lower down than Q3. This continues ad infinitum, and A[k′] will never reach its supposed end point P [k′ + 1]. The reasoning for Figure 12 is similar.\nFilled excursions from the left are symmetric, but instead of investigating the path after Q2, we must investigate the path before Q1. The case of B is symmetric to that of A. We may now conclude no filled excursions exist."
    }, {
      "heading" : "6 The final contradiction",
      "text" : "We have established that after A and B have been brought into normal form, there can be no remaining excursions. This means that A[0] crosses ℓ[0] exactly once, in some point RA, and B[0] crosses ℓ[−1] exactly once, in some point LB. Further, let LA be the unique point where A[−1] crosses ℓ[−1] and RB the unique point where B[1] crosses ℓ[0].\nThe region of the plane between ℓ[−1] and ℓ[0] can now be partitioned into a ‘top’ region, a ‘bottom’ region, and zero or more enclosed regions. The ‘top’ region consists of those points that are\nreachable from any point between ℓ[−1] and ℓ[0] arbitrarily far above any point of A[0] and B[0], without intersecting with A[0], B[0], ℓ[−1] or ℓ[0]. This is the lightly shaded region in Figure 13. The ‘bottom’ region is similarly defined, in terms of reachability from any point between ℓ[−1] and ℓ[0] arbitrarily far below any point of A[0] and B[0]. The zero or more enclosed regions stem from possible intersections of A[0] and B[0]; the two such enclosed regions in Figure 13 are darkly shaded. Note that the four constraints do not preclude intersections of A[0] and B[0].\nHowever, constraint (ii) implies that, between ℓ[−1] and ℓ[0], A[0] and B[1] do not intersect other than in P [0], and similarly, A[−1] and B[0] do not intersect other than in P [0]. Moreover, for any Q ∈ subA[−1](LA, P [0]) and any Q′ ∈ subA[0](P [0], RA) we have dA[−1](Q) ≥ dA[0](Q\n′). By constraint (iii) this means A[−1] and A[0] do not intersect other than in P [0]. Similarly, B[1] and B[0] do not intersect other than in P [0].\nThe angles in P [0] between A[0], B[0], A[−1] and B[1] are multiples of 90◦. Because of constraint (i), which excludes a 180◦ angle between A[0] and B[0], it follows that either subA[−1](LA, P [0]) and subB[1](RB , P [0]) both lie entirely in the ‘top’ region, or both lie entirely in the ‘bottom’ region. The latter case is illustrated in Figure 13. In the former case, LA and RB are above LB and RA, respectively, and in the latter case LA and RB are below LB and RA. This is impossible, as LA and RA should be at the same\nheight, these being corresponding points of A[−1] and A[0], which have the same shape, and similarly LB and RB should be at the same height.\nThis contradiction now leads back to the very beginning of our proof, and implies that the four constraints cannot all be true, and therefore that at least one rule is always applicable to allow use of the inductive hypothesis, and therefore that G generates O2."
    }, {
      "heading" : "7 Conclusions and outlook",
      "text" : "We have presented a new proof that O2 is generated by a MCFG. It has at least superficial elements in common with the proof by Salvati (2015). Both proofs use essentially the same MCFG, both are geometric in nature, and both involve a continuous view of paths next to a discrete view. The major difference lies in the approach to tackling the myriad ways in which the paths can wind around each other and themselves. In the case of Salvati (2015), the key concept is that of the complex exponential function, which seems to restrict the proof technique to twodimensional geometry. In our case, the key concepts are excursions and truncation thereof.\nAt this time, no proof is within reach that generalizes the result to O3. This will require at the very least a suitable definition of ‘excursion’ in three dimensions, which is likely to be more involved than in the two-dimensional case. There are good reasons to believe however that if such a definition can be found, some key elements of the existing proof may carry over. Instead of a binary predicate R for our grammar G, the appropriate grammar for O3 would have a ternary predicate. Where our reasoning had two paths A and B, the three dimensional case would involve three paths A, B and C . In place of the reasoning illustrated in Figure 13, where A and B lead away from P [0] to P [−1] and P [1], to partition the plane into a ‘top’ region and a ‘bottom’ region, we would now have A and B and C leading away from a central point, and prefixes of these three paths would combine to partition the three-dimensional space into a ‘top’ region and a ‘bottom’ region. Copies of A and B and C leading towards the central point would then all fall in the ‘top’ region or all in the ‘bottom’ region, potentially leading to a contradiction. Further details are beyond the scope of the present paper."
    }, {
      "heading" : "Acknowledgements",
      "text" : "This work came out of correspondence with Giorgio Satta. Gratefully acknowledged are also fruitful discussions with Sylvain Salvati, Vinodh Rajan, and Markus Pfeiffer."
    } ],
    "references" : [ {
      "title" : "Discontinuous constituents in generalized categorial grammars",
      "author" : [ "E. Bach" ],
      "venue" : "In Proceedings of the Eleventh Annual Meeting of the North Eastern Linguistic Society,",
      "citeRegEx" : "Bach.,? \\Q1981\\E",
      "shortCiteRegEx" : "Bach.",
      "year" : 1981
    }, {
      "title" : "Chinese numbers, MIX, scrambling, and Range Concatenation Grammars",
      "author" : [ "P. Boullier" ],
      "venue" : "In Ninth Conference of the European Chapter of the Association for Computational Linguistics,",
      "citeRegEx" : "Boullier.,? \\Q1999\\E",
      "shortCiteRegEx" : "Boullier.",
      "year" : 1999
    }, {
      "title" : "Parsing with polymorphic categorial grammars",
      "author" : [ "Capelletti", "Tamburini2009] M. Capelletti", "F. Tamburini" ],
      "venue" : "Research in Computing Science,",
      "citeRegEx" : "Capelletti et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Capelletti et al\\.",
      "year" : 2009
    }, {
      "title" : "Formal languages and their application to combinatorial group theory",
      "author" : [ "R.H. Gilman" ],
      "venue" : "Contemporary Mathematics,",
      "citeRegEx" : "Gilman.,? \\Q2005\\E",
      "shortCiteRegEx" : "Gilman.",
      "year" : 2005
    }, {
      "title" : "The convergence of mildly contextsensitive grammar formalisms",
      "author" : [ "Joshi et al.1991] A.K. Joshi", "K. Vijay-Shanker", "D. Weir" ],
      "venue" : "Foundational Issues in Natural Language Processing,",
      "citeRegEx" : "Joshi et al\\.,? \\Q1991\\E",
      "shortCiteRegEx" : "Joshi et al\\.",
      "year" : 1991
    }, {
      "title" : "Tree adjoining grammars: How much context-sensitivity is required to provide reasonable structural descriptions",
      "author" : [ "A.K. Joshi" ],
      "venue" : "Natural language parsing: Psychological,",
      "citeRegEx" : "Joshi.,? \\Q1985\\E",
      "shortCiteRegEx" : "Joshi.",
      "year" : 1985
    }, {
      "title" : "Parsing Beyond Context-Free Grammars",
      "author" : [ "Laura Kallmeyer" ],
      "venue" : null,
      "citeRegEx" : "Kallmeyer.,? \\Q2010\\E",
      "shortCiteRegEx" : "Kallmeyer.",
      "year" : 2010
    }, {
      "title" : "MIX is not a tree-adjoining language. In 50th Annual Meeting of the Association for Computational Linguistics",
      "author" : [ "Kanazawa", "Salvati2012] M. Kanazawa", "S. Salvati" ],
      "venue" : "Proceedings of the Conference,",
      "citeRegEx" : "Kanazawa et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Kanazawa et al\\.",
      "year" : 2012
    }, {
      "title" : "Context-freeness and the computer processing of human languages. In 21st Annual Meeting of the Association for Computational Linguistics",
      "author" : [ "G.K. Pullum" ],
      "venue" : "Proceedings of the Conference,",
      "citeRegEx" : "Pullum.,? \\Q1983\\E",
      "shortCiteRegEx" : "Pullum.",
      "year" : 1983
    }, {
      "title" : "MIX is a 2-MCFL and the word problem in Z is captured by the IO and the OI hierarchies",
      "author" : [ "S. Salvati" ],
      "venue" : "Journal of Computer and System Sciences,",
      "citeRegEx" : "Salvati.,? \\Q2015\\E",
      "shortCiteRegEx" : "Salvati.",
      "year" : 2015
    }, {
      "title" : "On multiple context-free grammars",
      "author" : [ "Seki et al.1991] H. Seki", "T. Matsumura", "M. Fujii", "T. Kasami" ],
      "venue" : "Theoretical Computer Science,",
      "citeRegEx" : "Seki et al\\.,? \\Q1991\\E",
      "shortCiteRegEx" : "Seki et al\\.",
      "year" : 1991
    }, {
      "title" : "Pumping lemma and Ogden lemma for displacement context-free grammars",
      "author" : [ "A. Sorokin" ],
      "venue" : "In Developments in Language Theory, 18th International Conference,",
      "citeRegEx" : "Sorokin.,? \\Q2014\\E",
      "shortCiteRegEx" : "Sorokin.",
      "year" : 2014
    }, {
      "title" : "Characterizing structural descriptions produced by various grammatical formalisms",
      "author" : [ "D.J. Weir", "A.K. Joshi" ],
      "venue" : "In 25th Annual Meeting of the Association",
      "citeRegEx" : "Vijay.Shanker et al\\.,? \\Q1987\\E",
      "shortCiteRegEx" : "Vijay.Shanker et al\\.",
      "year" : 1987
    } ],
    "referenceMentions" : [ {
      "referenceID" : 9,
      "context" : "It contrasts with a recent proof by Salvati (2015) in its avoidance of concepts that seem specific to two-dimensional geometry, such as the complex exponential function.",
      "startOffset" : 36,
      "endOffset" : 51
    }, {
      "referenceID" : 3,
      "context" : "in computational group theory (Gilman, 2005).",
      "startOffset" : 30,
      "endOffset" : 44
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983).",
      "startOffset" : 114,
      "endOffset" : 126
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983). If a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order.",
      "startOffset" : 114,
      "endOffset" : 150
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983). If a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order. This is admittedly rather unlike any actual natural language. Joshi (1985) argued that because of this, grammatical formalisms for describing natural languages should not be capable of generating MIX.",
      "startOffset" : 114,
      "endOffset" : 456
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983). If a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order. This is admittedly rather unlike any actual natural language. Joshi (1985) argued that because of this, grammatical formalisms for describing natural languages should not be capable of generating MIX. He also conjectured that MIX was beyond the generative capacity of one particular formalism, namely the tree adjoining grammars. Several decades passed before Kanazawa and Salvati (2012) finally proved this conjecture.",
      "startOffset" : 114,
      "endOffset" : 769
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983). If a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order. This is admittedly rather unlike any actual natural language. Joshi (1985) argued that because of this, grammatical formalisms for describing natural languages should not be capable of generating MIX. He also conjectured that MIX was beyond the generative capacity of one particular formalism, namely the tree adjoining grammars. Several decades passed before Kanazawa and Salvati (2012) finally proved this conjecture. MIX has been studied in the context of several other formalisms. Joshi et al. (1991) showed that MIX is generated by a generalization of tree adjoining grammars that decouples local domination for linear precedence.",
      "startOffset" : 114,
      "endOffset" : 886
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983). If a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order. This is admittedly rather unlike any actual natural language. Joshi (1985) argued that because of this, grammatical formalisms for describing natural languages should not be capable of generating MIX. He also conjectured that MIX was beyond the generative capacity of one particular formalism, namely the tree adjoining grammars. Several decades passed before Kanazawa and Salvati (2012) finally proved this conjecture. MIX has been studied in the context of several other formalisms. Joshi et al. (1991) showed that MIX is generated by a generalization of tree adjoining grammars that decouples local domination for linear precedence. Boullier (1999) showed that MIX is generated by a range concatenation grammar.",
      "startOffset" : 114,
      "endOffset" : 1033
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983). If a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order. This is admittedly rather unlike any actual natural language. Joshi (1985) argued that because of this, grammatical formalisms for describing natural languages should not be capable of generating MIX. He also conjectured that MIX was beyond the generative capacity of one particular formalism, namely the tree adjoining grammars. Several decades passed before Kanazawa and Salvati (2012) finally proved this conjecture. MIX has been studied in the context of several other formalisms. Joshi et al. (1991) showed that MIX is generated by a generalization of tree adjoining grammars that decouples local domination for linear precedence. Boullier (1999) showed that MIX is generated by a range concatenation grammar. Negative results were addressed by Sorokin (2014) for wellnested multiple context-free grammars, and by Capelletti and Tamburini (2009) for a class of categorial grammars.",
      "startOffset" : 114,
      "endOffset" : 1146
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983). If a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order. This is admittedly rather unlike any actual natural language. Joshi (1985) argued that because of this, grammatical formalisms for describing natural languages should not be capable of generating MIX. He also conjectured that MIX was beyond the generative capacity of one particular formalism, namely the tree adjoining grammars. Several decades passed before Kanazawa and Salvati (2012) finally proved this conjecture. MIX has been studied in the context of several other formalisms. Joshi et al. (1991) showed that MIX is generated by a generalization of tree adjoining grammars that decouples local domination for linear precedence. Boullier (1999) showed that MIX is generated by a range concatenation grammar. Negative results were addressed by Sorokin (2014) for wellnested multiple context-free grammars, and by Capelletti and Tamburini (2009) for a class of categorial grammars.",
      "startOffset" : 114,
      "endOffset" : 1232
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983). If a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order. This is admittedly rather unlike any actual natural language. Joshi (1985) argued that because of this, grammatical formalisms for describing natural languages should not be capable of generating MIX. He also conjectured that MIX was beyond the generative capacity of one particular formalism, namely the tree adjoining grammars. Several decades passed before Kanazawa and Salvati (2012) finally proved this conjecture. MIX has been studied in the context of several other formalisms. Joshi et al. (1991) showed that MIX is generated by a generalization of tree adjoining grammars that decouples local domination for linear precedence. Boullier (1999) showed that MIX is generated by a range concatenation grammar. Negative results were addressed by Sorokin (2014) for wellnested multiple context-free grammars, and by Capelletti and Tamburini (2009) for a class of categorial grammars. The MIX language is also of interest outside of computational linguistics, e.g. in computational group theory (Gilman, 2005). A considerable advance in the understanding of the MIX language is due to Salvati (2015), who showed that MIX is generated by a multiple context-free grammar (MCFG).",
      "startOffset" : 114,
      "endOffset" : 1483
    }, {
      "referenceID" : 0,
      "context" : "A different way of defining the MIX language is as permutation closure of the regular language (abc), as noted by Bach (1981); see also Pullum (1983). If a, b and c represent, say, a transitive verb and its subject and its object, then a string in MIX represents a sentence with any number of triples of these constituents, in a hypothetical language with extreme free word order. This is admittedly rather unlike any actual natural language. Joshi (1985) argued that because of this, grammatical formalisms for describing natural languages should not be capable of generating MIX. He also conjectured that MIX was beyond the generative capacity of one particular formalism, namely the tree adjoining grammars. Several decades passed before Kanazawa and Salvati (2012) finally proved this conjecture. MIX has been studied in the context of several other formalisms. Joshi et al. (1991) showed that MIX is generated by a generalization of tree adjoining grammars that decouples local domination for linear precedence. Boullier (1999) showed that MIX is generated by a range concatenation grammar. Negative results were addressed by Sorokin (2014) for wellnested multiple context-free grammars, and by Capelletti and Tamburini (2009) for a class of categorial grammars. The MIX language is also of interest outside of computational linguistics, e.g. in computational group theory (Gilman, 2005). A considerable advance in the understanding of the MIX language is due to Salvati (2015), who showed that MIX is generated by a multiple context-free grammar (MCFG). The main part of the proof shows that the language O2 is generated by a MCFG. This language has four symbols, a, a, b and b. A string is in the language if and only if the number of a’s equals the number of a’s, and the number of b’s equals the number of b’s. MIX and O2 are rationally equivalent, which means that if one is generated by a multiple context-free grammar, then so is the other. The proof by Salvati (2015) is remarkable, in that it is one of the few examples of geometry being used to prove a statement about formal languages.",
      "startOffset" : 114,
      "endOffset" : 1981
    }, {
      "referenceID" : 9,
      "context" : "For the meaning of MCFGs in general, see Seki et al. (1991); for a closely related formalism, see Vijay-Shanker et al.",
      "startOffset" : 41,
      "endOffset" : 60
    }, {
      "referenceID" : 9,
      "context" : "For the meaning of MCFGs in general, see Seki et al. (1991); for a closely related formalism, see Vijay-Shanker et al. (1987); see Kallmeyer (2010) for an overview of mildly context-sensitive grammar formalisms.",
      "startOffset" : 41,
      "endOffset" : 126
    }, {
      "referenceID" : 6,
      "context" : "(1987); see Kallmeyer (2010) for an overview of mildly context-sensitive grammar formalisms.",
      "startOffset" : 12,
      "endOffset" : 29
    }, {
      "referenceID" : 9,
      "context" : "It has at least superficial elements in common with the proof by Salvati (2015). Both proofs use essentially the same MCFG, both are geometric in nature, and both involve a continuous view of paths next to a discrete view.",
      "startOffset" : 65,
      "endOffset" : 80
    }, {
      "referenceID" : 9,
      "context" : "It has at least superficial elements in common with the proof by Salvati (2015). Both proofs use essentially the same MCFG, both are geometric in nature, and both involve a continuous view of paths next to a discrete view. The major difference lies in the approach to tackling the myriad ways in which the paths can wind around each other and themselves. In the case of Salvati (2015), the key concept is that of the complex exponential function, which seems to restrict the proof technique to twodimensional geometry.",
      "startOffset" : 65,
      "endOffset" : 385
    } ],
    "year" : 2016,
    "abstractText" : "We present a new proof that O2 is a multiple context-free language. It contrasts with a recent proof by Salvati (2015) in its avoidance of concepts that seem specific to two-dimensional geometry, such as the complex exponential function. Our simple proof creates realistic prospects of widening the results to higher dimensions. This finding is of central importance to the relation between extreme free word order and classes of grammars used to describe the syntax of natural language.",
    "creator" : "LaTeX with hyperref package"
  }
}