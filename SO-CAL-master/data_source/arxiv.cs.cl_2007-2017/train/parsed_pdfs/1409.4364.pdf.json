{
  "name" : "1409.4364.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Computational Algorithms Based on the Paninian System to Process Euphonic Conjunctions for Word Searches",
    "authors" : [ "Kasmir Raja", "Meenakshi Lakshmanan" ],
    "emails" : [ "meenakshi.lakshmanan@gmail.com" ],
    "sections" : [ {
      "heading" : null,
      "text" : "that is accompanied by complexities introduced by features of Sanskrit such as euphonic conjunctions or ‘sandhis’. A word could occur in an E-text in a transformed form owing to the operation of rules of sandhi. Simple word search would not yield these transformed forms of the word. Further, there is no search engine in the literature that can comprehensively search for words in Sanskrit E-texts taking euphonic conjunctions into account. This work presents an optimal binary representational schema for letters of the Sanskrit alphabet along with algorithms to efficiently process the sandhi rules of Sanskrit grammar. The work further presents an algorithm that uses the sandhi processing algorithm to perform a comprehensive word search on E-text.\nKeywords – Sanskrit; euphonic conjunction; sandhi; linguistics; Panini; Sanskrit word search; E-text search.\nI. INTRODUCTION\nWord search in Sanskrit E-texts is a problem that is beset with complexities, unlike in the case of English E-texts. The problem assumes relevance in the context of the availability of rapidly increasing numbers of ancient Sanskrit texts [5-9] in the electronic format. The importance of n-gram analysis of Sanskrit texts for scholars and the tremendous utility of locating specific words in a variety of texts to aid the scholastic process can hardly be overemphasized.\nDating of a text, fixing its authorship with certainty, and analysis of the writing style of an author of a text, are some of the areas in which n-grams assume criticality especially in the context of ancient Sanskrit works. Quoting from authoritative texts is imperative in scholarly works, and word searches can provide crucial help in this regard. Locating the portion in a text or texts in which a particular usage or word is found is of great importance to scholars who write explanatory treatises of Sanskrit-based works in English and other languages. Semantic analysis and understanding of texts are facilitated by finding occurrences of words and studying them in different contexts. In fact, ancient Sanskrit works are universally acknowledged as being mines of information on a whole spectrum of disciplines,\nand hence finding actual occurrences of words is of great consequence to not only Sanskrit scholars but to also researchers from various other disciplines ranging from philosophy, theology, the arts and the physical and life sciences to sociology, medicine and astronomy.\nII. THE PROBLEM\nAs stated above, there are complexities involved in searching comprehensively for words in a Sanskrit E-text. One of the major contributors to this complexity is the operation of euphonic conjunctions or ‘sandhis’. A sandhi is a point in a word or between words, at which adjacent letters coalesce and transform [3]. This is a common feature in many Indian languages as against European languages, and has far-reaching consequences in Sanskrit. The transformation caused by the application of rules of sandhi in Sanskrit can be significant enough to alter the word itself to such a degree that the transformed word would not show up in a simple word search.\nFor example, the word ‘asamardhiḥ’ (meaning of unmatched affluence), can be transformed into ‘āsamardhiḥ’ because of the operation of a euphonic conjunction with a word ending in ‘a’ preceding it, or ‘āsamardhir’ or ‘āsamardhis’ in combination with words occurring after it or ‘asamarddhiḥ’ or ‘asamardddhiḥ’ by internal transformation. Clearly, simply searching for the word asamardhiḥ would not yield the occurrences of the same word as ‘asamarddhir’, ‘āsamardddhir’, or other alternative forms. As such, a normal text-search using a Unicode text editor would not suffice. Other search engines currently used for Sanskrit [13] too do not provide for such comprehensive searching.\nIn order to achieve such an exhaustive search, all possible forms of the word resulting from the euphonic conjunctions that would become operative in its case must be generated and searched for in the given text.\nThe authors have already presented a new schema for fast sandhi processing in earlier work [4]. The present work extends the application of that schema to other sandhi rules including\n64 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\nconsonant-based and visarga-based sandhis as well as important rules with respect to exceptional cases. It further presents a complete computational algorithm to process all sandhis, and an algorithm to apply this sandhi-processing procedure to generate all word forms to enable comprehensive searching."
    }, {
      "heading" : "A. Language Representation",
      "text" : "The Unicode hexadecimal range 0900 - 097F is used to represent Sanskrit characters in Devanāgarī script. The characters used to represent Sanskrit letters in English script are found in the Basic Latin (0000-007F), Latin-1 Supplement (0080-00FF), Latin Extended-A (0100-017F) and Latin Extended Additional (1E00 – 1EFF) Unicode ranges.\nThe Latin character set has been employed in this work to represent Sanskrit letters as E-text. As such, the schema and algorithms presented do not use Devanāgarī script. To use the algorithms for text that is in Devanāgarī script, the text needs to first be converted to Latin text."
    }, {
      "heading" : "B. Terminology",
      "text" : "The terminology employed in this work for certain groups of letters of the Sanskrit alphabet is given in Table 1.\nderivational and known for their mathematical precision in spite of dealing with the nuances of the language at various levels including morphology, syntax, semantics, phonology and pragmatics. Owing to the cryptic nature of the Aṣṭādhyāyī, one or more of the commentaries on it are required to get a clear understanding of its contents.\nThe current work deals with Pāṇini’s sandhi-related aphorisms with the help of the recognized commentaries, Siddhānta-kaumudī [1] and Kāśikā [2]. Both these commentaries are accepted by Sanskrit scholars as authoritative works on Pāṇinian grammar.\nPāṇini’s statements of grammatical rules are expressed on the basis of the Māheśvara-sūtras, or the ‘aphorisms of Maheśvara’. These aphorisms provide a list of all the letters of the Sanskrit alphabet ordered in a specific sequence. The Māheśvara aphorisms are given below:\n1. a-i-u-ṇ 2. ṛ-ḷ-k 3. e-o-ṅ 4. ai-au-c 5. ha-ya-va-ra-ṭ 6. la-ṇ 7. ña-ma-ṅa-ṇa-na-m 8. jha-bha-ñ 9. gha-ḍha-dha-ṣ 10. ja-ba-ga-ḍa-da-ś 11. kha-pha-cha-ṭha-tha-ca-ṭa-ta-v 12. ka-pa-y 13. śa-ṣa-sa-r 14. ha-l\nThe last letter in each of these aphorisms is only a placeholder. The first four aphorisms list only the short forms of all the vowels, while the rest list the semi-vowels and consonants; the latter list has the vowel ‘a’ appended to each letter only to enable pronunciation of the aphorism."
    }, {
      "heading" : "A. The Approach",
      "text" : "The present work is based on earlier work by the authors, which directly codifies Pāṇini’s rules in a novel way using binary representations [4]. The unique data representation devised by the authors has been further refined in this work and consonant-based, visarga-based sandhi rules, as well as some special sandhi rules have been included in this work.\nRule representation has been simplified to minimal binary set-unset operations. Further, the sūtra ordering has been done after acquiring a thorough understanding of the operation of Pāṇini’s sandhi-related aphorisms. As such, this work presents a significant extension, refinement and closure of the earlier work of the authors. Moreover, it provides a clear understanding of the rules governing sandhi as laid down by Pāṇini, in a comprehensive and simplified way, hitherto not encountered in the literature."
    }, {
      "heading" : "B. The Binary Schema",
      "text" : "The following is an extract from already published work by the authors [4] and is included here for completeness of the presentation.\n65 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\nA point of sandhi is denoted by \uD835\uDC65 + \uD835\uDC66\nwhere \uD835\uDC65 and \uD835\uDC66 denote the sandhi letters and the symbol ‘+’ denotes adjacency. The variable \uD835\uDC4B denotes the sequence of letters culminating in \uD835\uDC65; the variable \uD835\uDC4C denotes the sequence of letters starting with \uD835\uDC66. The notations \uD835\uDC4B and \uD835\uDC4C are used to depict special conditions that pertain to an entire word or sequence of letters involved in the sandhi rule. The letter immediately preceding \uD835\uDC65 and the letter immediately succeeding \uD835\uDC66 are denoted respectively as \uD835\uDC62 and \uD835\uDC64 respectively.\nThe refined schematic developed in this work to represent letters of the Sanskrit alphabet is given in Table 2.\n# Letters\n45 ' 46 #\nIn Table 2, x is the jihvāmūliyā and f is the upadhmānīya mentioned in Table 1; the # symbol stands for ‘ru’ a special intermediary form of the semi-vowel r.\nAny letter of the alphabet is represented in two parts: Part 1 denotes the category to which a letter belongs (zero-based serial number in Table 2), and Part 2 denotes the zero-based term number within the series that the letter is or fits into. In any letter representation, Part 1 is a binary string of fixed length 46, in which the set bit denotes the category number, while Part 2 is a binary string of maximum length 6 in which the set bit indicates which particular letter is being represented. It is clear that one letter has many representations under this scheme.\nThe first four shaded rows of Table 2 stand for overall categories, viz. vowels, semi-vowels, consonants and special characters respectively. One of these four bits have to be set in any letter representation. There is no corresponding Part 2 value for the bits 0, 1, 2 and 3 of Part 1.\nFor simplicity of presentation, sandhi rules use the following notation: \uD835\uDC65\uD835\uDC56(\uD835\uDC5B) = 1 indicates that the \uD835\uDC5Bth bit of Part \uD835\uDC56 of the variable \uD835\uDC65 is set, where \uD835\uDC56 = 1, 2. In the implementation, the checks for bit set can be done by simply using the XOR operation.\nIV. SANDHI PROCESSING UNDER THE PĀṆINIAN SYSTEM Each of the eight chapters of Pāṇini’s Aṣṭādhyāyī is divided into four parts or pādas. Overall, the work is defined by Pāṇini as consisting of two parts, the sapādasaptādhyāyī (the aphorisms of Chapters 1.1 to 8.1), and the tripādī (the aphorisms of Chapters 8.2 to 8.4).\nThe order in which the rules should be visited was arrived at in this work after a thorough study of Pāṇini’s aphorisms with respect to euphonic conjunctions. As a result of the study, the set of sandhi rules has been split into two in this work: Set 1, having all the relevant aphorisms of the sapādasaptādhyāyī as well as a few specific rules from the tripādī, and Set 2, having all the remaining relevant aphorisms of the tripādī.\nThe order of parsing is as follows: rules in Set 1 are parsed in reverse order of their Aṣṭādhyāyī order; rules in Set 2 are parsed in the Aṣṭādhyāyī order itself. (The sūtra number as it appears in the Aṣṭādhyāyī is indicated in the algorithm between double pipe symbols given after the sūtra.)This parsing order is adopted so that no rule already parsed has to be parsed again. As such, the flow of the program is just from top to bottom. There are exceptions to the above parsing orders in both sets that arise because of certain overruling sūtras that appear earlier / later respectively in the two sets. The ordering is changed to accommodate such rules in such a way as to parse them before the main rule.\nAssuming that the rules are ordered in the above manner in the two sets, the following general algorithm for parsing rules is presented. The word_list is a list of the alternative word-pair outputs generated, and represents the output at the end of the algorithm.\n66 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\nAlgorithm SandhiRulesParser\n{\nwhile Set 1 rules have not been fully visited {\nTry the next rule in Set 1; if the rule applies {\nApply the rule and store the output; if the rule is optional {\nAdd the current word pair to the word_list; Continue checking from the next rule for all\nword pairs stored in the word_list; }\nelse {\nProcess internal sandhi rules of Set 2; }\n}\n} while Set 2 rules have not been fully visited {\nTry the next rule in Set 2; if the rule applies {\nApply the rule and transform the given words; if the rule is optional {\nAdd the current word pair to the word_list; Continue checking from the next rule for all\nword pairs stored in the word_list; }\n}\n}\n} There are a few exceptions that would apply to the general processing order prescribed by the above algorithm. For example, in Set 1 the output produced by an optionally applying rule does, in certain cases, have to pass through a rule appearing below and undergo further transformation as a result, as it happens in Set 2. Also, it is found that a few rare rules of Set 2 have to be processed before Set 1. Further, in Set 2, all rules that form exceptions to a particular rule are stated after it by Pāṇini, but clearly, have to be processed before the rule by the algorithm.\nV. THE SANDHI PROCESSOR\nThe key to symbols used in rule coding and algorithm specification is as follows:\n // means single-line explanatory comment  { } are block or set indicators  ∧ denotes \uD835\uDC4E\uD835\uDC5B\uD835\uDC51  ∨ denotes \uD835\uDC5C\uD835\uDC5F  ¬ denotes \uD835\uDC5B\uD835\uDC5C\uD835\uDC61  ⨁ denotes \uD835\uDC65\uD835\uDC5C\uD835\uDC5F  | denotes word concatenation\nThe algorithm SandhiProcessor processes the rules pertaining to all the major sandhis in Sanskrit grammar, in accordance with the processing scheme presented in Algorithm SandhiRulesParser. Set 1 and Set2 sandhis have been incorporated here one below the other and the rules have been codified as per the schema presented above. The vowel sandhis presented in [4] have been modified in accordance to the reduced schema and included here for completeness.\nWhen \uD835\uDC65\uD835\uDC56, \uD835\uDC66\uD835\uDC56 , etc., for i = 1,2, are assigned new values by setting bits, it is assumed that their initial values are first unset. Also, if either part of a variable is not set, it is assumed to remain unchanged. Further, it is also assumed that a category change caused by a sandhi will cause an automatic change in the first four bits of the letter representation and that all bit representations for the changed letter will be generated thereafter. Hence, these aspects are not explicitly stated for each rule in this algorithm.\nThe speed of processing is increased by going into a rule only if overall conditions are satisfied. For instance, if the rule is a vowel sandhi rule, where both x and y are required to be vowels, then the check if \uD835\uDC651(0) and \uD835\uDC661(0) are 1 is first made. If this bit-check is not true for the input words, then a whole set of vowel sandhis is omitted from the parse, thus increasing the efficiency of the algorithm. These overall checks have not been shown in the algorithm presented below, in order to make the presentation more simple.\nAlgorithm SandhiProcessor (\uD835\uDC4B,\uD835\uDC4C) {\n//1.svaujasamauṭchaṣṭābhyāṁbhisṅebhyāṁbhyasṅasi //bhyāṁbhyasṅasosāmṅyossup || 4.1.2 || //If there is a visarga (ḥ) at the end of \uD835\uDC4B, then the visarga is //changed to ‘s’. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(44) {\n\uD835\uDC651(24) = 1; }\n//2. sasajuṣo ruḥ || 8.2.66 || // Common name: visarga-rutva sandhi //If last letter of \uD835\uDC4B is s, then s is replaced by ‘#’ which //stands for the particle ‘ru’, interpreted as ‘r’. //This rule is incorporated here though it belongs to the\n//sapādasaptādhyāyī .\n\uD835\uDC56\uD835\uDC53 \uD835\uDC651(24) {\nx1(46) = 1; }\n//3. avaṅ sphoṭāyanasya || 6.1.123 || (vowel sandhi) // Common name: avaṅādeśa sandhi //If the word go is followed by a vowel, then the o of go //is optionally replaced by ava. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(15) ∧ \uD835\uDC652(0)) ∧ (\uD835\uDC621(31) ∧ \uD835\uDC622(3)) {\nAdd X|Y to word_list; \uD835\uDC651 (19) = 1;\n}\n67 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\n//4. haśi ca || 6.1.114 || //If # (ru) or r at the end of \uD835\uDC4B is preceded by the vowel a //and followed by aspirate, semi-vowel, nasal, Column3 or //Column4, then last letter of \uD835\uDC4B is replaced with the vowel //‘u’ and shifted to Y to become the first letter of Y \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(46) ∨ \uD835\uDC651(21)) ∧ \uD835\uDC621(4) ∧ (\uD835\uDC661(1) ∨ \uD835\uDC661(26) ∨ \uD835\uDC661(27) ∨ \uD835\uDC661(38) ∨ \uD835\uDC661(39)) {\nx1(6) = 1; \uD835\uDC652 = \uD835\uDC622; Shift \uD835\uDC65 from the end of \uD835\uDC4B to the beginning of \uD835\uDC4C;\n}\n//5. ato roraplutādaplute || 6.1.113 || //Common name: visarga-rutva sandhi //If # (ru) or r at the end of \uD835\uDC4B is followed and preceded by //a, then the # or r is replaced with the vowel ‘u’ and shifted //to Y to become the first letter of Y \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(46) ∨ \uD835\uDC651(21)) ∧ \uD835\uDC621(4) ∧ \uD835\uDC661(4) {\n\uD835\uDC651(6) = 1; \uD835\uDC652 = \uD835\uDC622; Shift \uD835\uDC65 from the end of \uD835\uDC4B to the beginning of \uD835\uDC4C;\n}\n//6. eṅaḥ padāntādati || 6.1.109 || (vowel sandhi) // Common name: pūrvarūpa sandhi //If e or o at the end of a word is followed by a, then e or o //remains, and the avagraha (') replaces a. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(13) ∧ \uD835\uDC661(4) {\n\uD835\uDC661(45) = 1; }\n//7. akaḥ savarṇe dīrghaḥ || 6.1.101 || (vowel sandhi) //Common name: savarṇadīrgha sandhi //If one of a, i, u, ṛ or ḷ or their long equivalents ā, ī, ū and ṝ //is followed by the short or long form of the same letter, //then the corresponding long letter replaces both. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(8) ∨ \uD835\uDC651(9)) ∧ (\uD835\uDC661(8) ∨ \uD835\uDC661(9)) ∧ ¬(\uD835\uDC652⨁\uD835\uDC662) {\ndelete \uD835\uDC66; \uD835\uDC651(9) = 1; return \uD835\uDC4B|\uD835\uDC4C;\n}\n//8. omāṅośca || 6.1.95 || (vowel sandhi) // Common name: pararūpa sandhi //If a or ā is followed by o of the word om or oṁ, then o //replaces both. \uD835\uDC56\uD835\uDC53(\uD835\uDC651(4) ∨ \uD835\uDC651(5)) ∧ \uD835\uDC4C ∈ {om, oṁ} {\ndelete \uD835\uDC65; }\n//9. etyedhatyūṭhsu || 6.1.89 || (vowel sandhi) //Common name: vṛddhi sandhi //For this rule, in all cases the resultant letter replaces x\n//and y. //i) If a or ā is followed by eti or edhati, then vṛddhi letter //ai replaces both //ii) If the preposition pra is followed by eṣa or eṣy, then //vṛddhi letter ai replaces both //iii) If a or ā is followed by ūh, then vṛddhi letter au //replaces both //iv) If preposition pra is followed by ūḍh, then vṛddhi //letter au replaces both //v) If word sva is followed by īr, then vṛddhi letter ai //replaces both \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(4) ∨ \uD835\uDC651(5)) //\uD835\uDC65 is ‘a’ or ‘ā’ {\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC661(13) ∧ \uD835\uDC662(1)) //\uD835\uDC66 is ‘e’ {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC4C starts with {et, edhat} //(i) {\ndelete \uD835\uDC65; \uD835\uDC661(14) = 1;\n} \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC4B = ‘pra’ ∧ \uD835\uDC4C starts with {eṣ, eṣy} //(ii) {\ndelete \uD835\uDC65; \uD835\uDC661(14) = 1;\n} } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 (\uD835\uDC661(7) ∧ \uD835\uDC662(0)) //\uD835\uDC66 is ‘ū’ {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC641(26) // (iii) {\ndelete \uD835\uDC65; \uD835\uDC661(14) = 1;\n} \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC4B = ‘pra’ ∧ \uD835\uDC4C starts with {ūḍh} //(iv) {\ndelete \uD835\uDC65; \uD835\uDC661(14) = 1;\n} } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC4B = ‘sva’ ∧ (\uD835\uDC661(7) ∧ \uD835\uDC662(1)) ∧ \uD835\uDC641(21)//(v) {\ndelete \uD835\uDC65; \uD835\uDC661(14) = 1;\n} }\n//10. eṅi pararūpaṁ || 6.1.94 || (vowel sandhi) // Common name: pararūpa sandhi //If a or ā at the end of a preposition is followed by e or //o, then the e or o replaces both. //Note: The prepositions that qualify are: pra, ava, apa, //upa, parā. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {pra, ava, apa, upa, parā} ∧ \uD835\uDC661(13) {\ndelete \uD835\uDC65; }\n//11. upasargādṛti dhātau || 6.1.91 || (vowel sandhi) //Common name: vṛddhi sandhi //i) If a or ā at the end of a preposition is followed by ṛ,\n68 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\n//ṝ or ḷ, then vṛddhi letter ār, ār or āl respectively //replaces both. Note: The prepositions that qualify are: //pra, parā, apa, ava, upa //ii) If the word vatsara, kambala, vasana, daśa, ṛṇa is //followed by the word ṛṇa, then vṛddhi letter ār //replaces both. //Note: This rule clashes with 6.1.87 (guṇa sandhi), and //takes precedence. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {pra, ava, apa, upa, parā} ∧ \uD835\uDC661(12) {\ndelete \uD835\uDC65; \uD835\uDC661(17) = 1;\n} \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {vatsara, kambala, vasana, daśa, ṛṇa} ∧ (\uD835\uDC661(12) ∧ \uD835\uDC662(0)) ∧ \uD835\uDC4C = ‘ṛṇa’ {\ndelete \uD835\uDC65; \uD835\uDC661(17) = 1;\n}\n//12. vṛddhireci || 6.1.88 || (vowel sandhi) // Common name: vṛddhi sandhi //If a or ā is followed by e, o, ai or au, then the //corresponding vṛddhi letter ai or au replaces both. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(4) ∨ \uD835\uDC651(5)) ∧ ((\uD835\uDC661(13) ∨ \uD835\uDC661(14)) {\ndelete \uD835\uDC65; \uD835\uDC661(14) = 1;\n}\n//13. ādguṇaḥ || 6.1.87 || (vowel sandhi) // uraṇ raparaḥ || 1.1.51 || // Common name: guṇa sandhi //If a or ā is followed by i, ī, u, ū, ṛ, ṝ or ḷ, then the //corresponding guṇa letter e, o, ar or al replaces both. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(4) ∨ \uD835\uDC651(5)) ∧ ((\uD835\uDC661(10) ∨ \uD835\uDC661(11)) {\ndelete \uD835\uDC65; \uD835\uDC661(16) = 1;\n}\n//14. ecoyavāyāvaḥ || 6.1.78 || (vowel sandhi) // Common name: ayāyāvāvādeśa sandhi //If e, o, ai or au is followed by a vowel, then ay, av, āy, //āv replace the first respectively. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(15) ∧ \uD835\uDC661(0) {\n\uD835\uDC651(18) = 1; }\n//15. iko yaṇaci || 6.1.77 || (vowel sandhi) // Common name: yaṇādeśa sandhi //If i, ī, u, ū, ṛ, ṝ or ḷ is followed by a vowel, then the //corresponding semi-vowel (y, v, r, l) replaces the first. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(10) ∨ \uD835\uDC651(11)) ∧ \uD835\uDC661(0) {\n\uD835\uDC651(20) = 1; }\n//16. che ca || 6.1.73 || //Common name: tugāgama sandhi //If a short vowel is followed by the consonant ch, then //t is added. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(8) ∧ (\uD835\uDC661(40) ∧ \uD835\uDC662(0)) {\nz1(34) = 1; z2 = y2; Add z to the end of \uD835\uDC4B;\n}\n//17. āṅmāṅośca || 6.1.74 ||\n//Common name: tugāgama sandhi //If the particle ā or word mā is followed by ch, //then t is added. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {ā, mā} ∧ (\uD835\uDC661(40) ∧ \uD835\uDC662(0)) {\n\uD835\uDC671(34) = 1; z2 = y2; Add z to the end of \uD835\uDC4B;\n}\n//18. dīrghāt || 6.1.75 ||\n// padāntādvā || 6.1.76 ||\n//Common name: tugāgama sandhi //If a long vowel is followed by ch, then t is added. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(9) ∧ (\uD835\uDC661(40) ∧ \uD835\uDC662(0)) {\n\uD835\uDC671(34) = 1; z2 = y2; Add z to the end of \uD835\uDC4B;\n}\n//19. saṁyogāntasya lopaḥ || 8.2.23 || //If the final consonant of \uD835\uDC4B is preceded by a //consonant, then the last consonant is dropped.\n\uD835\uDC56\uD835\uDC53 \uD835\uDC651(2) ∧ \uD835\uDC621(2) {\ndelete \uD835\uDC65; }\n//20. jhalām jaśo'nte || 8.2.39 ||\n//Common name: jaśtva sandhi //If \uD835\uDC65 is Column1, Column2, Column3, Column4, sibilant //or aspirate, then \uD835\uDC65 is replaced by the corresponding //Column3. //Note: The rule sasajuṣo ruḥ || 8.2.66 || debars the //application of this rule for words ending in sibilants, and\n//has been incorporated earlier in Set 1 rules itself.\n\uD835\uDC56\uD835\uDC53 \uD835\uDC651(36) ∨ \uD835\uDC651(37) ∨ \uD835\uDC651(38) ∨ \uD835\uDC651(39) {\n\uD835\uDC651(38) = 1; }\n//21. pumaḥ khayyampare ||8.3.6|| // atrānunāsikaḥ pūrvasya tu vā || 8.3.2 || //If \uD835\uDC4B is the word ‘pum’ or ‘puṁ’ and is followed by\n69 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\n//Column1 or Column2, which is in turn followed by a //vowel, semi-vowel or a nasal, then \uD835\uDC65 is replaced by # //(ru) and the preceding vowel is made nasal using the //anusvāra. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {pum, puṁ} ∧ (y1(36) ∨ y1(37)) ∧ (w1(0) ∨ w1(1) ∨ w1(27)) {\n\uD835\uDC651(43) = 1; \uD835\uDC671(46) = 1; \uD835\uDC652(0) = \uD835\uDC672(0) = 1;\n}\n//22. naśchavyapraśān || 8.3.7 ||\n// atrānunāsikaḥ pūrvasya tu vā || 8.3.2 || //Common name: satva sandhi //If the final n of a word, except for the word praśān, //followed by ch, ṭh, th, c, ṭ or t which is in turn //followed by a vowel, semi-vowel or nasal, then //n is replaced with # (ru) and the preceding vowel is //made nasal using the anusvāra. \uD835\uDC56\uD835\uDC53 ¬(\uD835\uDC4B = ‘praśān’) ∧ (\uD835\uDC651(27) ∧ \uD835\uDC652(2)) ∧ \uD835\uDC661(40)) ∧ (\uD835\uDC641(0) ∨ \uD835\uDC641(1) ∨ \uD835\uDC641(27)) {\nu = x; \uD835\uDC651(43) = 1; \uD835\uDC671(46) = 1; \uD835\uDC652(0) = \uD835\uDC672(0) = 1;\n}\n//23. nṝnpe || 8.3.10 || // atrānunāsikaḥ pūrvasya tu vā || 8.3.2 || //If \uD835\uDC4B = ‘nṝn’ and \uD835\uDC66 is the letter ‘p’ then \uD835\uDC65 is //optionally replaced with # (ru) and the preceding //vowel is made nasal using the anusvāra. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B = ‘nṝn’ ∧ (y1(35) ∧ y2(0)) {\nAdd X|Y to word_list; u = x; \uD835\uDC651(43) = 1; \uD835\uDC671(46) = 1; \uD835\uDC652(0) = \uD835\uDC672(0) = 1;\n}\n//24. ro ri || 8.3.14 || // ḍhralope pūrvasya dīrgho’ṇaḥ ||6.3.111|| //If r or # (ru) is followed by r and is preceded by a, i or u, //then one r is dropped and the short vowel is made long. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(46) ∨ \uD835\uDC651(21)) ∧ \uD835\uDC661(21) {\ndelete \uD835\uDC65; \uD835\uDC56\uD835\uDC53 \uD835\uDC621(6) {\n\uD835\uDC621(7) = 1; }\n\uD835\uDC56\uD835\uDC53\uD835\uDC621(4) {\n\uD835\uDC621(5) = 1;\n}\n}\n//25. kharavasānayorvisarjanīyaḥ || 8.3.15 || //If \uD835\uDC65 is # (ru) or r and is followed by a hard consonant, //then \uD835\uDC65 is replaced with visarga. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(46) ∨ \uD835\uDC651(21)) ∧ (\uD835\uDC661(36) ∨ \uD835\uDC661(37) ∨ \uD835\uDC661(23) ∨ \uD835\uDC661(24) ∨ \uD835\uDC661(25)) {\nx1(44) = 1; }\n//26. bhobhagoaghoapūrvasya yo’śi || 8.3.17 || //If \uD835\uDC65 is # (ru) or r and is preceded by bho, bhago, agho, //a or ā, and is followed by a vowel, semi-vowel or soft //consonant, then \uD835\uDC65 is replaced by the consonant ‘y’. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(46) ∨ \uD835\uDC651(21)) ∧ (X – {x}) in {bho, bhago, agho, a, ā} ∧ (\uD835\uDC661(0) ∨ \uD835\uDC661(1) ∨ \uD835\uDC661(38) ∨ \uD835\uDC661(39) ∨ \uD835\uDC661(26) ∨ \uD835\uDC661(27)) {\n\uD835\uDC651(20) = 1; \uD835\uDC652(1) = 1;\n}\n//27. lopaḥ śākalyasya || 8.3.19 || //If the consonant ‘y’ or ‘v’ is preceded by a or ā and is //followed by a vowel, semi-vowel or soft consonant, //then the ‘y’ or ‘v’ is dropped. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(20) ∧ (\uD835\uDC652(0) ∨ \uD835\uDC652(1))) ∧ (\uD835\uDC621(4) ∨ \uD835\uDC621(5)) ∧ (\uD835\uDC661(0) ∨ \uD835\uDC661(1) ∨ \uD835\uDC661(38) ∨ \uD835\uDC661(39) ∨ \uD835\uDC661(26) ∨ \uD835\uDC661(27)) {\ndelete \uD835\uDC65; }\n//28. oto gārgyasya || 8.3.20 || //If the consonant ‘y’ is preceded by the vowel ‘o’ and //followed by a vowel, semi-vowel or soft consonant, //then the ‘y’ is dropped. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(20) ∧ \uD835\uDC652(1)) ∧ (\uD835\uDC621(13) ∧ \uD835\uDC622(0)) ∧ (\uD835\uDC661(0) ∨ \uD835\uDC661(1) ∨ \uD835\uDC661(38) ∨ \uD835\uDC661(39) ∨ \uD835\uDC661(26) ∨ \uD835\uDC661(27)) {\ndelete \uD835\uDC65; }\n//29. uñi ca pade || 8.3.21 || //If the consonant ‘y’ or ‘v’ is preceded by a or ā and is //followed by the word ‘u’, then the ‘y’ or ‘v’ is dropped. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(20) ∧ (\uD835\uDC652(0) ∨ \uD835\uDC652(1))) ∧ (\uD835\uDC621(4) ∨ \uD835\uDC621(5)) ∧ \uD835\uDC4C = ‘u’ {\ndelete \uD835\uDC65; }\n//30. hali sarveṣāṁ || 8.3.22 || //If the consonant ‘y’ is followed by a semi-vowel or //consonant, then the ‘y’ is dropped.\n70 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(20) ∧ \uD835\uDC652(1)) ∧ (\uD835\uDC661(1) ∨ \uD835\uDC661(2)) {\ndelete \uD835\uDC65; }\n//31. he mapare vā || 8.3.26 || //i) If m is followed by h at the end of a word which is in //turn followed by m, then the first m is optionally changed //to anusvāra. //ii) If m is followed by h which is in turn followed by //consonants ‘y’, ‘l’, or ‘v’, then the m is optionally replaced //by the nasal forms of ‘y’, ‘l’, or ‘v’ respectively. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(30) ∧ \uD835\uDC661(26) {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC641(30) {\nAdd X|Y to word_list; \uD835\uDC651(43) = 1;\n}\n\uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC641(20) {\n\uD835\uDC651(22) = 1; \uD835\uDC652 = \uD835\uDC642;\n}\n}\n//32. napare naḥ || 8.3.27 || //If m is followed by h at the end of a word which is in turn //followed by n, then the m is optionally replaced by n. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(30) ∧ \uD835\uDC661(26) ∧ (\uD835\uDC641(27) ∧ \uD835\uDC642(2)) {\nAdd X|Y to word_list; \uD835\uDC65 = \uD835\uDC64;\n}\n//33. naścāpadāntasya jhali || 8.3.24 || //If n is followed by Column1, Column2, Column3, //Column4, sibilant or aspirate not at the end of a word, //then the n is replaced by anusvāra. \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each letter \uD835\uDC65 in a word and its succeeding letter \uD835\uDC66) {\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(29)) ∧ (\uD835\uDC661(36) ∨ \uD835\uDC661(37) ∨ \uD835\uDC661(38) ∨ \uD835\uDC661(39) ∨ \uD835\uDC661(23) ∨ \uD835\uDC661(24) ∨ \uD835\uDC661(25) ∨ \uD835\uDC661(26)) {\n\uD835\uDC651(43) = 1; }\n}\n//34. mo rāji samaḥ kvau || 8.3.25 || //If m of the word ‘sam’ or ‘sām’ is followed by a word //starting with ‘rāj’ or ‘rāṭ’ or ‘ṛāñ’, then the m remains //unchanged. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {sam, sām} ∧ \uD835\uDC4C ∈ {rāj, rāṭ, ṛāñ} {\n//Skip Rule 35\nContinue processing from Rule 36;\n}\n//35. mo'nusvāraḥ || 8.3.23 ||\n//Common Name: anusvāra sandhi //If m at the end of a word is followed by any consonant, //then m is replaced by anusvāra. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(30) ∧ \uD835\uDC661(2) {\n\uD835\uDC651(43) = 1; }\n//36. ṅaṇoḥ kuk ṭuk śari || 8.3.28 || //If ṅ or ṇ is followed by a sibilant, then k or ṭ is optionally //added respectively. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(28) ∧ (\uD835\uDC661(23) ∨ \uD835\uDC661(24) ∨ \uD835\uDC661(25)) {\nAdd X|Y to word_list; \uD835\uDC671(36) = 1; \uD835\uDC672 = \uD835\uDC652; Add \uD835\uDC67 to the end of \uD835\uDC4B;\n}\n//37. ḍaḥ si dhuṭ || 8.3.29 || //Common name: dhuḍāgama sandhi //If ḍ is followed by s, then dh is added optionally \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(38) ∧ \uD835\uDC652(1)) ∧ \uD835\uDC661(24) {\nAdd X|Y to word_list; \uD835\uDC671(34) = 1; \uD835\uDC672 = \uD835\uDC652; Add \uD835\uDC67 to the end of \uD835\uDC4B;\n}\n//38. naśca || 8.3.30 || //Common name: dhuḍāgama sandhi //If n is followed by s, then dh is added optionally. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(27) ∧ \uD835\uDC652(2)) ∧ \uD835\uDC661(24) {\nAdd X|Y to word_list; \uD835\uDC671(39) = 1; \uD835\uDC672 = \uD835\uDC652; Add \uD835\uDC67 to the end of \uD835\uDC4B;\n}\n//39. śi tuk || 8.3.31 ||\n//Common name: tugāgama sandhi //If n is followed by ś, then t is optionally added. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(27) ∧ \uD835\uDC652(2)) ∧ \uD835\uDC661(25) {\nAdd X|Y to word_list; \uD835\uDC671(36) = 1; \uD835\uDC672 = \uD835\uDC652; Add \uD835\uDC67 to the end of \uD835\uDC4B;\n}\n//40. ṅamo hrasvādaci ṅamuṇnityaṁ ||8.3.32|| //Common name: ṅamuḍāgama sandhi //If ṅ, ṇ or n is preceded by a short vowel and succeeded by //a vowel, then the ṅ, ṇ or n gets duplicated.\n71 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(27) ∧ (\uD835\uDC652(0) ∨ \uD835\uDC652(1) ∨ \uD835\uDC652(2))) ∧ \uD835\uDC621(8) ∧ \uD835\uDC661(0) {\nAdd another \uD835\uDC65 to the end of \uD835\uDC4B; }\n//41. śarpare visarjanīyaḥ || 8.3.35 || //If visarga is followed by a hard consonant which is in turn //followed by a sibilant, then the visarga is retained. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(44) ∧ (\uD835\uDC661(36) ∨ \uD835\uDC661(37) ∨ \uD835\uDC661(23) ∨ \uD835\uDC661(24) ∨ \uD835\uDC661(25)) ∧ (\uD835\uDC641(23) ∨ \uD835\uDC641(24) ∨ \uD835\uDC641(25)) {\nStore result with no change\n}\n//42. vā śari || 8.3.36 || //If visarga is followed by a sibilant, then the visarga is //optionally retained. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(44) ∧ (\uD835\uDC661(23) ∨ \uD835\uDC661(24) ∨ \uD835\uDC661(25)) {\nAdd \uD835\uDC4B|Y to word_list; delete x;\n}\n//43. kupvoḥ ⋏k ⋎pau ca || 8.3.37 || //If visarga is followed by a hard guttural or hard labial, //then it is replaced optionally by ⋏ (pronounced as at the //end of ‘kah’) or ⋎ (pronounced as at the end of ‘paf’) \uD835\uDC56\uD835\uDC53 \uD835\uDC651(44) ∧ \uD835\uDC661(41) {\nAdd \uD835\uDC4B|\uD835\uDC4C to word_list; \uD835\uDC651(42) = 1; \uD835\uDC652 = \uD835\uDC662; Flag_kupvoh_sutra_fired = true //flag is set\n}\n//44. so’padādau || 8.3.38 || //If visarga is followed by pāśa, kalpa, ka or kāmya, then //the visarga is replaced by s. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(44) ∧ \uD835\uDC4C begins with {pāśa, kalpa, ka, kāmya} {\n\uD835\uDC651(24) = 1; }\n//45. iṇaḥ ṣaḥ || 8.3.39 || //If visarga is preceded by ‘i’ or ‘u’ and followed by pāśa, //kalpa, ka or kāmya, then the visarga is replaced by ṣ. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(44) ∧ \uD835\uDC621(6) ∧ \uD835\uDC4C begins with {pāśa, kalpa, ka, kāmya} {\n\uD835\uDC651(23) = 1; }\n//46. namaspurasorgatyoḥ || 8.3.40 || //If ‘namaḥ’ or ‘puraḥ’ is followed by a hard guttural or //hard labial, then the visarga is replaced by s optionally. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {namaḥ, puraḥ} ∧ \uD835\uDC661(41) {\nAdd X|Y to word_list; \uD835\uDC651(24) = 1;\n}\n//47. idudupadhasya cā'pratyayasya || 8.3.41|| //If visarga is preceded by ‘i’ or ‘u’ and is at the end of any //of niḥ, duḥ, bahiḥ, āviḥ, catuḥ, prāduḥ and is followed by //a hard guttural or hard labial, then the visarga is replaced //by ṣ. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {niḥ, duḥ, bahiḥ, āviḥ, catuḥ, prāduḥ} ∧ \uD835\uDC661(41) {\n\uD835\uDC651(23) = 1; }\n//48. tiraso’nyatarasyām || 8.3.42 || //If the word ‘tiraḥ’ is followed by a hard guttural or hard //labial, then the visarga is optionally replaced by s. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B = ‘tiraḥ’ ∧ \uD835\uDC661(41) {\nAdd \uD835\uDC4B|Y to the word_list; x1(24) = 1;\n}\n//49. dvistriścaturiti kṛtvorthe || 8.3.43 || //If the words dviḥ, triḥ or catuḥ are followed by a hard //guttural or hard labial, then the visarga is optionally //replaced by ṣ. \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {dviḥ, triḥ, catuḥ} ∧ \uD835\uDC661(41) {\nAdd \uD835\uDC4B|Y to the word_list; \uD835\uDC651(23) = 1;\n} //50. ataḥ kṛkamikaṁsakumbhapātrakuśā //karṇīṣvanavyayasya || 8.3.46 || //If visarga is preceded by a and followed by a form of kṛ //or kam or by the words kaṁsa, kumbha, pātra, kuśā or //karṇī, then the visarga is replaced by s. \uD835\uDC56\uD835\uDC53 \uD835\uDC651(44) ∧ \uD835\uDC621(4) ∧ \uD835\uDC4C begins with {kṛ, kar, kur, kam, kām, kaṁsa, kumbha, pātra, kuśā, karṇī} {\n\uD835\uDC651(24) = 1; }\n//51. adhaḥ śirasī pade || 8.3.47 || //If the word adhaḥ or śiraḥ is followed by the word ‘pada’, //then the visarga is replaced by s optionally \uD835\uDC56\uD835\uDC53 \uD835\uDC4B ∈ {adhaḥ, śiraḥ} ∧ Y begins with {pad} {\nAdd X|Y to word_list; \uD835\uDC651(24) = 1;\n}\n//Rules 41 to 51 form exceptions to the following rule, Rule\n//52, and hence have been handled before it.\n72 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\n//52. visarjanīyasya saḥ || 8.3.34 || //If visarga is followed by a hard consonant, then s replaces //the visarga. if Flag_kupvoh_sutra_fired = false //8.3.37 is not fired {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC651(44) ∧ (\uD835\uDC661(36) ∨ \uD835\uDC661(37) ∨ \uD835\uDC661(23) ∨ \uD835\uDC661(24) ∨ \uD835\uDC661(25)) {\n\uD835\uDC651(24) = 1; }\n}\n//53. raṣābhyāṁ no ṇaḥ samānapade || 8.4.1 || // aṭkupvāṅnumvyavāye'pi || 8.4.2 || // padāntasya || 8.4.37 || //If n is preceded by ṛ, ṝ, r or ṣ within the same word, and a //palatal, cerebral, dental, l, ś or s does not lie between the //two, and n is not the last letter of the word, then n is //replaced by ṇ. \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each letter \uD835\uDC66 in \uD835\uDC4B where \uD835\uDC66 is not the last letter) {\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC661(27) ∧ \uD835\uDC662(2)) //\uD835\uDC66 is ‘n’ {\n\uD835\uDC56\uD835\uDC53 ∃ a letter \uD835\uDC65 in \uD835\uDC4B preceding \uD835\uDC66 where ((\uD835\uDC651(12) ∧ ¬\uD835\uDC652(2)) ∨ \uD835\uDC651(21) ∨ \uD835\uDC651(23)) //\uD835\uDC65 is ṛ, ṝ, r or ṣ {\n\uD835\uDC56\uD835\uDC53 ∄ any letter q between \uD835\uDC65 and \uD835\uDC66 where \uD835\uDC5E1(32) ∨ \uD835\uDC5E1(33) ∨ \uD835\uDC5E1(34) ∨ (\uD835\uDC5E1(20) ∧ \uD835\uDC5E2(3)) ∨ \uD835\uDC5E1(24) ∨ \uD835\uDC5E1(25) {\ny2(1) = 1; }\n}\n}\n} //Repeat the above for Y\n//54. stoḥ ścunāḥ ścuḥ || 8.4.40 || // śāt || 8.4.44 || //Common name: ścutva sandhi //If a palatal other than ś is followed by a dental, or a dental\n//is followed by a palatal, then the dental is replaced by the\n//corresponding palatal. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(32) ∧ ¬\uD835\uDC652(5)) ∧ (\uD835\uDC661(34)) {\n\uD835\uDC661(32) = 1; }\n\uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC651(34) ∧ \uD835\uDC661(32) {\n\uD835\uDC651(32) = 1; }\n//55. ṣṭunāḥ ṣṭuḥ || 8.4.41 || // na padāntāṭṭoranāṁ || 8.4.42 || // toḥ ṣi || 8.4.43 || //Common name: ṣṭutva sandhi //If a dental is followed by a cerebral except ṣ, or if the\n//specific cerebral ṭ is followed by nām, navati or nagarī, or\n//if a cerebral is followed by a dental, then the dental is\n//replaced by the corresponding cerebral. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(34) ∧ ¬\uD835\uDC652(5)) ∧ (\uD835\uDC661(33) ) {\n\uD835\uDC651(33) = 1; } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(33) ∧ \uD835\uDC652(0)) ∧ \uD835\uDC4C ∈ {nām, navat, nagar} {\n\uD835\uDC661(33) = 1; } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC651(33) ∧ \uD835\uDC661(34) {\n\uD835\uDC661(33) = 1; }\n//56. yaro'nunāsike’nunāsiko vā || 8.4.45 ||\n//Common name: anunāsikā sandhi //If a consonant other than ‘h’ is followed by a nasal, then //the consonant is optionally replaced by the corresponding\n//nasal. The rule is obligatory if the second word is //‘mayam’ or ‘mātram’. \uD835\uDC56\uD835\uDC53(\uD835\uDC651(36) ∨ \uD835\uDC651(37) ∨ \uD835\uDC651(38) ∨ \uD835\uDC651(39)) {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC661(27) {\nAdd \uD835\uDC4B|Y to the word_list; \uD835\uDC651(27) = 1;\n} \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC4C ∈ {maya, mātra} {\n\uD835\uDC651(27) = 1; }\n}\n//57. aco rahābhyāṁ dve || 8.4.46 || //If r or h is followed by any consonant other than h and //preceded by a vowel, then the consonant is duplicated\n//within a word. \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each set of consecutive letters u,x,y in X) {\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(21) ∨ \uD835\uDC651(26)) ∧ (\uD835\uDC661(2) ∧ ¬\uD835\uDC661(26)) ∧ \uD835\uDC621(0) {\n\uD835\uDC67 = \uD835\uDC66; Add \uD835\uDC67 after \uD835\uDC65;\n}\n} \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each set of consecutive letters u,x,y in Y) {\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(21) ∨ \uD835\uDC651(26)) ∧ (\uD835\uDC661(2) ∧ ¬\uD835\uDC661(26)) ∧ \uD835\uDC621(0) {\n\uD835\uDC67 = \uD835\uDC66; Add \uD835\uDC67 after \uD835\uDC65;\n}\n}\n73 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\n//58. anaci ca || 8.4.47 || // dīrghādācāryāṇām || 8.4.52 || //If any consonant other than h is preceded by a short vowel //and followed by anything other than a vowel, then the\n//consonant is doubled within a word. \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each set of consecutive letters x,y,w in X) {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC651(8) ∧ (\uD835\uDC661(2) ∧ ¬\uD835\uDC661(26)) ∧ (\uD835\uDC641(1) ∨ \uD835\uDC641(2) ∨ \uD835\uDC641(3)) {\n\uD835\uDC67 = \uD835\uDC66; Add \uD835\uDC67 after \uD835\uDC65;\n}\n} \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each set of consecutive letters x,y,w in Y) {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC651(8) ∧ (\uD835\uDC661(2) ∧ ¬\uD835\uDC661(26)) ∧ (\uD835\uDC641(1) ∨ \uD835\uDC641(2) ∨ \uD835\uDC641(3)) {\n\uD835\uDC67 = \uD835\uDC66; Add \uD835\uDC67 after \uD835\uDC65;\n}\n}\n//59. jhalām jaś jhaśi || 8.4.53 ||\n//Common name: jaśtva sandhi //If a non-nasal mute, sibilant or aspirate is followed by\n//Column3 or Column4, then the first letter is replaced by\n//the corresponding Column3 letter. \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each set of consecutive letters x, y in X) {\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC661(38) ∨ \uD835\uDC661(39)) {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC651(36) ∨ \uD835\uDC651(37) ∨ \uD835\uDC651(38) ∨ \uD835\uDC651(39) ∨ \uD835\uDC651(26) {\n\uD835\uDC651(38) = 1; } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC651(23) ∨ \uD835\uDC651(24) ∨ \uD835\uDC651(25) {\n\uD835\uDC651(38) = 1; \uD835\uDC56\uD835\uDC53 \uD835\uDC651(23) {\n\uD835\uDC652(1) = 1; } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC651(24) {\n\uD835\uDC652(2) = 1; } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC651(25) {\n\uD835\uDC652(3) = 1; }\n}\n}\n} //Repeat the above for Y\n//60. khari ca || 8.4.55 || //Common name: cartva sandhi //If a non-nasal mute or sibilant is followed by a //hard consonant, then the first letter is replaced by the\n//corresponding Column1 letter. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(36) ∨ \uD835\uDC651(37) ∨ \uD835\uDC651(38) ∨ \uD835\uDC651(39) ∨ \uD835\uDC651(23) ∨ \uD835\uDC651(24) ∨ \uD835\uDC651(25)) ∧ (\uD835\uDC661(36) ∨ \uD835\uDC661(37) ∨ \uD835\uDC661(23) ∨ \uD835\uDC661(24) ∨ \uD835\uDC661(25)) {\n\uD835\uDC651(36) = 1; }\n//Check internally in each word too \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each set of consecutive letters x, y in X) {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC661(36) ∨ \uD835\uDC661(37) ∨ \uD835\uDC661(23) ∨ \uD835\uDC661(24) ∨ \uD835\uDC661(25) {\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(36) ∨ \uD835\uDC651(37) ∨ \uD835\uDC651(38) ∨ \uD835\uDC651(39)) {\n\uD835\uDC651(36) = 1; } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC651(23) ∨ \uD835\uDC651(24) ∨ \uD835\uDC651(25) {\n\uD835\uDC651(36) = 1; \uD835\uDC56\uD835\uDC53 \uD835\uDC651(23) {\n\uD835\uDC652(1) = 1; } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC651(24) {\n\uD835\uDC652(2) = 1; } \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC651(25) {\n\uD835\uDC652(3) = 1; }\n}\n}\n} //Repeat the above for Y\n//61. anusvārasya yayi parasavarṇaḥ ||8.4.58|| //Common name: parasavarṇa sandhi //If anusvāra is followed by a semi-vowel or a mute, then\n//the anusvāra is replaced by the nasal equivalent of the\n//second letter.\n\uD835\uDC56\uD835\uDC53 \uD835\uDC651(43) {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC661(20) {\n\uD835\uDC651(22) = 1; \uD835\uDC652 = \uD835\uDC662;\n} \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 \uD835\uDC661(36) ∨ \uD835\uDC661(37) ∨ \uD835\uDC661(38) ∨ \uD835\uDC661(39) {\n\uD835\uDC651(27) = 1; \uD835\uDC652 = \uD835\uDC662;\n74 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\n}\n}\n//62. torli || 8.4.60 || //Common name: parasavarṇa sandhi //i) If n is followed by l, then n is replaced by nasal l. //ii) If a dental other than n and s is followed by l, then //the dental is replaced by l. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(27) ∧ \uD835\uDC652(2)) ∧ (\uD835\uDC661(20) ∧ \uD835\uDC662(3)) {\n\uD835\uDC651(22) = 1; \uD835\uDC652 = \uD835\uDC662;\n} \uD835\uDC52\uD835\uDC59\uD835\uDC60\uD835\uDC52\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(34) ∧ ¬(\uD835\uDC652(4) ∨ \uD835\uDC652(5))) ∧ (\uD835\uDC661(20) ∧ \uD835\uDC662(3)) {\n\uD835\uDC65 = \uD835\uDC66; }\n//63. jhayoho'nyatarasyām || 8.4.62 || //Common name: pūrvasavarṇa sandhi //If a non-nasal mute is followed by h, then h is optionally //replaced by the Column4 letter corresponding to the non//nasal mute. \uD835\uDC56\uD835\uDC53 (\uD835\uDC651(36) ∨ \uD835\uDC651(37) ∨ \uD835\uDC651(38) ∨ \uD835\uDC651(39)) ∧ \uD835\uDC661(26) {\nAdd \uD835\uDC4B|Y to the word_list; \uD835\uDC661(39) = 1; \uD835\uDC662 = \uD835\uDC652;\n}\n//64. śaścho'ṭi || 8.4.63 || //Common name: chatva sandhi //If a non-nasal mute is followed by ś which is in turn\n//followed by a vowel, semi-vowel or nasal, then ś is //optionally replaced by ch. \uD835\uDC56\uD835\uDC53(\uD835\uDC651(36) ∨ \uD835\uDC651(37) ∨ \uD835\uDC651(38) ∨ \uD835\uDC651(39)) ∧ \uD835\uDC661(25) ∧ (\uD835\uDC641(0) ∨ \uD835\uDC641(1) ∨ \uD835\uDC641(27)) {\nAdd \uD835\uDC4B|Y to the word_list; \uD835\uDC661(40) = 1;\n} //65. halo yamāṁ yami lopaḥ || 8.4.64 || //If a semi-vowel or nasal is preceded by a consonant and\n//followed by the same semi-vowel or nasal letter, then one\n//of the duplicate letters is dropped. \uD835\uDC56\uD835\uDC53 \uD835\uDC621(2) {\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(20) ∨ \uD835\uDC651(27)) ∧ \uD835\uDC66 == x {\ndelete \uD835\uDC65; }\n}\n//66. jharo jhari savarṇe || 8.4.65 || //If a non-nasal mute or sibilant is preceded by a consonant\n//or semi-vowel and followed by a homogeneous mute or\n//sibilant, then one of the duplicate letters is optionally\n//dropped, within a word \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each set of consecutive letters u,x,y in X) {\n\uD835\uDC56\uD835\uDC53 \uD835\uDC621(1) ∨ \uD835\uDC621(2) {\n\uD835\uDC56\uD835\uDC53 (\uD835\uDC651(36) ∨ \uD835\uDC651(37) ∨ \uD835\uDC651(38) ∨ \uD835\uDC651(39) ∨ \uD835\uDC651(23) ∨ \uD835\uDC651(24) ∨ \uD835\uDC651(25)) ∧ (\uD835\uDC651 == \uD835\uDC661) {\nAdd \uD835\uDC4B|\uD835\uDC4C to the word_list; delete \uD835\uDC65;\n}\n}\n}\n}\n// Repeat the above for Y"
    }, {
      "heading" : "C. The Search Engine",
      "text" : "Algorithm SandhiProcessor may be used to generate alternative forms of a given search word. The following algorithm is used to generate all possible alternative forms of a given word, by providing possible word forms before and after the word so that sandhi rules get triggered. All these word forms are searched for in the E-text.\nAlgorithm GenerateAllWordForms (\uD835\uDC4D) { //Z is the search word. //{WordForms} denotes the set of word forms generated by\n//the algorithm and is initially the null set.\nAdd \uD835\uDC4D to {WordForms}; \uD835\uDC4B = \uD835\uDC4D; \uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each \uD835\uDC66 in {vowels, semi-vowels, consonants}) {\nAdd SandhiProcessor(\uD835\uDC4B, \uD835\uDC4C) to {WordForms}; }\n\uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each \uD835\uDC4C ∈ {WordForms}) {\n\uD835\uDC53\uD835\uDC5C\uD835\uDC5F (each \uD835\uDC4B in {vowels, semi-vowels, consonants, ḥ, ṁ, #})\n{\nAdd SandhiProcessor(\uD835\uDC4B, \uD835\uDC4C) to {WordForms}; }\n}\n}\nVI. CONCLUSION\nThe schema developed in this work presents a simple yet unique and efficient method to process the sandhi aphorisms of Pāṇini. The letter representation scheme is binary, and hence all the checks are implemented as bit-level operations and simple bit-set and bit-unset operations suffice to carry out the sandhi transformation. The efficiency is further enhanced by the division of a letter representation into two parts and the consequent reduction of the transformation process to a shifting of category. Further, this pattern of solving the sandhi construction problem is unprecedented in the literature. Thus, representation schema and the results of the sandhi-processing\n75 http://sites.google.com/site/ijcsis/ ISSN 1947-5500\nalgorithm represent an efficient computational model to process Sanskrit euphonic conjunctions. It must be mentioned here that some rules such as those with regard to prakṛtibhāva sandhi (non-transformational sandhi) have not been presented above. However, it is clear that their implementation is only an extension of the algorithm presented in this work that does not require any new schema.\nThe representational schema has been reduced further from [4] in this work, since many more sandhi rules have been incorporated here. The optimality of the schema is clear from the simplicity of the rule representation.\nThe final algorithm presented in this work, which uses this sandhi processor for word searches in E-texts is the first of its kind in the literature with regard to Sanskrit.\nThe use of the sandhi processor for searching ensures comprehensiveness of the search, while the efficiency of the sandhi processing method presented in this work ensures that search speeds are not compromised due to the increase in the number of words to be searched for. This was confirmed in the implementation of the algorithm.\nThe algorithms presented in this work have been tested for use with Sanskrit E-text in Devanāgarī script after a conversion engine converted Devanāgarī Unicode to Latin Unicode E-text.\nREFERENCES\n[1] Dīkṣita Bhaṭṭoji, Siddhānta-kaumudī, Translated by Śrīśa Candra Vasu, Volume 1, Motilal Banarsidas Publishers, Delhi, 1962. [2] Vāmana & Jayāditya, Kāśikā, with the subcommentaries of Jinendrabuddhi, Haradatta Miśra and Dr. Jaya Shankar Lal Tripathi, Tara Book Agency, Varanasi, 1984. [3] Rama N., Meenakshi Lakshmanan, A New Computational Schema for Euphonic Conjunctions in Sanskrit Processing, International Journal of Computer Science Issues, Vol. 5, 2009, pp 43-51 (ISSN print: 1694-0814, ISSN online: 1694-0784). [4] Kasmir Raja S. V., Rajitha V., Meenakshi Lakshmanan, A Binary Schema and Computational Algorithms to Process Vowel-based Euphonic Conjunctions for Word Searches, International Journal of Applied Engineering Research, Volume 9,Number 20(2014) pp. 7127-7141 (ISSN print: 0973-4562, ISSN online: 1087-1090).\nWebsites\n[5] Göttingen Register of Electronic Texts in Indian Languages (GRETIL), gretil.sub.unigoettingen.de/gretil.htm [6] Sanskrit Documents, sanskritdocuments.org [7] Indology: Resources for Indological Scholarship,\nindology.info/etexts/archive/ etext [8] TITUS, titus.uni-frankfurt.de/indexe.htm [9] Muktabodha Indological Text Collection & Search Engine,\nmuktalib5.org/digital_library_secure_entry.htm\n76 http://sites.google.com/site/ijcsis/ ISSN 1947-5500"
    } ],
    "references" : [ {
      "title" : "A New Computational Schema for Euphonic Conjunctions in Sanskrit",
      "author" : [ "Rama N", "Meenakshi Lakshmanan" ],
      "venue" : "Processing, International Journal of Computer Science Issues,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2009
    }, {
      "title" : "A Binary Schema and Computational Algorithms to Process Vowel-based Euphonic Conjunctions for Word Searches",
      "author" : [ "V. Kasmir Raja S", "V. Rajitha", "Lakshmanan Meenakshi" ],
      "venue" : "International Journal of Applied Engineering Research, Volume",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2014
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "A sandhi is a point in a word or between words, at which adjacent letters coalesce and transform [3].",
      "startOffset" : 97,
      "endOffset" : 100
    }, {
      "referenceID" : 1,
      "context" : "The authors have already presented a new schema for fast sandhi processing in earlier work [4].",
      "startOffset" : 91,
      "endOffset" : 94
    }, {
      "referenceID" : 1,
      "context" : "The present work is based on earlier work by the authors, which directly codifies Pāṇini’s rules in a novel way using binary representations [4].",
      "startOffset" : 141,
      "endOffset" : 144
    }, {
      "referenceID" : 1,
      "context" : "The following is an extract from already published work by the authors [4] and is included here for completeness of the presentation.",
      "startOffset" : 71,
      "endOffset" : 74
    }, {
      "referenceID" : 1,
      "context" : "The vowel sandhis presented in [4] have been modified in accordance to the reduced schema and included here for completeness.",
      "startOffset" : 31,
      "endOffset" : 34
    }, {
      "referenceID" : 1,
      "context" : "The representational schema has been reduced further from [4] in this work, since many more sandhi rules have been incorporated here.",
      "startOffset" : 58,
      "endOffset" : 61
    } ],
    "year" : 2014,
    "abstractText" : "Searching for words in Sanskrit E-text is a problem that is accompanied by complexities introduced by features of Sanskrit such as euphonic conjunctions or ‘sandhis’. A word could occur in an E-text in a transformed form owing to the operation of rules of sandhi. Simple word search would not yield these transformed forms of the word. Further, there is no search engine in the literature that can comprehensively search for words in Sanskrit E-texts taking euphonic conjunctions into account. This work presents an optimal binary representational schema for letters of the Sanskrit alphabet along with algorithms to efficiently process the sandhi rules of Sanskrit grammar. The work further presents an algorithm that uses the sandhi processing algorithm to perform a comprehensive word search",
    "creator" : "Microsoft® Word 2013"
  }
}