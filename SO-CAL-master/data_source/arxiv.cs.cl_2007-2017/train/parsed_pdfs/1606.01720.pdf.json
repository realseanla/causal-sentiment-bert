{
  "name" : "1606.01720.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Richard Moot" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n60 6.\n01 72\n0v 1\n[ cs\n.L O\n] 6\nJ un\n2 01\n6\nProof nets for the Displacement calculus\nRichard Moot\nCNRS (LaBRI)"
    }, {
      "heading" : "1 Introduction",
      "text" : "The Displacement calculus was introduced by Morrill, Valent́ın & Fadda (2011) as an extension of the Lambek calculus with discontinuous operators. These discontinuous connectives allow the Displacement calculus to solve a large number of problems with the Lambek calculus. Examples of the phenomena treated by Morrill et al. (2011) include discontinuous idioms (such as “ring up” and “give the cold shoulder”), quantifier scope, extraction (including pied-piping) and gapping.\nThis paper extends earlier work by Morrill & Fadda (2008), Moot (2014) and Valent́ın (2014), combining the strengths of these different approaches while at the same time diminishing the inconveniences. Notably, it is the first proof net calculus which does not operate by translation into some other logic, but provides proof nets for the Displacement calculus directly."
    }, {
      "heading" : "2 The Displacement calculus",
      "text" : "The presentation of the Displacement calculus closely follows the natural deduction calculus used by Morrill et al. (2011). String terms are built over a countably infinite alphabet of variables (for readability, we will often used natural language words as if they were variables), a special separator symbol “1”, where string concatenation is denoted by “+” (a binary, associative infix operator on string terms). As usual, ǫ denotes the empty string. The sort of a string term is the number of occurrences of the separator “1”.\nI use lower-case roman letters p, q . . . for atomic string terms (for enhanced readability, I will often use the standard convention of using words from the lexicon in the place of such atomic string terms), lower-case roman letters a, b, . . . for string terms without separator symbols and lower-case greek letters α, β, . . . for strings containing any number of separator symbols. So the string term p+ 1+ q + 1+ r is a string of sort 2 with three atomic subterms.\nThe key to the Displacement calculus is the wrap operator α ×k β. There is some minor variation in the definition of this operator: sometimes (Morrill et al. 2011) k is either the constant “>” or the constant “<” (in which case α is of sort greater than zero and the denotation of the term replaces respectively the first and the last occurrences of 1 in α by β. Sometimes (Morrill 2011) k is an integer (between 1 and the sort of α) and α×k β replaces the kth separator\nin α by β. The equations below given the definition of “×k”.\n(a+ 1+ α)×> β =def a+ β + α(1)\n(α+ 1+ a)×< β =def α+ β + a(2)\n(a1 + 1+ . . .+ an + 1+ α)×n β =def a1 + 1+ . . .+ an + β + α(3)\nWhere the Lambek calculus connectives get their meaning with respect to concatenation “+”, the discontinuous connectives of the Displacement calculus get their meaning with respect to “×k” (this entails different connectives for different values of k). The standard interpretation of the Lambek calculus connectives for string models, with “+” denoting concatenation, is the following.\n|A \\ C| =def {β | ∀α ∈ |A|, α+ β ∈ |C|}(4)\n|C / B| =def {α | ∀β ∈ |B|, α+ β ∈ |C|}(5)\n|A •B| =def {α+ β |α ∈ |A| ∧ β ∈ |B|}(6)\nThe discontinuous connectives of the Displacement calculus use “×k” instead of “+” (we present only the connectives for > here).\n|A ↓> C| =def {β | ∀α ∈ |A|, α×> β ∈ |C|}(7)\n|C ↑> B| =def {α | ∀β ∈ |B|, α×> β ∈ |C|}(8)\n|A⊙> B| =def {α×> β |α ∈ |A| ∧ β ∈ |B|}(9)\nWe can further unfold these definitions, using Definition 1 for “×>” to obtain.\n|A ↓> C| =def {β | ∀(a+ 1+ α) ∈ |A|, a+ β + α ∈ |C|}(10)\n|C ↑> B| =def {(a+ 1+ α) | ∀β ∈ |B|, a+ β + α ∈ |C|}(11)\n|A⊙> B| =def {a+ β + α | (a+ 1+ α) ∈ |A| ∧ β ∈ |B|}(12)\nGiven these definitions, the meaning of A ↓> C is defined as the set of expressions which select a circumfix A, which wraps around the string denoted by A ↓> C to form an expression C. Similarly, C ↑> B extracts a B formula not occurring after a separator."
    }, {
      "heading" : "2.1 Formulas and sorts",
      "text" : "We have already defined the sort of a string term as the number of occurrences of the separator constant “1”. The sort of a formula corresponds to the number of separators “1” occurring in its denotation. That is, a formula of sort n is assigned a string term of the form a0 +1+ . . .+1+ an (with all ai of sort 0 according to our notational convention). For a given grammar, its signature defines the sort of all atomic formulas occurring in the grammar. We assume throughout that the atomic formulas s , n, np, pp have sort 0 (some other atomic formulas, such as inf when used for Dutch verb clusters, have sort 1).\nTable 1 shows how to compute the sort of complex formulas. All subformulas of a formula are assigned a sort, so when we compute s(C / B) using its entry\nin Table 1 we know that s(C) ≥ s(B), because if not, then s(C / B) would be less than zero and therefore not a valid (sub)formula (similar constraints can be derived from the other implications, eg. we can show that s(C ↑B) ≥ 1).\nAs an example, following Morrill et al. (2011), we can assign a discontinuous lexical entry like “give the cold shoulder” the lexical formula (np \\ s) ↑> np and string term gave+ 1+ the+ cold+ shoulder (of the required sort 1)."
    }, {
      "heading" : "2.2 Natural deduction rules",
      "text" : "Figures 1 and 2 give the natural deduction rules for the Lambek calculus and for the left wrap rules respectively (the other wrap rules follow the same pattern). The left wrap rules of Figure 2 correspond rather closely to the interpretation of the formulas given in Definitions 10 to 12."
    }, {
      "heading" : "3 Proof nets",
      "text" : "One of the goals of proof search in type-logical grammars is to enumerate all possible readings for a given sentence. The bureaucratic aspects of the sequent calculus proof search make it hard to use sequent calculus directly for this goal, since sequent calculus allows a great number of inessential rule permutations. The situation for natural deduction is somewhat better, since the proof rules correspond directly to steps in meaning composition, even though there is still a large number of possible rule permutations for the •E and ⊙kE rules.\nProof nets are a way of representing proofs which removes the “bureaucratic” aspects of sequent proofs and simplifies the product rules of Lambek calculus natural deduction. One of the open questions of Morrill (2011) is whether the Displacement calculus has a proof net calculus.\nValent́ın (2014) provides a translation of the Displacement calculus to a multimodal system. However, this system uses a rather large set of structural rules and these rules are defined modulo equivalence classes, which makes their use in existing multimodal theorem provers (Moot 2007) difficult. In this section, I will extend the proof net calculus for the Lambek calculus of Moot & Puite (2002) to the Displacement calculus. I will, in particular, provide an efficiently checkable correctness condition in the form of graph contractions."
    }, {
      "heading" : "3.1 Links",
      "text" : "Figures 3 and 4 show the links for Displacement calculus proof structures. Each link connects three formulas to a central node. The formulas written above the central node of a link are the premisses of the link, the formulas written below it are its conclusions. The linear order of both the premisses and the conclusions of a link is important.\nWe distinguish between par links, where the central node is filled black, and tensor links, where the central node is not filled (this is the familiar tensor/par distinction of multiplicative linear logic). Par nodes are further distinguished by an arrow pointing to the main formula of the link."
    }, {
      "heading" : "3.2 Proof structures",
      "text" : "A proof structure is a set of formulas and a set of links such that.\n1. each link instantiates one of the links shown in Figures 3 and 4 (for specific values of A, B, C and k), 2. each formula is the premiss of at most one link, 3. each formula is the conclusion of at most one link.\nFormulas which are not the premiss of any link are the conclusions of the proof structure. Formulas which are not the conclusion of any link are the hypotheses of the proof structure (the word “conclusion” is overloaded: we talk about conclusions of proofs, conclusions of rules, conclusions of links and conclusions of proof structures; when the intended use is clear from the context, I will often simply use the word “conclusion” without further qualification). The inputs of a proof structure are its hypotheses and the active conclusions of its par links (that is, the conclusions of all par links in the proof structure except, for the implications, the one with the arrow); we will call the inputs which are not hypotheses the auxiliary inputs of a proof structure.\nTo construct a proof structure for a given sequent A1, . . . , An ⊢ C, we unfold the Ai as premisses and C as a conclusion. This will provide a proof structure with (atomic) conclusions other than C and (atomic) premisses other than the Ai. We identify these atomic hypotheses with atomic conclusions (of the same atomic formula) until we obtain a proof structure of A1, . . . , An ⊢ C. This can fail if an atomic formula has more occurrences as a hypothesis than as a conclusion (as it should, since such sequents are underivable).\nFigure 5 gives an unfolding for the sentence “Mary rang everyone up”, a sentence with the discontinuous idiom “rang up” and a non-peripheral quantifier “everyone”, following lexical entries of Morrill et al. (2011). Figure 6 shows (on the left of the figure) one of the possibilities for connecting the atomic formulas.\nNot all proof structures correspond to natural deduction proofs. Proof structures which correspond to natural deduction proofs are proof nets. Of course, defining proof nets this way is not very satisfactory: we want to have a condition which, given a proof structure tells us whether or not this proof structure is a proof net using only properties of the proof structure itself."
    }, {
      "heading" : "3.3 Abstract Proof Structures",
      "text" : "The general strategy we follow to define a correctness criterion for proof structures is as follows: we first simplify by removing some of the information which is irrelevant for deciding correctness to obtain abstract proof structures, then specify the correctness condition on these abstract proof structures, using a graph\ncontraction criterion, generalizing the proof nets of the Lambek calculus from Moot & Puite (2002).\nTensor trees and combs A tensor tree is a connected, acyclic set of tensor links (to be more precise, the underlying undirected graph must by acyclic and connected). A single vertex is a tensor tree. Given an (abstract) proof structure, its tensor trees are the maximal substructures which are tensor trees; this is simply the forest we obtain when we remove all par links from a proof structure. The proof structure of Figure 6 has two tensor trees.\nA comb is a link with any number of premisses and a single conclusion. None of the premisses of the comb can be identical to its conclusion. The general conditions on links prevent premisses from being connected more than once as a premiss of a comb. The premisses of combs, as links in general, are linearly ordered. Premisses of a comb can be hypotheses of the proof structure, the conclusions of a link or the special constant 1. The sort of a comb, that is the sort assigned to its conclusion, is the sum of the sorts of its premisses (the constant 1 is of sort 1). Combs play the same role as tensor trees do for Moot & Puite (2002): they allow us to go back a forth between sequents Γ ⊢ C and combs with premisses Γ and conclusion C. Given a comb, we will refer to subsequences of its premisses as prefixes, postfixes, etc., and assign them sorts as well.\nTranslating a proof structure to an abstract proof structure To translate a proof structure P to an abstract proof structure A, we define a function, P 7→ A, which replaces “+” links by 2-premiss combs as follows\nv3\nv1 v2\n+ v1 v2\nv3\n7→\nwhich leaves all other links the same and which replaces the vertices/formulas of P as shown in Figure 7. The only slight complication is for the input formulas (lexical our auxiliary). Proof structures are defined as ways of connecting formulas, but for formulating correctness we need to know about the strings denoted by these formulas, for example, about their position relative to other formulas, separator symbols or the left/rightmost position. Another way of seeing this is that we need to replace sorted variables α (such as those assigned to hypotheses) by variables p0 + 1+ . . .+ 1+ pn, with each pi of sort 0 (such a strategy is already implicitly used for the natural deduction rules for /I, \\I, •E, ↑k I, ↓k I and ⊙kE, that is the natural deduction rules corresponding to the par links). As shown in Figure 7, auxiliary inputs separate the path leaving the par link by adding n new subpaths (this appears somewhat odd, but is required for the correct behaviour of the contractions when sorts are greater than 0, as we will see below). Because of the sorts of the formulas, the par links for ↓k and ⊙k necessarily involve at least one such split, though the other par links need not."
    }, {
      "heading" : "3.4 Contractions",
      "text" : "Structural contractions Figure 8 shows the structural contractions. The “+” contraction composes two combs, combining the premisses by a simple left-to-right\ntraversal. It is worth mentioning some immediate corollaries of this contraction here: first, we simply eliminate trivial combs (containing a single premiss and a single conclusion, that is, when β contains only a single premiss) when their conclusion is the premiss of another comb, and, second, the structural contractions contract tensor trees to unique combs (this is no longer guaranteed once we add the synthetic connectives, as discussed in Section 4).\nThe wrap operation “×k” reflects the wrap operation on strings on the level of abstract proof structures, it inserts β at the separator indicated by k: if k is “>”, the α1 must be of sort 0 (we replace the first separator by β) and if k is “<” α2 must be of sort 0 (we replace the last separator by β).\nNote that α1, α2 and β are allowed to have zero premisses.\nLogical contractions The logical contractions ensure the logical symmetry of the connectives in the calculus. Each par rule has its own contraction. The contraction for \\, shown below, essentially checks whether the string term of the premiss is equivalent to p0 + 1+ . . .+ 1+ pn + β and withdraws the hypothesis p0 + 1 + . . . + 1 + pn (where n is the sort of the withdrawn formula in the corresponding \\I rule) to reduce to β (the / contraction is left-right symmetric).\n... ... β\n\\\nv\nβ ...\n[\\] →\nv\nγ1 γ2 ... .... . . . . .\n•\nv1\nγ1 γ2 ... ...\n[•] →\nv2 v2\nv1\nThe contraction for ↑k essentially checks that its auxiliary input is an infix of the appropriate sort.\nα1 ...\n...\nα2 ...\n↑k\nv\nα1 ...\n1 α2 ...\n[↑k] →\nv\nDepending on k, there are restrictions of the sorts: for “>”, α1 must be of sort 0 (that is, all premisses of the comb to the left β are of sort 0), for “<”, α2 must be of sort 0 (that is, all premisses of the comb to the right β are of sort 0), for k = n, α1 is a prefix of sort n− 1 (that is, the sorts of the premisses of the comb to the left β sum to n− 1).\n... ...... β\n↓k\nv\nβ ...\n[↓k] →\nv\nIf k is “>”, the premisses to the left of β are of sort 0. If k is “<”, the premisses to the right of β are of sort 0. If k = n, the premisses to the left of β are of sort n − 1. This contraction looks odd until we realize that we are dealing with a circumfix operation and that, as a consequence the subformula A of a formula A ↓k B denotes a discontinuous circumfix with corresponding string α1 + 1+ α2 (look back to the introduction rule for ↓k on the top right of Figure 2 for comparison).\nThe contraction for ⊙k generalizes the contraction for •. Whereas the contraction for A • B verifies the strings of the subformulas A and B are adjacent, the contraction for A⊙k B verifies whether the string α1+1+α2 of A is circumfixed around the string β of B. The sorts of α1, α2 and β depend on k and on the sorts of A and B, exactly as for the other rules (in the rule below, the labels α1, α2 and β represent sequences of vertices which are premisses of the comb and conclusions of the ⊙k rule).\n... ... ... ... ...\nγ1 γ2α1 β α2\n⊙k\nv1\nγ1 γ2 ... ...\n[⊙k] →\nv2\nv1\nv2\nAs an example of how we can use the contraction criterion to verify whether a proof structure is a proof net, the abstract proof structure of Figure 6 can be contracted first by using a “+” and a “×>” contraction to produce the abstract proof structure shown on the left of Figure 9, then by performing the “↑>” and “×>” contractions as indicated, giving a proof of “Mary rang everyone up”.\nBrief remarks on complexity It is easy to see the given contraction calculus is confluent and that each of the contraction steps reduces the total number of links in the structure. Therefore, even a naive implementation of this contraction calculus checks whether or not a given abstract proof structure with n links contracts to a comb in O(n3) steps, simply by repeatedly traversing the links in the graph to find contractible configurations and contracting them once they are found (we can likely improve upon this worst case, but I will leave this to further research).\nIn particular, this shows NP-completeness of the Displacement calculus. NPhardness follows from NP-completeness of the Lambek calculus (Pentus 2006) and we can show it is in NP since we can verify in polynomial time whether or not a candidate proof (that is, a proof structure) in the Displacement calculus is a proof (that is, a proof net)."
    }, {
      "heading" : "3.5 Correctness of the calculus",
      "text" : "We show that the two definitions of proof net, contractibility and corresponding to a natural deduction proof coincide, thereby establishing that the contraction criterion is correct.\nLemma 1. Let δ be a Displacement calculus natural deduction proof of α1 : A1, . . . , an : An ⊢ γ : C. There is a proof net with the same hypotheses whose abstract proof structure contracts to a γ : C.\nProof This is a simple induction on the length of the proof. Axioms α : A ⊢ α : A correspond directly to proof nets with the required combs. Otherwise, we proceed by case analysis on the last rule of the proof. Each logical rule correspond to adding a link to the proof net(s) given by induction hypothesis and a contraction to the sequence of contractions for the abstract proof structure. We show only the case for ↓>. In this case, the last rule looks as follows.\n[a+1+α : A]i .... δ\na+γ+α : C\nγ : A ↓> C ↓> Ii\nInduction hypothesis gives use a proof net of Γ, a+1+α : A ⊢ a+γ+α : C. That is we are in the situation shown below, with the proof structure shown below on the right, the corresponding abstract proof structure in the middle, for which we are given a sequence of reductions ρ to a comb a+γ+α : C. We have simply spelled out the definition of proof net of Γ, a+1+α : A ⊢ a+γ+α : C.\nAΓ\nC\nC\na 1 ... α\nC\na ... ... γ αρ ❀ 7→\nAdding the par link for ↓> to the above proof net produces to following proof structure, which contracts using the same sequence of contractions ρ as follows.\nAΓ\nC\n↓>\nC ↓> A\na 1 ... α\n↓>\nC ↓> A\na ... ... γ α\n↓>\nC ↓> A\nρ ❀ 7→\nSimply performing the contraction for ↓> to the final abstract proof structure produces a comb of γ : C ↓> A and hence a proof net of Γ ⊢ γ : C ↓> A as required. ⊓⊔\nLemma 2. Let Π be a proof net of α1 : A1, . . . , an : An ⊢ γ : C, that is a proof net with hypotheses α1 : A1, . . . , an : An and conclusion C and an abstract proof structure contracting to γ using contractions ρ. There is a natural deduction proof of α1 : A1, . . . , an : An ⊢ γ : C.\nProof We proceed by induction on the number of logical contractions l in the sequence ρ (this number is equal to the number of par links in the structure).\nIf there are no logical contractions (l = 0), then there are only structural contractions and our proof net contains only tensor links. We proceed by induction on the number t of tensor links. If there are no tensor links (t = 0), we have an axiom and its abstract proof structure is a comb by definition.\nA A\nα\n7→\nThis directly gives us the natural deduction proof α : A ⊢ α : A.\nIf there are tensor links (t > 0), then either one of the hypotheses or the conclusion of the proof structure must be the main formula of its link (this is easy to see since if none of the leaves is the main formula of its link, then the proof structure contains only introduction rules for • and ⊙k and therefore the conclusion is the main formula of its link). Suppose a proof net has a leaf which is the main formula of its link and suppose this formula is A ↓> C (the cases of other formulas being main formulas, and of a conclusion of the proof net being the main formula are similar). Then, since all tensor trees contract to combs, we can apply the induction hypothesis to the two structures obtained by removing the tensor link and obtain proofs π1 of Γ ⊢ a + 1 + α : A and π2 of ∆, a+ γ+α : C ⊢ δ : D (technically, we have a proof with hypothesis γ′ : C and use substitution of the proof with conclusion a + γ + α : C shown below). We can combine these proofs as follows.\nΓ.... π1\na+ 1+ α : A γ : A ↓> C\na+ γ + α : C ↓> E ∆.... π2\nδ : D\nIf the sequence ρ has logical contractions (l > 0), we look at the last such contraction and proceed by case analysis. If the last contraction is the ↓> contraction, our proof net and contraction sequence look as follows.\nAΓ\nC\n↓>\nC ↓> A ∆\nD\na 1 ... α\n↓>\nD\na ... ... γ α\n↓>\nD\nρ ❀ 7→ [↓>]→\nD\n...\nγ\nThe initial proof structure is shown above of the left and its corresponding abstract proof structure to its immediate right (note that vertex A has been replaced by a+1+α, since it is an auxiliary input, corresponding to a withdrawn hypothesis in the natural deduction proof). The reduction sequence is of the form ρ, followed by the ↓> contraction, possibly followed by a number of structural contractions (not displayed in the figure above).\nWhen we remove the par link from the figure above, we are in the following situation. All contractions from ρ are either fully in the abstract proof structure shown below at the top of the picture or fully in the abstract proof structure shown below at the bottom of the picture, so ρ splits naturally in ρ1 and ρ2.\nAΓ\nC\nC ↓> A ∆\nD\nC\na 1 ... α\nD\nC\na ... ... γ α\nD\nρ1 ❀\nρ2 ❀ 7→\n7→\n... γ ... γ\nWe need to show that Γ,∆ ⊢ δ : D (where δ : D is the comb). Since we have two proof nets with strictly shorter sequences of contractions, we can apply the induction hypothesis for proofs π1 of a+1+α : A,Γ ⊢ a+γ+α : C and π2 of γ : C ↓> A,∆ ⊢ δ : D. We can combine these two proofs into a proof of Γ,∆ ⊢ δ : D as follows.\n[a+1+α : A]i Γ.... π1 a+γ+α : C\nγ : C ↓> A ↓> Ii\n∆ .... π2\nδ : D\nThe other cases are similar and easily verified. ⊓⊔\nTheorem 1. A proof structure is a proof net iff its abstract proof structure contracts to a comb.\nProof Immediate from Lemma 1 and Lemma 2. ⊓⊔"
    }, {
      "heading" : "4 Extension to Other Connectives",
      "text" : "One of the benefits of the current calculus is that it extends easily to other connectives, such as the unary/bracket connectives of Morrill (2011, Chapter 5) (although incorporating the treatment of parasitic gapping of Section 5.5 would require a considerable complication of the proof theory).\nThe synthetic connectives of Morrill et al. (2011) require us to extend our methodology somewhat: as currently formulated the proof net calculus produces a single comb for each proof net. When adding the synthetic connectives, we can introduce a separation marker in a way which is only partially specified by the premiss of the rule. For example, the denotation of (leftmost) split Ǎ, shown below, is the set of strings obtained by inserting a separator symbol at any place before other separator symbols (if any), and therefore the introduction rule for this connective doesn’t produce a unique string term.\n| Ǎ| =def {a+ 1+ α | a+ α ∈ |A|}(13)\n| Â| =def {a+ α | a+ 1+ α ∈ |A|}(14)\nThis moves us to a system where a tensor tree contracts to a set of combs (or, alternatively, a partially specified comb). Apart from this, it is not hard to add links and contractions for the synthetic connectives. For example, the contraction for ˇ can be obtained from the contraction for ↑k by removing the links to the auxiliary hypothesis: instead of replacing the auxiliary hypothesis by 1 (which defines the position of the insertion point uniquely), there will be multiple, nonconfluent ways to matching the contraction and to insert the separator symbol. For lack of space, we will not develop these ideas further here."
    }, {
      "heading" : "5 Conclusion",
      "text" : "We have presented a proof net calculus for the Displacement calculus and shown its correctness. This is the first proof net calculus which models the Displacement calculus directly and not by some sort of translation into another formalism. The proof net calculus opens up new possibilities for parsing and proof search with the Displacement calculus."
    } ],
    "references" : [ {
      "title" : "Categories and Types",
      "author" : [ "C. Casadio", "B. Coecke", "M. Moortgat", "P. Scott" ],
      "venue" : "eds",
      "citeRegEx" : "Casadio et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Casadio et al\\.",
      "year" : 2014
    }, {
      "title" : "Filtering axiom links for proof nets",
      "author" : [ "R. Springer. Moot" ],
      "venue" : null,
      "citeRegEx" : "Moot,? \\Q2007\\E",
      "shortCiteRegEx" : "Moot",
      "year" : 2007
    }, {
      "title" : "Proof nets for the multimodal Lambek calculus",
      "author" : [ "R. Moot", "Q. Puite" ],
      "venue" : "Studia Logica",
      "citeRegEx" : "Moot and Puite,? \\Q2002\\E",
      "shortCiteRegEx" : "Moot and Puite",
      "year" : 2002
    }, {
      "title" : "Categorial Grammar: Logical Syntax, Semantics, and Processing",
      "author" : [ "G. Morrill" ],
      "venue" : null,
      "citeRegEx" : "Morrill,? \\Q2011\\E",
      "shortCiteRegEx" : "Morrill",
      "year" : 2011
    }, {
      "title" : "Proof nets for basic discontinuous Lambek calculus",
      "author" : [ "G. Morrill", "M. Fadda" ],
      "venue" : "Journal of Logic and Computation",
      "citeRegEx" : "Morrill and Fadda,? \\Q2008\\E",
      "shortCiteRegEx" : "Morrill and Fadda",
      "year" : 2008
    }, {
      "title" : "The Displacement calculus",
      "author" : [ "G. Morrill", "O. Valent́ın", "M. Fadda" ],
      "venue" : "Journal of Logic, Language and Information",
      "citeRegEx" : "Morrill et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Morrill et al\\.",
      "year" : 2011
    }, {
      "title" : "Lambek calculus is NP-complete",
      "author" : [ "M. Pentus" ],
      "venue" : "Theoretical Computer Science",
      "citeRegEx" : "Pentus,? \\Q2006\\E",
      "shortCiteRegEx" : "Pentus",
      "year" : 2006
    }, {
      "title" : "The hidden structural rules of the discontinuous Lambek calculus",
      "author" : [ "O. Valent́ın" ],
      "venue" : null,
      "citeRegEx" : "Valent́ın,? \\Q2014\\E",
      "shortCiteRegEx" : "Valent́ın",
      "year" : 2014
    } ],
    "referenceMentions" : [ {
      "referenceID" : 2,
      "context" : "The Displacement calculus was introduced by Morrill, Valent́ın & Fadda (2011) as an extension of the Lambek calculus with discontinuous operators.",
      "startOffset" : 44,
      "endOffset" : 78
    }, {
      "referenceID" : 2,
      "context" : "The Displacement calculus was introduced by Morrill, Valent́ın & Fadda (2011) as an extension of the Lambek calculus with discontinuous operators. These discontinuous connectives allow the Displacement calculus to solve a large number of problems with the Lambek calculus. Examples of the phenomena treated by Morrill et al. (2011) include discontinuous idioms (such as “ring up” and “give the cold shoulder”), quantifier scope, extraction (including pied-piping) and gapping.",
      "startOffset" : 44,
      "endOffset" : 332
    }, {
      "referenceID" : 2,
      "context" : "The Displacement calculus was introduced by Morrill, Valent́ın & Fadda (2011) as an extension of the Lambek calculus with discontinuous operators. These discontinuous connectives allow the Displacement calculus to solve a large number of problems with the Lambek calculus. Examples of the phenomena treated by Morrill et al. (2011) include discontinuous idioms (such as “ring up” and “give the cold shoulder”), quantifier scope, extraction (including pied-piping) and gapping. This paper extends earlier work by Morrill & Fadda (2008), Moot (2014) and Valent́ın (2014), combining the strengths of these different approaches while at the same time diminishing the inconveniences.",
      "startOffset" : 44,
      "endOffset" : 535
    }, {
      "referenceID" : 1,
      "context" : "This paper extends earlier work by Morrill & Fadda (2008), Moot (2014) and Valent́ın (2014), combining the strengths of these different approaches while at the same time diminishing the inconveniences.",
      "startOffset" : 59,
      "endOffset" : 71
    }, {
      "referenceID" : 1,
      "context" : "This paper extends earlier work by Morrill & Fadda (2008), Moot (2014) and Valent́ın (2014), combining the strengths of these different approaches while at the same time diminishing the inconveniences.",
      "startOffset" : 59,
      "endOffset" : 92
    }, {
      "referenceID" : 5,
      "context" : "There is some minor variation in the definition of this operator: sometimes (Morrill et al. 2011) k is either the constant “>” or the constant “<” (in which case α is of sort greater than zero and the denotation of the term replaces respectively the first and the last occurrences of 1 in α by β.",
      "startOffset" : 76,
      "endOffset" : 97
    }, {
      "referenceID" : 3,
      "context" : "Sometimes (Morrill 2011) k is an integer (between 1 and the sort of α) and α×k β replaces the kth separator",
      "startOffset" : 10,
      "endOffset" : 24
    }, {
      "referenceID" : 3,
      "context" : "2 The Displacement calculus The presentation of the Displacement calculus closely follows the natural deduction calculus used by Morrill et al. (2011). String terms are built over a countably infinite alphabet of variables (for readability, we will often used natural language words as if they were variables), a special separator symbol “1”, where string concatenation is denoted by “+” (a binary, associative infix operator on string terms).",
      "startOffset" : 129,
      "endOffset" : 151
    }, {
      "referenceID" : 3,
      "context" : "As an example, following Morrill et al. (2011), we can assign a discontinuous lexical entry like “give the cold shoulder” the lexical formula (np \\ s) ↑> np and string term gave+ 1+ the+ cold+ shoulder (of the required sort 1).",
      "startOffset" : 25,
      "endOffset" : 47
    }, {
      "referenceID" : 1,
      "context" : "However, this system uses a rather large set of structural rules and these rules are defined modulo equivalence classes, which makes their use in existing multimodal theorem provers (Moot 2007) difficult.",
      "startOffset" : 182,
      "endOffset" : 193
    }, {
      "referenceID" : 2,
      "context" : "One of the open questions of Morrill (2011) is whether the Displacement calculus has a proof net calculus.",
      "startOffset" : 29,
      "endOffset" : 44
    }, {
      "referenceID" : 2,
      "context" : "One of the open questions of Morrill (2011) is whether the Displacement calculus has a proof net calculus. Valent́ın (2014) provides a translation of the Displacement calculus to a multimodal system.",
      "startOffset" : 29,
      "endOffset" : 124
    }, {
      "referenceID" : 1,
      "context" : "However, this system uses a rather large set of structural rules and these rules are defined modulo equivalence classes, which makes their use in existing multimodal theorem provers (Moot 2007) difficult. In this section, I will extend the proof net calculus for the Lambek calculus of Moot & Puite (2002) to the Displacement calculus.",
      "startOffset" : 183,
      "endOffset" : 306
    }, {
      "referenceID" : 3,
      "context" : "Figure 5 gives an unfolding for the sentence “Mary rang everyone up”, a sentence with the discontinuous idiom “rang up” and a non-peripheral quantifier “everyone”, following lexical entries of Morrill et al. (2011). Figure 6 shows (on the left of the figure) one of the possibilities for connecting the atomic formulas.",
      "startOffset" : 193,
      "endOffset" : 215
    }, {
      "referenceID" : 1,
      "context" : "contraction criterion, generalizing the proof nets of the Lambek calculus from Moot & Puite (2002).",
      "startOffset" : 79,
      "endOffset" : 99
    }, {
      "referenceID" : 1,
      "context" : "Combs play the same role as tensor trees do for Moot & Puite (2002): they allow us to go back a forth between sequents Γ ⊢ C and combs with premisses Γ and conclusion C.",
      "startOffset" : 48,
      "endOffset" : 68
    }, {
      "referenceID" : 6,
      "context" : "NPhardness follows from NP-completeness of the Lambek calculus (Pentus 2006) and we can show it is in NP since we can verify in polynomial time whether or not a candidate proof (that is, a proof structure) in the Displacement calculus is a proof (that is, a proof net).",
      "startOffset" : 63,
      "endOffset" : 76
    }, {
      "referenceID" : 3,
      "context" : "4 Extension to Other Connectives One of the benefits of the current calculus is that it extends easily to other connectives, such as the unary/bracket connectives of Morrill (2011, Chapter 5) (although incorporating the treatment of parasitic gapping of Section 5.5 would require a considerable complication of the proof theory). The synthetic connectives of Morrill et al. (2011) require us to extend our methodology somewhat: as currently formulated the proof net calculus produces a single comb for each proof net.",
      "startOffset" : 166,
      "endOffset" : 381
    } ],
    "year" : 2016,
    "abstractText" : "The Displacement calculus was introduced by Morrill, Valent́ın & Fadda (2011) as an extension of the Lambek calculus with discontinuous operators. These discontinuous connectives allow the Displacement calculus to solve a large number of problems with the Lambek calculus. Examples of the phenomena treated by Morrill et al. (2011) include discontinuous idioms (such as “ring up” and “give the cold shoulder”), quantifier scope, extraction (including pied-piping) and gapping. This paper extends earlier work by Morrill & Fadda (2008), Moot (2014) and Valent́ın (2014), combining the strengths of these different approaches while at the same time diminishing the inconveniences. Notably, it is the first proof net calculus which does not operate by translation into some other logic, but provides proof nets for the Displacement calculus directly.",
    "creator" : "LaTeX with hyperref package"
  }
}