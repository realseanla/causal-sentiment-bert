{
  "name" : "1611.01802.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Self-Wiring Question Answering Systems",
    "authors" : [ "Ricardo Usbeck", "Jonathan Huthmann", "Nico Duldhardt" ],
    "emails" : [ "usbeck@informatik.uni-leipzig.de", "ngonga@informatik.uni-leipzig.de" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Keywords: Question Answering, Content Representation and Processing, System composition, Work in Progress"
    }, {
      "heading" : "1 Introduction",
      "text" : "More than 20 QA approaches have been solely proposed to the QALD challenge series [11] over the past 6 years. Most approaches rely on basic modules such as Named Entity Recognizers and linkers, POS-Taggers, SPARQL-executers or graph-traversal modules [5]. However, most research or industry teams need to start from scratch with implementing a QA system due to (1) a missing awareness of existing modules or (2) existing modules being hard to reuse. Figure 1 illustrates the problem tackled by this work. It shows dependencies between the components of 6 QA systems [8, 10, 12, 6, 2]. These dependencies could be used to create and evaluate 20 different QA systems, of which some could potentially perform better than the 6 original systems.\nWe propose a novel data-driven approach that enables the automatic generation of QA systems. Our approach assumes the existence of a central registry of QA-related modules. Each module in the library is either (1) available as a web-based service which either outputs some form of RDF or (2) such that its output can be mapped via our registry to a well-known RDF vocabulary. Given a set of modules in the registry, we try to find links between modules using\nar X\niv :1\n61 1.\n01 80\n2v 2\n[ cs\n.A I]\n8 N\nov 2\n01 6\ninference over input and output behaviour of modules. Afterwards, we use an approach based on refinement operators to wire several modules together to a QA system. Our contributions are as follows:\n1. We present the first approach for the automatic construction (i.e., wiring) of QA systems from a format-agnostic webservice registry. This registry allows to register already existing modules independent of their input and output format as long as it can be mapped to RDF. 2. Our approach is self-wiring, i.e., the sequence of service modules a question passes is determined by an automatic discovery algorithm based on the required information of the next module. The required information are based on the input and output behaviour of the registered modules which is already in RDF or was mapped to RDF. Possible links are found using OWL class expressions. 3. We analyse existing systems to find out which modules can be reused and started mapping them into our registry. Furthermore, we are working on a first prototype of the system in our project repository.\nThe results of this work will enable developers and researchers to focus on the implementation or improvement of single sub-task modules instead of whole systems. This way, our approach enables the data-driven vocabularyindependent creation of systems tailored to perform well in the use case for\nwhich they are foreseen. More information can be found at our repository http: //OmittedForReview."
    }, {
      "heading" : "2 Related Work",
      "text" : "With the growing amount of published QA systems also the search for an universal framework for reusing components began.\nOne of the earliest works is openQA [6] which is a modular open-source framework for implementing QA systems. openQA’s main work-flow consists of four stages (interpretation, retrieval, synthesis and rendering) as well as adjacent modules (context and service) written as rigid Java interfaces. The authors claim that openQA enables a conciliation of different architectures and methods.\nQALL-ME [3] is another open source approach using an architecture skeleton for multilingual QA, a domain- as well as a domain-independent ontology. The underling SOA architecture features several web service which are composed to a QA system in a predetermined way.\nThe open source system OAQA [15] aims at advancing the engineering of QA systems by following architectural commitments to components for interchangeability. Using these shared interchangeable components OAQA is able to search the most efficient combination of modules for a task at hand.\nQANUS [7] is a not disclosed QA framework for the rapid development of novel QA systems as well as a baseline system for benchmarking. It was designed to have interchangeable components in a pre-seeded system and comes with a set of common modules such as named entity recognition or part-of-speech tagging.\nBoth et al. [2] described a first semantic approach towards coupling components together via RDF to tailor search pipelines using semantic, geospatial and full text search modules. Here, modules add semantic information to a query until the search intend can be solved.\nQANARY [9] is the first real implementation of a semantic approach towards generating QA systems from components. Using the provided QA ontology from QANARY, modules can be exchanged, e.g. various versions of NER tools, to benchmark various pipelines and choose the best performing one.\nThe feasibility of our approach is supported by works from other domains. For example, Verborgh et al. [14] developed RestDesc which allows for the automatic composition of HyperMedia APIs driven by RDF and Reasoning over N3. However, we are not aware of any QA web-modules which are either HyperMedia APIs or are described in a way directly usable in the proposed framework."
    }, {
      "heading" : "3 Approach",
      "text" : ""
    }, {
      "heading" : "3.1 Preliminaries",
      "text" : "In the following, we describe our self-wiring QA architecture formally. We call K = {(s, p, o)|s ∈ (U ∪ B), p ∈ U, o ∈ (U ∪ B ∪ L)} an RDF knowledge base when U is the set of all Internationalized Resource Identifiers (IRIs), B is the\nset of all blank nodes and L is the set of all literals following the RDF algebra.1 Our self-wiring architecture consists mainly of two parts: messages µ ∈ M and modules φ ∈ Φ.\nWe call any input or output of a module a message. Each message µ contains RDF describing information about the input question and must abide by an OWL class expression C from a knowledge base K:\nµ = (C), C ∈ K,µ ∈M (1)\nMessages are handled by modules φ ∈ Φ:\nφ = (input, µ, output,url,map), (2)\nwhere input is an OWL class expression2 used for checking the validity of action on the message µ, see Section 3.2. map is a mapping of URL parameters to literal values of the RDF-based message µ. url is the URL of the respective webservice and\noutput = µ+ δ, δ ∈ K. (3)\nA system Π is defined as Π = I(2Φ). (4)\nThat is, each pipeline consists of an instantiation I of a multi-set of modules."
    }, {
      "heading" : "3.2 System Construction",
      "text" : "By using the formal definition, each generated pipeline starts with a module φstart with\nφstart = (q, ∅, µ0,URIi,mapi), (5)\nwhere µ0 is an initial message, i.e., a question. Formally not having an input means that one can be connected with everything given that ∅ v C, where C is any OWL class. Thus let q be our formal input for start modules.\nTo find out whether the output of module φi is usable for module φj our system evaluates the OWL class expressions that describe the input and output of the modules φi and φj . It basically checks where whether output(φi) v input(φj), i.e., whether φj would be able to deal with the output of φi. Given this simple operator that allows connecting two modules, we can now define a refinement operator which aims to find complete pipelines, i.e., sequences of modules with the question type as input and the answer type as output. The idea behind the refinement is to start with a refinement directed acyclic graph (DAG) which contains only input modules (i.e., modules with input type = question). In each iteration, the refinement operator expands the leaf in the DAG that (1) does not yet stands for a sequence of modules with output type\n1 http://www.w3.org/TR/rdf11-concepts/ 2 http://www.w3.org/TR/owl2-syntax/#Introduction\n= answer and (2) achieves the highest score, where the score function combine the distance between the type of current output and answer in the ontology to drive the platform. Note that this approach is complete, ergo, it is ensured to find all possible pipelines.\nOutput modules are do not have any further output and contain an RDF resultset in µω. Again, formally not having an output means that one can be connected with everything given that ∅ v C and thus let a be our final output.\nφend = (input, a, µω,URIj ,mapj)) (6)"
    }, {
      "heading" : "3.3 Supported Vocabularies",
      "text" : "Currently, our extensible, self-wiring system uses 5 ontologies mainly used for Natural Language Programming. First, there is NIF, the Natural Language Programming Interchange Language which is commonly by Named Entity Recognition and Linking tools [13] and second Open Annotation, a W3C initiative to annotate any web content3. Furthermore, we are able to use the QANARY ontology which is a relatively new vocabulary designed for QA. Finally, we will make use of Framenet [1] due to its capability to annotate relations as well as the Earmark ontology4 used in the state-of-the-art machine reader FRED [4]."
    }, {
      "heading" : "4 Conclusion",
      "text" : "We introduced a work-in-progress system which able to self-wire new question answering systems from a registry of modules. Our approach is able to detect all possible QA pipelines and thus enable researchers and developers to focus on particular modules for improvement or enhancement.\nCurrently, many modules which already use an ontology such as NIF or Open Annotation which could be wired according to our analysis cannot be linked because the underlying ontologies are lacking matching OWL expressions. Thus, our next step is to run a linking framework over these ontologies to be able to link more modules.\nIn the future, our approach will leverageprovenance-based pipeline construction. That is, service modules are adding information to messages which leaves provenance data on the processed message. Thus, users can prevent or force the creation of a pipeline using a particular processing step. Furthermore, it will be self-improving, i.e., slow services with high response time while multi-user requests can be identified while composition and thus benchmarking modules will be able to start particular modules more often to improve response time and alert developers of these cases. Thus, the generated pipelines can be tuned towards an user-given benchmark dataset.\nWith this work, we hope to get feedback and establish an active community around an open registry for QA modules.\n3 https://www.w3.org/TR/annotation-vocab/ 4 http://www.essepuntato.it/lode/imported/http://www.essepuntato.it/2008/\n12/earmark"
    } ],
    "references" : [ {
      "title" : "FN goes NIF: Integrating FrameNet in the NLP Interchange Format",
      "author" : [ "V. Alexiev", "G. Casamayor" ],
      "venue" : "In Linked Data in Linguistics",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2016
    }, {
      "title" : "A service-oriented search framework for full text, geospatial and semantic search",
      "author" : [ "A. Both", "A.-C.N. Ngonga", "R. Usbeck", "D. Lukovnikov", "C. Lemke", "M. Speicher" ],
      "venue" : "SEMANTiCS,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2014
    }, {
      "title" : "The qall-me framework: A specifiable-domain multilingual question answering architecture",
      "author" : [ "O. Ferrandez", "C. Spurk", "M. Kouylekov", "I. Dornescu", "S. Ferrandez", "M. Negri", "R. Izquierdo", "D. Tomas", "C. Orasan", "G. Neumann" ],
      "venue" : "Journal of Web Semantics,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2011
    }, {
      "title" : "Mongiov̀ı. Semantic Web Machine Reading with FRED",
      "author" : [ "A. Gangemi", "V. Presutti", "D. Reforgiato Recupero", "A.G. Nuzzolese", "F. Draicchio" ],
      "venue" : null,
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2016
    }, {
      "title" : "Survey on challenges of question answering in the semantic web",
      "author" : [ "K. Höffner", "S. Walter", "E. Marx", "J. Lehmann", "A. Ngonga", "R. Usbeck" ],
      "venue" : "Semantic Web Journal,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2016
    }, {
      "title" : "Towards an open question answering architecture",
      "author" : [ "E. Marx", "R. Usbeck", "A.-C.N. Ngonga", "K. Höffner", "J. Lehmann", "S. Auer" ],
      "venue" : "SEMANTiCS,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2014
    }, {
      "title" : "Qanus: An open-source question-answering platform",
      "author" : [ "J.-P. Ng", "M.-Y. Kan" ],
      "venue" : "arXiv preprint arXiv:1501.00311,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2015
    }, {
      "title" : "Sina: Semantic interpretation of user queries for question answering on interlinked data",
      "author" : [ "S. Shekarpour", "E. Marx", "A.-C.N. Ngomo", "S. Auer" ],
      "venue" : "Journal of Web Semantics,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2014
    }, {
      "title" : "Qanary–the fast track to creating a question answering system with linked data technology",
      "author" : [ "K. Singh", "A. Both", "D. Diefenbach", "S. Shekarpour", "D. Cherix", "C. Lange" ],
      "venue" : "In ESWC,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2016
    }, {
      "title" : "Template-based question answering over RDF data",
      "author" : [ "C. Unger", "L. Bühmann", "J. Lehmann", "A.N. Ngomo", "D. Gerber", "P. Cimiano" ],
      "venue" : "In 21st WWW conference,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2012
    }, {
      "title" : "6th open challenge on question answering over linked data (qald-6)",
      "author" : [ "C. Unger", "A. Ngonga", "E. Cabrio" ],
      "venue" : "In The Semantic Web: ESWC 2016 Challenges.,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2016
    }, {
      "title" : "HAWK – hybrid question answering using linked data",
      "author" : [ "R. Usbeck", "A.-C. Ngomo", "L. Bühmann", "C. Unger" ],
      "venue" : "In ESWC,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2015
    }, {
      "title" : "GERBIL – general entity annotation benchmark framework",
      "author" : [ "R. Usbeck", "M. Röder", "A.-C. Ngonga Ngomo", "C. Baron", "A. Both", "M. Brümmer", "D. Ceccarelli", "M. Cornolti", "D. Cherix", "B. Eickmann", "P. Ferragina", "C. Lemke", "A. Moro", "R. Navigli", "F. Piccinno", "G. Rizzo", "H. Sack", "R. Speck", "R. Troncy", "J. Waitelonis", "L. Wesemann" ],
      "venue" : "WWW conference,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2015
    }, {
      "title" : "The pragmatic proof: Hypermedia API composition and execution",
      "author" : [ "R. Verborgh", "D. Arndt", "S.V. Hoecke", "J.D. Roo", "G. Mels", "T. Steiner", "J. Gabarró" ],
      "venue" : "CoRR, abs/1512.07780,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2015
    }, {
      "title" : "Building optimal information systems automatically: Configuration space exploration for biomedical information systems",
      "author" : [ "Z. Yang", "E. Garduno", "Y. Fang", "A. Maiberg", "C. McCormack", "E. Nyberg" ],
      "venue" : "In 22nd ACM CIKM,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2013
    } ],
    "referenceMentions" : [ {
      "referenceID" : 10,
      "context" : "More than 20 QA approaches have been solely proposed to the QALD challenge series [11] over the past 6 years.",
      "startOffset" : 82,
      "endOffset" : 86
    }, {
      "referenceID" : 4,
      "context" : "Most approaches rely on basic modules such as Named Entity Recognizers and linkers, POS-Taggers, SPARQL-executers or graph-traversal modules [5].",
      "startOffset" : 141,
      "endOffset" : 144
    }, {
      "referenceID" : 7,
      "context" : "It shows dependencies between the components of 6 QA systems [8, 10, 12, 6, 2].",
      "startOffset" : 61,
      "endOffset" : 78
    }, {
      "referenceID" : 9,
      "context" : "It shows dependencies between the components of 6 QA systems [8, 10, 12, 6, 2].",
      "startOffset" : 61,
      "endOffset" : 78
    }, {
      "referenceID" : 11,
      "context" : "It shows dependencies between the components of 6 QA systems [8, 10, 12, 6, 2].",
      "startOffset" : 61,
      "endOffset" : 78
    }, {
      "referenceID" : 5,
      "context" : "It shows dependencies between the components of 6 QA systems [8, 10, 12, 6, 2].",
      "startOffset" : 61,
      "endOffset" : 78
    }, {
      "referenceID" : 1,
      "context" : "It shows dependencies between the components of 6 QA systems [8, 10, 12, 6, 2].",
      "startOffset" : 61,
      "endOffset" : 78
    }, {
      "referenceID" : 5,
      "context" : "One of the earliest works is openQA [6] which is a modular open-source framework for implementing QA systems.",
      "startOffset" : 36,
      "endOffset" : 39
    }, {
      "referenceID" : 2,
      "context" : "QALL-ME [3] is another open source approach using an architecture skeleton for multilingual QA, a domain- as well as a domain-independent ontology.",
      "startOffset" : 8,
      "endOffset" : 11
    }, {
      "referenceID" : 14,
      "context" : "The open source system OAQA [15] aims at advancing the engineering of QA systems by following architectural commitments to components for interchangeability.",
      "startOffset" : 28,
      "endOffset" : 32
    }, {
      "referenceID" : 6,
      "context" : "QANUS [7] is a not disclosed QA framework for the rapid development of novel QA systems as well as a baseline system for benchmarking.",
      "startOffset" : 6,
      "endOffset" : 9
    }, {
      "referenceID" : 1,
      "context" : "[2] described a first semantic approach towards coupling components together via RDF to tailor search pipelines using semantic, geospatial and full text search modules.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 8,
      "context" : "QANARY [9] is the first real implementation of a semantic approach towards generating QA systems from components.",
      "startOffset" : 7,
      "endOffset" : 10
    }, {
      "referenceID" : 13,
      "context" : "[14] developed RestDesc which allows for the automatic composition of HyperMedia APIs driven by RDF and Reasoning over N3.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 12,
      "context" : "First, there is NIF, the Natural Language Programming Interchange Language which is commonly by Named Entity Recognition and Linking tools [13] and second Open Annotation, a W3C initiative to annotate any web content.",
      "startOffset" : 139,
      "endOffset" : 143
    }, {
      "referenceID" : 0,
      "context" : "Finally, we will make use of Framenet [1] due to its capability to annotate relations as well as the Earmark ontology used in the state-of-the-art machine reader FRED [4].",
      "startOffset" : 38,
      "endOffset" : 41
    }, {
      "referenceID" : 3,
      "context" : "Finally, we will make use of Framenet [1] due to its capability to annotate relations as well as the Earmark ontology used in the state-of-the-art machine reader FRED [4].",
      "startOffset" : 167,
      "endOffset" : 170
    } ],
    "year" : 2016,
    "abstractText" : "Question answering (QA) has been the subject of a resurgence over the past years. The said resurgence has led to a multitude of question answering (QA) systems being developed both by companies and research facilities. While a few components of QA systems get reused across implementations, most systems do not leverage the full potential of component reuse. Hence, the development of QA systems is currently still a tedious and time-consuming process. We address the challenge of accelerating the creation of novel or tailored QA systems by presenting a concept for a self-wiring approach to composing QA systems. Our approach will allow the reuse of existing, web-based QA systems or modules while developing new QA platforms. To this end, it will rely on QA modules being described using the Web Ontology Language. Based on these descriptions, our approach will be able to automatically compose QA systems using a data-driven approach automatically.",
    "creator" : "TeX"
  }
}