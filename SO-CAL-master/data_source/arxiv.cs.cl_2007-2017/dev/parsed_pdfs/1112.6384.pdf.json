{
  "name" : "1112.6384.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Proof nets for the Lambek-Grishin calculus",
    "authors" : [ "Michael Moortgat", "Richard Moot" ],
    "emails" : [ "M.J.Moortgat@uu.nl,", "moot@labri.fr" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n11 2.\n63 84\nv1 [\ncs .C\nL ]\n2 9"
    }, {
      "heading" : "1 Background, motivation",
      "text" : "In his two seminal papers (Lambek 1958; Lambek 1961), Jim Lambek introduced the ‘parsing as deduction’ method in linguistics: the traditional parts of speech (noun, verb, adverb, determiner, etc) are replaced by logical formulas — types if one takes the computational view; the judgement whether an expression is wellformed is the outcome of a process of logical deduction, or, reading formulas as types, a computation in the type calculus.\nnp ⊗ (np\\s) ⊗ (((np\\s)\\(np\\s))/np) ⊗ (np/n) ⊗ n → s time flies like an arrow\n(1)\nWhat is the precise nature of grammatical composition, the ⊗ operation in the example above? The ’58 and ’61 papers present two views on this: in the ’58 paper, types are assigned to strings of words, in the ’61 paper, they are assigned to phrases, bracketed strings, with a grouping into constituents. The Syntactic Calculus, under the latter view, is extremely simple. The derivability relation between types is given by the preorder laws (2) and the residuation principles of (3).\nA → A ; from A → B and B → C infer A → C (2)\n⋆ Draft of a chapter in E. Grefenstette, C. Heunen, and M. Sadrzadeh (eds.) ‘Compositional methods in Physics and Linguistics’, OUP, to appear. We thank Arno Bastenhof for helpful comments on an earlier version.\n2 A → C/B iff A⊗B → C iff B → A\\C (3)\nTo obtain the ’58 view, one adds the non-logical axioms of (4), attributing associativity properties to the ⊗ operation.\n(A⊗B)⊗ C → A⊗ (B ⊗ C) ; A⊗ (B ⊗ C) → (A⊗B)⊗ C (4)\nThe Syntactic Calculus in its two incarnations — the basic system NL given by (2) and (3) and the associative variant L which adds the postulates of (4) — recognizes only context-free languages. It is well known that to capture the dependencies that occur in natural languages, one needs expressivity beyond context-free. Here are some characteristic patterns from formal language theory that can be seen as suitable idealizations of phenomena that occur in the wild.\ncopying: {w2 | w ∈ {a, b}+} counting dependencies: {anbncn | n > 0} crossed dependencies: {anbmcndm | n,m > 0}\n(5)\nIn the tradition of extended rewriting systems, there is a large group of grammar formalisms that handle these and related patterns gracefully: Tree Adjoining Grammars, Linear Indexed Grammars, Combinatory Categorial Grammars, Minimalist Grammars, Multiple Context Free Grammars, . . . (Kallmeyer 2010). Also in the Lambek tradition, extended type-logical systems have been proposed with expressive power beyond context-free: multimodal grammars (Morrill 1994; Moortgat 1996), discontinuous calculi (Morrill, Fadda, and Valentin 2007), etc. These extensions, as well as the original Lambek systems, respect an “intuitionistic” restriction: in a sequent presentation, derivability is seen as a relation between (a structured configuration of) hypotheses A1, . . . , An and a single conclusionB. In a paper antedating Linear Logic by a couple of years, Grishin (1983) proposes a generalization of the Lambek calculus which removes this intuitionistic restriction. Linguistic application of Grishin’s ideas is fairly recent. In the present paper, we study the system presented in (Moortgat 2009), which we’ll refer to as LG."
    }, {
      "heading" : "1.1 Dual residuation principles, linear distributivities",
      "text" : "In LG the inventory of type-forming operations is doubled: in addition to the familiar operators ⊗, \\, / (product, left and right division), we find a dual family ⊕,⊘,;: coproduct, right and left difference.\nA,B ::= p | atoms: s, np, . . . A⊗B | B\\A | A/B | product, left vs right division A⊕B | A⊘B | B ; A coproduct, right vs left difference\n(6)\nSome clarification about the notation: we follow (Lambek 1993) in writing ⊕ for the coproduct, which is a multiplicative operation, like ⊗. We read B\\A as ‘B under A’, A/B as ‘A over B’, B ; A as ‘B from A’ and A ⊘ B as ‘A less B’.\n3 For the difference operations, then, the quantity that is subtracted is under the circled (back)slash, just as we have the denominator under the (back)slash in the case of left and right division types. In a formulas-as-types spirit, we will feel free to refer to the division operations as implications, and to the difference operations as co-implications.\nDual residuation principles The most basic version of LG is the symmetric generalization of NL, which means that to (2) and (3) we add the dual residuation principles of (7).\nB ; C → A iff C → B ⊕A iff C ⊘A → B (7)\nTo get a feeling for the consequences of the preorder laws (2) and the (dual) residuation principles (3) and (7), here are some characteristic theorems and derived rules of inference. First, the compositions of the product and division operations, and of the co-product and difference operation give rise to the expanding and contracting patterns of (8). The rows here are related by a left-right symmetry; the columns by arrow reversal.\nA⊗ (A\\B) → B → A\\(A⊗B) (B/A)⊗A → B → (B ⊗A)/A (B ⊕A)⊘A → B → (B ⊘A)⊕A A ; (A⊕B) → B → A⊕ (A ; B) (8)\nSecondly, one can show that the type-forming operations have the monotonicity properties summarized in the following schema, where ↑ (↓) is an isotone (antitone) position:\n(↑ ⊗ ↑), (↑ / ↓), (↓ \\ ↑), (↑ ⊕ ↑), (↑ ⊘ ↓), (↓ ; ↑)\nIn other words, the following inference rules are valid.\nA′ → A B′ → B A′ ⊗B′ → A⊗B\nA → A′ B → B′ A⊕B → A′ ⊕B′ (9)\nA′ → A B → B′ A\\B → A′\\B′ A′ → A B → B′ A′ ⊘B′ → A⊘B A′ → A B → B′ B/A → B′/A′ A′ → A B → B′\nB′ ; A′ → B ; A (10)\nInteraction: distributivity principles As we saw above, one could extend the inferential capabilities of this minimal system by adding postulates of associativity and/or commutativity for ⊗ and ⊕. From a substructural perspective, each of these options destroys structure-sensitivity for a particular dimension of grammatical organization: word order in the case of commutativity, constituent structure in the case of associativity. In LG there is an alternative which leaves the sensitivity for linear order and phrasal structure intact: instead of considering structural options for the individual ⊗ and ⊕ families, one can consider\n4 interaction principles for the communication between them. We will consider the following group.\n(A ; B)⊗ C → A ; (B ⊗ C) C ⊗ (B ⊘A) → (C ⊗B)⊘A C ⊗ (A ; B) → A ; (C ⊗B) (B ⊘A)⊗ C → (B ⊗ C)⊘A\n(11)\nThese postulates have come to be called linear distributivity principles (e.g. (Cockett and Seely 1996)): linear, because they respect resources (no material gets copied). Moot (2007) models the adjunction operation of Tree Adjoining Grammars using the interaction principles of (11) and shows how through this modeling the mildly context-sensitive patterns of (5) can be obtained within LG."
    }, {
      "heading" : "1.2 Arrows: LG as a deductive system",
      "text" : "In his (Lambek 1988), Lambek studies the Syntactic Calculus from a categorical perspective. Types are seen as the objects of a category and one studies morphisms between these objects, arrows f : A −→ B. For each A, there is an identity arrow 1A. Then there are inference rules to produce new arrows from arrows already obtained. Among these is the composition g ◦ f , defined when dom(g) = cod(f). Composition is associative, i.e. one has the equation f ◦ (g ◦ h) = (f ◦ g) ◦ h. Also, f ◦ 1A = f = 1B ◦ f , where f : A −→ B.\n1A : A −→ A\nf : A −→ B g : B −→ C\ng ◦ f : A −→ C (12)\nIn this paper, we will not pursue the categorical interpretation of LG: our emphasis in the following sections is on the sequent calculus for this logic, the term language coding sequent proofs, and the correspondence between these proofs and proof nets. Our aim in this section is simply to have a handy language for naming proofs in the deductive presentation, and to use this in §2.1 to establish the equivalence between the deductive and the sequent presentations.\nTo obtain aLG, one adds to (12) further rules of inference for the residuation principles and their duals. (Omitting type subscripts ⊲A,B,Cf for legibility. . . )\nf : A⊗B −→ C\n⊲f : A −→ C/B\nf : A⊗ B −→ C ⊳f : B −→ A\\C (13)\ng : A −→ C/B\n⊲−1g : A⊗B −→ C\ng : B −→ A\\C\n⊳−1g : A⊗B −→ C (14)\nf : C −→ B ⊕A\n◭ f : B ; C −→ A\nf : C −→ B ⊕A\n◮ f : C ⊘A −→ B (15)\ng : B ; C −→ A\n◭−1 g : C −→ B ⊕A\ng : C ⊘A −→ B\n◮−1 g : C −→ B ⊕A (16)\n5 As remarked above, the Lambek-Grishin calculus exhibits two involutive symmetries, at the level of types and proofs: a left-right symmetry ·♮ and an arrow reversing symmetry ·† such that\nf ♮ : A♮ −→ B♮ iff f : A −→ B iff f † : B† −→ A† (17)\nwith, on the type level, the translation tables below (abbreviating a long list of defining equations (A⊗B)♮ . = B♮ ⊗A♮, (B ⊗A)♮ . = A♮ ⊗B♮, . . . )\nA⊗B A/B A⊕B A⊘B B ⊗A B\\A B ⊕A B ; A ♮\nA/B A⊗B B\\A\nB ; A B ⊕A A⊘B †\nand on the level of proofs (1A) ♮ = 1A♮ , (g ◦ f) ♮ = g♮ ◦ f ♮, (1A) † = 1A† , (g ◦ f)† = f † ◦ g†, and the list of defining equations (⊳f)♮ . = ⊲f ♮, (⊳f)† . =◮ f †, . . . corresponding to the translation tables above.\nThe distributivity principles, in aLG, take the form of extra axioms (primitive arrows). Below arrows d, b for the interaction between ; and ⊗. For the leftright symmetric pair d♮, q♮ we write b, p\ndA,B,C : (A ; B)⊗ C −→ A ; (B ⊗ C) qA,B,C : C ⊗ (A ; B) −→ A ; (C ⊗B)\n(18)\nTo establish the equivalence between aLG and the sequent calculus sLG, to be discussed in the next section, we will use the fact that the monotonicity rules are derived rules of inference of aLG. For example, f/g can be defined as in (19) below.\nf : A −→ A′ g : B −→ B′\nf/g : A/B′ −→ A′/B\nf/g . = (⊲(f ◦ (⊲−11A/B)))) ◦ (⊲ ⊳ −1 ((⊳ ⊲−1 1A/B′) ◦ g))\n(19)\nSimilarly, for the distributivity postulates, we will rely on a rule form, which for d would be\nB ⊗ C → A⊕D\nA ; B → D/C (20)\nThe inference rule (20) is derived as shown in (21).\ndA,B,C : (A ; B)⊗ C −→ A ; (B ⊗ C)\nf : B ⊗ C −→ A⊕D\n◭ f : A ; (B ⊗ C) −→ D\n(◭ f) ◦ dA,B,C : (A ; B)⊗ C −→ D\n⊲((◭ f) ◦ dA,B,C) : A ; B −→ D/C (21)"
    }, {
      "heading" : "2 Display sequent calculus and proof nets",
      "text" : "Is there a decision procedure to determine whether A → B holds? In the presence of expanding patterns as we saw them in (8), this is not immediately clear. For\n6 the language with /,⊗, \\, the key result of Lambek’s original papers was to establish decidability by applying Gentzen’s method: the Syntactic Calculus is recast as a sequent calculus; for the sequent presentation one then shows that the Cut rule (the sequent form of transitivity) is admissible; backward-chaining, cut-free proof search then yields the desired decision procedure.\nIn §2.1 below, we work through a similar agenda for LG. We introduce sLG, a sequent system for the Lambek-Grishin calculus in the style of Display Logic (Goré 1997), and show that it is equivalent to aLG. The sequent presentation enjoys Cut Elimination; decidability follows. Sequent proof search, though decidable, remains suboptimal in that it allows a great many derivations for what in effect one would like to consider as ‘the same’ proof. In §2.2, we introduce proof nets for LG, and show how these nets remove the spurious forms of nondeterminism of sequent proof search."
    }, {
      "heading" : "2.1 sLG: display sequent calculus",
      "text" : "The arrows of aLG are morphisms between types. In the sequent calculus, derivability is a relation between structures built from types. We will present the sequent calculus for LG in the format of a Display Logic (see (Goré 1997) for a comprehensive display logical view on the substructural landscape). The characteristic feature of Display Logic is that for every logical connective, there is a corresponding structural connective. We use the same symbols for the logical operations and their structural counterparts; structural operations are marked off by centerdots. Below the grammar for input (sequent left hand side), and output structures (sequent rhs)."
    }, {
      "heading" : "I ::= F | I · ⊗ · I | I · ⊘ · O | O · ; · I",
      "text" : "O ::= F | O · ⊕ · O | I · \\ · O | O · / · I\nThe rules of sLG come in three groups: the identity group (Axiom, Cut), the structural group (Display Postulates, Distributivity Postulates), and the logical group (left and right introduction rules for the logical connectives). Variables X,Y, Z in these rules range over structures, input or output, depending on whether they appear left or right of the sequent arrow.\nAxiom, Cut\nA ⇒ A Ax\nX ⇒ A A ⇒ Y X ⇒ Y Cut (22)\nDisplay postulates The (dual) residuation principles are formulated at the structural level. These rules ensure that any formula constituent of a sequent can be displayed as the single occupant of the sequent lhs or rhs—hence the name.\n7 X ⇒ Z · / · Y X · ⊗ · Y ⇒ Z rp Y ⇒ X · \\ · Z rp Y · ; · Z ⇒ X Z ⇒ Y · ⊕ ·X drp Z · ⊘ ·X ⇒ Y drp (23)\nDistributivity postulates The linear distributivities motivate the choice for a display sequent calculus. The distributivity postulates, in their rule form of (20), in the sequent format become structural rules. In a Gentzen-style sequent calculus, formulating such structural rules would be impossible: one only has structural punctuation marks for ⊗ and ⊕ (the antecedent and succedent comma). But one could not formulate (20) as a logical rule either: it introduces two operations simultaneously.\nX · ⊗ · Y ⊢ Z · ⊕ ·W Z · ; ·X ⊢ W · / · Y G1\nX · ⊗ · Y ⊢ Z · ⊕ ·W Y · ⊘ ·W ⊢ X · \\ · Z G3\nX · ⊗ · Y ⊢ Z · ⊕ ·W Z · ; · Y ⊢ X · \\ ·W G2\nX · ⊗ · Y ⊢ Z · ⊕ ·W X · ⊘ ·W ⊢ Z · / · Y G4\n(24)\nLogical rules For each connective there is a left and a right introduction rule. One of these is a one-premise rewrite rule, exchanging the logical connective for its structural counterpart; the other rule puts together a complex formula alongside the matching complex structure.\nRewrite rules $ ∈ {⊗,⊘,;}, # ∈ {⊕, \\, /}.\nA · $ ·B ⇒ Y\nA $B ⇒ Y $L\nX ⇒ A ·# ·B\nX ⇒ A#B #R\n(25)\nThe rewrite rules are invertible. As an example, compare (⊗L) and (⊗L)−1.\nA · ⊗ ·B ⇒ Y A⊗B ⇒ Y ⊗L\nA ⇒ A B ⇒ B\nA · ⊗ ·B ⇒ A⊗B ⊗R A⊗B ⇒ Y\nA · ⊗ ·B ⇒ Y Cut\n(26)\nTwo premise rules The (/L), (;R) rules are left-right symmetric.\nX ⇒ A Y ⇒ B X · ⊗ · Y ⇒ A⊗B ⊗R A ⇒ X B ⇒ Y A⊕B ⇒ X · ⊕ · Y ⊕L (27)\nX ⇒ A B ⇒ Y A\\B ⇒ X · \\ · Y \\L X ⇒ A B ⇒ Y X · ⊘ · Y ⇒ A⊘B ⊘R (28)\n8 Equivalence For every arrow f : A −→ B, there is a sequent proof A ⇒ B. For every sequent proof X ⇒ Y , there is an arrow f : X◦ −→ Y ◦, where X◦, Y ◦ are the formulas obtained from X,Y by replacing the structural connectives by their logical counterparts.\nFrom arrows to sequent proofs 1A and composition g ◦ f are immediate. We use the invertibility of the rewrite rules to prove the residuation/adjoints laws in the sequent calculus. Below, as an example, a sequent proof for ⊲f .\nf : A⊗B −→ C\n⊲f : A −→ C/B ❀\nA⊗B ⇒ C·/·\nA · ⊗ ·B ⇒ C·/· (⊗L)−1\nA ⇒ C · / ·B rp\nA ⇒ C/B /R\n(29)\nFrom sequent proofs to arrows Under the mapping ·◦ Cut turns into composition of arrows, the (dual) display postulates into the (dual) residuation rules, and the distributivity postulates into the rule form of the arrows d, q, b, p, which in (21) we have shown to be derivable in aLG. For the logical group, the premise and conclusion of the rewrite rules are identified. The two-premise logical rules become the monotonicity rules — derivable rules of inference in aLG as we saw.\nCut Elimination, decidability (Moortgat 2007) In sLG, Cut is an admissible rule: every theorem has a cut-free derivation.\nDecidability is a nice property to have. Yet, the astute reader at this point may feel disappointed: the goal-driven, backward-chaining, cut-free proof search of the decision procedure presupposes that the structure of the goal sequent is given. Parsing, as it is standardly understood, means deciding whether a string is well-formed, and assigning it a proper structure. Here, to start backwardchaining sequent proof search, we have to assume that the correct structure is already given. A generate-and-test approach, obviously, is not feasible here: the number of binary bracketings over a string of length n being the Catalan number Cn. We haven’t addressed the parsing problem, in other words. Turning to proof nets in §2.2, this situation will change: the construction algorithm for LG nets will work in a data-driven mode, effectively computing the structure of the goal sequent."
    }, {
      "heading" : "2.2 Proof nets",
      "text" : "Proof nets are a graphical way of representing proofs, introduced first for linear logic (Girard 1987). Proof nets can either be seen as a sort of “parallellized” sequent proofs or as a sort of multi-conclusion natural deduction. Proof nets are\n9 defined as a subclass of a larger class of graphs called proof structures. Where proof nets correspond to sequent proofs, proof structures in general may not, but we can distinguish proof nets from other proof structures based only on properties of the graph.\nThe proof nets for the Lambek-Grishin calculus we present in this section are a simple extension of the proof nets for the multimodal Lambek calculus of (Moot and Puite 2002). A proof structure is a (hyper)graph where the vertices are labeled by formulas and the edges connect these formulas. In what follows we will often speak of formula occurrences (or simply formulas if there is no possibility of confusion) instead of vertices labeled by formulas. The hyperedges correspond to the logical rules, linking the active formulas and the main formula of the rule and keeping track of whether one is dealing with a non-invertible two-premise rule or with an invertible one-premise rule. We’ll call these tensor and cotensor links respectively.\nProof structures and abstract proof structures\nDefinition 1. A link is a tuple 〈t, p, c,m〉 where\n– t is the type of the link — tensor or cotensor\n– p is the list of premisses of the link,\n– c is the list of conclusions of the link,\n– m, the main vertex/formula of the link, is either a member of p, a member of c or the constant “nil”.\nIn case m is a member of p we speak of a left link (corresponding to the left rules of the sequent calculus, where the main formula of the link occurs in the antecedent) and in case m is a member of c we speak of a right link.\nGraphically, links are displayed as shown below. A central node links together the premisses and conclusions of the link; when we need to refer to the connections between the central node and the vertices, we will call them its tentacles. The interior of this central node is white for a tensor link and black for a cotensor link. The premisses are drawn, in left-to-right order, above the central node and the conclusions, also in left-to-right order, are drawn below it. The main formula of cotensor links is drawn as an arrow to the member of the premisses or the conclusions which is the main formula of the link. The main formula of tensor links are not distinguished visually, but can be determined by inspection of the formula labels.\n11\nFigure 1 shows the links for the Lambek-Grishin calculus: there are two links for each connective, one link where the main formula is a premiss of the link (a left link) and one link where the main formula is a conclusion of the link (a right link). The symmetry between the Lambek connectives and the Grishin connectives is immediately clear: the links for the Grishin connectives are up-down symmetric versions of the links for the Lambek connectives.\nDefinition 2. A proof structure 〈S,L〉 is a finite set of formula occurrences S and a set of links L from those shown in Figure 1 such that.\n– each formula is at most once the premiss of a link,\n– each formula is at most once the conclusion of a link.\nFormulas which are not the conclusion of any link are called the hypotheses of the proof structure. Formulas which are not the premiss of any link are called the conclusions of the proof structure.\nWe will say that a proof structure with hypotheses H1, . . . , Hm and conclusions C1, . . . , Cn is a proof structure of H1, . . . , Hm ⇒ C1, . . . Cn.\nExample 1. Figure 2 shows the hypothesis unfolding of (s ⊘ s) ; np and the conclusion unfolding of s / (np \\ s). Both are obtained by simple application of the rules of Figure 1 until we reach the atomic subformulas.\nThough the figure satisfies the conditions of being a proof structure (note, for example, that connectedness is not a requirement, so a proof structure is allowed to have one connected component for each of the unfolded formulas), it is a proof structure of (s ⊘ s) ; np, s, s, np ⇒ s / (np \\ s), s, s, np. We can obtain a proof structure of (s⊘ s);np ⇒ s / (np \\ s) by identifying atomic formulas (this node identification corresponds to the “axiom links” of linear logic proof nets). In this case, we choose to identify the top s of the left subgraph with the bottom s\n12\nof the right subgraph and perform the unique choice for the remaining atomic formulas. The result is the proof structure shown in Figure 3 on the left.\nLet’s take a closer look at this new proof structure. We have conneced the minor premiss of the implication and co-implication links by a curve. This is due to the graphical constraints of writing these proof nets on the plane: we want to draw the np \\ s node below the cotensor link at the bottom of the figure, since it is a conclusion of this link, but would have to draw the figure on a cylinder to make this work — in other words, following down a path premiss - link - conclusion does not necessarily give a total order but can give a cyclic order on the formulas in the proof structure; for proof nets, these cyclic paths can only pass through the minor premiss of a cotensor (co-)implication link. As indicated by the drawing, the connection to the np \\ s node from the cotensor link arrives from above, indicating it is a conclusion of this link. Similarly, we go down from the s⊘ s node to arrive at the other cotensor link.\nA comparison with the introduction rule for the implication in natural deduction is another way to make this clear. For the introduction rule, we hypothesise a formula np \\ s (here, a conclusion of the cotensor rule), then derive s (here a premiss of the cotensor rule). The introduction rule then indicates we can withdraw this hypothesis and conclude s/(np\\s), with some indexing indicating which hypotheses are withdrawn at which rule. In the proof structure above, the connection between the cotensor link and the np\\s rule plays exactly the role of this indexing (though, since a proof structure is not necessarily a proof, we have\n13\nno guarantee yet that the introduction rule is correctly applied; the contractions introduced later will remedy this).\nWith this in mind, we can verify that the proof structure in Figure 3 corresponds exactly to the one in Figure 2 with the stated node identifications: we have the same formula occurrences and the links have the same premisses as well as the same conclusions.\nSo while the logical rules of a sequent proof correspond directly to the links of a proof net, the axioms and cut rules of a sequent proof correspond to formulas. An axiomatic formula is a formula which is not the main formula of any link. A cut formula is a formula which is the main formula of two links. So on the left of Figure 3, the np formula and both s formulas are axiomatic.\nDefinition 3. An abstract proof structure 〈V,L, h, c〉 is a set of vertices V , a set of (unlabeled) links L and two functions h and c, such that.\n– each formula is at most once the premiss of a link,\n– each formula is at most once the conclusion of a link,\n– h is a function from the hypotheses of the abstract proof structure to formulas,\n– c is a function from the conclusions of the abstract proof structure to formulas.\nNote that the abstract proof structure corresponding to a two formula sequent A ⇒ B has only a single vertex v, with h(v) = A and c(v) = B.\nThe transformation from proof structure to abstract proof structure is a forgetful mapping: we transform a proof structure into an abstract proof structure by erasing all formula information on the internal vertices, keeping only the formula labels of the hypotheses and the conclusions. Visually, we remove the formula labels of the graph and replace them by simple vertices ( ) and we indicate the results of the functions h and c above (resp. below) the vertices (those which are hypotheses and conclusions of the abstract proof structure respectively). As a result, we have to following four types of vertices in an abstract proof structure.\nA B\nA B\ninternal hypothesis conclusion both\nExample 2. Figure 3 shows (on the right) the transformation of the proof structure on its left into an abstract proof structure. In the abstract proof structure, we can no longer distinguish which vertices are axioms: only the cotensor links still allow us to distinguish between the main and active vertices of the link by means of the arrow.\n14\nDefinition 4. A tree is an acyclic, connected abstract proof structure which does not contain any cotensor links.\nThe trees of Definition 4 correspond to sequents in a rather direct way. In fact, they have the rather pleasant property of “compiling away” the display rules of the sequent calculus. Or, in other words, trees represent a class of sequents which is equivalent up to the display postulates.\nDefinition 5. Given an abstract proof structure A, we say that A contracts in one step to A′, written A → A′ iff A′ is obtained from A by replacing one of the subgraphs of the form shown in Figures 4 and 5 by a single vertex.\nH C\n15"
    }, {
      "heading" : "H represents the result of the function h for the indicated node (relevant only in case this node is a hypothesis of the abstract proof structure). Similarly, C represent the formula assigned by the function c to the indicated node.",
      "text" : "Given an abstract proof structure A we say that A contracts to an abstract proof structure A′ if there is a sequence of zero or more one step contractions from A to A′.\nWhen we say that a proof structure P contracts to an abstract proof structure A′ we will mean that the underlying abstract proof structure A of P contracts to A′.\nAs we saw in §1.2, to obtain expressivity beyond context-free, we are interested in LG with added interaction principles. The (rule forms of the) postulates (§18) correspond to additional rewrite rules on the abstract proof structures. Figures 6 and 7 give the rewrite rules corresponding to the postulates d, b and q, p respectively3; a total of four rewrite rules (G1) to (G4). All four rewrite\n3 These are Grishin’s Class IV interactions. His Class I can be obtained by inversing all four arrows in the two figures.\n16\nrules start from the same inital configuration and replace it by one of the four possible configurations indicated in the figures.\nProof nets\nDefinition 6. A proof structure P is a proof net iff its underlying abstract proof structure A converts to a tree using the contractions of Figures 4 and 5 and the structural rules of Figures 6 and 7.\nExample 3. To show that the proof structure of Figure 3 is a proof net, we need to show it can be contracted to a tree. Inspection of the contractions shows that none of them apply, but the interaction rules do: the two tensor links in the center of the figure are in the right configuration for the interaction rules. Applying rule (G1) produces the abstract proof structure shown in Figure 8 on the right.\nNow, we are in the right structure to contract the two cotensor links. Any order is possible. Figure 9 shows the result of first applying the (L;), then the (R/) contraction.\nExample 4. Figure 10 shows the lexical proof structures for a generalized quantifier noun phrase, a transitive verb, a determiner and a lexical noun.\n17\nFigure 11 gives, on the left, one of several possible identifications of n and np formulas, but the only one which produces a proof net with the lexical entries in the indicate order and the corresponding abstract proof structure on the right. This abstract proof structure allows us to apply a contraction directly, as shown in Figure 12.\nTheorem 1. A proof structure P is a proof net — that is, P converts to a tree T — iff there is a sequent proof of T .\nThe proof is an easy adaptation of the proof of (Moot and Puite 2002). A detailed proof can be found in (Moot 2007).\nBy requiring a proof structure to contract to a tree, we actually compute the structure of the antecedent, which is a pleasant property.\nWe will look a bit more at the structure of the conversion sequence in what follows and the following definition will be useful in this context.\nDefinition 7. Given a proof net P , a component C of P is a maximal subnet of P containing only tensor links.\nFrom a proof net, we can obtain its components by simply erasing all cotensor links. The components will be the connected components (in the graph-theoretic sense) of the resulting graph. In what follows we will implicitly use the word component to refer only to components containing at least one tensor link. Though there is no problem in allowing a component to be a single vertex, the correspondence between focused sequent proofs and proof nets is more clear when components are non-trivial.\n19\nGeneralized contractions As can been seen from the figures, the interaction rule introduce nondeterminism in proof search: a single subtree can be rewritten in four different trees and this applies recursively for the depth of a component. However, this is not as bad as it seems: in many cases, we can “compile away” the interaction principles by permitting contractions in a larger set of configurations than those shown in Figures 4 and 5. The contractions for the product and co-product stay the same, but the contractions for the implications and co-implications will change as shown in Figures 13 and 14. In Figure 13, the contraction can apply iff there is a path of Grishin tensor links connecting the two portrayed points above and below the substructure in the figure. In case this path is empty, the normal contraction applies and in case this path has length greater than one, then, by construction, the Lambek tensor link is connected to a Grishin tensor link, and there is a path from this link through the displayed substructure. If this path goes left from the first link, we can apply rule (G2) and reduce the distance. If this path goes right from this first Grishin link, we can apply rule (G1) and reduce the distance as well — in the case of the R/ contraction — or (G3) and (G4) — in the case of the R\\ contraction.\nBy up-down symmetry, the contractions of Figure 14 require a path of Lambek tensor connectives with the interaction principles listed. Note that it suffices to compute one case: the other cases follow from up-down symmetry and left-toright symmetry between the interaction principles and the contractions.\nThe derived contractions allow us to simplify the reduction sequences considerably. It is even the case that, whenever the result tree contains only a single type of constructors (that is, only Grishin tensor links or only Lambek tensor\n20\nlinks) then we can replace the interaction principles by the generalized contractions.\nSummary: Proof nets and sequent proofs As a useful summary of the correspondence between proof nets and sequent proofs, we give the following table.\nsequent calculus proof structure conversion axiom axiomatic formula — cut cut formula — two-premise rule tensor link — one-premise rule cotensor link contraction interaction rule — rewrite\nThe invertible one-premise rules correspond to both a link and a contraction and the interaction rules are invisible in the proof structure, appearing only in the conversion sequence.\nWith a bit of extra effort in the sequentialization proof — and the exclusion of cuts on axioms, because like natural deduction, we cannot distinguish between the following two sequent proofs\nA ⇒ A Ax A ⇒ A Ax\nA ⇒ A Cut\nA ⇒ A Ax\n— we can show that these correspondences are 1-on-1, that is each axiomatic formula in a proof net corresponds to exactly one axiom rule in the sequent proof, each non-invertible two-premise rule corresponds to exactly one link in\n21\nthe proof net and each invertible one-premise rule to exactly one link in the proof net and exactly one contraction in its conversion sequence.\nDiscussion Proof nets provide a solution to the spurious ambiguity problem of sequent calculus proof search: because of inessential, bureaucratic rule permutations we can have multiple sequent calculus proofs for what, in essence, corresponds to the same proof (which corresponds semantically to a different reading of the phrase under consideration). Proof nets, like (product-free) natural deduction, have different proof objects only for proofs of a judgement which differ essentially. In addition, the combinatorial possibilities for such readings, which are obtained by finding a complete matching of the premiss and conclusions atomic formulas, can easily be enumerated for a given sequence of formulas.\nSo proof nets have a 1-1 correspondence between proofs and readings, compute the structure of the sequents, give a graphical representation which makes the display postulates superfluous and, in certain cases, can hide the interaction rules by using generalized contractions."
    }, {
      "heading" : "3 Proof nets and focused display calculus",
      "text" : "The spurious non-determinism of naive backward-chaining proof search can be also addressed within the sequent calculus itself, by introducing an appropriate notion of ‘normal’ derivations. In §3.1, we introduce fLG, a focused version of the sequent calculus for LG. In §3.2, we then study how to interpret focused derivations from a proof net perspective."
    }, {
      "heading" : "3.1 fLG: focused display calculus",
      "text" : "The strategy of focusing has been well-studied in the context of linear logic, starting with the work of Andreoli (Andreoli 2001). It is based on the distinction between asynchronous and synchronous non-atomic formulas. The introduction rule for the main connective of an asynchronous formula is invertible; it is non-invertible for the synchronous formulas. Backward chaining focused proof search starts with an asynchronous phase where invertible rules are applied deterministically until no more candidate formulas remain. At that point, a non-deterministic choice for a synchronous formula must be made: this formula is put ‘in focus’, and decomposed in its subformulae by means of non-invertible rules until no more non-invertible rules are applicable, at which point one reenters an asynchronous phase. The main result of (Andreoli 2001) is that focused proofs are complete for linear logic.\n22\nFocused proof search for the Lambek-Grishin calculus has been studied by Bastenhof (2011) who uses a one-sided presentation of the calculus. In this section, we implement his focusing regime in the context of the two-sided sequent format of (Bernardi and Moortgat 2010). We proceed in two steps. First we introduce fLG, the focused version of the sequent calculus of §2.1. fLG makes a distinction between focused and unfocused judgements, and has a set of inference rules to switch between these two. fLG comes with a term language that is in CurryHoward correspondence with its derivations. This term language is a directional refinement of the λµµ̃ language of (Curien and Herbelin 2000).\nThe second step is to give a constructive interpretation for LG derivations by means of a continuation-passing-style translation: a mapping ⌈·⌉ that sends derivations of the multiple-conclusion source logic to (natural deduction) proofs in a fragment of single-conclusion intuitionistic Linear Logic MILL (in the categorial terminology: LP). For the translation of (Bastenhof 2011) that we follow here, the target fragment has linear products and negation A⊥, i.e. a restricted form of linear implication A ⊸⊥, where ⊥ is a distinguished atomic type, the response type. Focused source derivations then can be shown to correspond to distinct normal natural deduction proofs in the target calculus.\nfLGA/,⊗,\\,⊘,⊕,; ⌈·⌉ −−−−→ LP A∪{⊥}\n⊗,·⊥\n( ·ℓ\n−−−−→ IL {e,t} ×,→\n)\nFor the linguistic illustrations in §3.2, we compose the CPS translation ⌈·⌉ with a second mapping ·ℓ, that establishes the connection with Montague-style semantic representations. This mapping sends the linear constructs to their intuitionistic counterparts, and allows non-linear meaning recipes for the translation of the lexical constants.\nfLG: proofs and terms We set up fLG in the Curry-Howard proofs-asprograms fashion, starting from a term language for which the sequent logic then provides the type system. The term language encodes the logical steps of a derivation (left and right introduction rules, and the new set of left and right (de)focusing rules, to be introduced below); structural rules (residuation, distributivity) leave no trace in the proof terms.\nSequent structures, as in §2.1, are built out of formulas. Input formulas now are labeled with variables x, y, z, . . ., output formulas with covariables α, β, γ, . . .. To implement the focusing regime, we allow sequents to have one displayed formula in focus. Writing the focused formula in a box, fLG will have to deal with three types of judgements: sequents with no formula in focus (we’ll call these structural), and sequents with a succedent or antecedent formula in focus.\nX ⊢ Y X ⊢ A A ⊢ Y\n23\nCorresponding to the types of sequents, the term language has three types of expressions: commands, values and contexts respectively. For commands, we use the metavariables c, C, for values v, V , for contexts e, E. The typing rules below provide the motivation for the subclassification.\nv ::= µα.C | V ; V ::= x | v1 ⊗ v2 | v ⊘ e | e ; v\ne ::= µ̃x.C | E ; E ::= α | e1 ⊕ e2 | v\\e | e/v\nc ::= 〈x ↿ E〉 | 〈V ↾ α〉\nC ::= c | x yz .C | x β z .C | β x z .C | α β γ .C | x β γ .C | β x γ .C\n(30)\nTyping rules To enforce the alternation between asynchronous and synchronous phases of focused proof search, formulas are associated with a polarity: positive for non-atomic formulas with invertible left introduction rule: A ⊗ B, A ⊘ B, B ;A; negative for non-atomic formulas with invertible right introduction rule: A ⊕ B, A\\B, B/A. For atomic formulas, one can fix an arbitrary polarity. Different choices lead to different prooftheoretic behaviour (and to different interpretations, once we turn to the CPS translation). We will assume that atoms are assigned a bias (positive or negative) in the lexicon. Below the typing rules for fLG (restricting attention to the cut-free system).\n(Co-)Axiom, (de)focusing\nx : A ⊢ x : A Ax\nα : A ⊢ α : A CoAx\nX ⊢ V : A\n〈V ↾ α〉 : (X ⊢ α : A) µ∗\nE : A ⊢ X\n〈x ↿ E〉 : (x : A ⊢ X) µ̃∗\nC : (x : A ⊢ X)\nµ̃x.C : A ⊢ X\nµ̃ C : (X ⊢ α : A)\nX ⊢ µα.C : A\nµ\nFirst we have the focused version of the axiomatic sequents, and rules for focusing and defocusing which are new with respect to the unfocused presentation of §2.1. There is a polarity restriction on the formula A in these rules: the boxed formula has to be negative for CoAx, µ, µ̃∗; for Ax, µ̃, µ∗ it has to be positive. In the (Co-)Axiom cases, A can be required to be atomic.\nFrom a backward-chaining perspective, the µ, µ̃ rules remove the focus from a focused succedent or antecedent formula. The result is an unfocused premise\n24\nsequent, the domain of applicability of the invertible rules, i.e. one enters the asynchronous phase. From the same perspective, the rules µ∗, µ̃∗ place a succedent or antecedent formula in focus, shifting control to the non-invertible rules of the synchronous phase. The µ∗, µ̃∗ rules are in fact instances of Cut where one of the premises is axiomatic.\nInvertible rules The term language makes a distinction between simple commands c (the image of the focusing rules µ̃∗, µ∗: 〈x ↿ E〉, 〈V ↾ α〉) from extended commands C. The latter start with a sequence of invertible rewrite rules replacing a logical connective by its structural counterpart. We impose the requirement that in the asynchronous phase all formulas to which an invertible rule is applicable are indeed decomposed.\nC : (x : A · ⊗ · y : B ⊢ X) x y z .C : (z : A⊗B ⊢ X) ⊗L C : (X ⊢ α : A · ⊕ · β : B) α β γ .C : (X ⊢ γ : A⊕B) ⊕R\nC : (x : A · ⊘ · β : B ⊢ X) x β z .C : (z : A⊘B ⊢ X) ⊘L C : (X ⊢ x : A · \\ · β : B) x β γ .C : (X ⊢ γ : A\\B) \\R\nC : (β : B · ; · x : A ⊢ X) β x z .C : (z : B ; A ⊢ X) ;L C : (X ⊢ β : B · / · x : A) β x γ .C : (X ⊢ γ : B/A) /R\nNon-invertible rules When a positive (negative) formula has been brought into focus in the succedent (antecedent), one is committed to transfer the focus to its subformulae.\ne1 : B ⊢ Y e2 : A ⊢ X e1 ⊕ e2 : B ⊕A ⊢ Y · ⊕ ·X ⊕L\nX ⊢ v1 : A Y ⊢ v2 : B\nX · ⊗ · Y ⊢ v1 ⊗ v2 : A⊗B ⊗R\nX ⊢ v : A e : B ⊢ Y\nv\\e : A\\B ⊢ X · \\ · Y\n\\L\nX ⊢ v : A e : B ⊢ Y\nX · ⊘ · Y ⊢ v ⊘ e : A⊘B ⊘R\ne : B ⊢ Y X ⊢ v : A\ne/v : B/A ⊢ Y · / ·X\n/L\ne : B ⊢ Y X ⊢ v : A\nY · ; ·X ⊢ e ; v : B ; A ;R\n25\nDerived inference rules: focus shifting To highlight the correspondence with the algorithm for proof net construction to be discussed in §2.2, we will use a derived rule format for shifting between a conclusion and premise focused formula. A branch from (µ̃∗) via a sequence (possibly empty) of structural rules and rewrite rules to (µ) is compiled in a derived inference rule with the µ̃∗ restrictions on A and the µ restrictions on B.\nE : A ⊢ Y\n〈x ↿ E〉 : (x : A ⊢ Y ) µ̃∗\n... (res , distr , rewrite)\n... (÷)〈x ↿ E〉 : (X ⊢ β : B)\nX ⊢ µβ.(÷)〈x ↿ E〉 : B\nµ\n❀\nE : A ⊢ Y\nX ⊢ µβ.(÷)〈x ↿ E〉 : B\n⇌\nFor the combinations of µ∗, µ̃∗ and µ, µ̃, this results in the focus shifting rules below. We leave it to the reader to add the terms.\nA ⊢ Y\nX ⊢ B\n⇌\nX ′ ⊢ A\nX ⊢ B\n⇀⇁\nX ⊢ A\nB ⊢ Y\n⇋\nA ⊢ Y ′\nB ⊢ Y\n↼↽\n(31)\nIllustrations We illustrate the effect of the focusing regime with some alternative ways of assigning a polarity bias to atomic formulas with a simple SubjectTransitive Verb-Object sentence. Examples with lexical material filled in would be ‘everyone seeks/finds a unicorn’.\n(np/n ⊗ n) · ⊗ · ((np\\s)/np · ⊗ · (np/n · ⊗ · n)) ⊢ s (32)\nFor the Object we have a Determiner-Noun combination. For the Subject, we take a product type (np/n) ⊗ n, so that we have a chance to illustrate the working of the asynchronous phase of the derivation. In the unfocused sequent calculus sLG, this sequent has at least seven proofs, depending on the order of application of the introduction rules for the five occurrences of the logical connectives involved: ⊗ (once), / (three times), \\ (once).\nWhat about the focused calculus fLG? Before answering this question, we have to decide on the polarization of the atomic types. Suppose we give them uniform negative bias. There is only one focused proof then: ‘goal driven’, top-down, to use parsing terminology. In the proof terms, we write tv for the transitive verb;\n26\ndet for the object determiner; noun for the object common noun; subj for the subject noun phrase.\nnp γ ⊢ np\nn γ′ ⊢ n\nn ⊢ n\n⇌\nnp/n ⊢ np · / · n\n/L\nnp/n · ⊗ · n ⊢ np\n⇌\ns β ⊢ s\nnp\\s ⊢ (np/n · ⊗ · n) · \\ · s\n\\L\nnp α ⊢ np\nn α′ ⊢ n\nn ⊢ n\n⇌\nnp/n ⊢ np · / · n\n/L\nnp/n · ⊗ · n ⊢ np\n⇌\n(np\\s)/np ⊢ ((np/n · ⊗ · n) · \\ · s) · / · (np/n · ⊗ · n)\n/L\n(np/n)⊗ n · ⊗ · ((np\\s)/np · ⊗ · (np/n · ⊗ · n)) ⊢ s\n⇌\nµβ.( y z\nsubj .〈 tv ↿ ((Q \\ β) / Q′) 〉) with\nQ : µγ.〈 y ↿ (γ / µγ′.〈 z ↿ γ′〉)〉 , Q′ : µα.〈 det ↿ (α / µα′.〈 noun ↿ α′〉)〉 (33)\nAs an alternative, suppose basic type s keeps its negative bias, resetting the sentence continuation for each clausal domain, but the other basic types are assigned positive bias. We now have two focused derivations: ‘data driven’, bottom-up. To make sense of this difference, we will have to look at the CPS translation of these proofs, to be introduced below.\nnp x1 ⊢ np s− α0 ⊢ s−\nnp\\s− ⊢ np · \\ · s− \\L np y1 ⊢ np\n(np\\s−)/np ⊢ (np · \\ · s−) · / · np\n/L\nnp ⊢ (np\\s−)/np · \\ · (np · \\ · s−)\n↼↽\nn noun ⊢ n\nnp/n ⊢ ((np\\s−)/np · \\ · (np · \\ · s−)) · / · n\n/L\nnp ⊢ s− · / · ((np\\s−)/np · ⊗ · (np/n · ⊗ · n))\n↼↽\nn z0 ⊢ n\nnp/n ⊢ (s− · / · ((np\\s−)/np · ⊗ · (np/n · ⊗ · n))) · / · n\n/L\n(np/n)⊗ n · ⊗ · ((np\\s−)/np · ⊗ · (np/n · ⊗ · n)) ⊢ s− ⇌\n27\nµα.( x′ z\nsubj .〈 x′ ↿ (µ̃x.〈 det ↿ (µ̃y.〈 tv ↿ ((x \\ α) / y) 〉 / noun) 〉 / z) 〉) (34)\nnp x ⊢ np s− α ⊢ s−\nnp\\s− ⊢ np · \\ · s− \\L np y ⊢ np\n(np\\s−)/np ⊢ (np · \\ · s−) · / · np\n/L\nnp ⊢ s− · / · ((np\\s−)/np · ⊗ · np)\n↼↽\nn z ⊢ n\nnp/n ⊢ (s− · / · ((np\\s−)/np · ⊗ · np)) · / · n\n/L\nnp ⊢ (np\\s−)/np · \\ · ((np/n · ⊗ · n) · \\ · s−)\n↼↽\nn noun ⊢ n\nnp/n ⊢ ((np\\s−)/np · \\ · ((np/n · ⊗ · n) · \\ · s−)) · / · n\n/L\n(np/n)⊗ n · ⊗ · ((np\\s−)/np · ⊗ · (np/n · ⊗ · n)) ⊢ s− ⇌\nµα.( x′ z\nsubj .〈 det ↿ (µ̃y.〈 x′ ↿ (µ̃x.〈 tv ↿ ((x \\ α) / y) 〉 / z) 〉 / noun) 〉) (35)\nCPS translation Let us turn then to the translation that associates the proofs of the multiple-conclusion source logic fLG with a constructive interpretation, i.e. a linear lambda term of the target logic MILL/LP. CPS translations for LG were introduced in (Bernardi and Moortgat 2007; Bernardi and Moortgat 2010), who adapt the call-by-value and call-by-name regimes of (Curien and Herbelin 2000) to a directional environment. The translation of (Bastenhof 2011) (following (Girard 1991)) is an improvement in that it avoids the ‘administrative redexes’ of the earlier approaches: the image of LG source derivations, under the mapping from (Bastenhof 2011) that we present below, are normal LP terms.\nThe target language, on the type level, has the same atoms as the source language, and in addition a distinguished atom ⊥, the response type. Complex types are linear products −⊗− and a defined negation A⊥ . = A ⊸⊥. The CPS translation ⌈·⌉ maps fLG source types, sequents and their proof terms to the target types and terms in Curry-Howard correspondence with normal natural deduction proofs.\nTypes For positive atoms, ⌈p⌉ = p, for negative atoms ⌈p⌉ = p⊥. For complex types, the value of ⌈·⌉ depends on the polarities of the subtypes as shown in Table 1.\n28\nTerms The action of ⌈·⌉ on terms is given in (36). We write x̃, α̃ for the target variables corresponding to source x, α. The (de)focusing rules correspond to application/abstraction in the target language. Non-invertible (two premise) rules are mapped to linear pair terms; invertible rewrite rules to the matching deconstructor, the case construct (φ, ψ, ξ metavariables for the the (co)variables involved).\n(co)var ⌈x⌉ = x̃ ; ⌈α⌉ = α̃\nlinear application ⌈〈x ↿ E〉⌉ = (x̃ ⌈E⌉) ; ⌈〈V ↾ α〉⌉ = (α̃ ⌈V ⌉)\nlinear abstraction ⌈µ̃x.C⌉ = λx̃.⌈C⌉ ; ⌈µα.C⌉ = λα̃.⌈C⌉\nlinear pair ⌈φ#ψ⌉ = 〈⌈φ⌉, ⌈ψ⌉〉 (# ∈ {⊗, /, \\,⊕,⊘,;})\ncase ⌈φ ψξ .C⌉ = case ξ̃ of 〈φ̃, ψ̃〉.⌈C⌉\n(36)\nSequents For sequent hypotheses/conclusions, we have\npol(A) ⌈x : A⌉ ⌈α : A⌉\n+ x̃ : ⌈A⌉ α̃ : ⌈A⌉⊥\n− x̃ : ⌈A⌉⊥ α̃ : ⌈A⌉\n(37)\nTable 1 then specifies how the translation extends to sequents (replace logical connectives by their structural counterparts, and target ⊗ by the comma for\n29\nmultiset union).\n⌈C : (X ⊢ Y )⌉ = ⌈X⌉, ⌈Y ⌉ ⊢LP ⌈C⌉ :⊥⌈ X ⊢ v : A ⌉ = ⌈X⌉ ⊢LP ⌈v⌉ : ⌈A⌉⌈\ne : A ⊢ Y ⌉ = ⌈Y ⌉ ⊢LP ⌈e⌉ : ⌈A⌉ ⊥\n(38)\nIllustrations We return to our sample derivations. In (39) one finds the CPS image of the source types for transitive verb and determiner under the different assignments of bias to the atomic subformulas, and the composition with ·ℓ, assuming npℓ = e (entities) and sℓ =⊥ℓ= t (truth values). For the lexical constants of the illustration, Table 2 gives ·ℓ translations compatible with the typing. In Table 3, these lexical recipes are substituted for the parameters of the CPS translation.\n(np+\\s−)/np+ finds λ〈〈x, c〉, y〉.(c (findeet y x))\n(np+/n+)⊗ n+ everyone 〈λ〈x, y〉.(∀ λz.(⇒ (y z) (x z))), personet〉\nnp+/n+ some λ〈x, y〉.(∃ λz.(∧ (y z) (x z)))\nn+ unicorn unicornet\n(np−\\s−)/np− needs λ〈〈q, c〉, q′〉.(q λx.(need((et)t)et q′ x))\n(np−/n−)⊗ n− everyone 〈λ〈x,w〉.(∀ λz.(⇒ (w λy.(y z)) (x z))), λk.(k personet)〉\nnp−/n− some λ〈x,w〉.(∃ λz.(∧ (w λy.(y z)) (x z)))\nn− unicorn λk.(k unicornet)\n30"
    }, {
      "heading" : "3.2 Proof nets and focusing",
      "text" : "In this section, we introduce term-labeled proof nets, and show how a proof term can be read off from the composition graph associated with a net. Our approach is comparable to that of (de Groote and Retoré 1996), who present an algorithm to compute a linear lambda term from a traversal of the dynamic graph associated with a proof net for a derivation in the Lambek calculus. Whereas in the case of the single-conclusion Lambek calculus, the term associated with a given proof net is unique, in the case of multiple-conclusion LG there will be the possibility that the term computation algorithm associates more than one term with a proof net. These multiple results will then be shown to correspond to the derivational ambiguity of focused proof search.\nReduction tree When P is a proof net (and therefore converts to a tensor tree using a sequence ρ of conversions and contractions) the components of P can bee seen as a parallel representation of the synchronous phases in sequent proof search. Taking a closer look at the conversion sequence ρ, we see that all interaction rules operate in one component C, the cotensor rules and the corresponding contractions operate on a component to which it is attached by both of its active tentacles (i.e. the tentacles without the arrow) and the contraction removes a tensor link from this component. If the main tentacle points to a vertex attached to a non-trivial component C′ then a new component is formed by merging C (minus the contracted tensor link) and C′ into a new component. When multiple cotensor links have both active tentacles attached to a single component (Figure 8 shows an example), we can apply all contractions simultaneously: since a contraction connects a tensor and a cotensor link at two out of three tentacles, there cannot be a conflict (multiple cotensor links connected to a tensor link with both contractions being impossible without violating the\n31\ndefinition of proof structures). In addition, when the main vertex of a cotensor link is the active vertex of another cotensor link, then, if the other active vertex of this link is connected to the current component as well, we can apply this contraction immediately.\nSo instead of seeing ρ as a sequence of reductions, we can see it as a rooted tree of reductions: the initial components are its leaves (synchronous phases) and the contractions connecting multiple components to form new components its are branches (the branches from the active components to their parents correspond to asynchronous phases) and the final tree — a single component — is its root.\nExample 5. Figure 15 shows an example of how the view of components given above allows us to see a proof net as a tree of components. The shaded subnet boxes are components and contain only tensor links. For clarity, the cotensor links are shown in the figure as well.\nEach interaction rule takes place completely in one of the Ci. In the figure, the components which do not contain the main vertex of a cotensor link are shown\n32\nin a darker shade: we will call these components active. In Figure 15, C2 and C4 are active. Now, it is easy to show that whenever there exists a conversions sequence ρ, we can transform it into a conversion sequence ρ′ where conversions take place only in the active components: any conversions in C1 can be delayed until after the contraction connecting C1 and C2, since only C2 is relevant for this contraction (it contains both active vertices of the cotensor link and therefore also the tensor link it contracts with), and any conversions in C5 can be delayed until the final component C1−5.\nIn addition, the two active components C2 and C4 are independent: we can apply conversions to these two components in parallel.\nNets and term labeling When assigning a term label to a proof net, we will be interested in assigning labels to larger and larger subnets of a given proof net, until we have computed a term for the complete proof net. Like in the sequent calculus, we distinguish between subnets which are commands, contexts and values. Figure 16 shows how we will distinguish these visually: the main formula of a subnet is drawn white, other formulas are drawn in light gray, values are drawn inside a rectangle, contexts inside an oval.\nCommand\nContext\nValue\nFigure 17 gives the term-labeled version of the proof net links corresponding to the logical rules of the sequent calculus. The flow of information is shown by the arrows: information flow is always from the active formulas to the main formula of a link, and as a consequence the complex term can be assigned either to a conclusion or to a premiss of the link. This is the crucial difference with term labeling for the single-conclusion Lambek calculus, where the complex term is always assigned to a conclusion. The cotensor rules, operating on commands, indicate the prefix for the command corresponding to the term assignment for the rule (we will see later how commands are formed).\nThe proof term of an LG derivation is computed on the basis of the composition graph associated with its proof net.\n33\nL/ L⊗ L \\\nDefinition 8. Given a proof net P , the associated composition graph cg(P ) is obtained as follows.\n1. all vertices of P with formula label A are expanded into axiom links: edges connecting two vertices with formula label A; all links are replaced by the corresponding links of Figure 17;\n34\n2. all vertices in this new structure are assigned atomic terms of the correct type (variable or covariable) and the terms for the tensor rules are propagated from the active formulas to the main formula;\n3. all axiom links connecting terms of the same type (value or context) are collapsed.\nFigure 18 gives an example of the composition graph associated with a net. In all, the expansion stage gives rise to four types of axiom links, depending on the type of the term assigned to the A premiss and the A conclusion. These cases are summarized in Figure 19. The substitution links are collapsed in the final stage of the construction of the composition graph; the command and µ/µ̃ cases are the ones that remain.\n35\nGiven the composition graph cg(P ) associated with a proof net P , we compute terms for it as follows.\n1. we compute all maximal subnets of cg(P ), which consist of a set of tensor links with a single main formula, marking all these links as visited;\n2. while cg(P ) contains unvisited links do the following:\n(a) follow an unvisited command link attached to a previously calculated maximal subnet, forming a correct command subnet; like before, we restrict to active subnets which do not contain (or allow us to reach through an axiom) the main formula of a negative link;\n(b) for each negative link with both active formulas attached to the current command subnet, pass to the main formula of the negative link, forming a new command, repeat this step until no such negative links remain attached;\n(c) follow a µ or µ̃ link to a new vertex, forming a larger value or context subnet and replacing the variable previously assigned to the newly visited vertex by the µ value or µ̃ context.\nThe algorithm stays quite close to the focused proof nets of the previous section: the maximal subnets of step 1 are rooted versions of the components we have used before, with the directions of the arrows potentially splitting components into multiple rooted components (Figure 21 will give an example) and the asynchronous phases, which consisted of one or more contractions for cotensor links, will now consist of a passage through a command link, followed by zero or more cotensor links, followed by either a µ or a µ̃ link, the result being a new, larger subnet. The term assignment algorithm is a way to enumerate the non-equivalent proof terms of a net. Given that these terms are isomorphic to focused sequent proofs, it is no coincidence that the computation of the proof terms looks a lot like the sequentialisation algorithm.4 The following lemma is easy to prove.\nLemma 1. If P is a proof net (with a pairing of command and µ/µ̃ links) and v is a term calculated for P using this pairing then there is a sequent proof π which is assigned v as well.\nThis lemma is easily proved by induction on the depth of the tree: it holds trivially for the leaves (which are rooted components), and, inductively, each command, contensor, µ/µ̃ sequence will produce a sequent proof of the same term: in fact each such step corresponds exactly to the derived inference rules for focus shifting discussed in §3.1.\nTo summarize: the difference between computing terms for proof nets in the Lambek calculus and in LG can be characterized by the following statements:\n4 The connection between proof net sequentialisation and focusing for linear logic is explored in (Andreoli and Maieli 1999)\n36\nLambek calculus: the (potential) terms are given through a bijection between premiss and conclusion atomic formulas (ie. a complete matching of the axioms),\nLG: the (potential) terms are given through a bijection between premiss and conclusion atomic formulas plus a bijection between command and µ/µ̃ axioms.\nWe speak of potential terms, since in the case of the Lambek calculus only proof nets can be assigned a term, whereas in the LG case we need proof nets plus a coherent bijection between command and µ/µ̃ axioms, where the µ or µ̃ rule is applied to one of the free variables of the command c.\nIllustrations Figure 20 shows how to compute the term for the example proof net of Figure 18, starting from the composition graph (on the right). We first look for the components (step 1). Since there is only a single tensor link, this is simple. Figure 20 shows, on the left, the context subnet corresponding to this link.\nNow, there is only one command to follow from here (step 2a), which produces the command shown in the middle of Figure 20. Applying the cotensor link (step 2b) produces the figure shown on the right. The final µ link (step 2c, not shown) produces the completed term for this proof net.\nv = µα. x y\nz 〈x ↿ α / y〉\nSome remarks about this example. First, some of the axioms can be traversed in only one of the two possible directions: in cut-free proof nets, command links\n37\nmove either towards the active formulas of cotensor links or towards “dead ends”: hypotheses or conclusions of the proof net. And since we want to compute the value of v for the example proof net, it only makes sense to apply a µ rule to compute this value: we always “exit” the proof net from a designated conclusion. With a slight modification to the algorithm that reads off terms from a composition graph, we could also compute commands for proof nets, or compute the context for a designated premiss of the net.\nFigure 21 returns to our “subj tv det noun” example. On the left we see the composition graph for the example of Figure 11.\nThe only cotensor link in the figure has the node subj : (np / n)⊗ n as its main formula. When we compute the rooted components, we see that there are three, shown on the right of the figure. There are three command axioms, one for the root node of each of the three components, C1 to C3 on the right hand side of the figure; these are numbered c1 to c3 next to the corresponding links with the\n38\nsame number as the corresponding component. There are also three µ/µ̃ links (numbered µ1 to µ3). Figure 22 gives a schematic representation of the proof net of Figure 21.\nSince we are interested in calculating the value of x′, (µ1) will be the last link we pass in the proof net and therefore we will pass it downwards, producing a term of the form µβ.c. Figure 22 gives a schematic representation of the proof net of Figure 21. The arrows next to the µ/µ̃ links indicate the different possibilities for traversing the link and whether this traversal corresponds to a µ or a µ̃ link.\nIf both np arguments of the transitive verbs are lexically assigned a positive bias, then we can only pass the two axioms µ2/µ̃2 and µ3/µ̃3 in the µ̃2 and µ̃3 directions, following the arrows away from component C2. This will necessarily mean that the first command is c2 and that we can follow this command either with µ̃2 (going to the component of the subject and producing the narrow scope reading for the subject quantifier) or with µ̃3 (going to the component of the object determiner and producing the narrow scope reading for the object quantifier). The figure shows (in the middle) the result of choosing c2 − µ̃3.\nThe term computed for component C2 by following command c2 is 〈tv ↿ (x\\β)/y〉 and the µ̃3 link joins components C2 and C3, replacing covariable α by the complex context µ̃y.〈tv ↿ (x\\β)/y〉, producing the configuration shown schematically in the middle of Figure 22 (refer back to Figure 21 to see the initial labels).\nFrom this middle configuration and given the restriction to µ̃2 for the link connecting the two remaining components, only the command c3 is a possible in combination with the µ̃2 link. Command c3 would produce 〈det ↿ α/noun〉 from the configuration shown in Figure 21 but given the previous substitution for α it will now produce 〈det ↿ (µ̃y.〈tv ↿ (x\\β)/y〉)/noun〉 and the µ̃2 link will replace covariable γ by the context µ̃x.〈det ↿ (µ̃y.〈tv ↿ (x\\β)/y〉)/noun〉 and produce the configuration shown schematically on the right of Figure 22.\n39\nThe final command c1 produces 〈y ′ ↿ (µ̃x.〈det ↿ (µ̃y.〈tv ↿ (x\\β)/y〉)/noun〉)/z′〉, the cotensor link the extended command\ny′z′ subj .〈y′ ↿ (µ̃x.〈det ↿ (µ̃y.〈tv ↿ (x\\β)/y〉)/noun〉)/z′〉 (40)\nand, finally, by µ1 the term for the complete proof net (and its command-µ/µ̃ pairing):\nµγ. y′z′\nsubj .〈y′ ↿ (µ̃x.〈det ↿ (µ̃y.〈tv ↿ (x\\β)/y〉)/noun〉)/z′〉 (41)\nSimilarly, starting with the c2 − µ̃2 pairing will produce.\nµβ.〈det ↿ (µ̃y. y′z′\nsubj .〈y′ ↿ (µ̃x.〈tv ↿ (x\\β)/y〉)/z′〉)/noun〉 (42)\nThese are the only two readings available with positive bias for the two atomic np arguments of the transitive verb, and, as we have seen before, this gives the right quantifier scope possibilities for an extensional transitive verb such as “likes” we have seen in equations (34) and (35) (apart from the variable names, equation (42) differs from (35) in that the extended command fraction in the latter term is at the innermost position, but the terms are equivalent up to commutative conversions).\nWhen we use a negative bias for the two np arguments of the transitive verb, we obtain the following term, corresponding to equation (33).\nµβ. y′z′\nsubj .〈y′ ↿ (µ̃x.〈tv ↿ (x\\β)/(µα.〈det ↿ α/noun〉)〉)/z′〉 (43)"
    }, {
      "heading" : "4 Conclusions",
      "text" : "The Lambek-Grishin calculus is a symmetric version of the Lambek calculus. Together with the interaction principles, it allows for the treatment of patterns beyond context-free which cannot be satisfactorily handled in the Lambek calculus. We have compared two proof systems for LG: focused sequent proofs and proof nets. Focused proofs avoid the spurious non-determinism of backward-chaining search in the sequent calculus; they provide a natural interface to semantic interpretation via their continuation-passing-style translation. Proof nets present the essence of a derivation in a visually appealing form; they do away with the syntactic clutter of sequent proofs, and compute the structure of the end-sequent in a data-driven manner where this structure has to be given before one can a start backward-chaining sequent derivation. Proof terms are read off from the composition graph associated with a net. The computation of these terms depends both on a bijection between premise and conclusion atomic formulas and between command and µ/µ̃ axioms. As a result, one net can be associated with multiple construction recipes (proof terms), corresponding to multiple derivations in the focused sequent calculus.\nTable of Contents\nProof nets for the Lambek-Grishin calculus . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Michael Moortgat, Richard Moot 1 Background, motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1.1 Dual residuation principles, linear distributivities . . . . . . . . . . . . . . 2 1.2 Arrows: LG as a deductive system . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 2 Display sequent calculus and proof nets . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 2.1 sLG: display sequent calculus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 2.2 Proof nets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 3 Proof nets and focused display calculus . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 3.1 fLG: focused display calculus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 3.2 Proof nets and focusing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 4 Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39"
    } ],
    "references" : [ {
      "title" : "Focussing and proof construction",
      "author" : [ "Andreoli", "J.-M." ],
      "venue" : "Annals of Pure and Applied Logic 107 (1-3), 131–163.",
      "citeRegEx" : "Andreoli and J..M.,? 2001",
      "shortCiteRegEx" : "Andreoli and J..M.",
      "year" : 2001
    }, {
      "title" : "Focusing and proof-nets in linear and non-commutative logic",
      "author" : [ "Andreoli", "J.-M.", "R. Maieli" ],
      "venue" : "International Conference on Logic for Programming and Automated Reasoning (LPAR), Volume 1581 of LNAI. Springer.",
      "citeRegEx" : "Andreoli et al\\.,? 1999",
      "shortCiteRegEx" : "Andreoli et al\\.",
      "year" : 1999
    }, {
      "title" : "Polarized Montagovian semantics for the LambekGrishin calculus",
      "author" : [ "A. Bastenhof" ],
      "venue" : "CoRR abs/1101.5757. To appear in the Proceedings of the 15th Conference on Formal Grammar (Copenhagen, 2010), Springer LNCS.",
      "citeRegEx" : "Bastenhof,? 2011",
      "shortCiteRegEx" : "Bastenhof",
      "year" : 2011
    }, {
      "title" : "Continuation semantics for symmetric categorial grammar",
      "author" : [ "R. Bernardi", "M. Moortgat" ],
      "venue" : "D. Leivant and R. de Queiros (Eds.), Proceedings 14th Workshop on Logic, Language, Information and Computation (WoLLIC’07), LNCS 4576. Springer.",
      "citeRegEx" : "Bernardi and Moortgat,? 2007",
      "shortCiteRegEx" : "Bernardi and Moortgat",
      "year" : 2007
    }, {
      "title" : "Continuation semantics for the LambekGrishin calculus",
      "author" : [ "Bernardi", "R. andM. Moortgat" ],
      "venue" : "Information and Computation 208 (5), 397–416.",
      "citeRegEx" : "Bernardi and Moortgat,? 2010",
      "shortCiteRegEx" : "Bernardi and Moortgat",
      "year" : 2010
    }, {
      "title" : "Proof theory for full intuitionistic linear logic, bilinear logic and mix categories",
      "author" : [ "J. Cockett", "R. Seely" ],
      "venue" : "Theory and Applications of Categories 3, pp. 85–131.",
      "citeRegEx" : "Cockett and Seely,? 1996",
      "shortCiteRegEx" : "Cockett and Seely",
      "year" : 1996
    }, {
      "title" : "Duality of computation",
      "author" : [ "P. Curien", "H. Herbelin" ],
      "venue" : "International Conference on Functional Programming (ICFP’00), pp. 233–243. [2005: corrected version].",
      "citeRegEx" : "Curien and Herbelin,? 2000",
      "shortCiteRegEx" : "Curien and Herbelin",
      "year" : 2000
    }, {
      "title" : "Semantic readings of proof nets",
      "author" : [ "P. de Groote", "C. Retoré" ],
      "venue" : "Formal Grammar,",
      "citeRegEx" : "Groote and Retoré,? \\Q1996\\E",
      "shortCiteRegEx" : "Groote and Retoré",
      "year" : 1996
    }, {
      "title" : "Linear logic",
      "author" : [ "Girard", "J.-Y." ],
      "venue" : "Theoretical Computer Science 50, 1–102.",
      "citeRegEx" : "Girard and J..Y.,? 1987",
      "shortCiteRegEx" : "Girard and J..Y.",
      "year" : 1987
    }, {
      "title" : "A new constructive logic: classical logic",
      "author" : [ "Girard", "J.-Y." ],
      "venue" : "Mathematical Structures in Computer Science 1 (3), 255–296.",
      "citeRegEx" : "Girard and J..Y.,? 1991",
      "shortCiteRegEx" : "Girard and J..Y.",
      "year" : 1991
    }, {
      "title" : "Substructural logics on display",
      "author" : [ "R. Goré" ],
      "venue" : "Logic Journal of IGPL 6 (3), 451–504.",
      "citeRegEx" : "Goré,? 1997",
      "shortCiteRegEx" : "Goré",
      "year" : 1997
    }, {
      "title" : "On a generalization of the Ajdukiewicz-Lambek system",
      "author" : [ "V. Grishin" ],
      "venue" : "A. Mikhailov (Ed.), Studies in Nonclassical Logics and Formal Systems, pp. 315–334. Moscow: Nauka. [English translation in Abrusci and Casadio (eds.) Proceedings 5th Roma Workshop, Bulzoni Editore, Roma, 2002].",
      "citeRegEx" : "Grishin,? 1983",
      "shortCiteRegEx" : "Grishin",
      "year" : 1983
    }, {
      "title" : "Parsing Beyond Context-Free Grammars",
      "author" : [ "L. Kallmeyer" ],
      "venue" : "Cognitive Technologies. Springer.",
      "citeRegEx" : "Kallmeyer,? 2010",
      "shortCiteRegEx" : "Kallmeyer",
      "year" : 2010
    }, {
      "title" : "The mathematics of sentence structure",
      "author" : [ "J. Lambek" ],
      "venue" : "American Mathematical Monthly 65, 154–170.",
      "citeRegEx" : "Lambek,? 1958",
      "shortCiteRegEx" : "Lambek",
      "year" : 1958
    }, {
      "title" : "On the calculus of syntactic types",
      "author" : [ "J. Lambek" ],
      "venue" : "R. Jacobson (Ed.), Structure of Language and its Mathematical Aspects, Proceedings of the Symposia in Applied Mathematics, Volume XII, pp. 166–178. American Mathematical Society.",
      "citeRegEx" : "Lambek,? 1961",
      "shortCiteRegEx" : "Lambek",
      "year" : 1961
    }, {
      "title" : "Categorial and categorical grammars",
      "author" : [ "J. Lambek" ],
      "venue" : "E. B. R. Oehrle and D. Wheeler (Eds.), Categorial Grammars and Natural Language Structures, pp. 297–317. Dordrecht: Reidel Publishing Company.",
      "citeRegEx" : "Lambek,? 1988",
      "shortCiteRegEx" : "Lambek",
      "year" : 1988
    }, {
      "title" : "From categorial to bilinear logic",
      "author" : [ "J. Lambek" ],
      "venue" : "K. D. P. SchröderHeister (Ed.), Substructural Logics, pp. 207–237. Oxford University Press.",
      "citeRegEx" : "Lambek,? 1993",
      "shortCiteRegEx" : "Lambek",
      "year" : 1993
    }, {
      "title" : "Multimodal linguistic inference",
      "author" : [ "M. Moortgat" ],
      "venue" : "Journal of Logic, Language and Information 5 (3,4), 349–385.",
      "citeRegEx" : "Moortgat,? 1996",
      "shortCiteRegEx" : "Moortgat",
      "year" : 1996
    }, {
      "title" : "Symmetries in natural language syntax and semantics: the Lambek-Grishin calculus",
      "author" : [ "M. Moortgat" ],
      "venue" : "Proceedings of WoLLIC 2007, Volume 4567 of LNCS, pp. 264–284. Springer.",
      "citeRegEx" : "Moortgat,? 2007",
      "shortCiteRegEx" : "Moortgat",
      "year" : 2007
    }, {
      "title" : "Symmetric categorial grammar",
      "author" : [ "M. Moortgat" ],
      "venue" : "Journal of Philosophical Logic 38 (6), 681–710.",
      "citeRegEx" : "Moortgat,? 2009",
      "shortCiteRegEx" : "Moortgat",
      "year" : 2009
    }, {
      "title" : "Proof nets for display logic",
      "author" : [ "R. Moot" ],
      "venue" : "Technical report, CNRS and INRIA Futurs.",
      "citeRegEx" : "Moot,? 2007",
      "shortCiteRegEx" : "Moot",
      "year" : 2007
    }, {
      "title" : "Proof nets for the multimodal Lambek calculus",
      "author" : [ "R. Moot", "Q. Puite" ],
      "venue" : "Studia Logica 71 (3), 415–442.",
      "citeRegEx" : "Moot and Puite,? 2002",
      "shortCiteRegEx" : "Moot and Puite",
      "year" : 2002
    }, {
      "title" : "Type Logical Grammar",
      "author" : [ "G. Morrill" ],
      "venue" : "Dordrecht:Kluwer.",
      "citeRegEx" : "Morrill,? 1994",
      "shortCiteRegEx" : "Morrill",
      "year" : 1994
    }, {
      "title" : "Nondeterministic discontinuous Lambek calculus",
      "author" : [ "G. Morrill", "M. Fadda", "O. Valentin" ],
      "venue" : "Proceedings of the Seventh International Workshop on Computational Semantics (IWCS7), Tilburg.",
      "citeRegEx" : "Morrill et al\\.,? 2007",
      "shortCiteRegEx" : "Morrill et al\\.",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 13,
      "context" : "In his two seminal papers (Lambek 1958; Lambek 1961), Jim Lambek introduced the ‘parsing as deduction’ method in linguistics: the traditional parts of speech (noun, verb, adverb, determiner, etc) are replaced by logical formulas — types if one takes the computational view; the judgement whether an expression is wellformed is the outcome of a process of logical deduction, or, reading formulas as types, a computation in the type calculus.",
      "startOffset" : 26,
      "endOffset" : 52
    }, {
      "referenceID" : 14,
      "context" : "In his two seminal papers (Lambek 1958; Lambek 1961), Jim Lambek introduced the ‘parsing as deduction’ method in linguistics: the traditional parts of speech (noun, verb, adverb, determiner, etc) are replaced by logical formulas — types if one takes the computational view; the judgement whether an expression is wellformed is the outcome of a process of logical deduction, or, reading formulas as types, a computation in the type calculus.",
      "startOffset" : 26,
      "endOffset" : 52
    }, {
      "referenceID" : 12,
      "context" : "(Kallmeyer 2010).",
      "startOffset" : 0,
      "endOffset" : 16
    }, {
      "referenceID" : 22,
      "context" : "Also in the Lambek tradition, extended type-logical systems have been proposed with expressive power beyond context-free: multimodal grammars (Morrill 1994; Moortgat 1996), discontinuous calculi (Morrill, Fadda, and Valentin 2007), etc.",
      "startOffset" : 142,
      "endOffset" : 171
    }, {
      "referenceID" : 17,
      "context" : "Also in the Lambek tradition, extended type-logical systems have been proposed with expressive power beyond context-free: multimodal grammars (Morrill 1994; Moortgat 1996), discontinuous calculi (Morrill, Fadda, and Valentin 2007), etc.",
      "startOffset" : 142,
      "endOffset" : 171
    }, {
      "referenceID" : 19,
      "context" : "In the present paper, we study the system presented in (Moortgat 2009), which we’ll refer to as LG.",
      "startOffset" : 55,
      "endOffset" : 70
    }, {
      "referenceID" : 11,
      "context" : "In a paper antedating Linear Logic by a couple of years, Grishin (1983) proposes a generalization of the Lambek calculus which removes this intuitionistic restriction.",
      "startOffset" : 57,
      "endOffset" : 72
    }, {
      "referenceID" : 16,
      "context" : "Some clarification about the notation: we follow (Lambek 1993) in writing ⊕ for the coproduct, which is a multiplicative operation, like ⊗.",
      "startOffset" : 49,
      "endOffset" : 62
    }, {
      "referenceID" : 5,
      "context" : "(Cockett and Seely 1996)): linear, because they respect resources (no material gets copied).",
      "startOffset" : 0,
      "endOffset" : 24
    }, {
      "referenceID" : 5,
      "context" : "(Cockett and Seely 1996)): linear, because they respect resources (no material gets copied). Moot (2007) models the adjunction operation of Tree Adjoining Grammars using the interaction principles of (11) and shows how through this modeling the mildly context-sensitive patterns of (5) can be obtained within LG.",
      "startOffset" : 1,
      "endOffset" : 105
    }, {
      "referenceID" : 15,
      "context" : "In his (Lambek 1988), Lambek studies the Syntactic Calculus from a categorical perspective.",
      "startOffset" : 7,
      "endOffset" : 20
    }, {
      "referenceID" : 10,
      "context" : "We introduce sLG, a sequent system for the Lambek-Grishin calculus in the style of Display Logic (Goré 1997), and show that it is equivalent to aLG.",
      "startOffset" : 97,
      "endOffset" : 108
    }, {
      "referenceID" : 10,
      "context" : "We will present the sequent calculus for LG in the format of a Display Logic (see (Goré 1997) for a comprehensive display logical view on the substructural landscape).",
      "startOffset" : 82,
      "endOffset" : 93
    }, {
      "referenceID" : 18,
      "context" : "Cut Elimination, decidability (Moortgat 2007) In sLG, Cut is an admissible rule: every theorem has a cut-free derivation.",
      "startOffset" : 30,
      "endOffset" : 45
    }, {
      "referenceID" : 21,
      "context" : "The proof nets for the Lambek-Grishin calculus we present in this section are a simple extension of the proof nets for the multimodal Lambek calculus of (Moot and Puite 2002).",
      "startOffset" : 153,
      "endOffset" : 174
    }, {
      "referenceID" : 21,
      "context" : "The proof is an easy adaptation of the proof of (Moot and Puite 2002).",
      "startOffset" : 48,
      "endOffset" : 69
    }, {
      "referenceID" : 20,
      "context" : "A detailed proof can be found in (Moot 2007).",
      "startOffset" : 33,
      "endOffset" : 44
    }, {
      "referenceID" : 4,
      "context" : "In this section, we implement his focusing regime in the context of the two-sided sequent format of (Bernardi and Moortgat 2010).",
      "startOffset" : 100,
      "endOffset" : 128
    }, {
      "referenceID" : 6,
      "context" : "This term language is a directional refinement of the λμμ̃ language of (Curien and Herbelin 2000).",
      "startOffset" : 71,
      "endOffset" : 97
    }, {
      "referenceID" : 2,
      "context" : "For the translation of (Bastenhof 2011) that we follow here, the target fragment has linear products and negation A, i.",
      "startOffset" : 23,
      "endOffset" : 39
    }, {
      "referenceID" : 2,
      "context" : "22 Focused proof search for the Lambek-Grishin calculus has been studied by Bastenhof (2011) who uses a one-sided presentation of the calculus.",
      "startOffset" : 76,
      "endOffset" : 93
    }, {
      "referenceID" : 3,
      "context" : "CPS translations for LG were introduced in (Bernardi and Moortgat 2007; Bernardi and Moortgat 2010), who adapt the call-by-value and call-by-name regimes of (Curien and Herbelin 2000) to a directional environment.",
      "startOffset" : 43,
      "endOffset" : 99
    }, {
      "referenceID" : 4,
      "context" : "CPS translations for LG were introduced in (Bernardi and Moortgat 2007; Bernardi and Moortgat 2010), who adapt the call-by-value and call-by-name regimes of (Curien and Herbelin 2000) to a directional environment.",
      "startOffset" : 43,
      "endOffset" : 99
    }, {
      "referenceID" : 6,
      "context" : "CPS translations for LG were introduced in (Bernardi and Moortgat 2007; Bernardi and Moortgat 2010), who adapt the call-by-value and call-by-name regimes of (Curien and Herbelin 2000) to a directional environment.",
      "startOffset" : 157,
      "endOffset" : 183
    }, {
      "referenceID" : 2,
      "context" : "The translation of (Bastenhof 2011) (following (Girard 1991)) is an improvement in that it avoids the ‘administrative redexes’ of the earlier approaches: the image of LG source derivations, under the mapping from (Bastenhof 2011) that we present below, are normal LP terms.",
      "startOffset" : 19,
      "endOffset" : 35
    }, {
      "referenceID" : 2,
      "context" : "The translation of (Bastenhof 2011) (following (Girard 1991)) is an improvement in that it avoids the ‘administrative redexes’ of the earlier approaches: the image of LG source derivations, under the mapping from (Bastenhof 2011) that we present below, are normal LP terms.",
      "startOffset" : 213,
      "endOffset" : 229
    } ],
    "year" : 2011,
    "abstractText" : "Grishin’s generalization of Lambek’s Syntactic Calculus combines a non-commutative multiplicative conjunction and its residuals (product, left and right division) with a dual family: multiplicative disjunction, right and left difference. Interaction between these two families takes the form of linear distributivity principles. We study proof nets for LG and the correspondence between these nets and unfocused and focused versions of its sequent calculus. 1 Background, motivation In his two seminal papers (Lambek 1958; Lambek 1961), Jim Lambek introduced the ‘parsing as deduction’ method in linguistics: the traditional parts of speech (noun, verb, adverb, determiner, etc) are replaced by logical formulas — types if one takes the computational view; the judgement whether an expression is wellformed is the outcome of a process of logical deduction, or, reading formulas as types, a computation in the type calculus. np ⊗ (np\\s) ⊗ (((np\\s)\\(np\\s))/np) ⊗ (np/n) ⊗ n → s time flies like an arrow (1) What is the precise nature of grammatical composition, the ⊗ operation in the example above? The ’58 and ’61 papers present two views on this: in the ’58 paper, types are assigned to strings of words, in the ’61 paper, they are assigned to phrases, bracketed strings, with a grouping into constituents. The Syntactic Calculus, under the latter view, is extremely simple. The derivability relation between types is given by the preorder laws (2) and the residuation principles of (3). A → A ; from A → B and B → C infer A → C (2) ⋆ Draft of a chapter in E. Grefenstette, C. Heunen, and M. Sadrzadeh (eds.) ‘Compositional methods in Physics and Linguistics’, OUP, to appear. We thank Arno Bastenhof for helpful comments on an earlier version. 2 A → C/B iff A⊗B → C iff B → A\\C (3) To obtain the ’58 view, one adds the non-logical axioms of (4), attributing associativity properties to the ⊗ operation. (A⊗B)⊗ C → A⊗ (B ⊗ C) ; A⊗ (B ⊗ C) → (A⊗B)⊗ C (4) The Syntactic Calculus in its two incarnations — the basic system NL given by (2) and (3) and the associative variant L which adds the postulates of (4) — recognizes only context-free languages. It is well known that to capture the dependencies that occur in natural languages, one needs expressivity beyond context-free. Here are some characteristic patterns from formal language theory that can be seen as suitable idealizations of phenomena that occur in the wild. copying: {w | w ∈ {a, b}} counting dependencies: {abc | n > 0} crossed dependencies: {abcd | n,m > 0} (5) In the tradition of extended rewriting systems, there is a large group of grammar formalisms that handle these and related patterns gracefully: Tree Adjoining Grammars, Linear Indexed Grammars, Combinatory Categorial Grammars, Minimalist Grammars, Multiple Context Free Grammars, . . . (Kallmeyer 2010). Also in the Lambek tradition, extended type-logical systems have been proposed with expressive power beyond context-free: multimodal grammars (Morrill 1994; Moortgat 1996), discontinuous calculi (Morrill, Fadda, and Valentin 2007), etc. These extensions, as well as the original Lambek systems, respect an “intuitionistic” restriction: in a sequent presentation, derivability is seen as a relation between (a structured configuration of) hypotheses A1, . . . , An and a single conclusionB. In a paper antedating Linear Logic by a couple of years, Grishin (1983) proposes a generalization of the Lambek calculus which removes this intuitionistic restriction. Linguistic application of Grishin’s ideas is fairly recent. In the present paper, we study the system presented in (Moortgat 2009), which we’ll refer to as LG. 1.1 Dual residuation principles, linear distributivities In LG the inventory of type-forming operations is doubled: in addition to the familiar operators ⊗, \\, / (product, left and right division), we find a dual family ⊕,⊘,;: coproduct, right and left difference. A,B ::= p | atoms: s, np, . . . A⊗B | B\\A | A/B | product, left vs right division A⊕B | A⊘B | B ; A coproduct, right vs left difference (6) Some clarification about the notation: we follow (Lambek 1993) in writing ⊕ for the coproduct, which is a multiplicative operation, like ⊗. We read B\\A as ‘B under A’, A/B as ‘A over B’, B ; A as ‘B from A’ and A ⊘ B as ‘A less B’. 3 For the difference operations, then, the quantity that is subtracted is under the circled (back)slash, just as we have the denominator under the (back)slash in the case of left and right division types. In a formulas-as-types spirit, we will feel free to refer to the division operations as implications, and to the difference operations as co-implications. Dual residuation principles The most basic version of LG is the symmetric generalization of NL, which means that to (2) and (3) we add the dual residuation principles of (7). B ; C → A iff C → B ⊕A iff C ⊘A → B (7) To get a feeling for the consequences of the preorder laws (2) and the (dual) residuation principles (3) and (7), here are some characteristic theorems and derived rules of inference. First, the compositions of the product and division operations, and of the co-product and difference operation give rise to the expanding and contracting patterns of (8). The rows here are related by a left-right symmetry; the columns by arrow reversal. A⊗ (A\\B) → B → A\\(A⊗B) (B/A)⊗A → B → (B ⊗A)/A (B ⊕A)⊘A → B → (B ⊘A)⊕A A ; (A⊕B) → B → A⊕ (A ; B) (8) Secondly, one can show that the type-forming operations have the monotonicity properties summarized in the following schema, where ↑ (↓) is an isotone (antitone) position: (↑ ⊗ ↑), (↑ / ↓), (↓ \\ ↑), (↑ ⊕ ↑), (↑ ⊘ ↓), (↓ ; ↑) In other words, the following inference rules are valid. A → A B → B A ⊗B → A⊗B A → A B → B A⊕B → A ⊕B (9) A → A B → B A\\B → A\\B A → A B → B A ⊘B → A⊘B A → A B → B B/A → B/A A → A B → B B ; A → B ; A (10) Interaction: distributivity principles As we saw above, one could extend the inferential capabilities of this minimal system by adding postulates of associativity and/or commutativity for ⊗ and ⊕. From a substructural perspective, each of these options destroys structure-sensitivity for a particular dimension of grammatical organization: word order in the case of commutativity, constituent structure in the case of associativity. In LG there is an alternative which leaves the sensitivity for linear order and phrasal structure intact: instead of considering structural options for the individual ⊗ and ⊕ families, one can consider 4 interaction principles for the communication between them. We will consider the following group. (A ; B)⊗ C → A ; (B ⊗ C) C ⊗ (B ⊘A) → (C ⊗B)⊘A C ⊗ (A ; B) → A ; (C ⊗B) (B ⊘A)⊗ C → (B ⊗ C)⊘A (11) These postulates have come to be called linear distributivity principles (e.g. (Cockett and Seely 1996)): linear, because they respect resources (no material gets copied). Moot (2007) models the adjunction operation of Tree Adjoining Grammars using the interaction principles of (11) and shows how through this modeling the mildly context-sensitive patterns of (5) can be obtained within LG. 1.2 Arrows: LG as a deductive system In his (Lambek 1988), Lambek studies the Syntactic Calculus from a categorical perspective. Types are seen as the objects of a category and one studies morphisms between these objects, arrows f : A −→ B. For each A, there is an identity arrow 1A. Then there are inference rules to produce new arrows from arrows already obtained. Among these is the composition g ◦ f , defined when dom(g) = cod(f). Composition is associative, i.e. one has the equation f ◦ (g ◦ h) = (f ◦ g) ◦ h. Also, f ◦ 1A = f = 1B ◦ f , where f : A −→ B. 1A : A −→ A f : A −→ B g : B −→ C g ◦ f : A −→ C (12) In this paper, we will not pursue the categorical interpretation of LG: our emphasis in the following sections is on the sequent calculus for this logic, the term language coding sequent proofs, and the correspondence between these proofs and proof nets. Our aim in this section is simply to have a handy language for naming proofs in the deductive presentation, and to use this in §2.1 to establish the equivalence between the deductive and the sequent presentations. To obtain aLG, one adds to (12) further rules of inference for the residuation principles and their duals. (Omitting type subscripts ⊲A,B,Cf for legibility. . . ) f : A⊗B −→ C ⊲f : A −→ C/B f : A⊗ B −→ C ⊳f : B −→ A\\C (13) g : A −→ C/B ⊲g : A⊗B −→ C g : B −→ A\\C ⊳g : A⊗B −→ C (14) f : C −→ B ⊕A ◭ f : B ; C −→ A f : C −→ B ⊕A ◮ f : C ⊘A −→ B (15) g : B ; C −→ A ◭ g : C −→ B ⊕A g : C ⊘A −→ B ◮ g : C −→ B ⊕A (16) 5 As remarked above, the Lambek-Grishin calculus exhibits two involutive symmetries, at the level of types and proofs: a left-right symmetry · and an arrow reversing symmetry · such that f ♮ : A −→ B iff f : A −→ B iff f † : B −→ A (17) with, on the type level, the translation tables below (abbreviating a long list of defining equations (A⊗B) . = B ⊗A, (B ⊗A) . = A ⊗B, . . . ) A⊗B A/B A⊕B A⊘B B ⊗A B\\A B ⊕A B ; A ♮ A/B A⊗B B\\A B ; A B ⊕A A⊘B † and on the level of proofs (1A) ♮ = 1A♮ , (g ◦ f) ♮ = g ◦ f , (1A) † = 1A† , (g ◦ f) = f † ◦ g, and the list of defining equations (⊳f) . = ⊲f , (⊳f) . =◮ f , . . . corresponding to the translation tables above. The distributivity principles, in aLG, take the form of extra axioms (primitive arrows). Below arrows d, b for the interaction between ; and ⊗. For the leftright symmetric pair d, q we write b, p dA,B,C : (A ; B)⊗ C −→ A ; (B ⊗ C) qA,B,C : C ⊗ (A ; B) −→ A ; (C ⊗B) (18) To establish the equivalence between aLG and the sequent calculus sLG, to be discussed in the next section, we will use the fact that the monotonicity rules are derived rules of inference of aLG. For example, f/g can be defined as in (19) below. f : A −→ A g : B −→ B f/g : A/B −→ A/B f/g . = (⊲(f ◦ (⊲1A/B)))) ◦ (⊲ ⊳ −1 ((⊳ ⊲ 1A/B′) ◦ g)) (19) Similarly, for the distributivity postulates, we will rely on a rule form, which for d would be B ⊗ C → A⊕D A ; B → D/C (20) The inference rule (20) is derived as shown in (21). dA,B,C : (A ; B)⊗ C −→ A ; (B ⊗ C) f : B ⊗ C −→ A⊕D ◭ f : A ; (B ⊗ C) −→ D (◭ f) ◦ dA,B,C : (A ; B)⊗ C −→ D ⊲((◭ f) ◦ dA,B,C) : A ; B −→ D/C (21) 2 Display sequent calculus and proof nets Is there a decision procedure to determine whether A → B holds? In the presence of expanding patterns as we saw them in (8), this is not immediately clear. For 6 the language with /,⊗, \\, the key result of Lambek’s original papers was to establish decidability by applying Gentzen’s method: the Syntactic Calculus is recast as a sequent calculus; for the sequent presentation one then shows that the Cut rule (the sequent form of transitivity) is admissible; backward-chaining, cut-free proof search then yields the desired decision procedure. In §2.1 below, we work through a similar agenda for LG. We introduce sLG, a sequent system for the Lambek-Grishin calculus in the style of Display Logic (Goré 1997), and show that it is equivalent to aLG. The sequent presentation enjoys Cut Elimination; decidability follows. Sequent proof search, though decidable, remains suboptimal in that it allows a great many derivations for what in effect one would like to consider as ‘the same’ proof. In §2.2, we introduce proof nets for LG, and show how these nets remove the spurious forms of nondeterminism of sequent proof search. 2.1 sLG: display sequent calculus The arrows of aLG are morphisms between types. In the sequent calculus, derivability is a relation between structures built from types. We will present the sequent calculus for LG in the format of a Display Logic (see (Goré 1997) for a comprehensive display logical view on the substructural landscape). The characteristic feature of Display Logic is that for every logical connective, there is a corresponding structural connective. We use the same symbols for the logical operations and their structural counterparts; structural operations are marked off by centerdots. Below the grammar for input (sequent left hand side), and output structures (sequent rhs). I ::= F | I · ⊗ · I | I · ⊘ · O | O · ; · I O ::= F | O · ⊕ · O | I · \\ · O | O · / · I The rules of sLG come in three groups: the identity group (Axiom, Cut), the structural group (Display Postulates, Distributivity Postulates), and the logical group (left and right introduction rules for the logical connectives). Variables X,Y, Z in these rules range over structures, input or output, depending on whether they appear left or right of the sequent arrow. Axiom, Cut A ⇒ A Ax X ⇒ A A ⇒ Y X ⇒ Y Cut (22) Display postulates The (dual) residuation principles are formulated at the structural level. These rules ensure that any formula constituent of a sequent can be displayed as the single occupant of the sequent lhs or rhs—hence the name.",
    "creator" : "LaTeX with hyperref package"
  }
}