{
  "name" : "1705.04719.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "On the Complexity of Semantic Integration of OWL Ontologies",
    "authors" : [ "Yevgeny Kazakov", "Denis Ponomaryov" ],
    "emails" : [ "yevgeny.kazakov@uni-ulm.de", "ponom@iis.nsk.su" ],
    "sections" : [ {
      "heading" : "1 Introduction and Motivation",
      "text" : "Logic-based ontology languages such as OWL and OWL 2 [Cuenca Grau et al., 2008] are becoming increasingly popular means for representation, integration, and querying of information, particularly in life sciences, such as Biology and Medicine. For example, a repository of Open Biological and Biomedical Ontologies [Smith et al., 2007] is comprised of over eighty specialised ontologies on such diverse topics as molecular functions, biological processes, and cellular components. Ontology integration, in particular, aims at organizing information on different domains in a modular way so that information from one ontology can be reused in other ontologies. For example, the ontology of diseases may reference anatomical structures to describe the location of diseases, or genes with which the diseases are likely to be correlated.\nIntegration of multiple ontologies in OWL is organized via importing: an OWL ontology can refer to one or several other OWL ontologies, whose axioms must be implicitly present in the ontology. The importing mechanism is simple in that it does not require any significant modification of the underlying reasoning algorithms: in order to answer a query over an ontology with an import declaration, it is sufficient to apply the algorithm to the import closure consisting of the axioms of the ontology plus the axioms of the ontologies that are imported (possibly indirectly). For example, if ontologyO1 imports ontologies O2 and O3, each of which, in turn, imports ontology O4, then the import closure of O1 consists of all axioms of O1 − O4. Provided these axioms altogether are expressible in the same fragment of OWL as each O1 − O4\nis, a reasoning algorithm for this fragment can be used to answer queries over the import closure of O1. Then, since the size of such import closure is the same as the combined size of all ontologies involved, the computational complexity of reasoning over ontologies with imports remains the same as for ontologies without imports.\nAlthough the OWL importing mechanism may work well for simple ontology integration scenarios, it may cause some undesirable side effects if used in complex import situations. To illustrate the problem, suppose that in the above example, O4 is an ontology describing a typical university. It may include concepts such as Student, Professor, Course, and axioms stating, e.g., that each professor must teach some course and that students are disjoint with professors:\nProfessor v ∃teaches.Course, (1) Student u Professor v ⊥. (2)\nNow suppose that O2 and O3 are ontologies describing respectively, Oxford and Cambridge universities that use O4 as a prototype. For example, O2 may include mapping axioms\nOxfordStudent ≡ Student, (3) OxfordProfessor ≡ Professor, (4)\nOxfordCourse ≡ Course, (5)\nfrom which, due to (1), it is now possible to conclude that each Oxford professor must teach some Oxford course:\nOxfordProfessor v ∃teaches.OxfordCourse. (6)\nLikewise, using similar mapping axioms in O3, it is possible to obtain that Cambridge students and professors are disjoint:\nCambridgeStudent u CambridgeProfessor v ⊥. (7)\nFinally, suppose that O1 is an ontology aggregating information about UK universities, importing, among others, the ontologies O2 and O3 for Oxford and Cambridge universities.\nAlthough the described scenario seems plausible, there will be some undesirable consequences in O1 due to the mapping axioms of O2 and O3 occurring in the import closure:\nOxfordStudent ≡ CambridgeStudent, (8) OxfordProfessor ≡ CambridgeProfessor, (9)\nOxfordCourse ≡ CambridgeCourse. (10)\nar X\niv :1\n70 5.\n04 71\n9v 1\n[ cs\n.A I]\n1 2\nM ay\n2 01\n7\nThe main reason for these consequences is that the ontologiesO2 andO3 happen to reuse the same ontologyO4 in two different and incompatible ways. Had they instead used two different ‘copies’ ofO4 as prototypes (with concepts renamed apart), no such problem would take place. Arguably, the primary purpose ofO2 andO3 is to provide semantic description of the vocabulary for Oxford and Cambridge universities, and the means of how it is achieved—either by writing the axioms directly or reusing third party ontologies such asO4—should be an internal matter of these two ontologies and should not be exposed to the ontologies that import them.\nMotivated by the described scenario, in this paper we consider a refined mechanism for importing of OWL ontologies called semantic importing. The main difference with the standard OWL importing, is that each import is limited only to a subset of symbols. Intuitively, only logical properties of these symbols entailed by the imported ontology should be imported. These symbols can be regarded as the public (or external) vocabulary of the imported ontologies. For example, ontology O2 may declare the symbols OxfordStudent, OxfordProfessor, OxfordCourse, and teaches public, leaving the remaining symbols only for the internal use.\nThe main results of this paper are tight complexity bounds for reasoning over ontologies with semantic imports. We consider ontologies formulated in different fragments of OWL starting from the propositional (role-free) Horn fragment H, full propositional (role-free) fragment P , and concluding with the Description Logic (DL) SROIQ, which corresponds to OWL 2. We also distinguish the case of acyclic imports, when ontologies cannot (possibly indirectly) import themselves. Our completeness results for ranges of DLs are summarized in the following table, where a and c denote the case of acyclic/cyclic imports respectively:\nDLs Completeness Theorems EL – EL++ ExpTime a 1, 10\ncontaining EL RE (undecidable) c 2, 11 ALC – SHIQ 2ExpTime a 3, 10 R – SRIQ 3ExpTime a 4, 10 ALCHOIF – SHOIQ coN2ExpTime a 5, 10 ROIF – SROIQ coN3ExpTime a 6, 10\nH - P ExpTime c 7, 12 H - P PSpace a 8, 13\nThe paper is organized as follows. In Sections 2-3 we describe related work and introduce basic notations. In Section 4 we formulate the problem of entailment in ontology networks. In Section 5 we prove results on the expressiveness of ontology networks and use them to show hardness of entailment in Section 6. Finally, in Section 7 we demonstrate that entailment in ontology networks reduces to standard entailment in Description Logics and use these results to prove in Section 8 that the obtained complexity bounds are tight."
    }, {
      "heading" : "2 Related Work",
      "text" : "Frameworks for combining ontologies share the natural\nview that interpretations of linked ontologies must satisfy certain correspondence constraints. Most existing approaches (e.g. see an overview in [Homola and Serafini, 2010]) consider a model of a combination of ontologies as a tuple of\ninterpretations, one for each ontology, with correspondence relations between the interpretation domains. These relations allow for propagation of semantics of entities (e.g., concepts, roles) from one ontology to another by providing interpretation for constructs stating links between ontology entities. The constructs are bridge rules in DDL [Borgida and Serafini, 2003], local/foreign symbol labels in PDL [Bao et al., 2009] and the approach of [Pan et al., 2006], link properties in E-connections [Grau et al., 2009], and alignment relations in [Euzenat et al., 2007]. The last approach originates from the field of ontology matching [Shvaiko and Euzenat, 2013], which is a neighbour topic lying out of the scope of our paper, since it concentrates on computing matchings, but not on reasoning with them. The semantics for a combination of ontologies proposed in these approaches are in general not compatible with the conventional OWL importing mechanism. If an ontology O1 references some ontology O2, then correspondence relations guarantee propagation of certain entailments expressible in the language of O2 into the ontology O1. As a rule, the class of propagated entailments is not broad enough to simulate entailment form the union of ontologies, as required in OWL importing. The approach of [Grau and Motik, 2012] tries to bridge this gap by putting restrictions on combined ontologies, i.e. by considering conservative importing. Semantics given by tuples of interpretations may cause undesired effects, when combining two ontologies O1,O2 which both refine the same ontology O (cf. the motivating example from the introduction). OntologiesOi may refine concepts of O in different ways, which may conflict to each other, while being consistent separately. The semantics given by tuples of interpretations makes supporting such integration scenarios problematic, since a single interpretation ofO must be in correspondence with interpretations of both ontologies, O1 and O2. The integration mechanism proposed in this paper is conceptually simple. In order to reference an external ontologyO from a local one, one has only to specify an import relation, which defines a set of symbols, whose semantics should be borrowed from O. The symbols can be used freely in the axioms of the local ontology, no additional language constructs are required. This resembles the approaches [Bao et al., 2009; Pan et al., 2006], although theoretically, we do not distinguish between local and external symbols in ontologies (we note that this feature can be easily integrated). Importantly, in our approach every ontology has its own view on ontologies it refines and the views are independent between ontologies unless coordinated by the ‘topology’ of import relations."
    }, {
      "heading" : "3 Preliminaries",
      "text" : "We assume that the reader is familiar with the family of Description Logics from EL to SROIQ, for which the syntax is defined using a recursively enumerable alphabet consisting of infinite disjoint sets NC, NR, Ni of concept names (or primitive concepts), roles, and nominals, respectively. We also consider DLsH andP , which are the role-free fragments of EL and ALC, respectively. Thus, P corresponds to the classical propositional logic and H corresponds to the Horn fragment thereof.\nThe semantics of DLs is given by means of (first-order)\ninterpretations. An interpretation I = 〈∆, ·I〉 consists of a non-empty set ∆, the domain of I, and an interpretation function ·I , that assigns to each A ∈ NC a subset AI ⊆ ∆, to each r ∈ NR a binary relation rI ⊆ ∆×∆, and to each a ∈ Ni an element of the domain ∆. An interpretation I satisfies a concept inclusion C v D, written I |= C v D, if CI ⊆ DI holds. An ontology is a set of concept inclusions which are called ontology axioms. I is a model of an ontology O, written I |= O, if I satisfies all axioms ofO. An ontologyO entails a concept inclusion C v D, in symbols O |= C v D, if every model of O satisfies C v D. As usual, for concepts C,D, the equivalence C ≡ D stands for the pair of concept inclusions C v D and D v C.\nA signature is a subset of NC ∪ NR ∪ Ni. Interpretations I and J are said to agree on a signature Σ, written as I =Σ J , if the domains of I and J coincide and the interpretation of Σ-symbols in I is the same as in J . We denote the reduct of an interpretation I onto a signature Σ as I|Σ. The signature of a concept C, denoted as sig (C), is the set of all concept names, roles, and nominals occurring in C. The signature of a concept inclusion or an ontology is defined identically."
    }, {
      "heading" : "4 Semantic Importing",
      "text" : "Given a signature Σ, suppose one wants to import into an ontology O1 the semantics of Σ-symbols defined by some other ontology O2, while ignoring the rest of the symbols from O2. Intuitively, importing the semantics of Σ-symbols means reducing the class of models of O1 by removing those models that violate the restrictions on interpretation of these symbols, which are imposed by the axioms of O2: Definition 1. A (semantic) import relation is a tuple π = 〈O1,Σ,O2〉 where O1 and O2 are ontologies and Σ a signature. In this case, we say that O1 imports Σ from O2. We say that a model I |= O1 satisfies the import relation π if there exists a model J |= O2 such that I =Σ J . Example 1. Consider the import relation π = 〈O1,Σ,O2〉, with O1 = {B v C}, O2 = {A v ∃r.B, ∃r.C v D}, and Σ = {A,B,C,D}. It can be easily shown using Definition 1 that a model I |= O1 satisfies π if and only if I |= A v D.\nNote that if Σ contains all symbols in O2 then I |= O1 satisfies π = 〈O1,Σ,O2〉 if and only if I |= O1 ∪ O2. That is, the standard OWL import relation is a special case of the semantic import relation, when the signature contains all the symbols from the imported ontology.\nIf O has several import relations φi = 〈O,Σi,Oi〉, (1 ≤ i ≤ n), one can define the entailment from O by considering only those models of O that satisfy all imports: O |= α if I |= α for every I |= O which satisfies all π1, . . . , πn. In practice, however, import relations can be nested: imported ontologies can themselves import other ontologies and so on. The following definition generalizes entailment to such situations.\nDefinition 2. An ontology network is a finite set N of import relations between ontologies. For a DL L, a L-ontology network is a network, in which every ontology is a set of Laxioms. A model agreement for N (over a domain ∆) is a mapping µ that assigns to every ontology O occurring in N\na class µ(O) of models of O with domain ∆ such that for every 〈O1,Σ,O2〉 ∈ N and every I1 ∈ µ(O1) there exists I2 ∈ µ(O2) such that I1 =Σ I2. An interpretation I is a model of O in the network N (notation I |=N O) if there exists a model agreement µ for N such that I ∈ µ(O). An ontology O entails a concept inclusion ϕ in the network N (notation O |=N ϕ) if I |= ϕ, whenever I |=N O.\nAn ontology network can be seen as a labeled directed multigraph in which nodes are labeled by ontologies and edges are labeled by sets of signature symbols. Each edge in this graph, thus, represents an import relation between two ontologies. Note that Definition 2 also allows for cyclic networks if this graph is cyclic. That is, an ontology may refer to itself through a chain of import relations. Note that if O |= ϕ then O |=N ϕ, for every network N . Example 2. Consider the following (cyclic) network N = {〈O,Σ′,O′〉, 〈O′,Σ,O〉}, where • O = {A v B, A ≡ A′, B ≡ B′} • O′ = {A ≡ ∃r.A′, B ≡ ∃r.B′} • Σ = {A,B, r}, Σ′ = {A′, B′, r}\nLet µ be any model agreement forN . Since 〈O′,Σ,O〉 ∈ N , by Definition 2, for every I ′ ∈ µ(O′) there exists I ∈ µ(O) such that I ′ =Σ I. Since I |= O |= A v B and {A,B} ⊆ Σ, we have I ′ |= A v B. As I ′ |= O′, it also holds I ′ |= ∃r.A′ v ∃r.B′ for every I ′ ∈ µ(O′) and thus:\nO′ |=N ∃r.A′ v ∃r.B′. (11)\nSimilarly, since 〈O,Σ,O′〉 ∈ N , for every I ∈ µ(O) there exists I ′ ∈ µ(O′) such that I =Σ′ I ′. Since I ′ |= ∃r.A′ v ∃r.B′ and {A′, B′, r} ⊆ Σ′, we have I |= ∃r.A′ v ∃r.B′ and since I |= O, it holds I |= ∃r.A v ∃r.B, for every I ∈ µ(O), and hence:\nO |=N ∃r.A v ∃r.B. (12)\nBy repeating these arguments we similarly obtain:\nO′ |=N ∃r.∃r.A′ v ∃r.∃r.B′, (13) O |=N ∃r.∃r.A v ∃r.∃r.B, (14) O′ |=N ∃r.∃r.∃r.A′ v ∃r.∃r.∃r.B′, (15) O |=N ∃r.∃r.∃r.A v ∃r.∃r.∃r.B, (16)\nand so on. Note the matching nestings of ∃r in these axioms. In this paper, we are concerned with the complexity of entailment in ontology networks, that is, given a network N , an ontology O and an axiom ϕ, decide whether O |=N ϕ. We study the complexity of this problem wrt the size of an ontology networkN , which is defined as the total length of axioms (considered as strings) occurring in ontologies from N ."
    }, {
      "heading" : "5 Expresiveness of Ontology Networks",
      "text" : "We illustrate the expressiveness of ontology networks by\nshowing that acyclic networks allow for succinctly representing axioms with nested concepts and role chains of exponential size, while cyclic ones allow for succinctly representing infinite sets of axioms of a special form.\nFor a natural number n > 0, let ∃(r, C)n.D be a shortcut for the nested concept\n∃r.(C u ∃r.(C u · · · u ∃r.(C︸ ︷︷ ︸ n times uD) · · · )) (17)\nwhere C, D are DL concepts and r a role (in case n = 0 the above concept is set to be D). For n > 1, let (r)n denote the role chain\nr ◦ . . . ◦ r︸ ︷︷ ︸ n times\n(18)\nFor a given n > 0, let 1exp(n) be the notation for 2n and for k > 1, let (k + 1)exp(n) = 2kexp(n). Then ∃(r, C)kexp(n).D (respectively, (r)kexp(n)) stands for a nested concept (role chain) of the form above having size exponential in n.\nIn the following, we use abbreviations ∃(r, C)n := ∃(r, C)n.> and ∃rn.C := ∃(r,>)n.C. For roles r, s and n > 2, let (r)<n v s be an abbreviation for the set of role inclusions {(r)k v s | 1 6 k < n}. For n > 1, the expression ∀rn.C will be used as a shortcut for ¬∃r.∃rn−1.¬C and for n > 2, ∀r<n.C will stand for ⊔16m<n∀rm.C.\nLet O be an ontology and N an ontology network. O is said to be expressible by N if there is an ontology ON in N such that {I|sig (O) | I |=N ON } = {J |sig (O) | J |= O}. In other words, it holds ON |=N O and any model J |= O can be expanded to a model I |=N ON . Note that this yields that O |= ϕ iff ON |=N ϕ, for any concept inclusion ϕ such that sig (ϕ) ⊆ sig (O). In case we want to stress the role of ontology ON in the network N , we say that O is (N ,ON )- expressible. An axiom ϕ is expressible by a network N if so is ontology O = {ϕ}.\nThe next two lemmas follow immediately from the definition of expressibility. Lemma 1. Every ontology O is (N ,O)-expressible, where N is the network consisting of the single import relation 〈O,∅,∅〉. If an ontology Oi is (Ni,O′i)-expressible, for a network Ni, ontology O′i, and i = 1, 2, then O1 ∪ O2 is (N ,ON )-expressible, for ontology ON = ∅ and a network1 N = N1 ∪N2 ∪ {〈ON , sig (Oi),O′i〉}i=1,2.\nFor an axiom ϕ and a set of concepts {C1, . . . , Cn}, n > 1, let us denote by ϕ[C1 7→ D1, . . . , Cn 7→ Dn] the axiom obtained by substituting every concept Ci with a concept Di in ϕ. For an ontology O, let O[C1 7→ D1, . . . , Cn 7→ Dn] be a notation for ⋃ ϕ∈O ϕ[C1 7→ D1, . . . , Cn 7→ Dn].\nLemma 2. Let L be a DL and O an ontology, which is expressible by a L-ontology network N . Let C1, . . . , Cn be L-concepts and {A1, . . . , An} a set of concept names such that Ai ∈ sig (O), for i = 1, . . . , n and n > 1. Then ontology Õ = O[A1 7→ C1, . . . , An 7→ Cn] is expressible by a L-ontology network, which is acyclic if so is N and has size polynomial in the size of N and Ci, i = 1, . . . , n.\nProof. Denote Σ = {A1, . . . , An} and let Σ′ = {A′1, . . . , A′n} be a set of fresh concept names. Consider ontology O′ = O ∪ {Ai ≡ A′i}i=1,...,n. By Lemma 1, O′ is\n1Note that the size of N is linear in the sizes of N1 and N2.\n(N ′,ON ′)-expressible, for an ontology ON ′ and an acyclic L-ontology network N ′ having a linear size (in the size of N ). Consider ontology network N ′′ = 〈ON ′′ , (sig (O′) \\ Σ) ∪ Σ′,ON ′〉, where ON ′′ = ∅. Then obviously, ontology O′′ = O[A1 7→ A′1, . . . , An 7→ A′n] is (N ′′,ON ′′)- expressible. Similarly, by Lemma 1, ontology O′′C = O′′ ∪ {A′i ≡ Ci}i=1,...,n is (Ñ ,OÑ )-expressible, for an ontology OÑ and an acyclic L-ontology network Ñ having a linear size (in the size of N and Ci, for i = 1, . . . , n). Clearly, it holds OÑ |=Ñ Õ. On the other hand, any model I |= Õ can be expanded to a model J of ontology O′′C by setting (A′i) J = (Ci) I , for i = 1, . . . , n. Since O′′C is (Ñ ,OÑ )- expressible, it follows that I can be expanded to a model J̃ |=Ñ OÑ and therefore, Õ is (Ñ ,OÑ )-expressible.\nNow we proceed to the results on the succinct representation of exponentially long axioms and infinite sets of axioms of a special form. We begin with lemmas on the expressiveness of acyclic EL- and ALC-ontology networks. Lemma 3. An axiom ϕ of the form Z ≡ ∃(r,A)1exp(n).B, where Z,A,B ∈ NC, and n > 0, is expressible by an acyclic EL-ontology network of size polynomial in n.\nProof. We prove by induction on n that there exists an acyclic EL-ontology network Nn and ontology On such that ϕ is (Nn,On)-expressible. For n = 0, we define N0 = {〈O0,∅,∅〉} and O0 = {Z ≡ ∃r.(A uB)}.\nIn the induction step, let {Z ≡ ∃(r,A)1exp(n−1).B} be (Nn−1,On−1)-expressible, for n > 1. Consider ontologies:\nO1copy = {B ≡ U} (19)\nO2copy = {U ≡ Z} (20) On = ∅ (21)\nLet Nn be the union of Nn−1 with the set of the following import relations: 〈Oicopy, {Z,A,B, r},On−1〉, for i = 1, 2, 〈On, {Z,A,U, r},O1copy〉, and 〈On, {U,A,B, r},O2copy〉.\nLet us verify that {I|sig (ϕ) | I |=Nn On} = {I|sig (ϕ) | I |= ϕ}. By the induction assumption we have On−1 |=Nn Z ≡ ∃(r,A)1exp(n−1).B. Then by the definition of Nn, it holds O1copy |=Nn Z ≡ ∃(r,A)1exp(n−1).U and O2copy |=Nn U ≡ ∃(r,A)1exp(n−1).B and thus, On |=Nn {Z ≡ ∃(r,A)1exp(n−1).U, U ≡ ∃(r,A)1exp(n−1).B}, which yields On |=Nn ϕ.\nWe now show that any model I |= ϕ can be expanded to a model Jn |=Nn On. Let us define Jn as an expansion of I by setting UJn = (∃(r,A)1exp(n−1).B)I . Clearly, it holds Jn |= On and there exists a model I2 |= O2copy such that I2 ={U,A,B,r} Jn and ZI2 = UI2 . We have I2 |= Z ≡ ∃(r,A)1exp(n−1).B and hence by the induction assumption, there is a model J 2n−1 |=Nn On−1 such that I2 ={Z,A,B,r} J 2n−1. Similarly, there is a model I1 |= O1copy such that I1 ={Z,A,U,r} Jn andBI1 = (∃(r,A)1exp(n−1))I1 . We have I1 |= Z ≡ ∃(r,A)1exp(n−1).B, thus by the induction assumption, there is a model J 1n−1 |=Nn On−1 such that I1 ={Z,A,B,r} J 1n−1. It follows that there exists a model\nagreement µ for Nn such that µ(On−1) = {J 1n−1,J 2n−1}, µ(Oicopy) = {Ii}, for i = 1, 2, and µ(On) = {Jn}, which means that Jn |=Nn On.\nThe following two statements are proved identically to Lemma 3: Lemma 4. An axiom of the form Z v ∃(r,A)1exp(n).B, where Z,A,B ∈ NC and n > 0, is expressible by an acyclic EL-ontology network of size polynomial in n. Lemma 5. An axiom of the form Z ≡ ∀r1exp(n).A, where Z,A ∈ NC and n > 0, is expressible by an acyclic ALContology network of size polynomial in n.\nNext, we demonstrate the expressiveness of acyclic Rontology networks.\nLemma 6. An axiom ϕ of the form (r)2exp(n) v s, where r, s are roles and n > 0, is expressible by an acyclic R-ontology network of size polynomial in n.\nProof. We use the idea of the proof of Lemma 3 and show by induction on n that there exists an acyclic R-ontology network Nn and ontology On ∈ Nn such that ϕ is (Nn,On)expressible. For n = 0, we define N0 = {〈O0,∅,∅〉} and O0 = {r ◦ r v s}.\nIn the induction step, let (r)2exp(n−1) v s be (Nn−1,On−1)-expressible, for n > 1. Consider ontologies:\nO1copy = {s v u} (22)\nO2copy = {u v r} (23) On = ∅ (24)\nLet Nn be the union of Nn−1 with the set of the following import relations: 〈Oicopy, {r, s},On−1〉, for i = 1, 2, 〈On, {r, u},O1copy〉, and 〈On, {u, s},O2copy〉.\nWe show that {I|sig (ϕ) | I |=Nn On} = {I|sig (ϕ) | I |= ϕ}. By the induction assumption, we have On−1 |=Nn (r)2exp(n−1) v s. Hence by the definition of Nn, it holds O1copy |=Nn (r)2exp(n−1) v u and O1copy |=Nn (u)2exp(n−1) v s and therefore,On |=Nn {(r)2exp(n−1) v u, (u)2exp(n−1) v s}, which means that On |=Nn ϕ. By using an argument like in the proof of Lemma 3 one can verify that any model I |= ϕ can be expanded to a model Jn |=Nn On by setting uJn = ((r)2exp(n−1))I .\nLemma 7. An ontology O given by the set of axioms (r)<2exp(n) v s, where r, s are roles and n > 0, is expressible by an acyclic R-ontology network of size polynomial in n.\nProof. We use a modification of the proof of Lemma 6 and show by induction on n that there exists an acyclic Rontology network Nn and ontology On ∈ Nn such that O is (Nn,On)-expressible. For n = 0, we define N0 = {〈O0,∅,∅〉} and O0 = {r v s}.\nIn the induction step, suppose ontology {(r)m v s | 1 6 m 6 2exp(n− 1) − 1} is (Nn−1,On−1)-expressible, for n > 1. Consider ontologies:\nO1copy = {s v u1} (25)\nO2copy = {u1 v r, s v u2} (26)\nOn = {u1 v u3, u1 ◦ u1 v u3, u2 ◦ u3 v s, r v s} (27)\nLet Nn be the union of Nn−1 with the set of the following import relations: 〈Oicopy, {r, s},On−1〉, for i = 1, 2, 〈On, {r, u1},O1copy〉, and 〈On, {u1, u2},O2copy〉.\nWe show that {I|sig (O) | I |=Nn On} = {I|sig (O) | I |= O}. By the induction assumption, we have On−1 |=Nn (r)<2exp(n−1) v s and hence, by the definition of Nn, it holds On |=Nn (r)<2exp(n−1) v u1 and On |=Nn (u1)\n<2exp(n−1) v u2. Then On |=Nn (r)m v u2, for 1 6 m 6 (2exp(n− 1)− 1)2.\nSince On |=Nn (r)<2exp(n−1) v u1 and {u1 v u3, u1 ◦ u1 v u3} ⊆ On, it holds On |=Nn (r)m v u3, for 1 6 m 6 2(2exp(n− 1) − 1). Therefore, since u2 ◦ u3 v s ∈ On, we obtain On |=Nn {(r)k v s | 2 6 k 6 m}, for m = (2exp(n− 1)− 1)2 + 2(2exp(n− 1)− 1) = 2exp(n)− 1. Since r v s ∈ On, we conclude that On |=Nn (r)<2exp(n) v s.\nBy using an argument like in the proof of Lemma 3 one can verify that any model I |= (r)<2exp(n) v s can be expanded to a model J |=Nn On by setting uJi = ⋃ 16k6mi\n((r)k)I , for i = 1, 2, 3, where m1 = 2exp(n− 1) − 1, m2 = (2exp(n− 1)− 1)2, and m3 = 2(2exp(n− 1)− 1).\nLemma 8. An axiom ϕ of the form Z v ∀r2exp(n).A, where Z,A ∈ NC and n > 0, is expressible by an acyclic Rontology network of size polynomial in n.\nProof. Consider ontology O consisting of axioms\nZ v ∀s.A, (r)2exp(n) v s (28)\nClearly, O |= ϕ and any model I |= ϕ can be expanded to a model J |= O by setting sJ = ((r)2exp(n))I . By Lemmas 1, 6, O is expressible by an acyclicR-ontology network of size polynomial in n, from which the claim follows.\nThe following statement is a direct consequence of Lemmas 1 and 7 and is proved identically to Lemma 8:\nLemma 9. An axiom of the form Z v ∀r<2exp(n).A, where Z,A ∈ NC and n > 0, is expressible by an acyclic Rontology network of size polynomial in n.\nNow we are ready to prove the next statement, which is an analogue of Lemma 4 for the case of double exponent.\nLemma 10. An axiom ϕ of the form Z v ∃(r,A)2exp(n).B, where Z,A ∈ NC and n > 0, is expressible by an acyclic R-ontology network of size polynomial in n.\nProof. Consider ontology Ō consisting of axioms\nZ v ∃s.>, Z v ∀s<2exp(n).X, Z v ∀s2exp(n).Y\ns v r By Lemmas 1, 8, 9, Ō is expressible by an acyclic Rontology network of size polynomial in n. Then by Lemma 2, so is ontology O = Ō[X 7→ A u ∃s.>, Y 7→ A uB].\nClearly, we have O |= ϕ. Now let I be an arbitrary model of ϕ and for m = 2exp(n), let x0, . . . , xm be arbitrary domain elements such that x0 ∈ ZI , 〈x0, x1〉 ∈ rI , and 〈xi, xi+1〉 ∈ rI , xi ∈ AI , for 1 6 i < m, and xm ∈ AI u BI . Let J be an expansion of I in which sJ = {〈xi, xi+1〉}06i<m. Then we have J |= O, from which the claim follows.\nLemma 11. An axiom ϕ of the form Z ≡ ∀r2exp(n).A, where Z,A ∈ NC and n > 0, is expressible by an acyclic Rontology network of size polynomial in n.\nProof. Consider ontology Ō consisting of axioms\nZ v ∀r2exp(n).A, Z̄ v ∃r2exp(n).Ā By Lemmas 1, 8, 10, Ō is expressible by an acyclic Rontology network of size polynomial in n and by Lemma 2, so is ontology O = Ō[Z̄ 7→ ¬Z, Ā 7→ ¬A]. It remains to note that O and {ϕ} are equivalent, so the claim is proved.\nLemma 12. Let L be a DL and O an ontology, which is expressible by a L-ontology network N . Let C1, . . . , Cm be L-concepts and {A1, . . . , Am} a set of concept names such that Ai ∈ sig (O), for i = 1, . . . ,m and m > 1. Then for k = 1, 2 and n > 0, ontology Õ = O[A1 7→ ∀rkexp(n).C1, . . . , Am 7→ ∀rkexp(n).Cm] is expressible by a L′-ontology network, which is acyclic if so is N and has size polynomial in the size of N , n, and Ci, for i = 1, . . . ,m, where: • L′ = L if L contains ALC and k = 1; • L′ = L if L containsR and k = 2.\nProof. The proof uses Lemmas 5, 11 and is identical to the proof of Lemma 2.\nThe next statement is shown similarly by using Lemma 3: Lemma 13. In the conditions of Lemma 12, for n > 0, ontology Õ = O[A1 7→ ∃r1exp(n).C1, . . . , Am 7→ ∃r1exp(n).Cm] is expressible by a L′-ontology network, which is acyclic if so is N and has size polynomial in the size of N , n, and Ci, for i = 1, . . . ,m, where L′ = L if L contains EL. Lemma 14. Let L be a DL and O an ontology, which is (N ,ON )-expressible, for a L-ontology network N and an ontology ON . Let {A1, . . . , An}, n > 1, be concept names such that Ai ∈ sig (O), for i = 1, . . . , n, and let {C1, . . . , Cn} be L-concepts, where every Ci is of the form ∃(r,D)p.Ai, for some role r, concept name D, and p > 1. Then ontology Õ = ⋃ m>0Om, where O0 = O and Om+1 = Om[A1 7→ C1, . . . , An 7→ Cn], for all m > 0, is expressible by a cyclic L-ontology network.\nProof. Let σ = {B1, . . . , Bk} = ⋃ i=1,...,n(sig (Ci) ∩ NC) and σ′ = {B′1, . . . , B′k} be a set of fresh concept names, which is disjoint with σ and sig (O). Let {C ′1, . . . , C ′n} be ‘copy’ concepts obtained from C1, . . . , Cn by replacing every Bi with B′i, for i = 1, . . . , k. Consider ontologies\nÕN ′ = { Bi ≡ B′i }i=1,...,k O′ = { Ai ≡ C ′i }i=1,...,n\nand an ontology network N ′ given by the union of N with the set of import relations\n〈ÕN ′ , sig (O),ON 〉, 〈ÕN ′ ,Σ′,O′〉, 〈O′,Σ, ÕN ′〉 where Σ = sig (O) ∪ ⋃ i=1,...,n sig (Ci) and Σ\n′ = (Σ \\ σ)∪ σ′. We claim that ontology Õ is (N ′, ÕN ′)-expressible. Denote Õ′ = ⋃ m>0O′m, where O′m = Om[B1 7→ B′1, . . . , Bk 7→ B′k], for all m > 0.\nFirst, we show by induction that ÕN ′ |=N ′ Om, for all m > 0. The induction base for n = 0 is trivial, since we have O0 = O and O is (N ,ON )-expressible, 〈ÕN ′ , sig (O),ON 〉 ∈ N ′, and thus, ÕN ′ |=N ′ O. Suppose ÕN ′ |=N ′ Om, for some m > 0. Since 〈O′,Σ, ÕN ′〉 ∈ N ′, we have O′ |=N ′ Om and thus, by the equivalences in O′, it holds O′ |=N ′ O′m+1. Since 〈ÕN ′ ,Σ′,O′〉, we have ÕN ′ |=N ′ O′m+1 and hence, by the equivalences in ÕN ′ , it holds that ÕN ′ |=N ′ Om+1.\nNow let I be an arbitrary model of ontology Õ and I1 be an expansion of I, in which every B′i is interpreted as (Bi)I , for i = 1, . . . , k. Clearly, it holds I1 |= ÕN ′ and thus, we have I1 |= ÕN ′∪Õ. We show that I1 |=N ′ ÕN ′ , i.e. there exists a model agreement µ′ for N ′ such that I1 ∈ µ′(ÕN ′). We define families of interpretations {Im}m>1 and {I ′m}m>1 such that for all m > 1, Im |= ÕN ′ and I ′m |= O′, and it holds Im =Σ′ I ′m and I ′m =Σ Im+1. The families of interpretations are defined by induction on m by showing that for any interpretation Im such that Im |= ÕN ′ ∪ Õ there exist the corresponding interpretations I ′m and Im+1 such that both of them are also models of Õ.\nGiven Im as above, for m > 1, let I ′m be an interpretation, which agrees with Im on Σ′ and in which every Ai is interpreted as (C ′i)\nIm , for i = 1, . . . , n. Then I ′m |= O′ and since Im |= Bi ≡ B′i, for i = 1, . . . , k, we have I ′m |= Õ′. Then I ′m is a model of every concept inclusion obtained from an axiom of Õ′ by substituting every occurrence of C ′i with Ai, for i = 1, . . . , n, and therefore, from the definition of Õ, we conclude that I ′m |= Õ. Now let Im+1 be an interpretation, which agrees with I ′m on Σ and in which every B′i is interpreted as Bi, for i = 1, . . . , k. Then Im+1 is a model of ÕN ′ and Õ.\nSince Õ |= O, we have Im |= O, for all m > 1. As ontologyO is (N ,ON )-expressible, there exists a model agreement µ for the networkN ∪{〈ÕN ′ , sig (O),ON 〉} such that µ(ÕN ′) = {Im}m>1. Let us define a mapping µ′ such that µ′(O′) = {I ′m}m>1 and the values of µ′ and µ coincide on all other ontologies in N ′. Then µ′ is the required model agreement for N ′."
    }, {
      "heading" : "6 Hardness Results",
      "text" : "We use reductions from the word problem for Turing ma-\nchines (TMs) and alternating Turing machines (ATMs) to obtain most of the results in this section. We use the following conventions and notations related to these computation models. A Turing Machine (TM) is a tupleM = 〈Q,A, δ〉, where\nQ is a set of states, with qh ∈ Q being the accepting state, A is an alphabet, and δ : Q × A 7→ Q × A × {−1, 1} is a transition function. We assume w.l.o.g. that configuration of M is a word in the alphabet Q ∪ A which contains exactly one state symbol q ∈ Q. An initial configuration is a word of the form b . . . bq0b . . . b, where q0 ∈ Q and b ∈ A is the blank symbol. For a configuration c, the notion of successor configuration is defined by δ in a usual way and is denoted as δ(c). A configuration c is said to be accepting if there is a sequence of configurations c0, . . . , ck, k > 0, where c0 = c, ck = vqhw, and for all 0 6 i < k, ci+1 is a successor of ci. It is a well-known property of the transition functions of Turing machines that the symbol c′i at position i of a configuration δ(c) is uniquely determined by a 4-tuple of symbols ci−2, ci−1, ci, ci+1 at positions i − 2, i − 1, i, and i+1 of a configuration c. We assume that this correspondence is given by the (partial) function δ′ and use the notation ci−2ci−1cici+1 δ′7→ c′i.\nAn Alternating Turing Machine (ATM) is a tuple M = 〈Q,A, δ1, δ2〉, where Q = Q∀ ∪ Q∃ ∪ {qrej} is a set of states, with qrej ∈ Q being the rejecting state, A is an alphabet containing the blank symbol b ∈ A, and for α = 1, 2, δα : Q×A×Q×A× {−1, 1} is a transition function. We assume w.l.o.g. that configuration of ATMM is a word in the alphabet Q ∪ A which contains at most one symbol q ∈ Q. For a configuration c, the notion of successor configuration (wrt δα, α = 1, 2) is defined in a usual way. A configuration c = vqw is (inductively) defined as rejecting if either q = qrej, or q ∈ Q∀ and there is a successor configuration of c which is rejecting, or q ∈ Q∃ and any successor configuration of c is rejecting. A rejecting run tree of an ATM M for an initial configuration w is a tree in which the nodes are rejecting configurations of M , w is the root node, every child node is a successor configuration of its parent node, every leaf is a configuration with the state qrej, and if there is a node c = uqw, then the following holds: if q ∈ Q∀, then c has a at least one child, and if q ∈ Q∃ then c has two children. For k > 0, a configuration c of M is said to be k-rejecting if M has a rejecting run tree of height k with the root c. The notions of accepting run tree (with every node not being a rejecting configuration) and accepting configuration are defined dually.\nSimilarly to ordinary TMs, we assume that the correspondence between a configuration c and the successor configuration cα of c (wrt δα, α = 1, 2) determined by 4-tuples of symbols is given by functions δ′α, for α = 1, 2. If every configuration of an ATM is a finite word of length n, then we assume w.l.o.g. that for α = 1, 2 this correspondence is given as follows (for a word w of length n and 1 6 i 6 n, we denote by w[i] the i-th symbol in w):\nc[i− 2]c[i− 1]c[i]c[i+ 1] δ ′ α7→ c′[i], for 1 6 i 6 n− 3\nbbc[1]c[2] δ′α7→ c′[1], for c[1] 6∈ Q\nbc[1]c[2]c[3] δ′α7→ c′[2]\nc[n− 2]c[n− 1]c[n]b δ ′ α7→ c′[n]\nTheorem 1. Entailment in acyclic EL-ontology networks is ExpTime-hard. Proof Sketch. We reduce the word problem for TMs making exponentially many steps to entailment in EL-ontology networks. Let M = 〈Q,A, δ〉 be a TM and n = 1exp(m) an exponential, for some m > 0. Consider an ontology O defined for M and n by the axioms (29)-(31) below.\nThe first axiom gives a r-chain containing n+ 1 segments of length 2n+ 3, which are used to store fragments of consequent configurations of M :\nA v ∃rn·(2n+3).(q0 u ∃(r, b)2n+2) (29) (A 6∈ Q ∪ A).\nWe assume the following enumeration of segments in the r-chain:\n. . .︸︷︷︸ sn . . . . . .︸︷︷︸ s1 q0b . . . b︸ ︷︷ ︸ s0\ni.e., s0 represents a fragment of the initial configuration c0 of M . For 0 6 i < n, every i-th and (i + 1)-st segments in the r-chain are reserved for a pair of configurations ci, ci+1 such that ci+1 is a successor of ci.\nThe next family of axioms represents transitions of M and defines the ‘content’ of (i+ 1)-st segment based on the ‘content’ of i-th segment:\n∃r2n(X u ∃r.(Y u ∃r.(U u ∃r.Z))) vW, (30)\nfor all X,Y, U, Z,W ∈ Q ∪ A such that XY UZ δ ′\n7→W . Finally, the following axioms are used to initialise the halt-\ning marker H and propagate it to the ‘left’ of the r-chain:\n∃r.qh v H, ∃r.H v H (31)\nThe definition of ontology O is complete. We claim that M accepts the empty word in n steps iff O |= A v H .\nFor the ‘only if’ direction we assume there is a sequence of configurations c0, . . . , cn such that for all 0 6 i < n, ci+1 is a successor configuration of ci and qh is the state symbol in cn. Let I be a model of O and a domain element such that a ∈ AI . Then by axiom (29), there is an r-chain outgoing from x, which contains segments s0, . . . , sn of length 2n+3, where s0 represents a fragment of c0. It can be shown by induction that due to axioms (30), every segment si represents a fragment of ci, for 1 6 i 6 n, and contains the state symbol from ci. Then by axiom (31), it follows that a ∈ HI .\nFor the ‘if’ direction, one can provide a model I ofO such that AI = {a} is a singleton, qhI = HI = ∅, and I gives an r-chain outgoing from a, which contains n + 1 segments representing fragments of consequent configurations of M , neither of which contains qh.\nTo complete the proof of the theorem we show that ontology O is expressible by an acyclic EL-ontology network of size polynomial inm. Note thatO contains axioms (29), (30) with concepts of size exponential in m. Consider axiom (29) and a concept inclusion ϕ of the form\nA v ∃rn·(2n+3).B\nwhere B is a concept name. Observe that it is equivalent to\nA v ∃rp.∃rp︸ ︷︷ ︸ 2 times .∃rn.∃rn.∃rn︸ ︷︷ ︸ 3 times .B\nwhere p = 1exp(2m). Consider axiom ψ of the form A v B. By iteratively applying Lemma 13 we obtain that ψ[B 7→ ∃rp.∃rp.B] is expressible by an acyclic EL-ontology network of size polynomial in m. By repeating this argument we obtain the same for ϕ. Further, by Lemma 2, the axiom θ = ϕ[B 7→ q0uB] is expressible by an acyclic EL-ontology network of size polynomial in m. Again, by iteratively applying Lemma 13 together with Lemma 2 we conclude that θ[B 7→ ∃(r, b)2n+2] is expressible by an acyclic EL-ontology network of size polynomial in m and thus, so is axiom (29). The expressibility of axioms (30) is shown identically. The remaining axioms of ontology O are EL-axioms whose size does not depend on m. By applying Lemma 1 we obtain that there exists an acyclic EL-ontology network N of size polynomial in m and an ontology ON such that O is (N ,ON )- expressible and thus, it holds ON |=N A v H iff M accepts the empty word in 1exp(m) steps.\nTheorem 2. Entailment in cyclic EL-ontology networks is RE-hard.\nProof Sketch. For a TM M = 〈Q,A, δ〉, we define an infinite ontology O, which contains variants of axioms (29-30) from Theorem 1 and additional axioms for a correct implementation of transitions of M .\nAxioms (32) give an infinite family of r-chains, each having a ‘prefix’ of length k + 1, for k > 0 (reserved for fragments of consequent configurations of M ), and a ‘postfix’ containing a chain of length 2l + 3, for l > 0, which represents a fragment of the initial configuration c0:\nA v ∃rk.(∃vl.L u ε u ∃r.(q0 u ∃(r, b)2l+2)) (32)\nfor A,L, ε 6∈ Q ∪ A and all k, l > 0. Propagated to the ‘left’ by the next family of axioms, concept ∃vk.L, k > 0, indicates the length of the ‘postfix’ for c0 on every r-chain given by axioms (32):\n∃r.∃vk.L v ∃vk.L, k > 0 (33) The concept ε is used to separate fragments of consequent\nconfigurations of M and is therefore propagated as follows:\n∃vk.L u ∃r2k+4.ε v ε, k > 0 (34) The next families of axioms, with X,Y, U, Z,W ∈ Q∪A,\nimplement transitions of M .\n∃vk.L u (35) u ∃r2k+1.(X u ∃r.(Y u ∃r.(U u ∃r.Z))) vW\nfor XY UZ δ ′\n7→W and all k > 0. Concept ∃vk.L guarantees that transitions have effect only\nalong r-chains which represent a fragment of c0 of length 2k + 3. Since ε 6∈ Q ∪ A, the transitions involving ε are\nimplemented separately by the following families of axioms:\n∃vk.L u (36) u ∃r2k.(b u ∃r.(ε u ∃r.(Y u ∃r.(U u ∃r.Z)))) vW\nfor bY UZ δ ′ 7→W and all k > 0;\n∃vk.L u (37) u ∃r2k.(b u ∃r.(b u ∃r.(ε u ∃r.(U u ∃r.Z)))) vW\nfor bbUZ δ ′ 7→W and all k > 0;\n∃vk.L u (38) u ∃r2k.(X u ∃r.(b u ∃r.(b u ∃r.(ε u ∃r.Z)))) vW\nfor XbbZ δ ′\n7→W and all k > 0. The last axiom of O is used to initialize the halting marker\nH and propagate it to the ‘left’ of a r-chain:\nqh v H, ∃r.H v H (39) The definition of ontology O is complete.\nThe more involved implementation of transitions (in comparison to Theorem 1) allows to prevent defect situations, when there are two consequent segments si,si+1 of an rchain, which represent fragments of configurations ci,ci+1 of M , respectively, but ci+1 is not a successor of ci. In Theorem 1, the prefix of length n · (2n+ 3) given by axiom (29) guarantees a correct implementation of up to n transitions of the TM. The situation is different in the infinite case, since the prefix reserved for fragments of consequent configurations of M can be of any length, due to axioms (32).\nWe prove that M halts iff O |= A v H . Suppose that c0 is an accepting configuration and M halts in n steps; w.l.o.g. we assume that n > 1. Let I be a model of O and a ∈ AI a domain element. Due to axioms (32), I is a model of the concept inclusion:\nA v ∃rn·(2n+4).(∃vn.L u ε u ∃r.(q0 u ∃(r, b)2n+2))\nand thus, I gives a r-chain containing n + 1 segments of length 2n + 3 separated by ε. By using arguments from the proof of Theorem 1, it can be shown that due to axioms (33) - (38), these segments represent fragments of consequent configurations ofM , starting with c0, and there is an element b in the r-chain such that b ∈ qhI . Then by axiom (39), it holds a ∈ HI .\nFor the ‘if’ direction, one can show that ifM does not halt, then there exists a model I of O such that qhI = HI = ∅, AI = {a} is a singleton and there are infinitely many disjoint r-chains {Rm,n}m,n>1 outgoing from a, such that every Rm,n represents a fragment of c0 of length n and has a prefix of length m+ 1 representing fragments of consequent configurations of M , each having length 6 2n+ 3.\nTo complete the proof of the theorem we show that ontology O is expressible by a cyclic EL-ontology network. Let\nus demonstrate that so is the family of axioms (32). Let ϕ = A v B be a concept inclusion andB,B1, B2 concept names. By Lemma 14, ontology O1 = {ϕ[B 7→ ∃rk.B] | k > 0} is expressible by a cyclic EL-ontology network. Then by Lemma 2, ontology O2 = O1[B 7→ B1 u ε u ∃r.(q0 u B2)] is expressible by a cyclic EL-ontology network. By applying Lemma 14 again, we conclude that so is ontology O3 = ⋃ l>0O2[B1 7→ ∃vl.B1, B2 7→ ∃(r, b)2l.B2], i.e., the ontology given by axioms\nA v ∃rk.(∃vl.B1 u ε u ∃r.(q0 u ∃(r, b)2l.B2)) for k, l > 0. Further, by Lemma 2, we obtain that O2[B1 7→ L, B2 7→ ∃(r, b)2] is expressible by a cyclic EL-ontology network and hence, so is the family of axioms (32). A similar argument shows the expressibility of ontologies given by axioms (33)-(38). The remaining subset of axioms (39) of O is finite. By Lemma 1, there exists a cyclic EL-ontology network N and an ontology ON such that O is (N ,ON )- expressible and thus, it holds ON |=N A v H iff M halts.\nTheorem 3. Entailment in ALC-ontology networks is 2ExpTime-hard. Proof Sketch. The result is based on the construction from the proof of Theorem 7 in [Kazakov, 2008], where it is shown that the word problem for 1exp(n)-space bounded ATMs, for n > 0, reduces to satisfiability of R-ontologies. We demonstrate that under a minor modification the construction used in that theorem shows that there is a ALC-ontology O containing nested concepts of exponential size and a concept name A such that O 6|= A v ⊥ iff a given 1exp(n)-space bounded ATM accepts the empty word. The ontology contains axioms with concepts of the form ∃(r, C)1exp(n).D and ∀r1exp(n).D. Using axioms of the form Z v ∃(r, C)1exp(n).D it is possible to encode consequent exponentially long r-chains for storing consequent configurations of ATM. With axioms of the form Z v ∀r1exp(n).D it is possible to encode transitions between configurations by defining correspondence of interpretations of concept names (encoding the alphabet of ATM) on two consequent 1exp(n)-long r-chains. The rest of the concept inclusions inO areALC-axioms, whose size does not depend on n and which are used to represent the initial configuration, existential/universal types configurations, and describe additional conditions for implementation of transitions. By using Lemmas 4, 12, we demonstrate that every axiom of O containing concepts of size exponential in n is expressible by an acyclic ALC-ontology network N of size polynomial in n. Then by applying Lemma 1 we obtain that there exists an acyclic ALC-ontology network N of size polynomial in n and an ontology ON such that O is (N ,ON )-expressible and thus, it holds ON |=N A v ⊥ iff M accepts the empty word. Since AExpSpace = 2ExpTime, we obtain the required statement.\nTheorem 4. Entailment in R-ontology networks is 3ExpTime-hard. Proof Sketch. The proof is by reduction of the word problem for 2exp(n)-space bounded ATMs to entailment in Rontology networks. Given such TM M and a number n > 0,\nwe consider ontology O from the proof of Theorem 3 for M and let O′ be the ontology obtained from O by replacing every nested concept of the form ∃(r, C)1exp(n).D and ∀r1exp(n).D with ∃(r, C)2exp(n).D and ∀r2exp(n).D, respectively. Then a repetition of the proof of Theorem 3 gives that O′ |= A v ⊥ iff M accepts the empty word. By applying Lemmas 10, 12 we show that every axiom of O′ containing concepts of size double exponential in n is expressible by an acyclic R-ontology network of size polynomial in n. The remaining axioms of O′ are ALC axioms, whose size does not depend on n. Then by applying Lemma 1 we obtain that there exists an acyclic R-ontology network N of size polynomial in n and an ontology ON such that O′ is (N ,ON )- expressible and thus, it holds ON |=N A v ⊥ iff M accepts the empty word. Since A2ExpSpace = 3ExpTime, we obtain the required statement.\nTheorem 5. Entailment in ALCHOIF-ontology networks is coN2ExpTime-hard.\nProof Sketch. The result is based on the construction from the proof of Theorem 5 in [Kazakov, 2008], where it is shown that the N2ExpTime-hard problem of existence of a domino tiling of size 2exp(n) × 2exp(n), n > 0, reduces to satisfiability of ROIF-ontologies. We demonstrate that under a minor modification the construction used in that theorem shows that there exists aALCHOIF-ontologyO containing concepts of an exponential size and a concept name A such thatO 6|= A v ⊥ iff a given domino system admits a tiling of size 2exp(n)×2exp(n), for n > 0. OntologyO contains axioms with concepts of the form ∃r1exp(n).C and ∀r1exp(n).C. Axioms of the form Z v ∃r1exp(n).C allow one to encode 1exp(n)-long r-chains. Using a variant of the binary counter technique together with axioms of the form Z v ∀r1exp(n).C and role hierarchies allows one to encode 2exp(n)-many consequent r-chains of this kind, thus obtaining sequences of 2exp(n)-many end points of r-chains. With nominals and inverse functional roles it is possible to enforce coupling of these sequences to obtain a grid of size 2exp(n)× 2exp(n). Finally, ALC axioms with concepts of the form ∀r1exp(n).C allow one to represent the initial and matching conditions of the domino tiling problem. By using the same arguments as in the proof of Theorem 3 we show that there is a ALCHOIFontology networkN of size polynomial in n and an ontology ON such that ON |=N A v ⊥ iff the domino system does not admit a tiling of size 2exp(n)× 2exp(n).\nTheorem 6. Entailment in ROIF-ontology networks is coN3ExpTime-hard.\nProof Sketch. The theorem is proved by a reducing the N3ExpTime-hard problem of domino tiling of size 3exp(n) × 3exp(n) to entailment in ROIF-ontology networks. Given an instance of this problem, we consider ontology O defined in the proof of Theorem 5 and let O′ be the ontology obtained from O by replacing every nested concept ∃r1exp(n).C and ∀r1exp(n).C with ∃r2exp(n).C and ∀r2exp(n).C, respectively. A repetition of the proof of Theorem 5 shows that O 6|= A v ⊥ iff a given domino system\nadmits a tiling of size 3exp(n)×3exp(n). By applying Lemmas 1, 10, 12 we obtain that there exists a ROIF-ontology network N of a polynomial size and an ontology ON such that ON |=N A v ⊥ iff the given domino system does not admit a tiling of size 3exp(n)× 3exp(n).\nTheorem 7. Entailment inH-Networks is ExpTime-hard. Proof Sketch. We show that the word problem for ATMs working with words of a polynomial length n reduces to entailment in cyclic H-ontology networks. Then, since APSpace = ExpTime, the claim follows.\nLet M = 〈Q,A, δ1, δ2〉 be an ATM. We call the word of the form bq0b . . . b initial configuration of M . Consider a signature σ consisting of concept names Bai, for a ∈ Q ∪ A and 1 6 i 6 n (with the informal meaning that the i-th symbol in a configuration of M is a). Let σ1, and σ2 be ‘copies’ of signature σ consisting of the above mentioned concept names with the superscripts 1 and 2, respectively.\nFor α = 1, 2, let Oα be an ontology consisting of the axioms below. The family of axioms (40)-(43) implements transitions of M (while respecting the end positions of configurations):\nBαXi−2 uBαY i−1 uBαUi uBαV i+1 v BWi (40) for 1 6 i 6 n − 3 and all X,Y, U, V,W ∈ Q ∪ A such that XY UV\nδα7→W ; BαU1 uBαV 2 v BW1 (41)\nfor all U, V,W ∈ Q ∪ A such that bbUV δα7→W ;\nBαY 1 uBαU2 uBαV 3 v BW2 (42)\nfor all Y,U, V,W ∈ Q ∪ A such that bY UV δα7→W ;\nBαXn−2 uBαY n−1 uBαUn v BWn (43)\nfor all X,Y, U,W ∈ Q ∪ A such that XY Ub δα7→W . For 1 6 i 6 n, the next axioms initialize ‘local’ marker H̄α and ‘global’ marker H̄ for a rejecting successor configuration wrt δα:\nBqreji v H̄, H̄ v H̄α (44) Let O be an ontology consisting of the following axioms:\nH̄1 uBq∀i v H̄, H̄2 uBq∀i v H̄ (45) H̄1 u H̄2 uBq∃i v H̄\nfor 1 6 i 6 m, q∃ ∈ Q∃, and q∀ ∈ Q∀ (i.e., these axioms implement the definition of accepting configuration depending on whether the state is existential or universal);\nA v ⊔16i6n+2Bbi uBq0n+3 u ⊔n+46i6mBbi (46) representing the initial configuration cinit of M ;\nBai v Bαai (47) for α = 1, 2, 1 6 i 6 n, and all a ∈ Q ∪ A (which enforce ‘copying’ a configuration ‘description’ in signature σ into signatures σ1, σ2).\nConsider ontology network N consisting of the import relations 〈O,Σα,Oα〉 and 〈Oα,Σ,O〉, where Σα = {H̄α}∪ σα, Σ = {H̄} ∪ σ, and α = 1, 2. Informally, ontologies Oα describe transitions between configurations, while O serves for ‘copying’ configuration descriptions into signatures σ1, σ2 and ‘feeding’ them back into Oα. It follows that models I |=N O represent consequent configurations of M and thus, network N implements a run tree of ATM. Intuitively, a point x in the domain of a model I |=N O represents a configuration c, if x belongs to the interpretation of σ-concept names, corresponding to the symbols in c.\nWe demonstrate that M does not accept the empty word iff O |=N A v H̄ . The ‘only if’ direction is proved by induction by showing that in any model I |=N O, whenever a domain element x represents a rejecting configuration c ofM , it holds x ∈ H̄I . Then it follows by axiom (46) that x ∈ H̄I , whenever x ∈ AI . The ‘if’ direction is proved by contraposition by defining a model agreement µ forN and a singleton interpretation I ∈ µ(O) such that I 6|= A v H̄ . For every ontology, µ gives a family of singleton interpretations such that each of them represents a configuration of M and agreed interpretations correspond to consequent configurations.\nTheorem 8. Entailment in acyclic H-Networks is PSpacehard. Proof Sketch. We show that the word problem for ATMs making polynomially many steps reduces to entailment in acyclic H-ontology networks. Then, since AP = PSpace, the claim follows.\nLet M = 〈Q,A, δ1, δ2〉 be an ATM. We use the definition of the networkN from the proof sketch to Theorem 7 and define by induction an acyclic H-ontology network Nn, which can be viewed informally as a finite ‘unfolding’ of N .\nFor n = 1, let N1 be a network consisting of import relations 〈O1,Σα,Oα1 〉, for α = 1, 2, where O1 is equivalent to ontology O (from the definition of network N ) and Oα1 is equivalent to Oα. If Nn−1 is a network already given for n > 2, then we define Nn as the union of Nn−1 with the set consisting of import relations 〈On,Σα,Oαn〉, 〈Oαn ,Σ,On−1〉, for α = 1, 2, where On, Oαn are ontologies not present in Nn−1 andOn is equivalent toO andOαn is equivalent toOα. By using the arguments from the proof of Theorem 7 we show that for any n > 1, it holds On |=Nn A v H̄ iff M does not accept the empty word in n steps."
    }, {
      "heading" : "7 Reduction to Classical Entailment",
      "text" : "As a tool for proving upper complexity bounds, we demonstrate that entailment in a networkN can be reduced to entailment from (a possibly infinite) union of ‘copies’ of ontologies appearing in N .\nLet N be an ontology network. We denote sig (N ) =⋃ 〈O1,Σ,O2〉∈N (sig (O1) ∪ Σ ∪ sig (O2)). An import path in N is a sequence p = {O0,Σ1,O1, . . . ,On−1,Σn,On}, n ≥ 0, such that 〈Oi−1,Σi,Oi〉 ∈ N for each i with (1 ≤ i ≤ n). We denote by len(p) = n, first(p) = O0 and last(p) = On the length of p, the first and, respectively, the last ontologies on the path p. By paths(N ) we define the set of all paths inN , and by paths(N ,O) = {p ∈\npaths(N ) | first(p) = O} the subset of paths that originate in O. We say that O′ is reachable from O in N if there exists a path p ∈ paths(N ,O) such that last(p) = O′. The import closure of an ontology O in N is defined by Ō = ∪p∈paths(N ,O)last(p). Note that by definition it holds {O} ∈ paths(N ,O) and thus, O ⊆ Ō. Lemma 15. If I |= Ō then I |=N O.\nProof. Consider a mapping µ defined for ontologies O′ in N by setting µ(O′) = {I} if O′ is reachable from O and µ(O′) = ∅ otherwise. Clearly, µ is a model agreement for N . Since I ∈ µ(O), we have I |=N O.\nFor every symbol X ∈ sig (N ) and every import path p in N , take a distinct symbol Xp of the same type (concept name, role name, or individual) not occurring in sig (N ). For each import path p inN , define a renaming θp of symbols in sig (N ) inductively as follows. If len(p) = 0, we set θp(X) = X for every X ∈ sig (N ). Otherwise, p = p′ ∪ {On−1,Σn,On} for some path p′ and we define θp(X) = θp′(X) if X ∈ Σn and θp(X) = Xp otherwise. A renamed import closure of an ontology O in N is defined by Õ =⋃ p∈paths(N ,O) θp(last(p)).\nLemma 16. If I |= Õ then I |=N O.\nProof. The proof is identical to the proof of Lemma 15.\nLemma 17. For every I |=N O there exists J |= Õ such that J =sig (N ) I.\nProof. Assume that I |=N O. Then there exists a model agreement µ for N such that I ∈ µ(O). We define J = (∆J , ·J ) by setting ∆J = ∆I , and XJ = XI for all symbols X except for the symbols Xp, with p ∈ paths(N ,O) and X ∈ sig (N ). For those symbols, we set (Xp)J = XIp where Ip ∈ µ(last(p)) is defined by induction on len(p) as follows. If len(p) = 0, we set Ip = I ∈ µ(O) = µ(last(p)). Otherwise, p = p′ ∪ {On−1,Σn,On} for some 〈On−1,Σn,On〉 ∈ N , and Ip′ ∈ µ(On−1) is already defined. Then pick any Ip ∈ µ(On) such that Ip =Σn Ip′ . Such Ip always exists since µ is a model agreement. This completes the definition of J . Obviously, J =sig (N ) I.\nTo prove that J |= Õ, we first show by induction on len(p) that for every X ∈ sig (N ) we have (θp(X))J = XIp . Indeed, if len(p) = 0 then (θp(X))J = XJ = XI = XIp . If p = p′ ∪ {On−1,Σn,On} for some 〈On−1,Σn,On〉 ∈ N , then if X ∈ Σn, we have (θp(X)) J = (θp′(X)) J = XIp′ = XIp since Ip =Σn Ip′ . If X /∈ Σn then (θp(X))J = (Xp)J = XIp . Now, since for every path p ∈ paths(N ,O), we have Ip ∈ µ(last(p)) hence, in particular, Ip |= last(p), we have J |= θp(last(p)) by the property above. Hence J |= Õ.\nTheorem 9. Let N be an ontology network, O an ontology in N , and α an axiom such that sig (α) ⊆ sig (N ). Then O |=N α iff Õ |= α.\nProof. Suppose thatO |=N α. In order to prove that Õ |= α, take any model I |= Õ. We need to show that I |= α. Since I |= Õ, by Lemma 16, we have I |=N O. Since O |=N α, we have I |= α, as required.\nConversely, suppose that Õ |= α. In order to show that O |=N α, take any I |=N O. We need to show that I |= α. Since I |=N O, by Lemma 17, there exists J |= Õ such that J =sig (N ) I. Since Õ |= α, we have J |= α. Since sig (α) ⊆ sig (N ), we have I |= α, as required."
    }, {
      "heading" : "8 Membership Results",
      "text" : "Theorem 9 provides a method for reducing the entailment\nproblem in ontology networks to entailment from ontologies. Note that, in general, the renamed closure Õ of an ontology O in a (cyclic) network N can be infinite (even if N and all ontologies in N are finite). There are, however, special cases when Õ is finite. For example, if all import signatures in N include all symbols in sig (N ), then it is easy to see that Õ = Ō. Õ is also finite if paths(N ,O) is finite, e.g., if N is acyclic. In this case, the size of Õ is at most exponential in O. If there is at most one import path between every pair of ontologies (i.e., if N is tree-shaped) then the size of Õ is the same as the size of N . This immediately gives the upper complexity bounds on deciding entailment in acyclic networks.\nTheorem 10. Let L be a DL with the complexity of entailment in [co][N]TIME(f(n)) ([co] and [N] denote possible coand N-prefix, respectively). LetN be an acyclic ontology network and O an ontology in N such that Õ is a L-ontology. Then for L-axioms α, the entailment O |=N α is decidable in [co][N]TIME(f(2n)). If N is tree-shaped then deciding O |=N α has the same complexity as entailment in L.\nNote that if O1, . . . ,Om are some ontologies in a DL L, then in general, their union is not necessary a L-ontology. For instance, this is the case for logics containing DL R, which restricts role inclusion axioms to regular ones. The regularity property can be easily lost when taking the union of ontologies and thus, reasoning over the union of ontologies may be harder than reasoning in the underlying DL. Hence, the requirement in Theorem 10 that Õ must be a L-ontology.\nIn the next theorem, we show that for arbitrary networks, checking entailment is, in general, semi-decidable, which is a consequence of the Compactness Theorem for First-Order Logic (since all standard DLs can be translated to FOL).\nTheorem 11. LetL be a DL, which can be translated to FOL, N an ontology network, andO an ontology inN such that Õ is a L-ontology. Then for L-axioms α, the entailment O |=N α is semi-decidable.\nProof. By Theorem 9, O |=N α iff Õ |= α. By the compactness theorem for first-order logic, if Õ |= α then there exists a finite subset O′ ⊆ Õ such that O′ |= α. Hence, Õ |= α can be checked, e.g, by enumerating all finite subsets Õn = ⋃ p∈paths(N ,O,n) θp(last(p)) ⊆ Õ, n ≥ 0, where paths(N ,O, n) = {p ∈ paths(N ,O) | len(p) ≤ n} and\nrunning the (semi-decidable) test Õn |= α with the timeout n. If Õ |= α then, eventually, one of these tests succeeds.\nRestricting the shape of the network is one possibility of establishing decidability results for entailment in ontology networks. Another possibility is to restrict the language. It turns out, for ontology networks expressed in the role-free DL P , the entailment problem becomes decidable, even in the presence of cycles. Intuitively, this is because the entailment in P can be characterized by a bounded number of models.\nDefinition 3. We say that an interpretation I = (∆I , ·I) is a singleton if ||∆I || = 1. Let I = (∆I , ·I) be a DL interpretation and d ∈ ∆I . The singleton projection of I to d is the interpretation J = ({d}, ·J ) such that AJ = AI ∩ {d} for each A ∈ NC, RJ = ∅ for each R ∈ NR, and aJ = d for each a ∈ Ni. Lemma 18. Let C be a P-concept, I = (∆I , ·I) an interpretation, and J = ({d}, ·J ) a singleton projection of I on some element d ∈ ∆I . Then CJ = CI ∩∆J . Corollary 1. Let α = C v D be a P-axiom, I = (∆I , ·I) an interpretation such that I |= α, and J a singleton projection of I on an element d ∈ ∆I . Then J |= α. Corollary 2. Let α = C v D be a P-axiom, I = (∆I , ·I) an interpretation such that I 6|= α. Then there exists d ∈ ∆I such that for the singleton projection J of I to d, J 6|= α.\nGiven an ontology network N , a singleton model agreement for N is a model agreement µ such that for every O in N every interpretation I ∈ µ(O) is a singleton. Lemma 19. Let N be a P-ontology network, O an ontology in N , and α a P-axiom such that O 6|=N α. Then there exists a singleton model agreement µ′ for N and a model I ′ ∈ µ′(O) such that I ′ 6|= α.\nProof. Since O 6|=N α, there exists a model agreement µ over a domain ∆ such that for some I ∈ µ(O) we have I 6|= α. By Corollary 2, there exists an element d ∈ ∆ such that for the singleton projection I ′ of I to d, we have I ′ 6|= α. Now define a mapping µ′ by setting µ′(O), for every ontology O in N , to consist of the singleton projections of the interpretations in µ(O) to d. By Corollary 1, we have I ′ |= O, for all I ′ ∈ µ′(O). To prove that µ′ is a model agreement it remains to show that if 〈O1,Σ,O2〉 ∈ N and I ′1 ∈ µ′(O1) then there exists I ′2 ∈ µ′(O2) such that I ′1 =Σ I ′2. Indeed, since I ′1 ∈ µ′(O1) then I ′1 is a singleton projection of some I1 ∈ µ(O1). Since µ is a model agreement, there exists I2 ∈ µ(O2) such that I1 =Σ I2. Let I ′2 be the singleton projection of I2 to d. Then I ′2 ∈ µ′(O2) by definition of µ′. Furthermore, since I1 =Σ I2, it is easy to see by the Definition 3 that I ′1 =Σ I ′2.\nLemma 19 implies, in particular, that to check the entailment in P networks, it is sufficient to restrict attention only to singleton model agreements. W.l.o.g., one can assume that these singleton model agreements have the same domain. Similarly, only interpretation of symbols that appear in N or in the checked axiom α counts. Since the number of interpretations of concept names over one element domain is at most\nexponential in the number of concept names, for checking entailment O |=N α it is sufficient to restrict attention to only exponentially-many singleton model agreements in the size of N and α. This gives a simple NExpTime algorithm for checking whether O 6|=N α: guess a singleton model agreement µ (of an exponential size), and check whether I 6|= α for some I ∈ µ(O). It is, however, possible to find the required model agreement deterministically, thereby reducing the complexity to ExpTime. Theorem 12. There is an ExpTime procedure that given a P-ontology network N , an ontology O in N , and a P-axiom α, checks whether O |=N α.\nProof. Let Σ be the set of all signature symbols appearing in N and α. Since N and α are formulated in P , Σ consists of only concept names. Let d be a fixed (domain) element. For every subset s ⊆ Σ, let I(s) = ({d}, ·I(s)) be a singleton interpretation defined by AI(s) = {d} if A ∈ s and AI(s) = ∅ otherwise. Finally, let m be a mapping defined by m(O) = 2Σ for all ontologies O in N . Clearly, the mapping m can be constructed in exponential time in the size of N .\nThe mapping m corresponds to the assignment µ of singleton interpretations to ontologies in N defined as µ(O) = {I(s) | s ∈ m(O)}. This assignment, however, is not necessarily a model agreement for N according to Definition 2. First, not all interpretations I(s) for s ∈ m(O) are models of O. Second, it is not guaranteed that for every 〈O1,Σ,O2〉 ∈ N and every s1 ∈ m(O1) there exists s2 ∈ m(O2) such that I(s1) =Σ I(s2). To fix the defects of the first type, we remove from m(O) all sets s such that I(s) 6|= O. (It is easy to check in polynomial time if a singleton interpretation is a model of an ontology). To fix the defects of the second type, we remove all s1 ∈ m(O1) for which there exists no s2 ∈ m(O2) such that s1∩Σ = s2∩Σ. We repeat performing this operation until no defects are left.\nClearly, both operations can be performed in exponential time inN since there are at most exponentially-many values s that can be removed. Finally, to decide whetherO |=N α, we check whether I(s) |= α for all s ∈ m(O). If this property holds, we return O |=N α; otherwise, we return O 6|=N α.\nWe claim that the above algorithm is correct. Indeed, if O 6|=N α is returned then there is a model agreement µ and an interpretation I 6|= α such that I ∈ µ(O).\nConversely, if O 6|=N α then there exists a model agreement µ for N such that I 6|= α for some I ∈ µ(O). Then by Lemma 19, there exists a singleton model agreement µ′ for N such that I ′ 6|= α for some I ′ ∈ µ′(O). For a singleton interpretation I, let s(I) = {A | AI 6= ∅}. W.l.o.g., I(s(I ′)) = I ′ for each I ′ ∈ µ′(O), with O in N . Let m′ be a mapping defined by m′(O) = {s(I) | I ∈ µ′(O)} for each O in N . So I(s) ∈ µ′(O) for every s ∈ m′(O) and O in N . By induction over the construction of m, it is easy to show that m′(O) ⊆ m(O) for every O in N . Indeed, since m(O) is initialized with all subsets of the signature Σ, m′(O) ⊆ m(O) holds in the beginning. Furthermore, for each s ∈ m′(O), we have I(s) ∈ µ′(O), and so, I(s) |= O. Thus, s cannot be removed from m(O) as a defect of the first type. Similarly, for every 〈O1,Σ,O2〉 ∈ N and every s1 ∈ m′(O1), we have I1 = I(s1) ∈ µ′(O1).\nSince µ′ is a model agreement, there exists I2 ∈ µ′(O2) such that I1 =Σ I2. Hence for s2 = s(I2) ∈ m′(O2), we have s1 ∩ Σ = s2 ∩ Σ. Therefore, s1 cannot be removed from m(O1) as a defect of the second type. Finally, since I ′ 6|= α for some I ′ ∈ µ′(O), we have s′ = s(I ′) ∈ m′(O) ⊆ m(O). Hence, our algorithm returns O 6|=N α.\nIt is possible to improve the upper bound obtained in Theorem 12 for acyclic P-ontology networks. Theorem 13. There is a PSpace procedure that given an acyclic P-ontology network N , an ontology O in N , and a P-axiom α, checks whether O |=N α.\nProof. As in the proof of Theorem 12, let Σ be the set of all signature symbols appearing in N and α, and d a fixed (domain) element. For each s ⊆ Σ, let I(s) = ({d}, ·I(s)) be a singleton interpretation defined byAI(s) = {d} ifA ∈ s and AI(s) = ∅ otherwise.\nWe describe a recursive procedure P (O, s) that given an ontology O in N and s ⊆ Σ returns true if there exists a model agreement µ for N such that I(s) ∈ µ(O), and returns false otherwise. The procedure works as follows. If I(s) 6|= O, P (O, s) return false. Otherwise, we iterate over all 〈O,Σ,O′〉 ∈ N and for every s′ ⊆ Σ such that s ∩ Σ = s′ ∩ Σ and run P (O′, s′) recursively. If for each 〈O,Σ,O′〉 ∈ N some of the recursive call P (O′, s′) returned true, we return true for P (O, s). Otherwise, we return false.\nClearly, P (O, s) always terminates since N is acyclic. Furthermore, the procedure can be implemented in polynomial space in the size of N and α, since the recursion depth is bounded by the size of N and at every recursive call, only the input values O and s need to be saved (assuming the iterations over the import relations and subsets of Σ use some fixed order).\nNext we show that our procedure is correct. Assume that P (O, s) returns true for some input O and s ⊆ Σ. For each ontology O in N , let m(O) be the set of all s ⊆ Σ such that there was a (recursive) call P (O, s) with the output true. Let µ be a mapping defined by µ(O) = {I(s) | s ∈ m(O)}. We claim that µ is a model agreement for N .\nIndeed, since P (O, s) returns true only if I(s) |= O, for every O in N and I ∈ µ(O) we have I |= O. Furthermore, if 〈O,Σ,O′〉 ∈ N and I ∈ µ(O) then, by definition of µ, there exists s ∈ m(O) such that I = I(s) and P (s,O) returned true. In particular, since 〈O,Σ,O′〉 ∈ N , there was a recursive call P (s′,O′) that returned true for some s′ ⊆ Σ such that s ∩ Σ = s′ ∩ Σ. By the definition of m, this means that s′ ∈ m(O′). Therefore, I =Σ I(s′) ∈ µ(O′), by the definition of µ. Thus, µ is a model agreement for N .\nConversely, assume that there exists a model agreement µ for N such that I(s) ∈ µ(O). Since N is a P-ontology network, w.l.o.g., for every O in N and every I ∈ µ(O), there exists s ⊆ Σ such that I = I(s). We prove that P (O, s) returns true for everyO and s such that I(s) ∈ µ(O). Indeed, assume to the contrary that P (O, s) returns false for some s such that I(s) ∈ µ(O) and when executing P (O, s), there was no other recursive call to P (O′, s′) that returned false for some s′ such that I(s′) ∈ µ(O′). Since I(s) ∈ µ(O), we have I(s) |= O, thus P (O, s) cannot return false due to\nI(s) 6|= O. Hence there exists 〈O,Σ,O′〉 ∈ N such that for every s′ ⊆ Σ with s ∩ Σ = s′ ∩ Σ, the recursive call of P (O′, s′) returned false. Then I(s′) /∈ µ(O′) for all such s′ by our assumption above. Since µ is a model agreement, 〈O,Σ,O′〉 ∈ N , and I(s) ∈ µ(O), there exists I ′ ∈ µ(O′) such that I(s) =Σ I ′. Then I ′ = I(s′) for some s′ such that s ∩ Σ = s′ ∩ Σ. This gives us a contradiction since I(s′) ∈ µ(O′) for no s′, with s ∩ Σ = s′ ∩ Σ.\nNow, to check whether O |=N α using the procedure P , we enumerate all s ⊆ Σ and check whether I(s) 6|= α and P (O, s) returns true. We returnO 6|=N α if such s exists, and O |=N α otherwise. This algorithm is correct. Indeed, if such s exists, then there exists a model agreement µ for N such that I(s) ∈ µ(O). Hence,O 6|=N α. Conversely, ifO 6|=N α then there exists a model agreement µ for N and some I ∈ µ(O) such that I |= O and I 6|= α. By Lemma 19, w.l.o.g. one can assume that µ is a singleton model agreement. Then there exists some s ⊆ Σ such that I(s) ∈ µ(O) and I(s) 6|= α. Since I(s) ∈ µ(O), P (O, s) should return true. Hence, our algorithm returns O 6|=N α."
    }, {
      "heading" : "9 Conclusions",
      "text" : "We have introduced a new mechanism for ontology integration which is based on semantic import relations between ontologies and is a generalization of the standard OWL importing. In order to import an external ontology O into a local one, one has to specify an import relation, which defines a set of symbols, whose semantics should be borrowed from O. The significant feature of the proposed mechanism, which comes natural in complex ontology integration scenarios, is that every ontology has its own view on ontologies it refines and the views on the same ontology are independent unless coordinated by import relations. We have shown that this feature can lead to an exponential increase of the time complexity of reasoning over ontologies combined with acyclic import relations. Intuitively, this is because one has to consider multiple views of the same ontology, each of which gives a different ontology. When cyclic importing is allowed, the complexity jumps to undecidability, even if every ontology in a combination is given in the DL EL. Similarly, this is because one has to consider infinitely many views on the same ontology. These complexity results are shown for situations when the imported symbols include roles. It is natural to ask whether the complexity drops when the imported symbols are concept names. The second parameter which may influence the complexity of reasoning is the semantics which is ‘imported’. In the proposed mechanism, importing the semantics of symbols is implemented via agreement of models of ontologies. One can consider refinements of this mechanism, e.g., by carefully selecting the classes of models of ontologies which must be agreed. The third way to decrease the complexity is to restrict the language in which ontologies are formulated. We conjecture that reasoning with cyclic imports is decidable for ontologies formulated in the family of DL-Lite."
    } ],
    "references" : [ {
      "title" : "In Modular Ontologies",
      "author" : [ "Jie Bao", "George Voutsadakis", "Giora Slutzki", "Vasant Honavar. Package-based description logics" ],
      "venue" : "pages 349–371.",
      "citeRegEx" : "Bao et al.. 2009",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Distributed description logics: Assimilating information from peer sources",
      "author" : [ "Alexander Borgida", "Luciano Serafini" ],
      "venue" : "J. Data Semantics, pages 153–184,",
      "citeRegEx" : "Borgida and Serafini. 2003",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "OWL 2: The next step for OWL",
      "author" : [ "Bernardo Cuenca Grau", "Ian Horrocks", "Boris Motik", "Bijan Parsia", "Peter F. Patel-Schneider", "Ulrike Sattler" ],
      "venue" : "J. Web Sem., 6(4):309–322,",
      "citeRegEx" : "Cuenca Grau et al.. 2008",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Alignment-based modules for encapsulating ontologies",
      "author" : [ "Euzenat et al", "2007] Jérôme Euzenat", "Antoine Zimmermann" ],
      "venue" : "In Proceedings of the 2nd International Workshop on Modular Ontologies,",
      "citeRegEx" : "al. et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "al. et al\\.",
      "year" : 2007
    }, {
      "title" : "Reasoning over ontologies with hidden content: The import-by-query approach",
      "author" : [ "Bernardo Cuenca Grau", "Boris Motik" ],
      "venue" : "J. Artif. Intell. Res. (JAIR), pages 197–255,",
      "citeRegEx" : "Grau and Motik. 2012",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "In Modular Ontologies",
      "author" : [ "Bernardo Cuenca Grau", "Bijan Parsia", "Evren Sirin. Ontology integration using epsilonconnections" ],
      "venue" : "pages 293–320.",
      "citeRegEx" : "Grau et al.. 2009",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "mapping and importing",
      "author" : [ "Martin Homola", "Luciano Serafini. Towards formal comparison of ontology linking" ],
      "venue" : "Description Logics,",
      "citeRegEx" : "Homola and Serafini. 2010",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "11th Int",
      "author" : [ "Yevgeny Kazakov. RIQ", "SROIQ are harder than SHOIQ. In Proc" ],
      "venue" : "Conf. on Principles of Knowledge Representation and Reasoning (KR’08), pages 274–284. AAAI Press,",
      "citeRegEx" : "Kazakov. 2008",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Semantic import: An approach for partial ontology reuse",
      "author" : [ "Jeff Z. Pan", "Luciano Serafini", "Yuting Zhao" ],
      "venue" : "Peter Haase, Vasant Honavar, Oliver Kutz, York Sure, and Andrei Tamilin, editors, WoMO, volume 232 of CEUR Workshop Proceedings. CEUR-WS.org,",
      "citeRegEx" : "Pan et al.. 2006",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Ontology matching: State of the art and future challenges",
      "author" : [ "Pavel Shvaiko", "Jerome Euzenat" ],
      "venue" : "IEEE Trans. on Knowl. and Data Eng., 25(1):158– 176, January",
      "citeRegEx" : "Shvaiko and Euzenat. 2013",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "The OBO foundry: coordinated evolution of ontologies to support biomedical data integration",
      "author" : [ "Richard H Scheuermann", "Nigam Shah", "Patricia L Whetzel", "Suzanna Lewis" ],
      "venue" : "Nat Biotech,",
      "citeRegEx" : "Scheuermann et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Scheuermann et al\\.",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 2,
      "context" : "Logic-based ontology languages such as OWL and OWL 2 [Cuenca Grau et al., 2008] are becoming increasingly popular means for representation, integration, and querying of information, particularly in life sciences, such as Biology and Medicine.",
      "startOffset" : 53,
      "endOffset" : 79
    }, {
      "referenceID" : 6,
      "context" : "see an overview in [Homola and Serafini, 2010]) consider a model of a combination of ontologies as a tuple of interpretations, one for each ontology, with correspondence relations between the interpretation domains.",
      "startOffset" : 19,
      "endOffset" : 46
    }, {
      "referenceID" : 1,
      "context" : "The constructs are bridge rules in DDL [Borgida and Serafini, 2003], local/foreign symbol labels in PDL [Bao et al.",
      "startOffset" : 39,
      "endOffset" : 67
    }, {
      "referenceID" : 0,
      "context" : "The constructs are bridge rules in DDL [Borgida and Serafini, 2003], local/foreign symbol labels in PDL [Bao et al., 2009] and the approach of [Pan et al.",
      "startOffset" : 104,
      "endOffset" : 122
    }, {
      "referenceID" : 8,
      "context" : ", 2009] and the approach of [Pan et al., 2006], link properties in E-connections [Grau et al.",
      "startOffset" : 28,
      "endOffset" : 46
    }, {
      "referenceID" : 5,
      "context" : ", 2006], link properties in E-connections [Grau et al., 2009], and alignment relations in [Euzenat et al.",
      "startOffset" : 42,
      "endOffset" : 61
    }, {
      "referenceID" : 9,
      "context" : "The last approach originates from the field of ontology matching [Shvaiko and Euzenat, 2013], which is a neighbour topic lying out of the scope of our paper, since it concentrates on computing matchings, but not on reasoning with them.",
      "startOffset" : 65,
      "endOffset" : 92
    }, {
      "referenceID" : 4,
      "context" : "The approach of [Grau and Motik, 2012] tries to bridge this gap by putting restrictions on combined ontologies, i.",
      "startOffset" : 16,
      "endOffset" : 38
    }, {
      "referenceID" : 0,
      "context" : "This resembles the approaches [Bao et al., 2009; Pan et al., 2006], although theoretically, we do not distinguish between local and external symbols in ontologies (we note that this feature can be easily integrated).",
      "startOffset" : 30,
      "endOffset" : 66
    }, {
      "referenceID" : 8,
      "context" : "This resembles the approaches [Bao et al., 2009; Pan et al., 2006], although theoretically, we do not distinguish between local and external symbols in ontologies (we note that this feature can be easily integrated).",
      "startOffset" : 30,
      "endOffset" : 66
    }, {
      "referenceID" : 7,
      "context" : "The result is based on the construction from the proof of Theorem 7 in [Kazakov, 2008], where it is shown that the word problem for 1exp(n)-space bounded ATMs, for n > 0, reduces to satisfiability of R-ontologies.",
      "startOffset" : 71,
      "endOffset" : 86
    }, {
      "referenceID" : 7,
      "context" : "The result is based on the construction from the proof of Theorem 5 in [Kazakov, 2008], where it is shown that the N2ExpTime-hard problem of existence of a domino tiling of size 2exp(n) × 2exp(n), n > 0, reduces to satisfiability of ROIF-ontologies.",
      "startOffset" : 71,
      "endOffset" : 86
    } ],
    "year" : 2017,
    "abstractText" : "We propose a new mechanism for integration of OWL ontologies using semantic import relations. In contrast to the standard OWL importing, we do not require all axioms of the imported ontologies to be taken into account for reasoning tasks, but only their logical implications over a chosen signature. This property comes natural in many ontology integration scenarios, especially when the number of ontologies is large. In this paper, we study the complexity of reasoning over ontologies with semantic import relations and establish a range of tight complexity bounds for various fragments of OWL.",
    "creator" : "LaTeX with hyperref package"
  }
}