{
  "name" : "1706.05507.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Variants of RMSProp and Adagrad with Logarithmic Regret Bounds",
    "authors" : [ "Mahesh Chandra Mukkamala", "Matthias Hein" ],
    "emails" : [ "<mmahesh.chandra873@gmail.com>." ],
    "sections" : [ {
      "heading" : null,
      "text" : "√ T -type re-\ngret bounds. Moreover, we propose two variants SC-Adagrad and SC-RMSProp for which we show logarithmic regret bounds for strongly convex functions. Finally, we demonstrate in the experiments that these new variants outperform other adaptive gradient techniques or stochastic gradient descent in the optimization of strongly convex functions as well as in training of deep neural networks.\n1. Introduction There has recently been a lot of work on adaptive gradient algorithms such as Adagrad (Duchi et al., 2011), RMSProp (Hinton et al., 2012), ADADELTA (Zeiler, 2012), and Adam (Kingma & Bai, 2015). The original idea of Adagrad to have a parameter specific learning rate by analyzing the gradients observed during the optimization turned out to be useful not only in online convex optimization but also for training deep neural networks. The original analysis of Adagrad (Duchi et al., 2011) was limited to the case of all convex functions for which it obtained a datadependent regret bound of order O( √ T ) which is known to be optimal (Hazan, 2016) for this class. However, a lot of learning problems have more structure in the sense that one optimizes over the restricted class of strongly convex functions. It has been shown in (Hazan et al., 2007) that one can achieve much better logarithmic regret bounds for the class of strongly convex functions.\n1Department of Mathematics and Computer Science, Saarland University, Germany 2IMPRS-CS, Max Planck Institute for Informatics, Saarbrücken, Germany . Correspondence to: Mahesh Chandra Mukkamala <mmahesh.chandra873@gmail.com>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nThe goal of this paper is twofold. First, we propose SCAdagrad which is a variant of Adagrad adapted to the strongly convex case. We show that SC-Adagrad achieves a logarithmic regret bound for the case of strongly convex functions, which is data-dependent. It is known that such bounds can be much better in practice than data independent bounds (Hazan et al., 2007),(McMahan, 2014). Second, we analyze RMSProp which has become one of the standard methods to train neural networks beyond stochastic gradient descent. We show that under some conditions on the weighting scheme of RMSProp, this algorithm achieves a data-dependent O( √ T ) regret bound. In fact, it turns out that RMSProp contains Adagrad as a special case for a particular choice of the weighting scheme. Up to our knowledge this is the first theoretical result justifying the usage of RMSProp in online convex optimization and thus can at least be seen as theoretical support for its usage in deep learning. Similarly, we then propose the variant SCRMSProp for which we also show a data-dependent logarithmic regret bound similar to SC-Adagrad for the class of strongly convex functions. Interestingly, SC-Adagrad has been discussed in (Ruder, 2016), where it is said that “it does not to work”. The reason for this is that SC-Adagrad comes along with a damping factor which prevents potentially large steps in the beginning of the iterations. However, as our analysis shows this damping factor has to be rather large initially to prevent large steps and should be then monotonically decreasing as a function of the iterations in order to stay adaptive. Finally, we show in experiments on three datasets that the new methods are competitive or outperform other adaptive gradient techniques as well as stochastic gradient descent for strongly convex optimization problem in terms of regret and training objective but also perform very well in the training of deep neural networks, where we show results for different networks and datasets.\n2. Problem Statement We first need some technical statements and notation and then introduce the online convex optimization problem.\nar X\niv :1\n70 6.\n05 50\n7v 1\n[ cs\n.L G\n] 1\n7 Ju\nn 20\n17\n2.1. Notation and Technical Statements\nWe denote by [T ] the set {1, . . . , T}. Let A ∈ Rd×d be a symmetric, positive definite matrix. We denote as 〈x, y〉A = 〈x,Ay〉 = d∑\ni,j=1\nAijxiyj , ‖x‖A = √ 〈x, x〉A\nNote that the standard Euclidean inner product becomes 〈x, y〉 = ∑ i xiyi = 〈x, y〉I While we use here the general notation for matrices for comparison to the literature. All positive definite matrices A in this paper will be diagonal matrices, so that the computational effort for computing inner products and norms is still linear in d. The CauchySchwarz inequality becomes, 〈x, y〉A ≤ ‖x‖A ‖y‖A . We further introduce the element-wise product a b of two vectors. Let a, b ∈ Rd, then (a b)i = aibi for i = 1, . . . , d.\nLet A ∈ Rd×d be a symmetric, positive definite matrix, z ∈ Rd and C ⊂ Rd a convex set. Then we define the weighted projection PAC (z) of z onto the set C as\nPAC (z) = argmin x∈C ‖x− z‖2A . (1)\nIt is well-known that the weighted projection is unique and non-expansive.\nLemma 2.1 Let A ∈ Rd×d be a symmetric, positive definite matrix and C ⊂ Rd be a convex set. Then∥∥PAC (z)− PAC (y)∥∥A ≤ ‖z − y‖A . Proof: The first order optimality condition for the weighted projection in (1) is given as\nA(x− z) ∈ NC(x),\nwhere NC(x) denotes the normal cone of C at x. This can be rewritten as\n〈z − x, y − x〉A ≤ 0 ∀y ∈ C.\nThis yields〈 z − PAC (z), PAC (y)− PAC (z) 〉 A ≤ 0,〈\ny − PAC (y), PAC (z)− PAC (y) 〉 A ≤ 0.\nAdding these two inequalities yields〈 z − PAC (z)− y + PAC (y), PAC (y)− PAC (z) 〉 A ≤ 0\n=⇒ ∥∥PAC (y)− PAC (z)∥∥2A ≤ 〈z − y, PAC (y)− PAC (z)〉A .\nThe result follows from the application of the weighted Cauchy-Schwarz inequality.\nLemma 2.2 For any symmetric, positive semi-definite matrix A ∈ Rd×d we have\n〈x,Ax〉 ≤ λmax(A) 〈x, x〉 ≤ tr(A) 〈x, x〉 (2)\nwhere λmax(A) is the maximum eigenvalue of matrix A and tr(A) denotes the trace of matrix A .\n2.2. Problem Statement\nIn this paper we analyze the online convex optimization setting, that is we have a convex setC and at each round we get access to a (sub)-gradient of some continuous convex function ft : C → R. At the t-th iterate we predict θt ∈ C and suffer a loss ft(θt). The goal is to perform well with respect to the optimal decision in hindsight defined as\nθ∗ = argmin θ∈C T∑ t=1 ft(θ).\nThe adversarial regret at time T ∈ N is then given as\nR(T ) = T∑ t=1 (ft(θt)− ft(θ∗)).\nWe assume that the adversarial can choose from the class of convex functions on C, for some parts we will specialize this to the set of strongly convex functions.\nDefinition 2.1 Let C be a convex set. We say that a function f : C → R is µ-strongly convex, if there exists µ ∈ Rd with µi > 0 for i = 1, . . . , d such that for all x, y ∈ C,\nf(y) ≥ f(x) + 〈∇f(x), y − x〉+ ‖y − x‖2diag(µ)\n= f(x) + 〈∇f(x), y − x〉+ d∑ i=1 µi(yi − xi)2.\nLet ζ = mini=1,...,d µi, then this function is ζ-strongly convex (in the usual sense), that is\nf(y) ≥ f(x) + 〈∇f(x), y − x〉+ ζ ‖x− y‖2 .\nNote that the difference between our notion of componentwise strong convexity and the usual definition of strong convexity is indicated by the bold font versus normal font. We have two assumptions:\n• A1: It holds supt≥1 ‖gt‖2 ≤ G which implies the existence of a constantG∞ such that supt≥1 ‖gt‖∞ ≤ G∞.\n• A2: It holds supt≥1 ‖θt − θ∗‖2 ≤ D which implies the existence of a constant D∞ such that supt≥1 ‖θt − θ∗‖∞ ≤ D∞.\nAlgorithm 1 Adagrad Input: θ1 ∈ C , δ > 0, v0 = 0 ∈ Rd for t = 1 to T do gt ∈ ∂ft(θt) vt = vt−1 + (gt gt) At = diag( √ vt) + δI\nθt+1 = P At C ( θt − αA−1t gt ) end for\nOne of the first methods which achieves the optimal regret bound of O( √ T ) for convex problems is online projected gradient descent (Zinkevich, 2003), defined as\nθt+1 = PC(θt − αtgt) (3)\nwhere αt = α√t is the step-size scheme and gt is a (sub)gradient of ft at θt. With αt = αt , online projected gradient descent method achieves the optimal O(log(T )) regret bound for strongly-convex problems (Hazan et al., 2007). We consider Adagrad in the next subsection which is one of the popular adaptive alternative to online projected gradient descent.\n2.3. Adagrad for convex problems\nIn this section we briefly recall the main result for the Adagrad. The algorithm for Adagrad is given in Algorithm 1. If the adversarial is allowed to choose from the set of all possible convex functions on C ⊂ Rd, then Adagrad achieves the regret bound of orderO( √ T ) as shown in (Duchi et al., 2011). This regret bound is known to be optimal for this class, see e.g. (Hazan, 2016). For better comparison to our results for RMSProp, we recall the result from (Duchi et al., 2011) in our notation. For this purpose, we introduce the notation, g1:T,i = (g1,i, g2,i, .., gT,i)T , where gt,i is the i-th component of the gradient gt ∈ Rd of the function ft evaluated at θt.\nTheorem 2.1 (Duchi et al., 2011) Let Assumptions A1, A2 hold and let θt be the sequence generated by Adagrad in Algorithm 1, where gt ∈ ∂ft(θt) and ft : C → R is an arbitrary convex function, then for stepsize α > 0 the regret is upper bounded as\nR(T ) ≤ D 2 ∞\n2α d∑ i=1 ‖g1:T,i‖2 + α d∑ i=1 ‖g1:T,i‖2 .\nThe effective step-length of Adagrad is on the order of α√ t . This can be seen as follows; first note that vT,i = ∑T t=1 g 2 t,i and thus (At)−1 is a diagonal matrix with entries 1√vt,i+δ . Then one has\nα(A−1T )ii = α√∑T\nt=1 g 2 t,i + δ\n= α√ T 1√ 1 T ∑T t=1 g 2 t,i + δ√ T\n(4)\nThus an alternative point of view of Adagrad, is that it has a decaying stepsize α√\nt but now the correction term becomes\nthe running average of the squared derivatives plus a vanishing damping term. However, the effective stepsize has to decay faster to get a logarithmic regret bound for the strongly convex case. This is what we analyze in the next section, where we propose SC-Adagrad for strongly convex functions.\n3. Strongly convex Adagrad (SC-Adagrad) The modification SC-Adagrad of Adagrad which we propose in the following can be motivated by the observation that the online projected gradient descent (Hazan et al., 2007) uses stepsizes of order α = O( 1T ) in order to achieve the logarithmic regret bound for strongly convex functions. In analogy with the derivation in the previous section, we still have vT,i = ∑T t=1 g 2 t,i. But now we modify (At) −1 and set it as a diagonal matrix with entries 1vt,i+δt . Then one has\nα(A−1T )ii = α∑T\nt=1 g 2 t,i + δt\n= α\nT 1 1 T ∑T t=1 g 2 t,i + δT T .\n(5)\nAgain, we have in the denominator a running average of the observed gradients and a decaying damping factor. In this way, we get an effective stepsize of order O( 1T ) in SCAdagrad. The formal method is presented in Algorithm 2. As just derived the only difference of Adagrad and SCAdagrad is the definition of the diagonal matrix At. Note\nAlgorithm 2 SC-Adagrad Input: θ1 ∈ C , δ0 > 0, v0 = 0 ∈ Rd for t = 1 to T do gt ∈ ∂ft(θt) vt = vt−1 + (gt gt) Choose 0 < δt ≤ δt−1 element wise At = diag(vt) + diag(δt) θt+1 = P At C ( θt − αA−1t gt\n) end for\nalso that we have defined the damping factor δt as a function of t which is also different from standard Adagrad. The constant δ in Adagrad is mainly introduced due to numerical reasons in order to avoid problems when gt,i is very small for some components in the first iterations and is typically chosen quite small e.g. δ = 10−8. For SCAdagrad the situation is different. If the first components g1,i, g2,i, . . . are very small, say of order , then the update is 2+δt which can become extremely large if δt is chosen\nto be small. This would make the method very unstable and would lead to huge constants in the bounds. This is probably why in (Ruder, 2016), the modification of Adagrad where one “drops the square-root” did not work. A good choice of δt should be initially roughly on the order of 1 and it should decay as vt,i = ∑T t=1 g 2 t,i starts to grow. This is why we propose to use\nδt,i = ξ2e −ξ1vt,i , i = 1, . . . , d,\nfor ξ1 > 0, ξ2 > 0 as a potential decay scheme as it satisfies both properties for sufficiently large ξ1 and ξ2 chosen on the order of 1. Also, one can achieve a constant decay scheme for ξ1 = 0 , ξ2 > 0. We will come back to this choice after the proof. In the following we provide the regret analysis of SC-Adagrad and show that the optimal logarithmic regret bound can be achieved. However, as it is data-dependent it is typically significantly better in practice than data-independent bounds.\n3.1. Analysis\nFor any two matrices A,B ∈ Rd×d, we use the notation • to denote the inner product i.e A • B = ∑ i ∑ j AijBij . Note that A •B = tr(ATB).\nLemma 3.1 [Lemma 12 (Hazan et al., 2007)] Let A,B be positive definite matrices, let A B 0 then\nA−1 • (A−B) ≤ log ( |A| |B| ) (6)\nwhere |A| denotes the determinant of the matrix A\nLemma 3.2 Let Assumptions A1, A2 hold, then for T ≥ 1 and At, δt as defined in the SC-Adagrad algorithm we have,\nT∑ t=1 〈 gt, A −1 t gt 〉 ≤ d∑ i=1 log\n( ‖g1:T,i‖2 + δT,i\nδ1,i\n)\n− d∑ i=1 T∑ t=2 δt,i − δt−1,i ‖g1:t,i‖2 + δt,i\nProof: Consider the following summation, T∑ t=1 〈 gt, A −1 t gt 〉 ≤ T∑ t=1 A−1t • diag(gtgTt )\n= A−11 • (A1 − diag(δ1))\n+ T∑ t=2 A−1t • (At −At−1 − diag(δt) + diag(δt−1))\n≤ log ( |A1| |diag(δ1)| ) + T∑ t=2 log ( |At| |At−1| )\n− T∑ t=2 A−1t • (diag(δt)− diag(δt−1))\n= log ( |AT | |diag(δ1)| ) − T∑ t=2 A−1t • (diag(δt)− diag(δt−1))\n≤ d∑ i=1 log\n( ‖g1:T,i‖2 + δT,i\nδ1,i\n)\n− T∑ t=2 A−1t • (diag(δt)− diag(δt−1))\n≤ d∑ i=1 log\n( ‖g1:T,i‖2 + δT,i\nδ1,i\n) −\nd∑ i=1 T∑ t=2 δt,i − δt−1,i ‖g1:t,i‖2 + δt,i\nIn the first step we use 〈x,Ax〉 = A • diag(xxT ) where A is a diagonal matrix and subsequently we use∀t > 1 , diag(gtg T t ) = At − At−1 − diag(δt) + diag(δt−1), and for t = 1 we have diag(g1gT1 ) = A1 − diag(δ1). In the first inequality we use Lemma 3.1 also see for Lemma 12 of (Hazan et al., 2007). Note that for T = 1, the upper bound results in 0.\nTheorem 3.1 Let Assumptions A1, A2 hold and let θt be the sequence generated by the SC-Adagrad in Algorithm 2, where gt ∈ ∂ft(θt) and ft : C → R is an arbitrary µ-strongly convex function (µ ∈ Rd+) where the stepsize fulfills α ≥ maxi=1,...,d G 2 ∞\n2µi . Furthermore, let δt > 0 and\nδt,i ≤ δt−1,i∀t ∈ [T ],∀i ∈ [d], then the regret of SCAdagrad can be upper bounded for T ≥ 1 as\nR(T ) ≤ D 2 ∞ tr(diag(δ1)) 2α + α 2 d∑ i=1 log (‖g1:T,i‖2 + δT,i δ1,i ) + 1\n2 d∑ i=1 inf t∈[T ] ( (θt,i − θ∗i )2 α − α ‖g1:t,i‖2 + δt,i ) (δT,i − δ1,i)\nFor constant δt i.e δt,i = δ > 0 ∀t ∈ [T ] and∀i ∈ [d] then the regret of SC-Adagrad is upper bounded as\nR(T ) ≤ D 2 ∞dδ 2α + α 2 d∑ i=1 log (‖g1:T,i‖2 + δ δ ) (7)\nFor ζ-strongly convex function choosing α ≥ G 2 ∞\n2ζ we obtain the above mentioned regret bounds.\nProof: We rewrite the regret bound with the definition of µ-strongly convex functions as\nR(T ) = T∑ t=1 (ft(θt)− ft(θ∗))\n≤ T∑ t=1 〈gt, θt − θ∗〉 − T∑ t=1 ‖θt − θ∗‖2diag(µ)\nUsing the non-expansiveness we have\n‖θt+1 − θ∗‖2At = ∥∥∥PAtC (θt − αA−1t gt)− θ∗∥∥∥2\nAt ≤ ∥∥θt − αA−1t gt − θ∗∥∥2At ≤ ‖θt − θ∗‖2At − 2α 〈gt, θt − θ ∗〉+ α2 〈 gt, A −1 t gt\n〉 This yields\n〈gt, θt − θ∗〉 ≤ ‖θt − θ∗‖2At − ‖θt+1 − θ\n∗‖2At 2α + α 2\n〈 gt, A −1 t gt 〉 Hence we can upper bound the regret as follows\nR(T )\n≤ T∑ t=1 ‖θt − θ∗‖2At − ‖θt+1 − θ ∗‖2At 2α\n+ α\n2 T∑ t=1 〈 gt, A −1 t gt 〉 − T∑ t=1 ‖θt − θ∗‖2diag(µ)\n≤ ‖θ1 − θ∗‖2A1\n2α + T∑ t=2 (‖θt − θ∗‖2At − ‖θt − θ∗‖2At−1 2α ) − ‖θT+1 − θ∗‖2AT\n2α + α 2 T∑ t=1 〈 gt, A −1 t gt 〉 −\nT∑ t=1 ‖θt − θ∗‖2diag(µ)\n≤ ‖θ1 − θ∗‖2A1−2αdiag(µ)\n2α\n+ T∑ t=2 ‖θt − θ∗‖2At−At−1−2α diag(µ) 2α + α 2 T∑ t=1 〈 gt, A −1 t gt 〉 In the last step we use the equality ∀x ∈ Rn ‖x‖2A − ‖x‖2B = ‖x‖2A−B where A,B ∈ Rn xn and both are diagonal matrices. Now, we choose α such that At − At−1 − 2α diag(µ) 4 diag(δt) − diag(δt−1) ∀t ≥ 2 and A1 − 2α diag(µ) 4 diag(δ1) Since At − At−1 4 G2∞I +diag(δt)− diag(δt−1) and A1 4 G2∞I +diag(δ1) because at any round the difference between subsequent squares of sub-gradients is bounded by G2∞. Also by Algorithm 2, δt,i ≤ δt−1,i∀t > 1,∀i ∈ [d] hence diag(δt) − diag(δt−1) 0. Hence by choosing α ≥ maxi=1,...,d G2∞ 2µi\nwe have At − At−1 − 2α diag(µ) 4 diag(δt) − diag(δt−1)∀t ≥ 2 and A1 − 2αdiag(µ) 4 diag(δ1) which yields\nR(T )\n≤ ‖θ1 − θ∗‖2diag(δ1)\n2α + T∑ t=2 ‖θt − θ∗‖diag(δt)−diag(δt−1) 2α\n+ α\n2 T∑ t=1 〈 gt, A −1 t gt 〉 = ‖θ1 − θ∗‖2diag(δ1)\n2α + T∑ t=2 d∑ i=1 (θt,i − θ∗i )2(δt,i − δt−1,i) 2α\n+ α\n2 T∑ t=1 〈 gt, A −1 t gt 〉 ≤ D 2 ∞ tr(diag(δ1))\n2α + α 2 T∑ t=1 〈 gt, A −1 t gt 〉 +\nT∑ t=2 d∑ i=1 (θt,i − θ∗i )2(δt,i − δt−1,i) 2α\n≤ D 2 ∞ tr(diag(δ1)) 2α + α 2 d∑ i=1 log (‖g1:T,i‖2 + δT,i δ1,i ) + 1\n2 T∑ t=2 d∑ i=1\n( (θt,i − θ∗i )2(δt,i − δt−1,i)\nα − α(δt,i − δt−1,i) ‖g1:t,i‖2 + δt,i\n)\n≤ D 2 ∞ tr(diag(δ1)) 2α + α 2 d∑ i=1 log (‖g1:T,i‖2 + δT,i δ1,i ) + 1\n2 d∑ i=1 inf t∈[T ] ( (θt,i − θ∗i )2 α − α ‖g1:t,i‖2 + δt,i ) (δT,i − δ1,i)\nIn the second inequality we bounded ‖θ1 − θ∗‖2diag(δ1) ≤ D2∞ tr(diag(δ1)). In the second last step we use the Lemma 3.2. So under a constant δt i.e δt,i = δ > 0, ∀t ∈ [T ],∀i ∈ [d] we have tr(diag(δ1)) = dδ hence proving the result (7). For ζ-strongly convex functions choosing α ≥ G2∞,i 2ζ we obtain the the same results as µ-strongly convex functions. This can be seen by setting µi = ζ, ∀i ∈ [d].\nNote that the first and the last term in the regret bound can be upper bounded by constants. Only the second term depends on T . Note that ‖g1:T,i‖2 ≤ TG2 and as δt is monotonically decreasing, the second term is on the order of O(log(T )) and thus we have a logarithmic regret bound. As the bound is data-dependent, in the sense that it depends on the observed sequence of gradients, it is much tighter than a data-independent bound.\nThe bound includes also the case of a non-decaying damping factor δt = δ = ξ2 (ξ1 = 0). While a rather large constant damping factor can work well, we have noticed that the best results are obtained with the decay scheme\nδt,i = ξ2e −ξ1vt,i , i = 1, . . . , d.\nwhere ξ1 > 0 , ξ2 > 0 , which is what we use in the experiments. Note that this decay scheme for ξ1, ξ2 > 0 is\nadaptive to the specific dimension and thus increases the adaptivity of the overall algorithm. For completeness we also give the bound specialized for this decay scheme.\nCorollary 3.1 In the setting of Theorem 3.1 choose δt,i = ξ2e −ξ1vt,i for i = 1, . . . , d for some ξ1 > 0, ξ2 > 0 . Then the regret of SC-Adagrad can be upper bounded for T ≥ 1 as\nR(T ) ≤ dD 2 ∞ξ2 2α − α 2 log(ξ2e −ξ1G2∞)\n+ α\n2 d∑ i=1 log ( ‖g1:T,i‖2 + ξ2 e−ξ1‖g1:T,i‖ 2 )\n+ αξ1ξ2 2 ( log(ξ2 ξ1) + 1 ) d∑ i=1 ( 1− e−ξ1‖g1:T,i‖ 2 )\nProof: Note that δT,i = ξ2e−ξ1vT,i = ξ2e−ξ1‖g1:T,i‖ 2\n. Plugging this into Theorem 3.1 for ξ1, ξ2 > 0 yields the results for the first three terms. Using (θt,i − θ∗i )2 ≥ 0 we have\ninf t∈[T ] ( (θt,i − θ∗i )2 α − α ‖g1:t,i‖2 + δt,i ) ≥ −α\ninfj∈[1:T ] ‖g1:j,i‖2 + δj,i\nNote that ‖g1:j,i‖2 + δj,i = vj,i + ξ2e−ξ1vj,i , in order to find the minimum of this term we thus analyze the function f : R+ → R, f(x) = x + ξ2e−ξ1x. and a straightforward calculation shows that the minimum is attained at x∗ = 1ξ1 log(ξ1ξ2) and f(x\n∗) = 1ξ1 (log(ξ1ξ2) + 1). This yields the fourth term.\nUnfortunately, it is not obvious that the regret bound for our decaying damping factor is better than the one of a constant damping factor. Note, however that the third term in the regret bound of Theorem 3.1 can be negative. It thus remains an interesting question for future work, if there exists an optimal decay scheme which provably works better than any constant one.\n4. RMSProp and SC-RMSProp RMSProp is one of the most popular adaptive gradient algorithms used for the training of deep neural networks (Schaul et al., 2014; Dauphin et al., 2015; Daniel et al., 2016; Schmidhuber, 2015). It has been used frequently in computer vision (Karpathy & Fei-Fei, 2016) e.g. to train the latest InceptionV4 network (Szegedy et al., 2016a;b). Note that RMSProp outperformed other adaptive methods like Adagrad order Adadelta as well as SGD with momentum in a large number of tests in (Schaul et al., 2014). It has been argued that if the changes in the parameter update\nare approximately Gaussian distributed, then the matrix At can be seen as a preconditioner which approximates the diagonal of the Hessian (Daniel et al., 2016). However, it is fair to say that despite its huge empirical success in practice and some first analysis in the literature, there is so far no rigorous theoretical analysis of RMSProp. We will analyze RMSProp given in Algorithm 3 in the framework of of online convex optimization.\nAlgorithm 3 RMSProp Input: θ1 ∈ C , δ > 0, α > 0, v0 = 0 ∈ Rd for t = 1 to T do gt ∈ ∂ft(θt) vt = βtvt−1 + (1− βt)(gt gt) Set t = δ√t and αt = α√ t\nAt = diag( √ vt) + tI θt+1 = P At C ( θt − αtA−1t gt ) end for\nFirst, we will show that RMSProp reduces to Adagrad for a certain choice of its parameters. Second, we will prove for the general convex case a regret bound of O( √ T ) similar to the bound given in Theorem 2.1. It turns out that the convergence analysis requires that in the update of the weighted cumulative squared gradients (vt) , it has to hold\n1− 1 t ≤ βt ≤ 1− γ t ,\nfor some 0 < γ ≤ 1. This is in contrast to the original suggestion of (Hinton et al., 2012) to choose βt = 0.9. It will turn out later in the experiments that the constant choice of βt leads sometimes to divergence of the sequence, whereas the choice derived from our theoretical analysis always leads to a convergent scheme even when applied to deep neural networks. Thus we think that the analysis in the following is not only interesting for the convex case but can give valuable hints how the parameters of RMSProp should be chosen in deep learning.\nBefore we start the regret analysis we want to discuss the sequence vt in more detail. Using the recursive definition of vt, we get the closed form expression\nvt,i = t∑ j=1 (1− βj) t∏ k=j+1 βkg 2 j,i.\nWith βt = 1− 1t one gets, vt,i = ∑t j=1 1 j ∏t k=j+1 k−1 k g 2 j,i,\nand using the telescoping product ones gets∏t k=j+1 k−1 k = j t and thus\nvt,i = 1 t ∑t j=1 g 2 j,i.\nIf one uses additionally the stepsize scheme αt = α√t and\nt = δ√ T , then we recover the update scheme of Adagrad,\nsee (4), as a particular case of RMSProp. We are not aware of that this correspondence of Adagrad and RMSProp has been observed before.\nThe proof of the regret bound for RMSProp relies on the following lemma.\nLemma 4.1 Let Assumptions A1 and A2 and suppose that 1− 1t ≤ βt ≤ 1− γ t for some 0 < γ ≤ 1, and t ≥ 1. Also\nfor t > 1 suppose √ (t− 1) t−1 ≤ √ t t, then\nT∑ t=1 g2t,i√ t vt,i + √ t t ≤ 2(2− γ) γ (√ T vT,i + √ T T ) .\nProof: The lemma is proven via induction. For T = 1 we have v0 = 0 and thus v1,i = (1− β1)g21,i and thus\ng21,i ( √ v1,i + 1) = (1− β1)g2t,i (1− β1) (√ (1− β1)g21,i + 1 )\n≤\n√ (1− β1)g21,i + 1\n1− β1 ≤\n( √ v1,i + 1)\nγ .\nNote that 1γ ≤ 2(2−γ) γ since 2(2− γ) > 1 for γ ≤ 1 hence the bound holds for T = 1. For T > 1 we suppose that the bound is true for T − 1 and get\nT−1∑ t=1 g2t,i√ t vt,i + √ t t\n≤ 2(2− γ) γ\n(√ (T − 1) vT−1,i + √ (T − 1) T−1 ) .\nWe rewrite vT,i = βT vT−1,i + (1 − βT )g2T,i as vT−1,i = 1 βT vT,i− 1−βTβT g 2 T,i and with √ (t− 1) t−1 ≤\n√ t t we get√\n(T − 1)vT−1,i + √ (T − 1) T−1\n≤ √ T − 1 βT vT,i − (T − 1)(1− βT ) βT g2T,i + √ T T\n= √ T − 1 TβT TvT,i − (T − 1)(1− βT ) βT g2T,i + √ T T\n≤ √ TvT,i −\n(T − 1)(1− βT ) βT g2T,i + √ T T\nNote that in the last step we have used that T−1TβT ≤ 1 and the fact that √ x is concave and thus √ x− c ≤ √ x− c\n2 √ x\ngiven that x − c ≥ 0, along with −1√ TvT,i ≤ −1√ TvT,i+ √ T t for vt,i 6= 0 we have√ (T − 1)vT−1,i + √ (T − 1) T−1\n≤ √ TvT,i + √ T T −\n(T − 1)(1− βT ) 2βT (√ TvT,i + √ T T )g2T,i (8) Using the above bound we have the following\nT∑ t=1 g2t,i√ t vt,i + √ t t\n= T−1∑ t=1 g2t,i√ t vt,i + √ t t + g2T,i√ TvT,i + √ T T ≤ 2(2− γ) γ (√ (T − 1) vT−1,i + √ (T − 1) T−1\n) +\ng2T,i√ T vT,i + √ T t\n≤ 2(2− γ) γ\n(√ TvT,i + √ T T ) + ( 1− 2(2− γ)\nγ\n(T − 1)(1− βT ) 2βT ) g2T,i√ TvT,i + √ T T\nIn the last step we use (8) and since for T > 1 the term( 1− 2(2−γ)γ (T−1)(1−βT ) 2βT ) ≤ 0 for 1− 1t ≤ βt ≤ 1− γ t\nCorollary 4.1 Let Assumptions A1, A2 hold and suppose that 1 − 1t ≤ βt ≤ 1 − γ t for some 0 < γ ≤ 1, and\nt ≥ 1. Also for t > 1 suppose √ (t− 1) t−1 ≤ √ t t, and set αt = α√t , then T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 ≤ α(2− γ) γ d∑ i=1 (√ T vT,i + √ T T )\nProof: Using the definition of At = diag( √ vt) + tI , αt = α√ t along with Lemma 4.1 we get T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 = T∑ t=1 αt 2 d∑ i=1 g2t,i√ vt,i + t\n= α\n2 T∑ t=1 d∑ i=1 g2t,i√ t vt,i + √ t t\n≤ α 2 d∑ i=1 2(2− γ) γ (√ T vT,i + √ T T )\nWith the help of Lemma 4.1 and Corollary 4.1 we can now state the regret bound for RMSProp.\nTheorem 4.1 Let Assumptions A1, A2 hold and let θt be the sequence generated by RMSProp in Algorithm 3, where gt ∈ ∂ft(θt) and ft : C → R is an arbitrary convex function and αt = α√t for some α > 0 and 1− 1 t ≤ βt ≤ 1− γ t\nfor some 0 < γ ≤ 1. Also for t > 1 let √ (t− 1) t−1 ≤√\nt t, then the regret of RMSProp can be upper bounded for T ≥ 1 as\nR(T ) ≤ (D2∞ 2α + α(2− γ) γ ) d∑ i=1 (√ TvT,i + √ T T ) Proof: Note that for every convex function ft : C → R it holds for all x, y ∈ C and gt ∈ ∂ft(x),\nft(y) ≥ ft(x) + 〈gt, y − x〉 .\nWe use this to upper bound the regret as\nR(T ) = T∑ t=1 (ft(θt)− ft(θ∗)) ≤ T∑ t=1 〈gt, θt − θ∗〉\nUsing the non-expansiveness of the weighted projection, we have\n‖θt+1 − θ∗‖2At = ∥∥∥PAtC (θt − αtA−1t gt)− θ∗∥∥∥2\nAt ≤ ∥∥θt − αtA−1t gt − θ∗∥∥2At ≤ ‖θt − θ∗‖2At − 2αt 〈gt, θt − θ ∗〉+ α2t 〈 gt, A −1 t gt\n〉 This yields\n〈gt, θt − θ∗〉 ≤ ‖θt − θ∗‖2At − ‖θt+1 − θ\n∗‖2At 2αt + αt 2\n〈 gt, A −1 t gt 〉 Hence we can upper bound the regret as follows\nR(T )\n≤ T∑ t=1 ‖θt − θ∗‖2At − ‖θt+1 − θ ∗‖2At 2αt\n+ T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 ≤ ‖θ1 − θ∗‖2A1\n2α1 + T∑ t=2 (‖θt − θ∗‖2At 2αt − ‖θt − θ∗‖2At−1 2αt−1 ) − ‖θT+1 − θ∗‖2AT\n2αt + T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 ≤ ‖θ1 − θ∗‖2A1\n2α\n+ T∑ t=2 ‖θt − θ∗‖2√tAt−√t−1At−1 2α + T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 In the last step we used αt = α√t . We show that\n√ tAt − √ t− 1At−1 0 ∀t ∈ [T ] (9)\nNote that At are diagonal matrices for all t ≥ 1. We note that\n(At)ii = √ vt,i + t,\nand vt,i = βtvt−1,i + (1 − βt)g2t,i as well as βt ≥ 1 − 1t which implies tβt ≥ t− 1. We get\n√ t(At)ii = √ tvt,i + √ t t\n= √ tβtvt−1,i + t(1− βt)g2t,i + √ t t\n≥ √ (t− 1)vt−1,i + √ t− 1 t−1,\nwhere we used in the last inequality that √ t t ≥√\nt− 1 t−1. Note that T∑ t=2 ‖θt − θ∗‖2√tAt−√t−1At−1\n= T∑ t=2 d∑ i=1\n(θt,i − θ∗i )2(√ tvt,i + √ t t − √ (t− 1)vt−1,i + √ t− 1 t−1\n) ≤\nd∑ i=1 D2∞\nT∑ t=2 (√ tvt,i + √ t t − √ (t− 1)vt−1,i − √ t− 1 t−1 ) =\nd∑ i=1 D2∞ (√ TvT,i + √ T T − √ v1,i − 1 ) where the inequality could be done as we showed before that the difference of the terms in vt,i is non-negative for all i ∈ [d] and t ≥ 1. As (A1)ii = √ v1,i + 1 we get\n‖θ1 − θ∗‖2A1 2α ≤ D 2 ∞ 2α d∑ i=1 (√ v1,i + 1 ) .\nThus in total we have\nR(T ) ≤ D2∞\n∑d i=1 (√ TvT,i + √ T T ) 2α\n+ T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 .\nFinally, with Corollary 4.1 we get the result.\nNote that for βt = 1− 1t , that is γ = 1, and t = δ T where RMSProp corresponds to Adagrad we recover the regret bound of Adagrad in the convex case, see Theorem 2.1, up to the damping factor. Note that in this case\n√ TvT,i = √√√√ T∑ j=1 g2j,i = ‖g1:T,i‖2 .\nAlgorithm 4 SC-RMSProp Input: θ1 ∈ C , δ0 = 1 , v0 = 0 ∈ Rd for t = 1 to T do gt ∈ ∂ft(θt) vt = βtvt−1 + (1− βt)(gt gt) Set t = δtt where δt,i ≤ δt−1,i for i ∈ [d] and αt = α t\nAt = diag(vt + t) θt+1 = P At C ( θt − αtA−1t gt ) end for\n4.1. SC-RMSProp\nSimilar to the extension of Adagrad to SC-Adagrad, we present in this section SC-RMSProp which achieves a logarithmic regret bound.\nNote that again there exist choices for the parameters of SC-RMSProp such that it reduces to SC-Adagrad. The correspondence is given by the choice\nβt = 1− 1\nt , αt =\nα t , t = δt t ,\nfor which again it follows vt,i = 1t ∑t j=1 g 2 j,i with the same argument as for RMSProp. Please see Equation (5) for the correspondence. Moreover, with the same argument as for SC-Adagrad we use a decay scheme for the damping factor\nt,i = ξ2 e−ξ1 t vt,i\nt , i = 1, . . . , d. for ξ1 ≥ 0 , ξ2 > 0\nThe analysis of SC-RMSProp is along the lines of SCAdagrad with some overhead due to the structure of vt.\nLemma 4.2 Let αt = αt , 1 − 1 t ≤ βt ≤ 1 − γ t and At as defined in SC-RMSProp, then it holds for all T ≥ 1,\nT∑ t=1 αt 2 〈 gt, A −1 t gt 〉 ≤ α 2γ d∑ i=1 log (T (vT,i + T,i) 1,i ) + α\n2γ T∑ t=2 d∑ i=1 −t t,i + (t− 1) t−1,i tvt,i + t t,i\n+ α\n2γ d∑ i=1 (1− γ)(1 + log T ) infj∈[1,T ] jvj,i + j j,i\nProof: Using 〈x,Ax〉 = A • diag(xxT ) and with g2t,i = vt,i−βtvt−1,i\n1−βt and using that At is diagonal with (At)ii = vt,i + t,i, we get\nT∑ t=1 α 2 ((tAt) −1 • diag(gtgTt )) = α\n2(1− β1) ((A1)\n−1 • (A1 − diag( 1)))\n+ T∑ t=2 α 2 ( (tAt) −1 • (At − diag( t) (1− βt) )) −\nT∑ t=2 α 2 ( (tAt) −1 • (βtAt−1 − βtdiag( t−1) (1− βt) )) ≤ α\n2γ ((A1)\n−1 • (A1 − diag( 1)))\n+ T∑ t=2 α 2 ( (tAt) −1 • ( tAt − tβtAt−1 γ )) +\nT∑ t=2 α 2 ( (tAt) −1 • (−diag( t) + βtdiag( t−1) (1− βt) )) ≤ α\n2γ log ( |A1| |diag( 1)| ) + α 2γ T∑ t=2 log ( |tAt| |tβtAt−1| ) +\nT∑ t=2 α 2 ( (tAt) −1 • (−diag( t) + βtdiag( t−1) (1− βt) )) ≤ α\n2γ log ( |A1| |diag( 1)| ) + α 2γ T∑ t=2 log ( |tAt| |(t− 1)At−1| ) +\nT∑ t=2 α 2 ( (tAt) −1 • (−diag( t) + βtdiag( t−1) (1− βt) )) In the first inequality we use 11−βt ≤ t γ . In the last step we use, that ∀t > 1, 1tβt ≤ 1 t−1 . Finally, by upper bounding the last term with Lemma 4.3 T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 ≤ α 2γ log ( |TAT | |diag( 1)|\n) + α\n2γ T∑ t=2 d∑ i=1 −t t,i + (t− 1) t−1,i tvt,i + t t,i\n+ α\n2γ d∑ i=1 (1− γ)(1 + log T ) infj∈[1,T ] jvj,i + j j,i\nWe note that\nlog(|TAT |) = log ( d∏ i=1 (T (vT,i + T,i)) )\n= d∑ i=1 log(T (vT,i + T,i)),\nand similar, log(|diag( 1)|) = ∑d i=1 log( 1,i).\nNote that for γ = 1 and the choice t = δtt this reduces to the result of Lemma 3.2.\nLemma 4.3 Let t ≤ 1t and 1− 1 t ≤ βt ≤ 1− γ t for some 1 ≥ γ > 0. Then it holds, T∑ t=2 α 2 ( (tAt) −1 • (−diag( t) + βtdiag( t−1) (1− βt) ))\n≤ α 2γ T∑ t=2 d∑ i=1 −t t,i + (t− 1) t−1,i tvt,i + t t,i\n+ α\n2γ d∑ i=1 (1− γ)(1 + log T ) infj∈[1,T ] jvj,i + j j,i\nProof: Using γt ≤ 1− βt ≤ 1 t , we get T∑ t=2 α 2 ( (tAt) −1 • (−diag( t) + βtdiag( t−1) (1− βt)\n)) ≤ α\n2 T∑ t=2 ( (tAt) −1 • (−tdiag( t) + tβtdiag( t−1) γ )) = α\n2γ T∑ t=2 d∑ i=1 −t t,i + tβt t−1,i tvt,i + t t,i\n= α\n2γ T∑ t=2 d∑ i=1 −t t,i + (t− 1) t−1,i + (tβt − (t− 1)) t−1,i tvt,i + t t,i\n≤ α 2γ T∑ t=2 d∑ i=1 −t t,i + (t− 1) t−1,i tvt,i + t t,i\n+ α\n2γ T∑ t=2 d∑ i=1 (1− γ) t−1,i tvt,i + t t,i\n≤ α 2γ T∑ t=2 d∑ i=1 −t t,i + (t− 1) t−1,i tvt,i + t t,i\n+ α\n2γ d∑ i=1 1− γ infj∈[2,T ] jvj,i + j j,i T∑ t=2 1 t\n≤ α 2γ T∑ t=2 d∑ i=1 −t t,i + (t− 1) t−1,i tvt,i + t t,i\n+ α\n2γ d∑ i=1 1− γ infj∈[2,T ] jvj,i + j j,i (1 + log T )\nTheorem 4.2 Let Assumptions A1, A2 hold and let θt be the sequence generated by SC-RMSProp in Algorithm 4, where gt ∈ ∂ft(θt) and ft : C → R is an arbitrary µstrongly convex function (µ ∈ Rd+) with αt = αt for some α ≥ (2−γ)G 2 ∞\n2mini µi and 1 − 1t ≤ βt ≤ 1 − γ t for some 0 <\nγ ≤ 1. Furthermore, set t = δtt and assume 1 ≥ δt,i > 0 and δt,i ≤ δt−1,i∀t ∈ [T ],∀i ∈ [d], then the regret of SCRMSProp can be upper bounded for T ≥ 1 as\nR(T ) ≤ D 2 ∞ tr(diag(δ1))\n2α +\nα\n2γ d∑ i=1 log (TvT,i + δT,i δ1,i )\n+ 1\n2 d∑ i=1 inf t∈[T ] ( (θt,i − θ∗i )2 α − α γ(tvt,i + t t,i) ) (δT,i − δ1,i)\n+ α\n2γ d∑ i=1 (1− γ)(1 + log T ) infj∈[1,T ] jvj,i + j j,i\nProof: We rewrite the regret bound with the definition of µ-strongly convex functions as\nR(T ) = T∑ t=1 (ft(θt)− ft(θ∗))\n≤ T∑ t=1 〈gt, θt − θ∗〉 − T∑ t=1 ‖θt − θ∗‖2diag(µ)\nUsing the non-expansiveness of the weighted projection, we get\n‖θt+1 − θ∗‖2At = ∥∥∥PAtC (θt − αtA−1t gt)− θ∗∥∥∥2\nAt ≤ ∥∥θt − αtA−1t gt − θ∗∥∥2At ≤ ‖θt − θ∗‖2At − 2αt 〈gt, θt − θ ∗〉+ α2t 〈 gt, A −1 t gt\n〉 This yields\n〈gt, θt − θ∗〉 ≤ ‖θt − θ∗‖2At − ‖θt+1 − θ\n∗‖2At 2αt + αt 2\n〈 gt, A −1 t gt 〉 Hence we can upper bound the regret as follows\nR(T )\n≤ T∑ t=1 ‖θt − θ∗‖2At − ‖θt+1 − θ ∗‖2At 2αt\n+ T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 − T∑ t=1 ‖θt − θ∗‖2diag(µ)\n≤ ‖θ1 − θ∗‖2A1\n2α1 + T∑ t=2 (‖θt − θ∗‖2At 2αt − ‖θt − θ∗‖2At−1 2αt−1 ) − ‖θT+1 − θ∗‖2AT\n2αt + T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 −\nT∑ t=1 ‖θt − θ∗‖2diag(µ)\n≤ ‖θ1 − θ∗‖2A1\n2α1 + T∑ t=2 ‖θt − θ∗‖2tAt−(t−1)At−1 2α\n+ T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 − T∑ t=1 ‖θt − θ∗‖2diag(µ)\nNow on imposing the following condition\ntAt − (t− 1)At−1 − 2α diag(µ) diag(δt)− diag(δt−1)∀t ≥ 2\n(10)\nA1 − 2αdiag(µ) diag(δ1) (11)\nNote that with t,i = δt,i t and δt,i ≤ δt−1,i for all t ≥ 1 and i ∈ [d], it holds t t,i ≤ (t − 1) t−1,i. We show regarding the inequality in (10)\ntvt,i + t t,i − (t− 1)vt−1,i − (t− 1) t−1,i − 2αµi = tβt,ivt−1,i + t t,i + t(1− βt)g2t,i − (t− 1) t−1,i − (t− 1)vt−1,i − 2αµi = (tβt,i − (t− 1))vt−1,i + t(1− βt)g2t,i − 2αµi + t t,i − (t− 1) t−1,i ≤ (1− γ)vt−1,i + g2t,i − 2αµi + t t,i − (t− 1) t−1,i ≤ (1− γ)G2∞ +G2∞ − 2αµi + t t,i − (t− 1) t−1,i = (2− γ)G2∞ − 2αµi + t t,i − (t− 1) t−1,i ≤ t t,i − (t− 1) t−1,i,\nwhere the last inequality follows by choosing α ≥ G2∞ 2min i µi (2− γ) and we have used that\nvt,i = t∑ j=1 (1− βj) t∏ k=j+1 βkg 2 j,i\n≤ G2∞ t∑\nj=1 ( t∏ k=j+1 βk − t∏ k=j βk )\n≤ G2∞ ( 1− t∏ k=1 βk ) ≤ G2∞\nThe second inequality (11) holds easily with the given choice of α. Choosing some βt = 1− γt\ntvt,i = tβt,ivt−1,i + t(1− βt)g2t,i ≥ (t− 1)vt−1,i + t(1− βt)g2t,i ≥ (t− 1)vt−1,i\nHence δt,i ≤ δt−1,i where δt,i = e− t vt,i for > 0. With t,i = δt,i t we have t t ≤ (t− 1) t−1.\nR(T )\n≤ ‖θ1 − θ∗‖2diag(δ1)\n2α + T∑ t=2 ‖θt − θ∗‖diag(δt)−diag(δt−1) 2α\n+ T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 = ‖θ1 − θ∗‖2diag(δ1)\n2α + T∑ t=2 d∑ i=1 (θt,i − θ∗i )2(δt,i − δt−1,i) 2α\n+ T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 ≤ D 2 ∞ tr(diag(δ1))\n2α + T∑ t=1 αt 2 〈 gt, A −1 t gt 〉 +\nT∑ t=2 d∑ i=1 (θt,i − θ∗i )2(δt,i − δt−1,i) 2α\n≤ D 2 ∞ tr(diag(δ1))\n2α +\nα\n2γ d∑ i=1 log (TvT,i + δT,i δ1,i ) + 1\n2 T∑ t=2 d∑ i=1\n( (θt,i − θ∗i )2(δt,i − δt−1,i)\nα − α(δt,i − δt−1,i)\nγ(tvt,i + t t,i)\n)\n+ α\n2γ d∑ i=1 (1− γ)(1 + log T ) infj∈[1,T ] jvj,i + j j,i\n≤ D 2 ∞ tr(diag(δ1))\n2α +\nα\n2γ d∑ i=1 log (TvT,i + δT,i δ1,i ) + 1\n2 d∑ i=1 inf t∈[T ] ( (θt,i − θ∗i )2 α − α γ(tvt,i + t t,i) ) (δT,i − δ1,i)\n+ α\n2γ d∑ i=1 (1− γ)(1 + log T ) infj∈[1,T ] jvj,i + j j,i\nwhere we have used Lemma 4.2 in the last inequality and t,i = δt,i t for i ∈ [d] and t ≥ 1.\nNote that the regret bound reduces for γ = 1 to that of SCAdagrad. For 0 < γ < 1 a comparison between the bounds is not straightforward as the vt,i terms cannot be compared. It is an interesting future research question whether it is possible to show that one scheme is better than the other one potentially dependent on the problem characteristics.\n5. Experiments The idea of the experiments is to show that the proposed algorithms are useful for standard learning problems in both online and batch settings. We are aware of the fact that in the strongly convex case online to batch conversion is not tight (Hazan & Kale, 2014), however that does not necessarily imply that the algorithms behave generally suboptimal. We compare all algorithms for a strongly convex problem and present relative suboptimality plots, log10 ( f(xt)−p∗ p∗ ) , where p∗ is the global optimum, as well as separate regret plots, where we compare to the best optimal parameter in hindsight for the fraction of training points seen so far. On the other hand RMSProp was originally developed by (Hinton et al., 2012) for usage in deep learning. As discussed before the fixed choice of βt is\nnot allowed if one wants to get the optimal O( √ T ) regret bound in the convex case. Thus we think it is of interest to the deep learning community, if the insights from the convex optimization case transfer to deep learning. Moreover, Adagrad and RMSProp are heavily used in deep learning and thus it is interesting to compare their counterparts SCAdagrad and SC-RMSProp developed for the strongly convex case also in deep learning. For the deep learning experiments we optimize the learning rate once for smallest training objective as well as for best test performance after a fixed number of epochs (typically 200 epochs).\nDatasets: We use three datasets where it is easy, difficult and very difficult to achieve good test performance, just in order to see if this influences the performance. For this purpose we use MNIST (60000 training samples, 10 classes), CIFAR10 (50000 training samples, 10 classes) and CIFAR100 (50000 training samples, 100 classes). We refer to (Krizhevsky, 2009) for more details on the CIFAR datasets.\nAlgorithms: We compare 1) Stochastic Gradient Descent (SGD) (Bottou, 2010) with O(1/t) decaying step-size for the strongly convex problems and for non-convex problems we use a constant learning rate, 2) Adam (Kingma & Bai, 2015) , is used with step size decay of αt = α√t for strongly\nconvex problems and for non-convex problems we use a constant step-size. 3) Adagrad, see Algorithm 1, remains the same for strongly convex problems and non-convex problems. 4) RMSProp as proposed in (Hinton et al., 2012) is used for both strongly convex problems and non-convex problems with βt = 0.9 ∀t ≥ 1. 5) RMSProp (Ours) is used with step-size decay of αt = α√t and βt = 1 − γ t . In order that the parameter range is similar to the original RMSProp ((Hinton et al., 2012)) we fix as γ = 0.9 for all experiment (note that for γ = 1 RMSProp (Ours) is equivalent to Adagrad), 6) SC-RMSProp is used with stepsize αt = α t and γ = 0.9 as RMSProp (Ours) 7) SC-Adagrad is used with a constant stepsize α. The decaying damping factor for both SC-Adagrad and SC-RMSProp is used with ξ1 = 0.1, ξ2 = 1 for convex problems and we use ξ1 = 0.1, ξ2 = 0.1 for non-convex deep learning problems. Finally, the numerical stability parameter δ used in Adagrad, Adam, RMSProp is set to 10−8 as it is typically recommended for these algorithms.\nSetup: Note that all methods have only one varying parameter: the stepsize α which we choose from the set of {1, 0.1, 0.01, 0.001, 0.0001} for all experiments. By this setup no method has an advantage just because it has more hyperparameters over which it can optimize. The optimal\nrate is always chosen for each algorithm separately so that one achieves either best training objective or best test performance after a fixed number of epochs.\nStrongly Convex Case - Softmax Regression: Given the training data (xi, yi)i∈[m] and let yi ∈ [K]. we fit a linear model with cross entropy loss and use as regularization the squared Euclidean norm of the weight parameters. The objective is then given as\nJ(θ) = − 1 m m∑ i=1 log\n( eθ\nT yi xi+byi∑K\nj=1 e θTj xi+bj\n) + λ\nK∑ k=1 ‖θk‖2\nAll methods are initialized with zero weights. The regularization parameter was chosen so that one achieves the best prediction performance on the test set. The results are shown in Figure 1. We also conduct experiments in an online setting, where we restrict the number of iterations to the number of training samples. Here for all the algorithms, we choose the stepsize resulting in best regret value at the end. We plot the Regret ( in log scale ) vs dataset proportion seen, and as expected SC-Adagrad and SC-RMSProp outperform all the other methods across all the considered datasets. Also, RMSProp (Ours) has a lower regret values than the original RMSProp as shown in Figure 2.\nConvolutional Neural Networks: Here we test a 4-layer CNN with two convolutional (32 filters of size 3 × 3) and one fully connected layer (128 hidden units followed by 0.5 dropout). The activation function is ReLU and after the last convolutional layer we use max-pooling over a 2 × 2 window and 0.25 dropout. The final layer is a softmax layer and the final objective is cross-entropy loss. This is a pretty simple standard architecture and we use it for all datasets. The results are shown in Figures 3, 6. SC-RMSProp is competitive in terms of training objective on all datasets though SGD achieves the best performance. SC-Adagrad is not very competitive and the reason seems to be that the numerical stability parameter is too small. RMSProp diverges on CIFAR10 dataset whereas RMSProp (Ours) converges on all datasets and has similar performance as Adagrad in terms of training objective. Both RMSProp (Ours) and SCAdagrad perform better than all the other methods in terms of test accuracy for CIFAR10 dataset. On both CIFAR100 and MNIST datasets SC-RMSProp is very competitive.\nMulti-Layer Perceptron: We also conduct experiments for a 3-layer Multi-Layer perceptron with 2 fully connected hidden layers and a softmax layer according to the number of classes in each dataset. For the first two hidden layers we\nhave 512 units in each layer with ReLU activation function and 0.2 dropout. The final layer is a softmax layer. We report the results in Figures 7, 8. On all the datasets, SCAdagrad and SC-RMSProp perform better in terms of Test accuracy and also have the best training objective performance on CIFAR10 dataset. On MNIST dataset, Adagrad and RMSProp(Ours) achieves best training objective performance however SC-Adagrad and SC-RMSProp eventually performs as good as Adagrad. Here, the performance is not as competitive as Adagrad, because the numerical stability decay parameter of SC-Adagrad and SC-RMSProp are too prohibitive.\nResidual Network: We also conduct experiments for ResNet-18 network proposed in (He et al., 2016a) where the residual blocks are used with modifications proposed in (He et al., 2016b) on CIFAR10 dataset. We report the results in Figures 4. SC-Adagrad, SC-RMSProp and RMSProp (Ours) have the best performance in terms of test Accuracy and RMSProp (Ours) has the best performance in terms of training objective along with Adagrad.\nGiven these experiments, we think that SC-Adagrad, SCRMSProp and RMSProp (Ours) are valuable new adaptive gradient techniques for deep learning.\n6. Conclusion We have analyzed RMSProp originally proposed in the deep learning community in the framework of online convex optimization. We show that the conditions for convergence of RMSProp for the convex case are different than what is used by (Hinton et al., 2012) and that this leads to better performance in practice. We also propose variants SC-Adagrad and SC-RMSProp which achieve logarithmic regret bounds for the strongly convex case. Moreover, they perform very well for different network models and datasets and thus they are an interesting alternative to existing adaptive gradient schemes. In the future we want to explore why these algorithms perform so well in deep learning tasks even though they have been designed for the strongly convex case.\nAcknowledgements We would like to thank Shweta Mahajan and all the reviewers for their insightful comments.\nReferences Bottou, L. Large-scale machine learning with stochastic\ngradient descent. In Proceedings of COMPSTAT’2010, pp. 177–186. Springer, 2010.\nDaniel, C., Taylor, J., and Nowozin, S. Learning step size controllers for robust neural network training. In AAAI, 2016.\nDauphin, Y., de Vries, H., and Bengio, Y. Equilibrated adaptive learning rates for non-convex optimization. In NIPS, 2015.\nDuchi, J., Hazan, E., and Singer, Y. Adaptive subgradient methods for online learning and stochastic optimization. Journal of Machine Learning Research, 12:2121–2159, 2011.\nHazan, E. Introduction to online convex optimization. Foundations and Trends in Optimization, 2:157–325, 2016.\nHazan, E. and Kale, S. Beyond the regret minimization barrier: optimal algorithms for stochastic strongly-convex optimization. Journal of Machine Learning Research, 15(1):2489–2512, 2014.\nHazan, E., Agarwal, A., and Kale, S. Logarithmic regret algorithms for online convex optimization. Machine Learning, 69(2-3):169–192, 2007.\nHe, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun, Jian. Deep residual learning for image recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 770–778, 2016a.\nHe, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun, Jian. Identity mappings in deep residual networks. In European Conference on Computer Vision, pp. 630–645. Springer, 2016b.\nHinton, G., Srivastava, N., and Swersky, K. Lecture 6d - a separate, adaptive learning rate for each connection. Slides of Lecture Neural Networks for Machine Learning, 2012.\nKarpathy, A. and Fei-Fei, L. Deep visual-semantic alignments for generating image descriptions. In CVPR, 2016.\nKingma, D. P. and Bai, J. L. Adam: a method for stochastic optimization. ICLR, 2015.\nKoushik, Jayanth and Hayashi, Hiroaki. Improving stochastic gradient descent with feedback. arXiv preprint arXiv:1611.01505, 2016.\nKrizhevsky, A. Learning multiple layers of features from tiny images. Technical report, University of Toronto, 2009.\nMcMahan, H Brendan. A survey of algorithms and analysis for adaptive online learning. arXiv preprint arXiv:1403.3465, 2014.\nRuder, S. An overview of gradient descent optimization algorithms. preprint, arXiv:1609.04747v1, 2016.\nSchaul, T., Antonoglou, I., and Silver, D. Unit tests for stochastic optimization. In ICLR, 2014.\nSchmidhuber, J. Deep learning in neural networks: An overview. Neural Networks, 61:85 – 117, 2015.\nSrivastava, Nitish, Hinton, Geoffrey E, Krizhevsky, Alex, Sutskever, Ilya, and Salakhutdinov, Ruslan. Dropout: a simple way to prevent neural networks from overfitting. Journal of Machine Learning Research, 15(1): 1929–1958, 2014.\nSzegedy, C., Ioffe, S., and Vanhoucke, V. Inception-v4, inception-resnet and the impact of residual connections on learning. In ICLR Workshop, 2016a.\nSzegedy, C., Vanhoucke, V., Ioffe, S., Shlens, J., and Wojna, Z. Rethinking the inception architecture for computer vision. In CVPR, 2016b.\nZeiler, M. D. ADADELTA: An adaptive learning rate method. preprint, arXiv:1212.5701v1, 2012.\nZinkevich, M. Online convex programming and generalized infinitesimal gradient ascent. In ICML, 2003."
    } ],
    "references" : [ {
      "title" : "Large-scale machine learning with stochastic gradient descent",
      "author" : [ "L. Bottou" ],
      "venue" : "In Proceedings of COMPSTAT’2010,",
      "citeRegEx" : "Bottou,? \\Q2010\\E",
      "shortCiteRegEx" : "Bottou",
      "year" : 2010
    }, {
      "title" : "Learning step size controllers for robust neural network training",
      "author" : [ "C. Daniel", "J. Taylor", "S. Nowozin" ],
      "venue" : "In AAAI,",
      "citeRegEx" : "Daniel et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Daniel et al\\.",
      "year" : 2016
    }, {
      "title" : "Equilibrated adaptive learning rates for non-convex optimization",
      "author" : [ "Y. Dauphin", "H. de Vries", "Y. Bengio" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Dauphin et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Dauphin et al\\.",
      "year" : 2015
    }, {
      "title" : "Adaptive subgradient methods for online learning and stochastic optimization",
      "author" : [ "J. Duchi", "E. Hazan", "Y. Singer" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "Duchi et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Duchi et al\\.",
      "year" : 2011
    }, {
      "title" : "Introduction to online convex optimization",
      "author" : [ "E. Hazan" ],
      "venue" : "Foundations and Trends in Optimization,",
      "citeRegEx" : "Hazan,? \\Q2016\\E",
      "shortCiteRegEx" : "Hazan",
      "year" : 2016
    }, {
      "title" : "Beyond the regret minimization barrier: optimal algorithms for stochastic strongly-convex optimization",
      "author" : [ "E. Hazan", "S. Kale" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "Hazan and Kale,? \\Q2014\\E",
      "shortCiteRegEx" : "Hazan and Kale",
      "year" : 2014
    }, {
      "title" : "Logarithmic regret algorithms for online convex optimization",
      "author" : [ "E. Hazan", "A. Agarwal", "S. Kale" ],
      "venue" : "Machine Learning,",
      "citeRegEx" : "Hazan et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Hazan et al\\.",
      "year" : 2007
    }, {
      "title" : "Deep residual learning for image recognition",
      "author" : [ "He", "Kaiming", "Zhang", "Xiangyu", "Ren", "Shaoqing", "Sun", "Jian" ],
      "venue" : "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "He et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2016
    }, {
      "title" : "Identity mappings in deep residual networks",
      "author" : [ "He", "Kaiming", "Zhang", "Xiangyu", "Ren", "Shaoqing", "Sun", "Jian" ],
      "venue" : "In European Conference on Computer Vision,",
      "citeRegEx" : "He et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "He et al\\.",
      "year" : 2016
    }, {
      "title" : "Lecture 6d - a separate, adaptive learning rate for each connection",
      "author" : [ "G. Hinton", "N. Srivastava", "K. Swersky" ],
      "venue" : "Slides of Lecture Neural Networks for Machine Learning,",
      "citeRegEx" : "Hinton et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Hinton et al\\.",
      "year" : 2012
    }, {
      "title" : "Deep visual-semantic alignments for generating image descriptions",
      "author" : [ "A. Karpathy", "L. Fei-Fei" ],
      "venue" : "In CVPR,",
      "citeRegEx" : "Karpathy and Fei.Fei,? \\Q2016\\E",
      "shortCiteRegEx" : "Karpathy and Fei.Fei",
      "year" : 2016
    }, {
      "title" : "Adam: a method for stochastic optimization",
      "author" : [ "D.P. Kingma", "J.L. Bai" ],
      "venue" : "ICLR,",
      "citeRegEx" : "Kingma and Bai,? \\Q2015\\E",
      "shortCiteRegEx" : "Kingma and Bai",
      "year" : 2015
    }, {
      "title" : "Improving stochastic gradient descent with feedback",
      "author" : [ "Koushik", "Jayanth", "Hayashi", "Hiroaki" ],
      "venue" : "arXiv preprint arXiv:1611.01505,",
      "citeRegEx" : "Koushik et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Koushik et al\\.",
      "year" : 2016
    }, {
      "title" : "Learning multiple layers of features from tiny images",
      "author" : [ "A. Krizhevsky" ],
      "venue" : "Technical report, University of Toronto,",
      "citeRegEx" : "Krizhevsky,? \\Q2009\\E",
      "shortCiteRegEx" : "Krizhevsky",
      "year" : 2009
    }, {
      "title" : "A survey of algorithms and analysis for adaptive online learning",
      "author" : [ "McMahan", "H Brendan" ],
      "venue" : "arXiv preprint arXiv:1403.3465,",
      "citeRegEx" : "McMahan and Brendan.,? \\Q2014\\E",
      "shortCiteRegEx" : "McMahan and Brendan.",
      "year" : 2014
    }, {
      "title" : "An overview of gradient descent optimization",
      "author" : [ "S. Ruder" ],
      "venue" : "algorithms. preprint,",
      "citeRegEx" : "Ruder,? \\Q2016\\E",
      "shortCiteRegEx" : "Ruder",
      "year" : 2016
    }, {
      "title" : "Unit tests for stochastic optimization",
      "author" : [ "T. Schaul", "I. Antonoglou", "D. Silver" ],
      "venue" : "In ICLR,",
      "citeRegEx" : "Schaul et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Schaul et al\\.",
      "year" : 2014
    }, {
      "title" : "Deep learning in neural networks: An overview",
      "author" : [ "J. Schmidhuber" ],
      "venue" : "Neural Networks,",
      "citeRegEx" : "Schmidhuber,? \\Q2015\\E",
      "shortCiteRegEx" : "Schmidhuber",
      "year" : 2015
    }, {
      "title" : "Dropout: a simple way to prevent neural networks from overfitting",
      "author" : [ "Srivastava", "Nitish", "Hinton", "Geoffrey E", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan" ],
      "venue" : "Journal of Machine Learning Research,",
      "citeRegEx" : "Srivastava et al\\.,? \\Q1929\\E",
      "shortCiteRegEx" : "Srivastava et al\\.",
      "year" : 1929
    }, {
      "title" : "Inception-v4, inception-resnet and the impact of residual connections on learning",
      "author" : [ "C. Szegedy", "S. Ioffe", "V. Vanhoucke" ],
      "venue" : "In ICLR Workshop,",
      "citeRegEx" : "Szegedy et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Szegedy et al\\.",
      "year" : 2016
    }, {
      "title" : "Rethinking the inception architecture for computer vision",
      "author" : [ "C. Szegedy", "V. Vanhoucke", "S. Ioffe", "J. Shlens", "Z. Wojna" ],
      "venue" : "In CVPR,",
      "citeRegEx" : "Szegedy et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Szegedy et al\\.",
      "year" : 2016
    }, {
      "title" : "ADADELTA: An adaptive learning rate method",
      "author" : [ "M.D. Zeiler" ],
      "venue" : "preprint, arXiv:1212.5701v1,",
      "citeRegEx" : "Zeiler,? \\Q2012\\E",
      "shortCiteRegEx" : "Zeiler",
      "year" : 2012
    }, {
      "title" : "Online convex programming and generalized infinitesimal gradient ascent",
      "author" : [ "M. Zinkevich" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Zinkevich,? \\Q2003\\E",
      "shortCiteRegEx" : "Zinkevich",
      "year" : 2003
    } ],
    "referenceMentions" : [ {
      "referenceID" : 3,
      "context" : "Introduction There has recently been a lot of work on adaptive gradient algorithms such as Adagrad (Duchi et al., 2011), RMSProp (Hinton et al.",
      "startOffset" : 99,
      "endOffset" : 119
    }, {
      "referenceID" : 9,
      "context" : ", 2011), RMSProp (Hinton et al., 2012), ADADELTA (Zeiler, 2012), and Adam (Kingma & Bai, 2015).",
      "startOffset" : 17,
      "endOffset" : 38
    }, {
      "referenceID" : 21,
      "context" : ", 2012), ADADELTA (Zeiler, 2012), and Adam (Kingma & Bai, 2015).",
      "startOffset" : 18,
      "endOffset" : 32
    }, {
      "referenceID" : 3,
      "context" : "The original analysis of Adagrad (Duchi et al., 2011) was limited to the case of all convex functions for which it obtained a datadependent regret bound of order O( √ T ) which is known to be optimal (Hazan, 2016) for this class.",
      "startOffset" : 33,
      "endOffset" : 53
    }, {
      "referenceID" : 4,
      "context" : ", 2011) was limited to the case of all convex functions for which it obtained a datadependent regret bound of order O( √ T ) which is known to be optimal (Hazan, 2016) for this class.",
      "startOffset" : 154,
      "endOffset" : 167
    }, {
      "referenceID" : 6,
      "context" : "It has been shown in (Hazan et al., 2007) that one can achieve much better logarithmic regret bounds for the class of strongly convex functions.",
      "startOffset" : 21,
      "endOffset" : 41
    }, {
      "referenceID" : 6,
      "context" : "It is known that such bounds can be much better in practice than data independent bounds (Hazan et al., 2007),(McMahan, 2014).",
      "startOffset" : 89,
      "endOffset" : 109
    }, {
      "referenceID" : 15,
      "context" : "Interestingly, SC-Adagrad has been discussed in (Ruder, 2016), where it is said that “it does not to work”.",
      "startOffset" : 48,
      "endOffset" : 61
    }, {
      "referenceID" : 22,
      "context" : "One of the first methods which achieves the optimal regret bound of O( √ T ) for convex problems is online projected gradient descent (Zinkevich, 2003), defined as θt+1 = PC(θt − αtgt) (3) where αt = α t is the step-size scheme and gt is a (sub)gradient of ft at θt.",
      "startOffset" : 134,
      "endOffset" : 151
    }, {
      "referenceID" : 6,
      "context" : "With αt = αt , online projected gradient descent method achieves the optimal O(log(T )) regret bound for strongly-convex problems (Hazan et al., 2007).",
      "startOffset" : 130,
      "endOffset" : 150
    }, {
      "referenceID" : 3,
      "context" : "If the adversarial is allowed to choose from the set of all possible convex functions on C ⊂ R, then Adagrad achieves the regret bound of orderO( √ T ) as shown in (Duchi et al., 2011).",
      "startOffset" : 164,
      "endOffset" : 184
    }, {
      "referenceID" : 4,
      "context" : "(Hazan, 2016).",
      "startOffset" : 0,
      "endOffset" : 13
    }, {
      "referenceID" : 3,
      "context" : "For better comparison to our results for RMSProp, we recall the result from (Duchi et al., 2011) in our notation.",
      "startOffset" : 76,
      "endOffset" : 96
    }, {
      "referenceID" : 3,
      "context" : "1 (Duchi et al., 2011) Let Assumptions A1, A2 hold and let θt be the sequence generated by Adagrad in Algorithm 1, where gt ∈ ∂ft(θt) and ft : C → R is an arbitrary convex function, then for stepsize α > 0 the regret is upper bounded as R(T ) ≤ D 2 ∞ 2α d ∑",
      "startOffset" : 2,
      "endOffset" : 22
    }, {
      "referenceID" : 6,
      "context" : "Strongly convex Adagrad (SC-Adagrad) The modification SC-Adagrad of Adagrad which we propose in the following can be motivated by the observation that the online projected gradient descent (Hazan et al., 2007) uses stepsizes of order α = O( 1 T ) in order to achieve the logarithmic regret bound for strongly convex functions.",
      "startOffset" : 189,
      "endOffset" : 209
    }, {
      "referenceID" : 15,
      "context" : "This is probably why in (Ruder, 2016), the modification of Adagrad where one “drops the square-root” did not work.",
      "startOffset" : 24,
      "endOffset" : 37
    }, {
      "referenceID" : 6,
      "context" : "1 [Lemma 12 (Hazan et al., 2007)] Let A,B be positive definite matrices, let A B 0 then A−1 • (A−B) ≤ log ( |A| |B| ) (6)",
      "startOffset" : 12,
      "endOffset" : 32
    }, {
      "referenceID" : 6,
      "context" : "1 also see for Lemma 12 of (Hazan et al., 2007).",
      "startOffset" : 27,
      "endOffset" : 47
    }, {
      "referenceID" : 16,
      "context" : "RMSProp and SC-RMSProp RMSProp is one of the most popular adaptive gradient algorithms used for the training of deep neural networks (Schaul et al., 2014; Dauphin et al., 2015; Daniel et al., 2016; Schmidhuber, 2015).",
      "startOffset" : 133,
      "endOffset" : 216
    }, {
      "referenceID" : 2,
      "context" : "RMSProp and SC-RMSProp RMSProp is one of the most popular adaptive gradient algorithms used for the training of deep neural networks (Schaul et al., 2014; Dauphin et al., 2015; Daniel et al., 2016; Schmidhuber, 2015).",
      "startOffset" : 133,
      "endOffset" : 216
    }, {
      "referenceID" : 1,
      "context" : "RMSProp and SC-RMSProp RMSProp is one of the most popular adaptive gradient algorithms used for the training of deep neural networks (Schaul et al., 2014; Dauphin et al., 2015; Daniel et al., 2016; Schmidhuber, 2015).",
      "startOffset" : 133,
      "endOffset" : 216
    }, {
      "referenceID" : 17,
      "context" : "RMSProp and SC-RMSProp RMSProp is one of the most popular adaptive gradient algorithms used for the training of deep neural networks (Schaul et al., 2014; Dauphin et al., 2015; Daniel et al., 2016; Schmidhuber, 2015).",
      "startOffset" : 133,
      "endOffset" : 216
    }, {
      "referenceID" : 16,
      "context" : "Note that RMSProp outperformed other adaptive methods like Adagrad order Adadelta as well as SGD with momentum in a large number of tests in (Schaul et al., 2014).",
      "startOffset" : 141,
      "endOffset" : 162
    }, {
      "referenceID" : 1,
      "context" : "It has been argued that if the changes in the parameter update are approximately Gaussian distributed, then the matrix At can be seen as a preconditioner which approximates the diagonal of the Hessian (Daniel et al., 2016).",
      "startOffset" : 201,
      "endOffset" : 222
    }, {
      "referenceID" : 9,
      "context" : "This is in contrast to the original suggestion of (Hinton et al., 2012) to choose βt = 0.",
      "startOffset" : 50,
      "endOffset" : 71
    }, {
      "referenceID" : 9,
      "context" : "On the other hand RMSProp was originally developed by (Hinton et al., 2012) for usage in deep learning.",
      "startOffset" : 54,
      "endOffset" : 75
    }, {
      "referenceID" : 13,
      "context" : "We refer to (Krizhevsky, 2009) for more details on the CIFAR datasets.",
      "startOffset" : 12,
      "endOffset" : 30
    }, {
      "referenceID" : 0,
      "context" : "Algorithms: We compare 1) Stochastic Gradient Descent (SGD) (Bottou, 2010) with O(1/t) decaying step-size for the strongly convex problems and for non-convex problems we use a constant learning rate, 2) Adam (Kingma & Bai, 2015) , is used with step size decay of αt = α t for strongly convex problems and for non-convex problems we use a constant step-size.",
      "startOffset" : 60,
      "endOffset" : 74
    }, {
      "referenceID" : 9,
      "context" : "4) RMSProp as proposed in (Hinton et al., 2012) is used for both strongly convex problems and non-convex problems with βt = 0.",
      "startOffset" : 26,
      "endOffset" : 47
    }, {
      "referenceID" : 9,
      "context" : "In order that the parameter range is similar to the original RMSProp ((Hinton et al., 2012)) we fix as γ = 0.",
      "startOffset" : 70,
      "endOffset" : 91
    }, {
      "referenceID" : 9,
      "context" : "We show that the conditions for convergence of RMSProp for the convex case are different than what is used by (Hinton et al., 2012) and that this leads to better performance in practice.",
      "startOffset" : 110,
      "endOffset" : 131
    } ],
    "year" : 2017,
    "abstractText" : "Adaptive gradient methods have become recently very popular, in particular as they have been shown to be useful in the training of deep neural networks. In this paper we have analyzed RMSProp, originally proposed for the training of deep neural networks, in the context of online convex optimization and show √ T -type regret bounds. Moreover, we propose two variants SC-Adagrad and SC-RMSProp for which we show logarithmic regret bounds for strongly convex functions. Finally, we demonstrate in the experiments that these new variants outperform other adaptive gradient techniques or stochastic gradient descent in the optimization of strongly convex functions as well as in training of deep neural networks.",
    "creator" : "LaTeX with hyperref package"
  }
}