{
  "name" : "1702.02470.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Emmanuel Hebrard" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n70 2.\n02 47\n0v 1\n[ cs\n.A I]\n7 F\neb 2"
    }, {
      "heading" : "1 Introduction",
      "text" : "The fact that there is virtually no restriction on the algorithms used to reason about each constraint was critical to the success of constraint programming. For instance, efficient algorithms from matching and flow theory [2,14] were adapted as propagation algorithms [16,18] and subsequently lead to a number of successful applications. NP-hard constraints, however, are often simply decomposed. Doing so may significantly hinder the reasoning made possible by the knowledge on the structure of the problem. For instance, finding a support for the NValue constraint is NP-hard, yet enforcing some incomplete propagation rules for this constraint has been shown to be an effective approach [5,10], compared to decomposing it, or enforcing bound consistency [3].\nThe concept of parameterized complexity is very promising in the context of propagating NP-hard constraints. A study of the parameterized complexity of global constraints [4], and of their pertinent parameters, showed that they were a fertile ground for this technique. For instance, a kernelization of the NValue constraint was introduced in [12], yielding an FPT consistency algorithm. A kernel is an equivalent instance of a problem whose size is bounded in a parameter k. If a problem has a polynomial-time computable kernel, then it is FPT since brute-force search on the kernel can be done in time O∗(f(k)) for some computable function f . Moreover, kernelization techniques can provide useful information about suboptimal and/or compulsory choices, which can be used to propagate. In this paper we consider the example of the vertex cover problem,\nwhere we want to find a set of at most k vertices S of a graph G = (V,E) such that every edge of G is incident to at least one vertex in S. This problem is a long-time favourite of the parameterized complexity community and a number of different kernelization rules have been proposed, along with very efficient FPT algorithms (the most recent being the O(1.2738k + k|V |) algorithm by Chen, Kanj and Xia [7]).\nSince the complement of a minimum vertex cover is a maximum independent set, a VertexCover constraint can also be used to model variants of the maximum independent set and maximum clique problems with side constraints modulo straightforward modeling tweaks. Among these three equivalent problems, vertex cover offers the greatest variety of pruning techniques and is therefore the most natural choice for the definition of a global constraint. Through this example, we highlight the “triple” value of kernelization in the context of constraint programming:\nFirst, some kernelization rules are, or can be generalized to, filtering rules. Since the strongest kernelization techniques rely on dominance they cannot be used directly for filtering. Therefore, we introduce the notion of loss-less kernelization which preserves all solutions and can thus be used in the context of constraint propagation. Moreover, we show that we can use a more powerful form of kernel, the so-called rigid crowns to effectively filter the constraint when the lower bound on the size of the vertex cover is tight. We discuss the various kernelization techniques for this problem in Section 3.\nSecond, even when it cannot be used to filter the domain, a kernel can be sufficiently small to speed up lower bound computation, or to find a “witness solution” and sometimes an exact lower bound. We also show that such a support can be used to obtain stronger filtering. We introduce a propagation algorithm based on these observations in Section 4. Along this line, the kernel could also be used to guide search, either using the witness solution or the dominance relations on variable assignments.\nThird, because a kernel garantees a size at most f(k) for a parameter k, one can efficiently estimate the likelihood that these rules will indeed reduce the instance. We report experimental results on a variant of the vertex cover problem in Section 5. These experiments show that, as expected, kernelization techniques perform better when the parameter is small. However, we observe that the overhead is manageable, even in unfavorable cases. Moreover, one could dynamically choose whether costly methods should be applied by comparing the value of the parameter k (in our case, the upper bound of the variable standing for the size of the cover) to the input size."
    }, {
      "heading" : "2 Background and Notations",
      "text" : "An undirected graph is an ordered pair G = (V,E) where V is a set of vertices and E is a set of edges, that is, pairs in V . We denote the neighborhood N(v) = {u | {v, u} ∈ E} of a vertex v, its closed neighborhood N+(v) = N(v) ∪ {v} and N(W ) = ⋃ v∈W N(v). The subgraph of G = (V,E) induced by a subset of\nvertices W is denoted G[W ] = (W, 2W ∩ E). An independent set is a set I ⊆ V such that no pair of elements in I is in E. A clique is a set C ⊆ V such that every pair of elements in C is in E. A clique cover T of a graph G = (V,E) is a collection of disjoint cliques such that ⋃ C∈T\nC = V . A matching is a subset of pairwise disjoint edges. A vertex cover of G is a set S ⊆ V such that every edge e ∈ E is incident to at least one vertex in S, i.e., S∩e 6= ∅. The minimum vertex cover problem consists in finding a vertex cover of minimum size. Its decision version is NP-complete [11].\nThe standard algorithm for solving this problem is a simple branch and bound procedure. There are several bounds that one can use, in this paper we consider the minimum clique cover of the graph (or, equivalently, a coloring of its complement). Given a clique cover T of a graph G = (V,E), we know that all but one vertices in each clique of T must be in any vertex cover of G. Therefore, |V | − |T | is a lower bound of the size of the minimum vertex cover of G. The algorithm branches by adding a vertex to the cover (left branch) or adding its neighborhood to the cover (right branch).\nA constraint is a predicate over one or several variables. In this paper we consider the vertex cover problem as a constraint over two variables: an integer variable K to represent the bound on the size of the vertex cover, and a set variable S to represent the cover itself. The former takes integer values in a domain D(K) which minimum and maximum values are denoted K and K, respectively. The latter takes its values in the sets that are supersets of a lower bound S and subsets of an upper bound S. Moreover, the domain of a set variable is also often constrained by its cardinality given by an integer variable |S|. We consider a constraint on these two variables and whose predicate is the vertex cover problem on the graph G = (V,E) given as a parameter:\nDefinition 1 (VertexCover constraint). VertexCover[G](K,S) ⇐⇒ |S| ≤ K & ∀{v, u} ∈ E, v ∈ S ∨ u ∈ S\nA bound support for this constraint is a solution of the VertexCover problem. Since enforcing bound consistency would entail proving the existence of two bound supports for each element in S\\S and one for the lower bound of K, there is no polynomial algorithm unless P=NP. In this paper we consider pruning rules that are not complete with respect to usual notions of consistencies."
    }, {
      "heading" : "3 Kernelization as a Propagation Technique",
      "text" : ""
    }, {
      "heading" : "3.1 Standard Kernelization",
      "text" : "A problem is parameterized if each instance x is paired with a nonnegative integer k, and a parameterized problem is fixed-parameter tractable (FPT) if it can be solved in time O(|x|O(1)f(k)) for some function f . A kernelization algorithm takes as input a parameterized instance (x, k) and creates in polynomial time a parameterized instance (x′, k′) of the same problem, called the kernel, such that\n(i) (x′, k′) is satisfiable if and only if (x, k) is satisfiable; (ii) |x′| ≤ g(k) for some computable function g, and (iii) k′ ≤ h(k) for some computable function h.\nWhile this formal definition does not guarantee that the kernel is a subinstance of (x, k), in graph theory kernelization algorithms often operate by applying a succession of dominance rules to eliminate vertices or edges from the graph. In the case of vertex cover, the simplest dominance rule is the Buss rule: if a vertex v has at least k+1 neighbors, then v belongs to every vertex cover of size at most k; we can therefore remove v from the graph and reduce k by one. Applying this rule until a fixed point yields an elementary kernel that contains at most k2 edges and 2k2 non isolated vertices [6]. A more refined kernelization algorithm works using structures called crowns. A crown of a graph G = (V,E) is a partition (H,W, I) of V such that\n(i) I is an independent set; (ii) There is no edge between I and H , and (iii) There is a matching M between W and I of size |W |.\nEvery vertex cover of G[W ∪ I] has to be of size at least |W | because of the matching M . Since I is an independent set, taking the vertices of W over those of I into the vertex cover is always a sound choice: they would cover all the edges between W and I at minimum cost and as many edges in G[H ∪W ] as possible. A simple polynomial-time algorithm that finds a crown greedily from a maximal matching already leaves an instance G[H ] with at most 3k vertices [1]. A stronger method using linear programming yields a (presumably optimal) kernel of size 2k [15]."
    }, {
      "heading" : "3.2 Loss-less Kernelization",
      "text" : "The strongest kernelization rules correspond to dominance relations rather than inconsistencies. However, the Buss rule actually detects inconsistencies, that is, vertices that must be in the cover. We call this type of rules loss-less as they do not remove solutions. We can extend this line of reasoning by considering rules that do not remove solutions close to the optimum: for the VertexCover constraint, the variable K is likely to be minimized and the situation where all solutions are close to the optimum will inevitably arise. This can be formalized in the context of subset minimization problems, which ask for a subset S with some property π of a given universe U such that |S| ≤ k. In the next definition we denote by opt the cardinality of a minimum-size solution.\nDefinition 2. Given an integer z and a subset minimization problem parameterized by solution size k, a z-loss-less kernel is a partition (H,F,R, I) of the universe U where\n– F is a set of forced items, included in every solution of size at most opt+z; – R is a set of restricted items, intersecting with no solution of size at most\nopt+z;\n– H is a residual problem, whose size is bounded by a function in k and – I is a set of indifferent elements, i.e., if i ∈ I, then φ is a solution of size\nat most k − 1 if and only if φ ∪ i is a solution.\nAn ∞-loss-less kernel is simply said to be loss-less. The Buss kernel is a lossless kernel for vertex cover that never puts any vertices in R (F contains vertices of degree strictly greater than k, and I contains isolated vertices). In the case of vertex cover, the set R is always empty unless z = 0. Note that loss-free kernels introduced in the context of backdoors [17] are different since they only preserve minimal solutions; for subset minimization problems those kernels are called full kernels [9].\nA kernel for vertex cover that preserves all minimum-size solutions has been introduced in [8]. In our terminology, this corresponds to a 0-loss-less kernel. Interestingly, this kernelization is based on a special type of crown reduction but yields a kernel of size 2k (matching the best known bound for standard kernelization). The idea is to consider only crowns (H,W, I) such that W is the only minimum-size vertex cover of G[W ∪ I], as for this kind of crown vertices of W are always a strictly better choice that those of I. Those crowns are said rigid. The authors present a polynomial-time algorithm that finds the (unique) rigid crown (H,W, I) such that H is rigid crown free and has size at most 2k. Their algorithm works as follows. First, build from G = (V,E) the graph BG with two vertices vl, vr for every v ∈ V and two edges {vl, ur}, {ul, vr} for every edge {v, u} ∈ E. Compute a maximum matching M of BG (which can be done in polynomial time via the Hopcroft-Karp algorithm [14]). Then, if D is the set of all vertices in BG that are reachable from unmatched vertices via M -alternating paths of even length, a vertex v in G belongs to the independent set I of the rigid crown if and only if vl and vr belong to D. This algorithm is well suited to constraint propagation as bipartite matching algorithms based on augmenting paths are efficient and incremental."
    }, {
      "heading" : "3.3 Witness Pruning",
      "text" : "Last, even if the standard kernel uses dominance relations, it can indirectly be used for pruning. By reducing the size of the problem it often makes it possible to find an optimal vertex cover relatively efficiently. This vertex cover gives a valid (and maximal) lower bound. Moreover, given an optimal cover S we can find inconsistent values by asserting that some vertices must be in any cover of a given size.\nTheorem 1. if S is an optimal vertex cover of G = (V,E) such that there exists v ∈ S, J ⊆ N(v)\\S with N(J) ⊆ N+(v) then any vertex cover of G either contains v or at least |S|+ |J | − 1 vertices.\nProof. Let k be an upper bound on the size of the vertex cover, v ∈ S be a vertex in an optimal vertex cover S. Consider J ⊆ N(v) \\ S such that N(J) ⊆ N+(v). Suppose there exists a vertex cover S′ such that |S′| < |S|+ |J | − 1 and v /∈ S′. S′ must contain every node in N(v) and hence in J . However, we can build a\nvertex cover of size at most |S| − 1 by replacing J by v, since V \\ S and thus J are independent sets. ⊓⊔\nIf we can manage to find a minimum vertex cover S, for instance when the kernel is small enough so that it can be explored exhaustively, Theorem 1 entails a pruning rule. If we find a vertex v ∈ S and a set J ∈ N(v) \\ S with N(J) ⊆ N+(v) and |J | > k − |S| then we know that v must be in all vertex covers of size ≤ k.\n4 A Propagation Algorithm for VertexCover\nIn this section we give the skeleton of a propagation algorithm for theVertexCover constraint based on the techniques discussed in Section 3.\nAlgorithm 1: PropagateVertexCover(S,K,G = (V,E), λ, ω)\n1 S ← S ∪N(V \\ S); 2 Hr, F r ← BussKernel(G[S \\ S]);\n3 if ω 6⊆ S ∨ |ω ∪ S| ≥ K then 4 Hk,W k ← Kernel(Hr); 5 if λ > 0 then ω ← F r ∪W k∪ VertexCover(Hk, λ) 6 if ω is optimal then K ← |ω|7 else\nK ← max(K, |F r|+ |F k|+LowerBound(Hk))\n8 if K = K then 9 Hr, F r, Rr ← RigidKernel(G[S \\ S]);\n10 S ← S \\ Rr;\n11 else if ω is optimal & K −K ≤ 2 then S, S ← WitnessPruning(G, ω) 12 S ← S ∪ F r;\nAlgorithm 1 takes as input the set variable S standing for the vertex cover, an integer variable K standing for the cardinality of the vertex cover, and three parameters: the graph G = (V,E), an integer λ, and a “witness” vertex cover ω initialised to V .\nThe pruning in Line 1 is a straightforward application of the definition: the neighborhood of vertices not in the cover must be in the cover. Then, in Line 2, we apply the ∞-loss-less kernelization (Buss rule) described in Section 3.2 yielding a pair with a residual graph Hr and a set of nodes F r that must be in the cover.\nNext, if Condition 3 fails, there exists a vertex cover (ω∪S) of size strictly less than K. As a result, the pruning from rigid crowns cannot apply. When the cover witness is not valid, we compute, in Line 4, a standard kernel with the procedure Kernel(G) using crowns, as explained in Section 3.1. We then use this kernel to compute, in Line 5, a new witness using the procedure VertexCover(G, λ) which is the standard brute-force algorithm described in Section 2. We stop the\nprocedure when we find a vertex cover whose size is stricly smaller than the current upper bound, or when the search limit of λ, in number of nodes explored by the branch & bound procedure, is reached. In the first case, we know that the lower bound cannot be tight hence the constraint cannot fail nor prune further than the loss-less kernel. The second stopping condition is simply used to control the amount of time spent within the brute-force procedure.\nIf the call to the brute-force procedure was complete, we can conclude that the witness cover is optimal and therefore a valid lower bound (Line 6). Otherwise, we simply use the lower bound computed at the root node by VertexCover, denoted LowerBound in Line 7. If the lower bound is tight, then we can apply the pruning from rigid crowns as described in Section 3.2. Algorithm RigidKernel returns a triple Hr, F r, Rr of residual, forced and restricted vertices, respectively. Finally we apply a restriction to pairs of the pruning corresponding to Theorem 1 in Line 11, and apply the pruning on the lower bound of S corresponding to the forced nodes computed by BussKernel and/or RigidKernel."
    }, {
      "heading" : "5 Experimental Evaluation",
      "text" : "We experimentally evaluated our propagation algorithm on the “balanced vertex cover problem”. We want to find a minimum vertex cover which is balanced according to a partition of the vertices. For instance, the vertex cover may represent a set of machines to shut down in a network so that all communications are interrupted. In this case, one might want to avoid shutting down too many machines of the same type, or same client, or in charge of the same service, etc. By varying the degree of balance we can control the similarity of the problem to pure minimum vertex cover. We used a range of graphs from the dimacs and snap repositories. For each graph G = (V,E), we post a VertexCover constraint on the set variable ∅ ⊆ S ⊆ V .\nThen, we compute (uniformly at random) a balanced 4-partition {s1, s2, s3, s4} of the vertices and we post the following constraints: max({|si ∩ S| | 1 ≤ i ≤ 4}) −min({|si ∩ S| | 1 ≤ i ≤ 4}) ≤ b. For each graph instance, we generated 3 instances for b ∈ {0, 4, 8} denoted “tight”, “medium” and “loose” respectively. However, the classes p2p and ca- are much too large for these values to make sense. In this case we used three ratios 0.007, 0.008 and 0.009 of the number of nodes instead.\nWe compared 5 methods, all implemented in Mistral [13] and ran on CORE I7 processors with a time limit of 5 minutes:\nDecomposition is a simple decomposition in 2-clauses and a cardinality constraint. Clique Cover uses only Buss kernelization and the clique cover lower bound. It corresponds to non-colored lines in Algorithm 1. The witness is initialised to V and never changes, and Line 4 is replaced by a simple identity Hk ← Hr. Kernel Pruning uses kernelization, but no witness cover. It corresponds to Algorithm 1 minus the instruction line 11, with λ set to 0. Kernel\n& witness uses kernelization, and the witness cover for the lower bound K. It corresponds to Algorithm 1 minus the instruction line 11, with λ set to 5000. VertexCover is Algorithm 1 with λ set to 5000.\nThe results of these experiments are reported in Table 1. Instances are clustered by classes whose cardinality is given in the first column. These classes are ordered from top to bottom by decreasing ratio of minimum vertex cover size over number of nodes. We report four values for each class and each method: ‘#s’ is the number of instances of the class that were not solved to optimality,\n‘gap’ is the average gap w.r.t. the smallest vertex cover found, ‘cpu’ and ‘#nd’ are mean CPU time in seconds and number of nodes visited, respectively, until finding the best solution. Notice that CPU times and number of nodes are then only comparable when the objective values (gaps) are equal. We color the tuples 〈#s, gap, cpu, #nd〉 that are lexicographically minimum for each class1.\nInstances with same value of b are grouped in the same sub-table. The “shift” of colored cells from left to right when going from top to bottom in each subtable was to be expected since the kernelization is more effective on instances with small vertex cover. It should be noted that many instances from the dimacs repository are extremely adverse to our method as they tend to have very large vertex covers. On the other hand, kernelization is very effective on large graphs from snap.\nWe can also observe another shift of colored cells from left to right when moving to a subtable to the next. This was also an expected outcome since the pruning on this constraint becomes more prevalent when the problem is closer to pure vertex cover.\nLast, we can observe that every reasoning step (0-loss-less kernels, lower bound from the witness and pruning from the witness) improves the overall results."
    }, {
      "heading" : "6 Conclusion",
      "text" : "We have shown that the kernelization techniques can be an effective way to reason about NP-hard constraints that are fixed parameter tractable. In order to design a propagation algorithm we introduced the notion of loss-less kernel and outlined several ways to benefit from a small kernel. Our experimental evaluation on the VertexCover constraint shows the promise of this approach.\n1 With a “tolerance” of 1s and 1% nodes."
    }, {
      "heading" : "1. Faisal N Abu-Khzam, Michael R Fellows, Michael A Langston, and W Henry",
      "text" : "Suters. Crown structures for vertex cover kernelization. Theory of Computing Systems, 41(3):411–430, 2007. 2. R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. Network Flows: Theory, Algorithms, and Applications. Prentice-Hall, Inc., 1993. 3. Nicolas Beldiceanu. Pruning for the minimum constraint family and for the number of distinct values constraint family. In CP, pages 211–224, 2001. 4. C. Bessiere, E. Hebrard, B. Hnich, Z. Kiziltan, C.-G. Quimper, and T. Walsh. The Parameterized Complexity of Global Constraints. In AAAI, pages 235–240, 2008. 5. C. Bessiere, E. Hebrard, B. Hnich, Z. Kiziltan, and T. Walsh. Filtering Algorithms for the NValue Constraint. Constraints, 11(4):271–293, 2006. 6. Jonathan F Buss and Judy Goldsmith. Nondeterminism within pˆ*. SIAM Journal on Computing, 22(3):560–572, 1993. 7. J. Chen, I. A. Kanj, and G. Xia. Improved Parameterized Upper Bounds for Vertex Cover. In MFCS, pages 238–249, 2006. 8. Miroslav Chleb́ık and Janka Chleb́ıková. Crown reductions for the minimum weighted vertex cover problem. Discrete Applied Mathematics, 156(3):292–312, 2008. 9. Peter Damaschke. Parameterized enumeration, transversals, and imperfect phylogeny reconstruction. Theoretical Computer Science, 351(3):337–350, 2006. 10. J.-G. Fages and T. Lapègue. Filtering AtMostNValue with Difference Constraints: Application to the Shift Minimisation Personnel Task Scheduling Problem. In CP, pages 63–79, 2013. 11. Michael R. Garey and David S. Johnson. Computers and Intractability: A Guide to the Theory of NP-Completeness. W. H. Freeman & Co., New York, NY, USA, 1979. 12. S. Gaspers and S. Szeider. Kernels for Global Constraints. In IJCAI, pages 540– 545, 2011. 13. E. Hebrard. Mistral, a Constraint Satisfaction Library. In The Third International CSP Solver Competition, pages 31–40, 2008. 14. J. E. Hopcroft and R. M. Karp. An n5/2 Algorithm for Maximum Matchings in Bipartite Graphs. SIAM J. Comput., 2(4):225–231, 1973. 15. George L Nemhauser and Leslie E Trotter Jr. Vertex packings: structural properties and algorithms. Mathematical Programming, 8(1):232–248, 1975. 16. J.-C. Régin. A Filtering Algorithm for Constraints of Difference in CSPs. In AAAI, pages 362–367, 1994. 17. Marko Samer and Stefan Szeider. Backdoor trees. In AAAI, volume 8, pages 13–17, 2008. 18. W.-J. van Hoeve, G. Pesant, and L.-M. Rousseau. On Global Warming: Flow-Based Soft Global Constraints. Journal of Heuristics, 12(4-5):347–373, 2006."
    } ],
    "references" : [ {
      "title" : "Crown structures for vertex cover kernelization",
      "author" : [ "Faisal N Abu-Khzam", "Michael R Fellows", "Michael A Langston", "W Henry Suters" ],
      "venue" : "Theory of Computing Systems,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2007
    }, {
      "title" : "Network Flows: Theory, Algorithms, and Applications",
      "author" : [ "R.K. Ahuja", "T.L. Magnanti", "J.B. Orlin" ],
      "venue" : null,
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 1993
    }, {
      "title" : "Pruning for the minimum constraint family and for the number of distinct values constraint family",
      "author" : [ "Nicolas Beldiceanu" ],
      "venue" : "In CP,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2001
    }, {
      "title" : "The Parameterized Complexity of Global Constraints",
      "author" : [ "C. Bessiere", "E. Hebrard", "B. Hnich", "Z. Kiziltan", "C.-G. Quimper", "T. Walsh" ],
      "venue" : "In AAAI,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2008
    }, {
      "title" : "Filtering Algorithms for the NValue",
      "author" : [ "C. Bessiere", "E. Hebrard", "B. Hnich", "Z. Kiziltan", "T. Walsh" ],
      "venue" : "Constraint. Constraints,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2006
    }, {
      "title" : "Nondeterminism within pˆ",
      "author" : [ "Jonathan F Buss", "Judy Goldsmith" ],
      "venue" : "SIAM Journal on Computing,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 1993
    }, {
      "title" : "Improved Parameterized Upper Bounds for Vertex Cover",
      "author" : [ "J. Chen", "I.A. Kanj", "G. Xia" ],
      "venue" : "In MFCS,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2006
    }, {
      "title" : "Crown reductions for the minimum weighted vertex cover problem",
      "author" : [ "Miroslav Chleb́ık", "Janka Chleb́ıková" ],
      "venue" : "Discrete Applied Mathematics,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2008
    }, {
      "title" : "Parameterized enumeration, transversals, and imperfect phylogeny reconstruction",
      "author" : [ "Peter Damaschke" ],
      "venue" : "Theoretical Computer Science,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2006
    }, {
      "title" : "Filtering AtMostNValue with Difference Constraints: Application to the Shift Minimisation Personnel Task Scheduling Problem",
      "author" : [ "J.-G. Fages", "T. Lapègue" ],
      "venue" : "In CP,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2013
    }, {
      "title" : "Computers and Intractability: A Guide to the Theory of NP-Completeness",
      "author" : [ "Michael R. Garey", "David S. Johnson" ],
      "venue" : null,
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 1979
    }, {
      "title" : "Kernels for Global Constraints",
      "author" : [ "S. Gaspers", "S. Szeider" ],
      "venue" : "In IJCAI,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2011
    }, {
      "title" : "Mistral, a Constraint Satisfaction Library",
      "author" : [ "E. Hebrard" ],
      "venue" : "In The Third International CSP Solver Competition,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2008
    }, {
      "title" : "An n5/2 Algorithm for Maximum Matchings in Bipartite Graphs",
      "author" : [ "J.E. Hopcroft", "R.M. Karp" ],
      "venue" : "SIAM J. Comput.,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 1973
    }, {
      "title" : "Vertex packings: structural properties and algorithms",
      "author" : [ "George L Nemhauser", "Leslie E Trotter Jr." ],
      "venue" : "Mathematical Programming,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 1975
    }, {
      "title" : "A Filtering Algorithm for Constraints of Difference in CSPs",
      "author" : [ "J.-C. Régin" ],
      "venue" : "In AAAI,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 1994
    }, {
      "title" : "Backdoor trees",
      "author" : [ "Marko Samer", "Stefan Szeider" ],
      "venue" : "In AAAI,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2008
    }, {
      "title" : "On Global Warming: Flow-Based Soft Global Constraints",
      "author" : [ "W.-J. van Hoeve", "G. Pesant", "L.-M. Rousseau" ],
      "venue" : "Journal of Heuristics,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2006
    } ],
    "referenceMentions" : [ {
      "referenceID" : 1,
      "context" : "For instance, efficient algorithms from matching and flow theory [2,14] were adapted as propagation algorithms [16,18] and subsequently lead to a number of successful applications.",
      "startOffset" : 65,
      "endOffset" : 71
    }, {
      "referenceID" : 13,
      "context" : "For instance, efficient algorithms from matching and flow theory [2,14] were adapted as propagation algorithms [16,18] and subsequently lead to a number of successful applications.",
      "startOffset" : 65,
      "endOffset" : 71
    }, {
      "referenceID" : 15,
      "context" : "For instance, efficient algorithms from matching and flow theory [2,14] were adapted as propagation algorithms [16,18] and subsequently lead to a number of successful applications.",
      "startOffset" : 111,
      "endOffset" : 118
    }, {
      "referenceID" : 17,
      "context" : "For instance, efficient algorithms from matching and flow theory [2,14] were adapted as propagation algorithms [16,18] and subsequently lead to a number of successful applications.",
      "startOffset" : 111,
      "endOffset" : 118
    }, {
      "referenceID" : 4,
      "context" : "For instance, finding a support for the NValue constraint is NP-hard, yet enforcing some incomplete propagation rules for this constraint has been shown to be an effective approach [5,10], compared to decomposing it, or enforcing bound consistency [3].",
      "startOffset" : 181,
      "endOffset" : 187
    }, {
      "referenceID" : 9,
      "context" : "For instance, finding a support for the NValue constraint is NP-hard, yet enforcing some incomplete propagation rules for this constraint has been shown to be an effective approach [5,10], compared to decomposing it, or enforcing bound consistency [3].",
      "startOffset" : 181,
      "endOffset" : 187
    }, {
      "referenceID" : 2,
      "context" : "For instance, finding a support for the NValue constraint is NP-hard, yet enforcing some incomplete propagation rules for this constraint has been shown to be an effective approach [5,10], compared to decomposing it, or enforcing bound consistency [3].",
      "startOffset" : 248,
      "endOffset" : 251
    }, {
      "referenceID" : 3,
      "context" : "A study of the parameterized complexity of global constraints [4], and of their pertinent parameters, showed that they were a fertile ground for this technique.",
      "startOffset" : 62,
      "endOffset" : 65
    }, {
      "referenceID" : 11,
      "context" : "For instance, a kernelization of the NValue constraint was introduced in [12], yielding an FPT consistency algorithm.",
      "startOffset" : 73,
      "endOffset" : 77
    }, {
      "referenceID" : 6,
      "context" : "2738 + k|V |) algorithm by Chen, Kanj and Xia [7]).",
      "startOffset" : 46,
      "endOffset" : 49
    }, {
      "referenceID" : 10,
      "context" : "Its decision version is NP-complete [11].",
      "startOffset" : 36,
      "endOffset" : 40
    }, {
      "referenceID" : 5,
      "context" : "Applying this rule until a fixed point yields an elementary kernel that contains at most k edges and 2k non isolated vertices [6].",
      "startOffset" : 126,
      "endOffset" : 129
    }, {
      "referenceID" : 0,
      "context" : "A simple polynomial-time algorithm that finds a crown greedily from a maximal matching already leaves an instance G[H ] with at most 3k vertices [1].",
      "startOffset" : 145,
      "endOffset" : 148
    }, {
      "referenceID" : 14,
      "context" : "A stronger method using linear programming yields a (presumably optimal) kernel of size 2k [15].",
      "startOffset" : 91,
      "endOffset" : 95
    }, {
      "referenceID" : 16,
      "context" : "Note that loss-free kernels introduced in the context of backdoors [17] are different since they only preserve minimal solutions; for subset minimization problems those kernels are called full kernels [9].",
      "startOffset" : 67,
      "endOffset" : 71
    }, {
      "referenceID" : 8,
      "context" : "Note that loss-free kernels introduced in the context of backdoors [17] are different since they only preserve minimal solutions; for subset minimization problems those kernels are called full kernels [9].",
      "startOffset" : 201,
      "endOffset" : 204
    }, {
      "referenceID" : 7,
      "context" : "A kernel for vertex cover that preserves all minimum-size solutions has been introduced in [8].",
      "startOffset" : 91,
      "endOffset" : 94
    }, {
      "referenceID" : 13,
      "context" : "Compute a maximum matching M of BG (which can be done in polynomial time via the Hopcroft-Karp algorithm [14]).",
      "startOffset" : 105,
      "endOffset" : 109
    }, {
      "referenceID" : 12,
      "context" : "We compared 5 methods, all implemented in Mistral [13] and ran on CORE I7 processors with a time limit of 5 minutes: Decomposition is a simple decomposition in 2-clauses and a cardinality constraint.",
      "startOffset" : 50,
      "endOffset" : 54
    } ],
    "year" : 2017,
    "abstractText" : "The technique of kernelization consists in extracting, from an instance of a problem, an essentially equivalent instance whose size is bounded in a parameter k. Besides being the basis for efficient parameterized algorithms, this method also provides a wealth of information to reason about in the context of constraint programming. We study the use of kernelization for designing propagators through the example of the Vertex Cover constraint. Since the classic kernelization rules often correspond to dominance rather than consistency, we introduce the notion of “loss-less” kernel. While our preliminary experimental results show the potential of the approach, they also show some of its limits. In particular, this method is more effective for vertex covers of large and sparse graphs, as they tend to have, relatively, smaller kernels.",
    "creator" : "LaTeX with hyperref package"
  }
}