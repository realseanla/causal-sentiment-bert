{
  "name" : "1702.01601.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Exploring the bidimensional space: a dynamic logic point of view",
    "authors" : [ "Philippe Balbiani", "David Fernández-Duque", "Emiliano Lorini" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n70 2.\n01 60\n1v 1\n[ cs\n.A I]\n6 F"
    }, {
      "heading" : "1 Introduction",
      "text" : "Most of existing logics for multi-agent systems (MAS) including multi-agent epistemic logic [7], multi-agent variants of propositional dynamic logic [15] and logics of action and strategic reasoning such as ATL [1], Coalition Logic CL [12] and STIT [5] are “ungrounded” in the sense that their formal semantics are based on abstract primitive notions such as the concept of Kripke model or the concept of possible world (or state). As a result, there is no direct connection between these abstract concepts and the concrete environment in which the agents’ interact. This kind of grounding problem of logics for MAS becomes particularly relevant for robotic applications. Since robots are situated in spatial environments, in order to make logics for MAS useful for robotics, their semantics have to be grounded on space. Specifically, a formal semantics is required that provides an explicit representation of the space in which the robots’ actions and perceptions are situated. Some initial steps into the direction of grounding formal semantics of logics for MAS on space have done in the recent years. Among them, we should mention logics of multi-agent knowledge in both one-dimensional space and two-dimensional space [9, 3], spatio-temporal logics such as constraint LTL applied to model 2D grid environments [2], multi-\nrobot task logic based on monadic second-order logic [14] and logics of robot localization [4]. The present paper shares with these approaches the idea that in order to make existing logics of MAS useful for MAS applications such as multi-agent planning and robotics, their semantics should provide an explicit representation of the agents’ environment.\nThe main motivation of the present work is to provide a logical framework whose language and semantics are, at the same time, simple and sufficiently general to describe (i) the properties of the spatial environment in which several agents can move, and (ii) the consequences of the agents’ motion on such a spatial environment. To meet this objective, we have decided to exploit the language of propositional dynamic logic PDL as a general formalism for representing actions of agents and their effects, and to interpret this language on a simple formal semantics of the two-dimensional (2D) space. The reason why we decided to start from the 2D space is that its representation already presents some interesting conceptual aspects as well as some difficulties with respect to the computational properties of the resulting logic. We believe that, before studying action in the 3D space and, more generally, action in n-dimensional spaces (with n > 2), a comprehensive logical theory of action in the 2D space is required.\nMore concretely, this paper presents a family of logics for reasoning about agents’ positions and motion in the plane. The most general logic, called Dynamic Logic of Space DL-S∗, is presented in Section 2. DL-S∗ includes (i) atomic formulas for representing the truth of a given fact (atomic facts) or the presence of a given agent at a certain position of the plane (positional atoms), (ii) atomic programs corresponding to the four basic orientations in the plane (up, down, left, right) as well as the four program constructs of PDL (sequential composition, nondeterministic composition, iteration and test). The logic is proved to be non-computably enumerable (non-c.e.) and its satisfiability problem undecidable (Section 3), while its model-checking problem is proved to be decidable in deterministic polynomial time (Section 4). Given the negative properties of DL-S∗, we decided to study some interesting decidable and axiomatizable fragments of it. This includes the iteration-free fragment of DL-S∗ (Section 5) as well as a fragment that only allows iteration of the same atomic program (e.g., the action of moving an indefinite number of times to the right) and has no atomic formulas aside from positional atoms (Section 6). As the logic DL-S∗ only provides a static representation of the 2D space, in Section 7 we present a decidable extension of its iteration-free fragment by special programs representing motion of agents in the plane. Conclusion of the paper (Section 8) presents perspectives of future research including integration of an epistemic component in the logic as well as of the concept of coalitional capability in the sense of [12]."
    }, {
      "heading" : "2 Space",
      "text" : "DL-S∗ (Dynamic Logic of Space) is a dynamic logic which consists of: (i) formulas representing the agents’ positions and the truth of facts in the different\npositions of the bidimensional space, and (ii) programs allowing to move from one position to another position of the bidimensional space."
    }, {
      "heading" : "2.1 Syntax",
      "text" : "Assume a countable set of atomic propositions Atm = {p, q, . . .} and a finite set of agents Agt = {1, . . . , n}.\nThe language of DL-S∗, denoted by LDL-S∗(Atm,Agt), is defined by the following grammar in Backus-Naur Form:\nα ::= ⇑ | ⇓ | ⇒ | ⇐ | α;α′ | α ∪ α′ | α∗ |?ϕ ϕ ::= p | hi | ¬ϕ | ϕ ∧ ψ | [α]ϕ\nwhere p ranges over Atm and i ranges over Agt . Other Boolean constructions ⊤, ⊥, ∨, → and ↔ are defined from p, ¬ and ∧ in the standard way. Instances of α are called spatial programs. When there is no risk of confusion we will omit parameters and simply write LDL-S∗ . The modal degree of a formula ϕ ∈ LDL-S∗ (in symbols deg(ϕ)) is defined in the standard way as the nesting depth of modal operators in ϕ. Let ‖ ϕ ‖ denote the size of ϕ. For all (negative or positive) integers x, let [⇑]x be the modality consisting of x consecutive [⇓] when x ≤ 0, otherwise let [⇑]x be the modality consisting of x consecutive [⇑]. Similarly for [⇒]x.\nThe formula hi is read “the agent i is here”, whereas [α]ϕ has to be read “ϕ is true in the position that is reachable from the current position through the program α”.\nWe will also be interested in sublanguages of LDL-S∗ . Given a set P of atomic propositions, a set I of agents and a set A of spatial programs, we denote the restriction of LDL-S∗(P, I) which only allows programs from A by LDL-S∗(P, I, A)."
    }, {
      "heading" : "2.2 Semantics",
      "text" : "The main notion in semantics is given by the following concept of spatial model.\nDefinition 1 (Spatial model (SM)). A spatial model is a tuple M = (P ,V) where:\n• P : Agt −→ Z× Z and\n• V : Z× Z −→ 2Atm .\nThe set of all spatial models is denoted by M.\nFor every (x, y) ∈ Z × Z, P(i) = (x, y) means that the agent i is in the position (x, y), whereas p ∈ V(x, y) means that p is true at the position (x, y). For every x ∈ Z, succ(x) denotes the direct successor of x (i.e., x + 1), while prec(x) denotes the direct predecessor of x (i.e., x− 1).\nFormulas are evaluated with respect to a spatial model M and a spatial position (x, y). Below, if R,S are binary relations, R∗ denotes the transitive, reflexive closure of R and R ◦ S the composition of R and S.\nDefinition 2 (Rα and truth conditions). Let M = (P ,V) be a spatial model. For all spatial programs α and for all formulas ϕ, the binary relation Rα on Z × Z and the truth conditions of ϕ in M are defined by parallel induction as follows:\nR⇑ = {((x, y), (x′, y′)) : x′ = x and y′ = succ(y)} R⇓ = {((x, y), (x′, y′)) : x′ = x and y′ = prec(y)} R⇒ = {((x, y), (x′, y′)) : x′ = succ(x) and y′ = y} R⇐ = {((x, y), (x\n′, y′)) : x′ = prec(x) and y′ = y} Rα1;α2 = Rα1 ◦Rα2 Rα1∪α2 = Rα1 ∪Rα2 Rα∗ = (Rα) ∗ R?ϕ = {((x, y), (x, y)) : M, (x, y) |= ϕ}\nM, (x, y) |= p ⇐⇒ p ∈ V(x, y)\nM, (x, y) |= hi ⇐⇒ P(i) = (x, y)\nM, (x, y) |= ¬ϕ ⇐⇒ M, (x, y) 6|= ϕ\nM, (x, y) |= ϕ ∧ ψ ⇐⇒ M, (x, y) |= ϕ and M, (x, y) |= ψ\nM, (x, y) |= [α]ϕ ⇐⇒ ∀(x′, y′) ∈ Z× Z : if (x, y)Rα(x ′, y′)\nthen M, (x′, y′) |= ϕ\nWhen (x, y)Rα(x ′, y′), we will say that position (x′, y′) is accessible from position (x, y) by program α.1\nRemark that formulas like hi behave like nominals in hybrid logics [?], i.e. their truth sets are singletons.\nWe say that ϕ ∈ LDL-S∗ is valid, denoted by |= ϕ, if and only if, for every spatial model M and position (x, y), we have M, (x, y) |= ϕ. We say that formula ϕ ∈ LDL-S∗ is satisfiable if and only if ¬ϕ is not valid."
    }, {
      "heading" : "2.3 Bisimulation",
      "text" : "The essential tool we will use to establish our decidability results is the notion of bounded bisimulation.\nDefinition 3. Fix a set P of atomic propositions, a set I of agents and a set A of spatial programs. Given spatial models M1 = (P1,V1) and M2 = (P2,V2), n < ω, we define a binary relation (M1, ·) -n (M2, ·) ⊆ Z2 × Z2 by induction on n as follows.\nWe set (M1, ~x) -n (M2, ~y) if\n1. for every i ∈ I, ~x = P1(i) if and only if ~y = P2(i),\n2. for every p ∈ P , ~x ∈ V1(p) if and only if ~y ∈ V2(p), and\n1 To be more precise, we should define one relation RMα per spatial model M . However, we omit the superscript M since it is clear from the context.\n3. if n > 0, then for every α ∈ A,\nForthα Whenever xRα~x ′, there is ~y′ such that ~yRα~y ′ and (M1, ~x ′) -n−1\n(M2, ~y ′), and\nBackα Whenever ~yRα~y ′, there is ~x′ such that ~xRα~y ′ and (M1, ~x ′) -n−1\n(M2, ~y ′).\nWe may just write ~x -n ~y instead of (M,~x) -n (M,~y). The following is then standard:\nLemma 1. Fix a set P of atomic propositions, a set I of agents and a set of programs A. If M1 = (P1,V1) and M2 = (P2,V2) are spatial models and ϕ ∈ LDL-S∗(P, I, A) has modal degree at most n, then whenever (M1, ~x) -n (M2, ~y), it follows that M1, ~x |= ϕ if and only if M2, ~y |= ϕ."
    }, {
      "heading" : "3 Undecidablity",
      "text" : "This section presents results about undecidability for the satisfiability problem of LDL-S∗(Atm,Agt)-formulas. Products of linear logics are logics with two (or more) modalities, interpreted over structures very similar to spatial models. Their formulas are equivalent to LDL-S∗(Atm,Agt)-formulas over the class of all spatial models and are often undecidable [8, 10, 13]. This suggests that the satisfiability problem of formulas in LDL-S∗(Atm,Agt), as well as some proper fragments, is undecidable as well. The idea is to allow actions only along the horizontal and vertical axes, which following [11] we call the ‘compass directions’. To be precise, we define the language of compass logic of space by LCL-S∗(Atm,Agt) = LDL-S∗(Atm,Agt , C), where\nC = {⇑,⇓,⇒,⇐,⇑∗,⇓∗,⇒∗,⇐∗}.\nAs before, we may omit the parameters Atm,Agt when this does not lead to confusion. By LCL-F∗ (the language of compass logic of facts) we denote the special case where Agt = ∅, and similarly LCL-P∗ (the language of compass logic of positions) denotes the case where Atm = ∅.\nWe start with the following undecidability result for the satisfiability problem of the latter.\nTheorem 1. The set of valid formulas of LCL-F∗ is not computably enumerable.\nProof. This follows from Theorem 5.38 in [8], which states (in their notation) that PTL ◦ × PTL ◦ is not c.e. But this is a notational variant of a fragment of CL-F∗, where ◦1 ≈ [⇒], 1 ≈ [⇒ ∗], ◦2 ≈ [⇑], and 2 ≈ [⇑ ∗].\nWe remark that we only need two of the four compass directions for this proof, provided they are perpendicular. As a corollary, we obtain undecidability of the larger logic.\nCorollary 1. The set of valid formulas of LDL-S∗ is not computably enumerable.\nIn order to study model-checking, we need a finite representation of spatial models. To this aim, we introduce the following definition of bounded spatial model of size n. For (x, y) ∈ Z2, write |(x, y)| ≤ n iff |x| ≤ n and |y| ≤ n.\nDefinition 4 (Bounded spatial model (BSM)). Let n be a nonnegative integer. A spatial model M = (P ,V) is said to be n-bounded iff for all i ∈ Agt, |P(i)| ≤ n and for all (x, y) ∈ Z2 × Z2, if |(x, y)| 6≤ n then V(x, y) = ∅.\nObserve that while the interpretations of variables are bounded, the frame itself is not; we still interpret formulas over Z× Z.\nAs for the class of all models, the restriction to bounded models gives rise to an undecidable set of valid formulas of LDL-S∗ -formulas:\nTheorem 2. The set of formulas of LCL-F∗ valid over the class of bounded spatial models is not computably enumerable.\nSketch of Proof. This essentially follows from Corollary 7.18 in [8], which in their notation states that Log{〈N,≥〉 × N,≥〉} is not c.e. As above, this is a notational variant of a fragment of CL-F∗, where 1 ≈ [⇒∗] and 2 ≈ [⇑\n∗], although interpreted over frames of the form {0, . . . n} × {0, . . . ,m}. That it is not c.e. is obtained by reducing the halting problem for Turing machines to Log{〈N,≥〉 × N,≥〉}, representing finite computations as finite models. Minor adjustments of this construction can be used, instead, to represent finite computations as bounded models.\nAs before, the undecidability of the set of formulas of LDL-S∗ valid over the class of bounded spatial models follows. There are different ways to get out of the undecidability of the satisfiability problem of LDL-S∗ -formulas as highlighted by Corollary 1. One possibility is to consider the star-free fragment of LDL-S∗ . Another possibility is to study fragments of LDL-S∗ that omit atomic propositions and allow only nominals. These two possibilities are explored, respectively, in Sections 5 and 6."
    }, {
      "heading" : "4 Model-checking",
      "text" : "The model-checking problem for LCL-S∗(Atm,Agt) is the following: let ϕ ∈ LCL-S∗(Atm,Agt), let n be a nonnegative integer, let M be an n-bounded spatial model and let (x, y) ∈ Z× Z, is it the case that M, (x, y) |= ϕ?\nIn this section we will show that the model-checking problem for LCL-S∗(Atm,Agt) is in PTime. We use techniques similar to those used for proving that, e.g., model-checking for ordinary modal logic logic or for CTL is also in PTime [6], but there are some subtleties in dealing with the state-space being infinite (even if the valuations are bounded).\nLemma 2. Let n, d be nonnegative integers. Suppose that x, x′, y, y′ ∈ Z are such that one of the following conditions holds:\n• x > n+ d+ 1, x′ = x− 1 and y′ = y,\n• x < −n− d− 1, x′ = x+ 1 and y′ = y,\n• y > n+ d+ 1, x′ = x and y′ = y − 1,\n• y < −n− d+ 1, x′ = x and y′ = y + 1.\nThen, for any n-bounded model M , we have that\n(M, (x, y)) -d (M, (x ′, y′)).\nProof. Left to the reader.\nHence,\nLemma 3. Let ϕ be a LCL-S∗(Atm,Agt)-formula, n be a nonnegative integer and M be an n-bounded model. For all integers x, y, we have:\n• if x > n+ deg(ϕ) + 1 then M, (x, y) |= ϕ iff M, (x− 1, y) |= ϕ,\n• if x < −n− deg(ϕ)− 1 then M, (x, y) |= ϕ iff M, (x+ 1, y) |= ϕ,\n• if y > n+ deg(ϕ) + 1 then M, (x, y) |= ϕ iff M, (x, y − 1) |= ϕ,\n• if y < −n− deg(ϕ)− 1 then M, (x, y) |= ϕ iff M, (x, y + 1) |= ϕ.\nProof. By Lemmas 1 and 2.\nNow, for all LCL-S∗(Atm,Agt)-formulas ϕ and for all integers z, let zϕ be the integer defined by cases as follows:\nCase |z| ≤ n+ deg(ϕ) + 1: In that case, let zϕ = z.\nCase z < −n− deg(ϕ)− 1: In that case, let zϕ = −n− deg(ψ)− 1.\nCase z > n+ deg(ϕ) + 1: In that case, let zϕ = n+ deg(ψ) + 1.\nThe reader may easily verify that for all LCL-S∗(Atm,Agt)-formulas ϕ and for all integers z, |zϕ| ≤ n+deg(ϕ) + 1. Now, given a LCL-S∗(Atm,Agt)-formula ϕ, let (ϕ1, . . . , ϕN ) be an enumeration of the set of all ϕ’s subformulas. Let us assume that for all a, b ∈ {1, . . . , N}, if ϕa is a strict subformula of ϕb then a < b. For all a ∈ {1, . . . , N} and for all (x, y) ∈ Z2 ×Z2, if |(x, y)| ≤ n+deg(ϕa) + 1 then we will associate a truth value tv(a, x, y) by case as follows:\nCase ϕa = p: In that case, let tv(a, x, y) =“(x, y) ∈ V (p)”.\nCase ϕa = hi: In that case, tv(a, x, y) =“(x, y) = P (i)”.\nCase ϕa = ⊥: In that case, let tv(a, x, y) = ⊥.\nCase ϕa = ¬ψ: Let b ∈ {1, . . . , a} be such that ψ = ϕb. Remind that b < a. In that case, if tv(b, x, y) = ⊥ then let tv(a, x, y) = ⊤ else let tv(a, x, y) = ⊤.\nCase ϕa = ψ ∨ χ: Let b, c ∈ {1, . . . , a} be such that ψ = ϕb and χ = ϕc. Remind that b, c < a. In that case, if tv(b, xψ, yψ) = ⊥ and tv(c, xχ, yχ) = ⊥ let tv(a, x, y) = ⊥ else let tv(a, x, y) = ⊤.\nCase ϕa = [⇒]ψ: Let b ∈ {1, . . . , a} be such that ψ = ϕb. Remind that b < a. In that case, let tv(a, x, y) = tv(b, (x+ 1)ψ, yψ).\nCases ϕa = [⇑]ψ, ϕa = [⇐]ψ and ϕa = [⇓]ψ: Similar to the previous case.\nCase ϕa = [⇒∗]ψ: Let b ∈ {1, . . . , a} be such that ψ = ϕb. Remind that b < a. In that case, if tv(b, zψ, yψ) = ⊥ for some integer z ≥ x then let tv(a, x, y) = ⊥ else let tv(a, x, y) = ⊤.\nCases ϕa = [⇑ ∗]ψ, ϕa = [⇐∗]ψ and ϕa = [⇓ ∗]ψ: Similar to the previous case.\nObviously, within a polynomial time with respect to ‖ ϕ ‖, one can deterministically compute the truth values tv(a, x, y) for a ∈ {1, . . . , N} and for (x, y) ∈ Z2 × Z2 such that |(x, y)| ≤ n+ deg(ϕa) + 1. Consequently,\nTheorem 3. The model-checking problem for LCL-S∗(Atm, Agt) is decidable in deterministic polynomial time."
    }, {
      "heading" : "5 Star-free fragments",
      "text" : "In this section and the next, we identify two decidable fragments. The first is obtained by restricting the language to LDL-S(Atm,Agt), as given by the following grammar:\nα ::= ⇑ | ⇓ | ⇒ | ⇐ | α;α′ | α ∪ α′ |?ϕ ϕ ::= p | hi | ¬ϕ | ϕ ∧ ψ | [α]ϕ\nWe denote the set of valid formulas of LDL-S(Atm,Agt) by DL-S. The second is the fragment L0\nDL-S (Atm,Agt) given by:\nα ::= ⇑ | ⇓ | ⇒ | ⇐ ϕ ::= p | hi | ¬ϕ | ϕ ∧ ψ | [α]ϕ\nThe corresponding set of valid formulas will be denoted DL-S0. Note that LDL-S(Atm,Agt) can be reduced to L0 DL-S (Atm,Agt):\nLemma 4. Every formula ϕ ∈ LDL-S(Atm,Agt) is equivalent to some ϕ0 ∈ L0 DL-S (Atm,Agt).\nProof. It suffices to observe that the following are valid:\n[α;α′]ψ ↔ [α][α′]ψ\n[α ∪ α′]ψ ↔ [α]ψ ∧ [α′]ψ\n[?θ]ψ ↔ (θ → ψ).\nWith these validities, any formula of LDL-S(Atm,Agt) can be recursively reduced to an equivalent formula in the language L0\nDL-S (Atm,Agt).\nOur decidability proof will be based on a small model property, obtained by truncating a larger model. Fix a natural number n. Given a model M = (P ,V), we define M ↾ n = (P ↾ n,V ↾ n).\n• (P ↾ n)(i) =\n{\nP(i) if |P(i)| ≤ n;\n(n+ 1, 0) otherwise.\n• (V ↾ n)(p) = V(p) ∩ ( [−n, n]× [−n, n] ) .\nObserve that M ↾ n is (n + 1)-bounded. As a result, when one restricts the discussion to the set of all programs of L0\nDL-S (Atm,Agt),\nLemma 5. For all ~x ∈ Z2 ×Z2, if |~x| ≤ m ≤ n, then (M,~x) -n−m (M ↾ n, ~x).\nProof. The proof proceeds by a standard induction on m. The atoms and position clauses are trivial since x ≤ n and the values of atomic propositions is not changed. For the inductive case, consider (for example) α = ⇒. Then, if ~x = (x0, x1), ~xR⇒~y if and only if ~y = (x0 + 1, x1). Clearly |~y| ≤ m+ 1, so that by the induction hypothesis, (M,~x) -n−m−1 (M ↾ n, ~y), as needed.\nWith this we obtain our first decidability result.\nTheorem 4. The logics DL-S0,DL-S are decidable. In particular, DL-S0 is in NP.\nProof. Since DL-S can be reduced to DL-S0, it suffices to show that the latter is decidable. Suppose that ϕ is satisfied on some model M ; without loss of generality, we can assume that ϕ is satisfied on the origin. Let n be the modal degree of ϕ. By Lemma 5, (M,~0) -n (M ↾ n,~0), so by Lemma 1, ϕ is also satisfied on (M ↾ n,~0). It follows that ϕ is satisfiable if and only if it is satisfiable on the class of models such that P and V are both (n+1)-bounded, so it remains to enumerate all such models and check whether any of them satisfy ϕ. Note that the size of any (n + 1)-bounded model is o(n2), so the complexity bound for DL-S0 follows.\nObserve that it does not follow from our techniques that DL-S is in NP, since the reduction procedure is not polynomial.\nNow, our aim in this section will be to completely axiomatize DL-S0. In this respect, we need the following axioms and inference rules:\n• All axioms and inference rules saying that [⇑], [⇓], [⇒] and [⇐] are normal modalities,\n• [α]ϕ ↔ 〈α〉ϕ for each α ∈ {⇑,⇓,⇒,⇐},\n• ϕ → [⇑]〈⇓〉ϕ and ϕ → [⇓]〈⇑〉ϕ,\n• ϕ → [⇒]〈⇐〉ϕ and ϕ → [⇐]〈⇒〉ϕ,\n• [α1][α2]ϕ ↔ [α2][α1]ϕ for each α1, α2 ∈ {⇑,⇓,⇒,⇐},\n• hi → [⇑]x[⇒]y¬hi for each nonnegative integers x, y such that x 6= 0 or y 6= 0.\nWe will say that a formula ϕ ∈ L0 DL-S\n(Atm,Agt) is derivable if it belongs to the least set of L0\nDL-S (Atm,Agt)-formulas containing the above axioms and closed\nunder the above inference rules.\nTheorem 5. let ϕ be an L0 DL-S\n(Atm,Agt)-formula. The following conditions are equivalent: (i) ϕ is derivable; (ii) ϕ is valid.\nProof. (i)⇒(ii): It suffices to check that all axioms are valid and that all inference rules preserve valitity. (ii)⇒(i): Suppose ϕ is not derivable. Let d denote the modal degree of ϕ. By Lindenbaum’s Lemma, let Γ be a maximal consistent set of formulas such that ϕ 6∈ Γ. Remark that for all i ∈ Agt, if hi 6∈ Γ then there exists at most one pair (x, y) of (negative or positive) integers such that [⇑]x[⇒]yhi ∈ Γ. Let Agt(Γ) be the set of all i ∈ Agt such that [⇑]x[⇒]yhi ∈ Γ for some pair (x, y) of integers such that |(x, y)| ≤ d. Let M = (P ,V) be the spatial model defined as follows:\n• For all i ∈ Agt, if i ∈ Agt(Γ) then let P(i) be the unique pair (x, y) of integers such that [⇑]x[⇒]yhi ∈ Γ, else let P(i) be (d+ 1, 0),\n• for all pairs (x, y) of integers, if |(x, y)| ≤ d then let V(x, y) = {p ∈ Atm : [⇒]x[⇑]yp ∈ Γ}, else let V(x, y) = ∅.\nThe reader may easily prove by induction on ψ that if ψ is a subformula of ϕ then for all pairs (x, y) such that |(x, y)| ≤ deg(ϕ) − deg(ψ), M, (x, y) |= ψ iff [⇒]x[⇑]yψ ∈ Γ. Since ϕ 6∈ Γ, therefore M, (0, 0) 6|= ϕ. Thus, ϕ is not valid."
    }, {
      "heading" : "6 Compass logic of positions",
      "text" : "Next we consider the fragment LCL-P∗ , defined in Section 3. Since there are no atomic propositions, models are somewhat simpler.\nDefinition 5. A position model is a function P : Agt → Z× Z.\nThat is, a position model is just a spatial model without a valuation for atomic propositions. As we will show, position models do not need to have big ‘gaps’ if we only care about satisfiability of LCL-P∗ -formulas. This will give us a small model property.\nDefinition 6. Let P be a position model. A vertical gap is a set G = [a, b]×Z such that for all i ∈ Agt, P(i) 6∈ G. If (x, y) ∈ G, we say that the depth of (x, y) in G is min(x − a, b − x), and Gm denotes the set of elements of depth at least m; observe that G0 = G, and Gm is also a gap when non-empty. The\nremoval of G is the function ρ given by ρ(x, y) = (x′, y) where x′ = x if x ≤ a, x′ = min(a, x− (b− a)) otherwise.\nA horizontal gap is defined analogously, but is of the form Z × [a, b]. The depth and the removal are defined analogously as well.\nIn this section we use -n for n-bisimilarity with respect to all basic relations of LCL-P∗ .\nLemma 6. Let G = [a, b] × Z be a vertical gap and P be a position model. Then, if (x, y), (x′, y) ∈ Gm, it follows that P , (x, y) -m P , (x′, y).\nThe analogous claim holds for horizontal gaps.\nProof. We proceed by induction on m. The atomic clauses are straightforward since, if (x, y), (x′, y) ∈ G0 = G, then they satisfy no atoms.\nFor the other clauses, assume the claim inductively for m, and suppose that (x, y), (x′, y) ∈ Gm+1. Any ‘vertical’ program (⇑,⇓,⇑\n∗,⇓∗) stays within Gm+1 ⊆ Gm so we may immediately apply the induction hypothesis. For example, if (u, v)R⇑∗(x, y), then u = x and v ≥ y; hence, (x′, y)R⇑∗(x′, v) and by the induction hypothesis, (u, v) = (x, v) -m (x\n′, v). The ‘back’ clauses and the rest of the vertical programs are entirely symmetrical.\nNext consider a ‘horizontal’ program: ⇐,⇒,⇐∗,⇒∗. By symmetry, we will only consider the ‘forth’ clauses of the ‘right’ programs. We have that R⇒ is a function; specifically, R⇒(x, y) = (x + 1, y). Observe that (x + 1, y) ∈ Gm, and similarly (x′ + 1, y) ∈ Gm. But, by the induction hypothesis, (x+ 1, y) -m (x′ + 1, y) = R⇒(x\n′, y), as needed. Now suppose that (x, y)R⇒∗(u, v), so that u ≥ x and v = y. We consider two cases. If also u ≥ x′, then we also have that (x′, y)R⇒∗(u, v), and we may use the same witness. Otherwise, x ≤ u < x′, which means that (u, v) ∈ Gm+1 ⊆ Gm, so by the induction hypothesis (x, v) -m (x ′, y). But also, (x′, y)R⇒∗(x ′, y), and we can use it as our witness. As mentioned, the other clauses are entirely symmetrical and left to the reader. By induction onm, the claim follows. The analogous claim for horizontal gaps is also entirely analogous.\nLemma 7. Let G = [a−m, b +m]× Z be a vertical gap and ρ the removal of Gm. Then, P , ~x -m ρP , ρ(~x).\nProof. We prove, by induction on k ≤ m, that P , ~x -k ρP , ρ(~x). For k = 0 this is clear, since if (x, y) ∈ Gm, no nominal occurs on (x, y) or on ρ(x, y) = (a, y). Otherwise, (x, y) = P(i) if and only if ρ(x, y) = ρP(i).\nNow, assume the claim for k, and let ρ(x, y) = (x′, y). The ‘forth’ clauses for α ∈ {R⇑, R⇓, R∗⇑, R ∗ ⇓} follow by observing that if (x, y)Rα(u, v), then ρ(x, y)Rαρ(u, v); for example, if α = ⇓, then we must have u = x and v = y− 1, and since ρ fixes the y coordinate we have that if ρ(x, y) = (x′, y), then ρ(u, v) = (x′, y − 1), as needed. Similarly, for the ‘back’ clause, if ρ(x, y) = (x′, y) and (x′, y)Rα(u, v), we must have u = x′ and can readily observe that (x, y)Rα(x, v) and ρ(x, v) = (x′, v), so that by the induction hypothesis, P , (x, v) -k ρP , ρ(x ′, v).\nNext we look at α ∈ {⇐,⇒,⇐∗,⇒∗}. First, we check the ‘forth’ clauses. If (x, y)R⇐(u, v), then u = x−1 and v = y. If x 6∈ (a, b], then it readily follows that ρ(x, y)R⇐ρ(u, v), and we may use the induction hypothesis. If instead x ∈ (a, b], then ρ(u, v) = ρ(x, y) = (a, y). However, R⇐(a, y) = (a − 1, y) ∈ Gm−1, so by the induction hypothesis and Lemma 6,\nρP , (a− 1, y) -k P , (a− 1, y) -k P , (x− 1, y),\nas needed. For α = ⇐∗, suppose (x, y)R⇐∗(u, v). Then, y = v, and since ρ is non-decreasing on the first component, we also have ρ(x, y)R⇐∗ρ(u, v). The cases for the ‘right’ programs are similar.\nFinally, we check the ‘back’ clauses for the horizontal programs. Observe that R⇐, R⇒ are functional, so the ‘forth’ and ‘back’ clauses are equivalent. Hence we consider only R⇐∗ , R⇒∗ . If (x\n′, y)R⇐∗(u, y), then consider two cases. If u ≤ a, then ρ(u, y) = (u, y) and u ≤ x′ ≤ x, so we have that (x, y)R⇐∗(u, y) and we may use the induction hypothesis on (u, y). If u > a, then ρ(u+b−a, y) = (u, y), and we may use the induction hypothesis on (u+b−a, y). But note that, in this case, we must have that x = x′ + b− a, so (x, y)R⇐∗(u+ b − a, y).\nFinally, if (x′, y)R⇒∗(u, y), again consider two cases. If u < a, then ρ(u, y) = (u, y) and u ≥ x′ = x, so we have that (x, y)R⇒∗(u, y) and we may use the induction hypothesis on (u, y). If u ≥ a, then ρ(u + b − a, y) = (u, y), and we may use the induction hypothesis on (u + b − a, y). Note that, in this case, x ≤ x′ + b− a ≤ u+ b− a, so (x, y)R⇒∗(u, y), as needed.\nThe case for a horizontal gap is similar.\nTheorem 6. If ϕ ∈ LCL-P∗ is satisfiable, it is satisfiable on a position model where all coordinates of positions are bounded by 2(|ϕ|+ 1)2.\nProof. Assume that ϕ is satisfied on some position model P . Suppose that x1 ≤ . . . ≤ xn are the x-coordinates of all positions of agents such that hi appears in ϕ, together with the evaluation point, (0, 0) (note that n ≤ |ϕ|+ 1). If for some i < n we have that xi+1 − xi > 2(|ϕ| + 1), then G = (xi, xi+1) × Z is a horizontal strip with G|ϕ| having width at least two, so that its removal is not the identity.\nNow, if the xi’s are not bounded by 2(|ϕ|+ 1)2, note that such a gap must exist so we can remove it. After enough iterations, we can bound all xi’s. Then we proceed to bound the vertical components analogously.\nTheorem 7. Satisfiability of LCL-P∗-formulas is decidable in NP.\nProof. We can decide the satisfiability of ϕ by guessing a position model P with all coordinates bounded by 2(|ϕ|+ 1)2 and model-checking whether ϕ holds at (0, 0)."
    }, {
      "heading" : "7 Space and motion",
      "text" : "DL-S studied in the previous sections is a logic for representing static properties of the bidimensional space. Specifically, in DL-S, positions of agents in the space do not change. The aim of this section is to extend LDL-S(Atm,Agt) by programs describing the agents’ motions in the bidimensional space. We assume that agents act in a synchronous way (i.e., they act in parallel). We call the resulting language LDL-SM(Atm,Agt) and the resulting logic DL-SM (Dynamic Logic of Space and Moving)."
    }, {
      "heading" : "7.1 Syntax",
      "text" : "In LDL-SM(Atm,Agt), agent i is associated with her corresponding repertoire of actions Act i = {⇑i,⇓i,⇐i,⇒i, nil i}. ⇑i is agent i’ action of moving up, ⇓i is agent i’ action of moving down, ⇐i is agent i’ action of moving left, ⇒i is agent i’ action of moving right and nil i is agent i’s action of doing nothing.\nThe set of joint of actions is defined to be ∆ = ∏\ni∈Agt Act i. Elements of ∆ are denoted by δ, δ′, . . . For every δ ∈ ∆, δi denotes the element in δ corresponding to agent i.\nSince the logic DL-S∗ is undecidable, we start from its decidable star-free fragment as the basis of our dynamic extension by programs describing the agents’ motion.\nThe language, denoted by LDL-SM(Atm,Agt), is defined by the following grammar in Backus-Naur Form:\nα ::= ⇑ | ⇓ | ⇒ | ⇐ | α;α′ | α ∪ α′ |?ϕ β ::= δ | β;β′ | β ∪ β′ |?ϕ ϕ ::= p | hi | ¬ϕ | ϕ ∧ ψ | [α]ϕ | [β]ϕ\nwhere p ranges over Atm and i ranges over Agt . Instances of β are called motion programs."
    }, {
      "heading" : "7.2 Semantics",
      "text" : "The semantics is a model update semantics as in the style of dynamic epistemic logic (DEL) [16].\nDefinition 7 (R (x,y) β and truth conditions). Let M ∈ M be a spatial program. For all motion programs β, for all formula ϕ and for all positions (x, y), the binary relation R (x,y) β on M×M and the truth conditions of ϕ in M are defined by parallel induction as follows. (We only give the truth condition for [β]ϕ as the truth conditions for the boolean constructs and for [α]ϕ are as in DL-S∗):\nR (x,y) δ = {(M,M ′) : V ′ = V and ∀i ∈ Agt ,P ′(i) = Pδi(i)} R (x,y) β1;β2 = R (x,y) β1 ◦R (x,y) β2 R (x,y) β1∪β2 = R (x,y) β1 ∪R (x,y) β2 R (x,y) ?ϕ = {(M,M) : M, (x, y) |= ϕ}\nwhere:\nPδi(i) = (x, succ(y)) if δi = ⇑i and P(i) = (x, y) Pδi(i) = (x, prec(y)) if δi = ⇓i and P(i) = (x, y) Pδi(i) = (succ(x), y) if δi = ⇒i and P(i) = (x, y) Pδi(i) = (prec(x), y) if δi = ⇐i and P(i) = (x, y) Pδi(i) = (x, y) if δi = nil i and P(i) = (x, y)\nM, (x, y) |= [β]ϕ ⇐⇒ ∀(M,M ′) ∈ M×M : if MRβM ′\nthen M ′, (x, y) |= ϕ\nDefinitions of validity and satisfiability for DL-SM generalize those for DL-S∗\nin a straighforward manner."
    }, {
      "heading" : "7.3 Decidability and axiomatization",
      "text" : "The aim of this section is to show how the satisfiability problem of DL-SM can be reduced to the satisfiability problem of DL-S. Given the decidability result and the complete axiomatization for the latter of Section 5, this reduction will provide a decidability result as well as an axiomatization for the former.\nProposition 1. The following LDL-SM(Atm,Agt)-formulas are valid:\n[α;α′]ϕ ↔ [α][α′]ϕ (1)\n[α ∪ α′]ϕ ↔ ([α]ϕ ∧ [α′]ϕ) (2)\n[β;β′]ϕ ↔ [β][β′]ϕ (3)\n[β ∪ β′]ϕ ↔ ([β]ϕ ∧ [β′]ϕ) (4)\n[?ϕ]ψ ↔ (ϕ → ψ) (5)\n[δ]p ↔ p (6)\n[δ]hi ↔ [Fi(δ)]hi (7)\n[δ]¬ϕ ↔ ¬[δ]ϕ (8)\n[δ](ϕ ∧ ψ) ↔ ([δ]ϕ ∧ [δ]ψ) (9)\n[δ][α]ϕ ↔ [α][δ]ϕ (10)\nwith α ∈ {⇑,⇓,⇒,⇐} and where the function Fi is defined as follows:\nFi(δ) = ⇑ if δi = ⇓i Fi(δ) = ⇓ if δi = ⇑i Fi(δ) = ⇒ if δi = ⇐i\nFi(δ) = ⇐ if δi = ⇒i\nFi(δ) =?⊤ if δi = nil i\nAs the following rule of replacement of equivalents preserves validity:\nψ1 ↔ ψ2 ϕ ↔ ϕ[ψ1/ψ2]\n(11)\nthe equivalences of Proposition 1 together with this allow to find for every LDL-SM(Atm,Agt)-formula an equivalent formula of LDL-S(Atm,Agt) studied in Section 5. Call red the mapping which iteratively applies the equivalences of Proposition 1 from the left to the right, starting from one of the innermost modal operators. red pushes the dynamic operators [β] inside the formula, and finally eliminates them when facing an atomic formula The mapping red is inductively defined by:\n1.red(p) = p\n2.red(hi) = hi 3.red(¬ϕ) = ¬red(ϕ)\n4.red(ϕ ∧ ψ) = red(ϕ) ∧ red(ψ)\n5.red([α]ϕ) = [α]red(ϕ) with α ∈ {⇑,⇓,⇒,⇐}\n6.red([α;α′]ϕ) = [α][α′]red(ϕ)\n7.red([α ∪ α′]ϕ) = ([α]red(ϕ) ∧ [α′]red(ϕ))\n8.red([?ϕ]ψ) = red(¬(ϕ ∧ ¬ψ))\n9.red([δ]p) = p\n10.red([δ]hi) = [Fi(δ)]hi 11.red([δ]¬ϕ) = red(¬[δ]ϕ)\n12.red([δ](ϕ ∧ ψ)) = red([δ]ϕ ∧ [δ]ψ)\n13.red([δ][α]ϕ) = red([α][δ]ϕ) with α ∈ {⇑,⇓,⇒,⇐}\n14.red([β;β′]ϕ) = [β][β′]red(ϕ)\n15.red([β ∪ β′]ϕ) = ([β]red(ϕ) ∧ [β′]red(ϕ))\nWe can state the following proposition.\nProposition 2. Let ϕ ∈ LDL-SM(Atm,Agt). Then, ϕ ↔ red(ϕ) is valid.\nDecidability of the satisfiability problem of DL-SM follows straightforwardly from the decidability of the star-free fragment LDL-S(Atm,Agt) of DL-S\n∗ (Theorem 4). Indeed, red provides an effective procedure for reducing a formula ϕ in LDL-SM(Atm,Agt) into an equivalent formula red(ϕ) in LDL-S(Atm,Agt).\nTheorem 8. The logic DL-SM is decidable.\nThanks to the completeness result for the star-free fragment of DL-SM and the reduction axioms of Proposition 1, we can state the following theorem.\nTheorem 9. The logic DL-SM is completely axiomatized by the axioms and rules of inference of the star-free fragment of DL-SM given in Section 5, the valid formulas of Proposition 1 and the rule of replacement of equivalents."
    }, {
      "heading" : "8 Perspectives",
      "text" : "Beforewe discuss two perspectives for the extension of the logic DL-S∗ and DL-SM by concepts of perceptual knowledge and coalitional capability.\nPerceptual knowledge DL-S∗ and DL-SM support reasoning about properties of the 2D space as well as about positions and motion of agents in the 2D space. However, an agent in the space does not only move but also sees where other agents are, how the space around her is, what other agents do, etc. More generally, agents in the space have perceptual knowledge (i.e., knowledge based on what they see). We want to propose here a simple extension of DL-S∗ and DL-SM by modal operators of perceptual knowledge. Specifically, we consider epistemic-like operators of type Ski describing what an agent could see from her current position, if she had a range of vision of size k ∈ N. An agent’s range of vision of size k corresponds to the square centered at the agent’s position with side length equal to 2× k. We call the latter agent i’s neighborhood of size k.\nIn order to provide an interpretation of the operator Ski , the following concept of indistinguishibility is required. Let i ∈ Agt and let M = (P ,V) and M ′ = (P ′,V ′) be two spatial models. We say that M and M ′ are indistinguishable for agent i given her current position and her range of vision of size k, denoted by M ∼ki M ′, if and only if:\nV ′(x, y) = V(x, y) P ′(j) = P(j)\nfor all (x, y) ∈ Z × Z and for all j ∈ Agt such that (x, y) ∈ D(i, k) and P(j) ∈ D(i, k) with\nD(i, k) ={(x′, y′) : Px(j)− k ≤ x ′ ≤ Px(j) + k and\nPy(j)− k ≤ y ′ ≤ Py(j) + k}\nwhere Px(j) and Py(j) are, respectively, the x-coordinate and the y-coordinate in P(j).\nThis notion of indistinguishibility is essential to provide a truth condition of the formula Ski ϕ that has to be read “if agent i had a range of vision of size k, then i could see that ϕ is true from her current position”. Let M be a spatial model and let (x, y) ∈ Z× Z. Then:\nM, (x, y) |= Ski ϕ ⇐⇒ ∀M ′ ∈ M : if M ∼ki M ′\nthen M ′,P(i) |= ϕ\nIt is easy to check that ∼ki is an equivalence relation. Thus, the operator S k i satisfies all S5 principles.Ski satisfies additional principles that are proper to its spatial interpretation. For instance, let\nPrg(k) ={⇐h⇑h : 0 ≤ h ≤ k} ∪ {⇒h⇑h : 0 ≤ h ≤ k}∪\n{⇐h⇓h : 0 ≤ h ≤ k} ∪ {⇒h⇓h : 0 ≤ h ≤ k}\nbe the set of spatial programs that allow to reach all and only those points in an agent’s neighborhood of size k. Then, under the previous interpretation of the operator Ski , the following formulas become valid for every α ∈ Prg(k):\nhi → ([α]p ↔ S k i [α]p) (12) hi → ([α]hj ↔ S k i [α]hj) (13)\nThis means that if an agent i has a range of vision of size k, then she can perceive all facts that are true and all agents that are positioned in her neighborhood of size k. The following formula is an example of instance of the previous validity:\nhi → ([⇑]hj ↔ S 1 i [⇑]hj) (14)\nThe latter means that if agent i has a range of vision of size 1 then, agent j is above her iff agent i perceives this.\nWe postpone to future work a study of the complexities of model-checking and of decidability for the extensions by epistemic operators Ski of the different logics presented in the paper.\nCoalitional capability DL-SM provides an interesting basis for the development of a logic of coalitional capabilities in the two-dimensional space. We take the concept of ‘coalitional capability’ in the sense of Coalition Logic CL [12]. Specifically, we say that coalition C has the capability of ensuring ϕ, denoted by 〈[C]〉ϕ, if and only if “there exists a joint action δC of coalition C such that, by performing it, outcome ϕ will be ensured, no matter what the agents outside C decide to do”. The extension of DL-SM by coalitional capability operators 〈[C]〉 is rather simple, as the agents’ action repertoires only includes the four basic movements in the plane (⇑i,⇓i,⇐i and ⇒i) and the action of doing nothing (nil i).\nFollowing Section 7, for every coalition C ⊆ Agt we define its set of joint of actions ∆C = ∏ i∈C Act i and denote elements of ∆C by δC , δ ′ C , . . . Then, the truth condition of the operator 〈[C]〉 goes as follows: M, (x, y) |= 〈[C]〉ϕ if and only if ∃δC ∈ ∆C such that\n∀δ′Agt\\C ∈ ∆Agt\\C : M, (x, y) |= [δC , δ ′ Agt\\C ]ϕ.\nSince δC and δ ′ Agt\\C are finite, 〈[C]〉ϕ is expressible in DL-SM but at the price of an exponential blowup in the size of the formula ϕ. It is easy to check that the operator 〈[C]〉 satisfies the following basic princi-\nples of the coalitional capability operator by [12]:\n¬〈[C]〉⊥ (15)\n〈[C]〉⊤ (16)\n¬〈[∅]〉¬ϕ → 〈[Agt ]〉ϕ (17)\n〈[C]〉(ϕ ∧ ψ) → 〈[C]〉ϕ (18)\n(〈[C1]〉ϕ ∧ 〈[C2]〉ψ) → 〈[C1 ∪ C2]〉(ϕ ∧ ψ)\nif C1 ∩ C2 = ∅ (19)\nϕ ↔ ψ\n〈[C]〉ϕ ↔ 〈[C]〉ψ (20)\n〈[C]〉 satisfies additional principles that are proper to its spatial interpretation. For instance, it is easy to check that, under the previous interpretation, the following two formulas become valid:\n¬〈[C]〉hi if i 6∈ C (21)\n([⇑]hi ∨ [⇒]hi ∨ [⇓]hi ∨ [⇐]hi) → 〈[{i}]〉hi (22)\nThe two validities captures the basic idea that an agent has exclusive control of her position in the sense that: (i) if coalition C does not include agent i then C cannot force i to be “here”, and (ii) agent i has the capability to move “here” if she is “around”.\nWe postpone to future work a more systematic analysis of the basic principles of the operator 〈[C]〉 as well as a study of a strategic capability operator in the sense of ATL [1] based on the semantics of the logic DL-SM."
    } ],
    "references" : [ {
      "title" : "Alternating-time temporal logic",
      "author" : [ "R. Alur", "T.A. Henzinger", "O. Kupferman" ],
      "venue" : "Journal of the ACM, 49(5):672–713",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "Automatic verification of multi-agent systems in parameterised grid-environments",
      "author" : [ "B. Aminof", "A. Murano", "S. Rubin", "F. Zuleger" ],
      "venue" : "Proceedings of the International Conference on Autonomous Agents & Multiagent Systems ",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Agents that look at one another. Logic Journal of the IGPL, :Combined Special Issue: Best papers of FAMAS",
      "author" : [ "P. Balbiani", "O. Gasquet", "F. Schwarzentruber" ],
      "venue" : "juin",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2007
    }, {
      "title" : "A logical theory of localization",
      "author" : [ "Vaishak Belle", "Hector J. Levesque" ],
      "venue" : "Studia Logica,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2016
    }, {
      "title" : "Facing the future: agents and choices in our indeterminist world",
      "author" : [ "N. Belnap", "M. Perloff", "M. Xu" ],
      "venue" : "Oxford University Press, New York",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "Automatic verification of finite-state concurrent systems using temporal logic specifications",
      "author" : [ "E. Clarke", "E. Emerson", "A. Sistla" ],
      "venue" : "ACM Transactions on Programming Languages and Systems, 8:244",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 1986
    }, {
      "title" : "Reasoning about knowledge",
      "author" : [ "R. Fagin", "J.Y. Halpern", "Y. Moses", "M. Vardi" ],
      "venue" : "MIT Press, Cambridge",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 1995
    }, {
      "title" : "Many- Dimensional Modal Logics: Theory and Applications",
      "author" : [ "D. Gabbay", "A. Kurucz", "F. Wolter", "M. Zakharyaschev" ],
      "venue" : "Elsevier",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "Big brother logic: logical modeling and reasoning about agents equipped with surveillance cameras in the plane",
      "author" : [ "O. Gasquet", "V. Goranko", "F. Schwarzentruber" ],
      "venue" : "Proceedings of the International conference on Autonomous Agents and Multi-Agent Systems ",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Undecidability of compass logic",
      "author" : [ "Maarten Marx", "Mark Reynolds" ],
      "venue" : "Journal of Logic and Computation,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1997
    }, {
      "title" : "Multi-Dimensional Modal Logic, volume 4 of Applied Logic Series",
      "author" : [ "Maarten Marx", "Yde Venema" ],
      "venue" : null,
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 1997
    }, {
      "title" : "A modal logic for coalitional power in games",
      "author" : [ "M. Pauly" ],
      "venue" : "Journal of Logic and Computation, 12(1):149–166",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "On the products of linear modal logics",
      "author" : [ "M. Zakharyaschev M. Reynolds" ],
      "venue" : "Journal of Logic and Compution,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2001
    }, {
      "title" : "Verification of asynchronous mobile-robots in partially-known environments",
      "author" : [ "S. Rubin", "F. Zuleger", "A. Murano", "B. Aminof" ],
      "venue" : "Proceedings of the 18th International Conference on Principles and Practice of Multi- Agent Systems ",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Interactions between knowledge",
      "author" : [ "R.A. Schmidt", "D. Tishkovsky", "U. Hustadt" ],
      "venue" : "action and commitment within agent dynamic logic. Studia Logica, 78(3):381–415",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2004
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : "Most of existing logics for multi-agent systems (MAS) including multi-agent epistemic logic [7], multi-agent variants of propositional dynamic logic [15] and logics of action and strategic reasoning such as ATL [1], Coalition Logic CL [12] and STIT [5] are “ungrounded” in the sense that their formal semantics are based on abstract primitive notions such as the concept of Kripke model or the concept of possible world (or state).",
      "startOffset" : 92,
      "endOffset" : 95
    }, {
      "referenceID" : 14,
      "context" : "Most of existing logics for multi-agent systems (MAS) including multi-agent epistemic logic [7], multi-agent variants of propositional dynamic logic [15] and logics of action and strategic reasoning such as ATL [1], Coalition Logic CL [12] and STIT [5] are “ungrounded” in the sense that their formal semantics are based on abstract primitive notions such as the concept of Kripke model or the concept of possible world (or state).",
      "startOffset" : 149,
      "endOffset" : 153
    }, {
      "referenceID" : 0,
      "context" : "Most of existing logics for multi-agent systems (MAS) including multi-agent epistemic logic [7], multi-agent variants of propositional dynamic logic [15] and logics of action and strategic reasoning such as ATL [1], Coalition Logic CL [12] and STIT [5] are “ungrounded” in the sense that their formal semantics are based on abstract primitive notions such as the concept of Kripke model or the concept of possible world (or state).",
      "startOffset" : 211,
      "endOffset" : 214
    }, {
      "referenceID" : 11,
      "context" : "Most of existing logics for multi-agent systems (MAS) including multi-agent epistemic logic [7], multi-agent variants of propositional dynamic logic [15] and logics of action and strategic reasoning such as ATL [1], Coalition Logic CL [12] and STIT [5] are “ungrounded” in the sense that their formal semantics are based on abstract primitive notions such as the concept of Kripke model or the concept of possible world (or state).",
      "startOffset" : 235,
      "endOffset" : 239
    }, {
      "referenceID" : 4,
      "context" : "Most of existing logics for multi-agent systems (MAS) including multi-agent epistemic logic [7], multi-agent variants of propositional dynamic logic [15] and logics of action and strategic reasoning such as ATL [1], Coalition Logic CL [12] and STIT [5] are “ungrounded” in the sense that their formal semantics are based on abstract primitive notions such as the concept of Kripke model or the concept of possible world (or state).",
      "startOffset" : 249,
      "endOffset" : 252
    }, {
      "referenceID" : 8,
      "context" : "Among them, we should mention logics of multi-agent knowledge in both one-dimensional space and two-dimensional space [9, 3], spatio-temporal logics such as constraint LTL applied to model 2D grid environments [2], multi-",
      "startOffset" : 118,
      "endOffset" : 124
    }, {
      "referenceID" : 2,
      "context" : "Among them, we should mention logics of multi-agent knowledge in both one-dimensional space and two-dimensional space [9, 3], spatio-temporal logics such as constraint LTL applied to model 2D grid environments [2], multi-",
      "startOffset" : 118,
      "endOffset" : 124
    }, {
      "referenceID" : 1,
      "context" : "Among them, we should mention logics of multi-agent knowledge in both one-dimensional space and two-dimensional space [9, 3], spatio-temporal logics such as constraint LTL applied to model 2D grid environments [2], multi-",
      "startOffset" : 210,
      "endOffset" : 213
    }, {
      "referenceID" : 13,
      "context" : "robot task logic based on monadic second-order logic [14] and logics of robot localization [4].",
      "startOffset" : 53,
      "endOffset" : 57
    }, {
      "referenceID" : 3,
      "context" : "robot task logic based on monadic second-order logic [14] and logics of robot localization [4].",
      "startOffset" : 91,
      "endOffset" : 94
    }, {
      "referenceID" : 11,
      "context" : "Conclusion of the paper (Section 8) presents perspectives of future research including integration of an epistemic component in the logic as well as of the concept of coalitional capability in the sense of [12].",
      "startOffset" : 206,
      "endOffset" : 210
    }, {
      "referenceID" : 7,
      "context" : "Their formulas are equivalent to LDL-S∗(Atm,Agt)-formulas over the class of all spatial models and are often undecidable [8, 10, 13].",
      "startOffset" : 121,
      "endOffset" : 132
    }, {
      "referenceID" : 9,
      "context" : "Their formulas are equivalent to LDL-S∗(Atm,Agt)-formulas over the class of all spatial models and are often undecidable [8, 10, 13].",
      "startOffset" : 121,
      "endOffset" : 132
    }, {
      "referenceID" : 12,
      "context" : "Their formulas are equivalent to LDL-S∗(Atm,Agt)-formulas over the class of all spatial models and are often undecidable [8, 10, 13].",
      "startOffset" : 121,
      "endOffset" : 132
    }, {
      "referenceID" : 10,
      "context" : "The idea is to allow actions only along the horizontal and vertical axes, which following [11] we call the ‘compass directions’.",
      "startOffset" : 90,
      "endOffset" : 94
    }, {
      "referenceID" : 7,
      "context" : "38 in [8], which states (in their notation) that PTL ◦ × PTL ◦ is not c.",
      "startOffset" : 6,
      "endOffset" : 9
    }, {
      "referenceID" : 7,
      "context" : "18 in [8], which in their notation states that Log{〈N,≥〉 × N,≥〉} is not c.",
      "startOffset" : 6,
      "endOffset" : 9
    }, {
      "referenceID" : 5,
      "context" : ", model-checking for ordinary modal logic logic or for CTL is also in PTime [6], but there are some subtleties in dealing with the state-space being infinite (even if the valuations are bounded).",
      "startOffset" : 76,
      "endOffset" : 79
    }, {
      "referenceID" : 11,
      "context" : "We take the concept of ‘coalitional capability’ in the sense of Coalition Logic CL [12].",
      "startOffset" : 83,
      "endOffset" : 87
    }, {
      "referenceID" : 11,
      "context" : "ples of the coalitional capability operator by [12]:",
      "startOffset" : 47,
      "endOffset" : 51
    }, {
      "referenceID" : 0,
      "context" : "We postpone to future work a more systematic analysis of the basic principles of the operator 〈[C]〉 as well as a study of a strategic capability operator in the sense of ATL [1] based on the semantics of the logic DL-SM.",
      "startOffset" : 174,
      "endOffset" : 177
    } ],
    "year" : 2017,
    "abstractText" : "We present a family of logics for reasoning about agents’ positions and motion in the plane which have several potential applications in the area of multi-agent systems (MAS), such as multi-agent planning and robotics. The most general logic includes (i) atomic formulas for representing the truth of a given fact or the presence of a given agent at a certain position of the plane, (ii) atomic programs corresponding to the four basic orientations in the plane (up, down, left, right) as well as the four program constructs of propositional dynamic logic PDL (sequential composition, nondeterministic composition, iteration and test). As this logic is not computably enumerable, we study some interesting decidable and axiomatizable fragments of it. We also present a decidable extension of the iteration-free fragment of the logic by special programs representing motion of agents in the plane.",
    "creator" : "LaTeX with hyperref package"
  }
}