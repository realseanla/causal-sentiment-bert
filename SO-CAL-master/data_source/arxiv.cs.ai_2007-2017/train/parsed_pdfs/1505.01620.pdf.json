{
  "name" : "1505.01620.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Structure Formation in Large Theories",
    "authors" : [ "Serge Autexier", "Dieter Hutter" ],
    "emails" : [ "serge.autexier@dfki.de", "dieter.hutter@dfki.de" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "It has been long recognized that the modularity of specifications is an indispensable prerequisite for an efficient reasoning in complex domains. Algebraic specification techniques provide appropriate frameworks for structuring complex specifications and the authors introduced the notion of an development graph [5,1,6] as a technical means to work with and reason about such structured specifications. While its use presupposes the development of theories having the intended structures already in mind, there are various applications of Formal Methods in which theories are automatically generated in an entirely unstructured representation. Thus, there is a need for a computer-aided structure formation for large theories, which allows for an efficient reasoning in such theories.\nIn this paper we present an initial approach to support structure formations in large unstructured specifications. The idea is to provide a calculus and a corresponding methodology to crystalize intrinsic structures hidden in a specification and represent them explicitly in terms of development graphs. Step by step, the specification is split into different nodes resulting in increasingly richer development graphs. On the opposite, common concepts that are scattered in different specifications are identified and unified in a common theory.\nWe start with a discussion on syntactical properties to measure the appropriateness of a structuring and specify invariants underlying a structure formation process. Based on this general framework we present a calculus (and heuristics to guide this calculus) to transform development graphs in order to enrich the explicitly given structure. We review our framework with the help of the Mizar Mathematical Library (http://www.mizar.org/) providing hundreds of articles which are subject to our structure formation process.\n? The final publication is available at http://link.springer.com as part of the proceedings of the Conference on Intelligent Computer Mathematics 2015.\nar X\niv :1\n50 5.\n01 62\n0v 1\n[ cs\n.L O\n] 7\nM ay\n2 01\n5"
    }, {
      "heading" : "2 Development Graphs for Structure Formation",
      "text" : "We base our framework on the notions of development graphs (and thus on the notion of institutions [4]) to specify and reason about structured specifications. Development graphs D are acyclic, directed graphs 〈N ,L〉, the nodes N denote individual theories and the links L indicate theory inclusions with respect to signature morphisms attached to the links. Each node N ∈ N of the graph is a tuple (sigN , axN , lemN ) such that sigN is called the local signature of N , axN a set of local axioms of N , and lemN a set of local lemmas of N . L is a set of global definition links M\nσ +3 N. Each link imports the mapped theory of M (by the signature morphism σ) as part of the theory of N . A node N is globally reachable from a node M via a signature morphism σ, D `M _? σ +3 N for short, iff 1. either M = N and σ = id, or 2. M σ′ +3 K ∈ L, and D ` K _? σ ′′ +3 N , with σ = σ′′ ◦ σ′. The global signature (global axioms and global lemmata, respectively) of a node N ∈ N is the union of its local signature (local axioms and local lemmata) and the mapped global signatures of all nodes from which N is globally reachable. A node is valid if all signature symbols occurring in its global axioms and lemmata are declared in its global signature. A development graph is well-defined, if all its nodes are valid.\nThe maximal nodes (root nodes) dDe of a graph D are all nodes without outgoing links. DomD(N) := SigD(N) ∪ AxD(N) ∪ LemD(N) is the set of all signature symbols, axioms and lemmata visible in a node N . The local domain of N , domN := sigN ∪ axN ∪ lemN is the set of all local signature symbols, axioms and lemmata of N . The imported domain ImportsD(N) of N in D is the set of all signature symbols, axioms and lemmata imported via incoming definition links. DomD = ⋃ N∈N DomD(N) is the set of all signature symbols, axioms and lemmata occurring in D. Analogously we define SigD, AxD, and LemD. DomdDe = ⋃ N∈dDeDomD(N) is the set of all signature symbols, axioms and lemmata occurring in the maximal nodes of D. Given a node N ∈ N its associated class ModD(N) of models (or N -models for short) consists of those SigD(N)-models n for which (i) n satisfies the local axioms axN , and (ii) for each K σ +3 N ∈ S, n|σ is a K-model. In the following we denote the class of Σ-models that fulfill the Σ-sentences Ψ by ModΣ(Ψ). Given a signature Σ and Ax,Lem ⊆ Sen(Σ), a support mapping Supp for Ax and Lem assigns each lemma ϕ ∈ Lem a subset H ⊆ Ax ∪ Lem such that (i) Mod〈sym(H)∪sym(ϕ)〉Σ (H) |= ϕ 1 (ii) The relation @⊆ (Ax∪Lem)×Lem with Φ @ ϕ ⇔ (Φ ∈ Supp(ϕ) ∨ ∃ψ.Φ ∈ Supp(ψ) ∧ ψ @ ϕ) is a well-founded strict partial order. If D is a development graph, then a support mapping Supp is a support mapping for D iff for all N ∈ D Supp is a support mapping for AxD(N) and LemD(N).\nWe will now formalize the requirements on development graphs that reflect our intuition of an appropriate structuring for formal specifications in the following principles.\n1 where 〈S〉Σ denotes the smallest valid sub-signature of Σ containing S.\nThe first principle is semantic appropriateness, saying that the structure of the development graph should be a syntactical reflection of the relations between the various concepts in our specification. This means that different basic specifications are located in different nodes of the graph and the links of the graph reflect the logical relations between these specifications. The second principle is closure saying, for instance, that deduced knowledge should be located close to the axioms guaranteeing the proofs. Also the specification defined by the theory of an individual node of a development graph should have a meaning of its own and provide some source of deduced knowledge. The third principle is minimality saying that each concept (or part of it) is only represented once in the graph. When splitting a monolithic theory into different theories common foundations for these theories should be (syntactically) shared between them by being located at a unique node of the graph.\nWe now translate these principles into syntactical criteria on development graphs and into procedures of how to transform or refactor development graphs. In a first step we formalize technical requirements to enforce the minimalityprinciple in terms of development graphs. Technically, we demand that each signature symbol, each axiom and each lemma has a unique location in the development graph. When we enrich a development graph with more structure we forbid to have multiple copies of the same definition in different nodes. We therefore require that we can identify for a given signature entry, axiom or lemma a minimal theory in a development graph and that this minimal theory is unique. We define:\nDefinition 1 (Providing Nodes). Let 〈N ,L〉 be a development graph. An entity e is provided in N ∈ N iff e ∈ Dom〈N ,L〉(N) and ∀M\nσ +3 N. e 6∈"
    }, {
      "heading" : "Dom〈N ,L〉(M). Furthermore,",
      "text" : "1. e is locally provided in N iff additionally e ∈ domN holds. 2. e is provided by a link l : M\nσ +3 N iff e is not locally provide in N and ∃e′ ∈ Dom〈N ,L〉(M). σ(e′) = e holds. In this case we say that l provides e from e′. e is exclusively provided by l iff e is not provided by any other link l′ ∈ L.\nThe closure-principle demands that there are no spurious nodes in the graph not contributing anything new. We combine these requirements into the notion of location mappings:\nDefinition 2 (Location Mappings). Let D = 〈N ,L〉 be a development graph. A mapping locD : DomD → N is a location mapping for D iff 1. locD is surjective (closure) 2. ∀N ∈ N . ∀e ∈ domN . locD(e) = N 3. ∀e ∈ DomD. locD(e) is the only node providing e (minimality) For a given locD we define loc −1 D : N → 2DomD by\nloc−1D (N) := {e ∈ DomD|locD(e) = N}. We write loc and loc−1 instead of locD and loc −1 D if D is clear from the context.\nBased on the notion of location mappings we formalize our intuition of a structuring. The idea is that the notion of being a structuring constitutes the\ninvariant of the structure formation process and guarantees both, requirements imposed by the minimality-principle as well as basic conditions on a development graph to reflect a given formal specification.\nDefinition 3 (Structuring). Let D = 〈N ,L〉 be a valid development graph, loc : DomD → N , Σ ∈ |Sign|, Ax,Lem ⊆ Sen(Σ) and Supp be a support mapping for D. Then (D, loc,Supp) is a structuring of (Σ,Ax,Lem) iff 1. loc is a location mapping for D. 2. let DomdDe = Σ\n′ ∪Ax′ ∪ Lem′ then Σ = Σ′, Ax = Ax′ and Lem ⊆ Lem′. 3. ∀φ ∈ LemD . ∀ψ ∈ Supp(φ). ∃σ. loc(ψ) _? σ +3 loc(φ) ∧ σ(ψ) = ψ"
    }, {
      "heading" : "3 Refactoring Rules",
      "text" : "In the following we present the transformation rules on development graphs that transform a structuring again into a structuring. Using these rules we are able to structure the initially trivial development graph consisting of exactly one node that comprises all given concepts step by step. This initial development graph consisting of exactly one node satisfies the condition of a structuring provided that we have an appropriate support mapping at hand.\nWe define four types of structuring-invariant transformations: (i) horizontal splitting and merging of development graph nodes, (ii) vertical splitting and merging of development graph nodes, (iii) factorization and multiplication of development graph nodes, and (iv) removal and insertion of specific links. Splitting and merging as well as factorization and multiplication are dual operations. For lack of space and because we are mainly interested in rules increasing the structure of a development graph we will omit the formal specification of the merging and multiplication rules here.\nHorizontal Split. The first refactoring rule aims at the separation of specifications in independent theories. In terms of the development graph a node is replaced by a series of independent nodes; each of them contains a distinct part from a partitioning of the specification of the original node. In order to ensure a valid new development graph, each of the new nodes imports the same theories as the old node and contributes to the same theories as the old node did. To formalize this rule we need constraints on how to split a specification in different chunks such that local lemmata are always located in a node which provides also the necessary axioms and lemmata to prove it.\nDefinition 4. Let S = (D, loc,Supp) be a structuring of (Σ,Ax,Lem) and N ∈ ND. A partitioning P for N is a set {N1, . . . , Nk} with k > 1 such that 1. sigN = sigN1 ] . . . ] sigNk , axN = axN1 ] . . . ] axNk , lemN = lemN1 ] . . . ] lemNk 2. sigNi∪axNi∪lemNi 6= ∅ for i = 1, . . . , k. A node Ni ∈ P is lemma independent iff Supp(ψ) ∩ (axN ∪ lemN ) ⊆ (axNi ∪ lemNi) for all ψ ∈ lemNi .\nDefinition 5 (Horizontal Split). Let S = (〈N ,L〉, loc,Supp) be a structuring of (Σ,Ax,Lem), P = {N1, . . . , Nk} be a partitioning for some node N ∈ N such\nthat each Ni ∈ P is lemma independent and loc−1(N) = domN . The horizontal split of S wrt. N and P is S ′ = (D′, loc′,Supp) with D′ = 〈N ′,L′〉 where 1. N ′ := {N1, . . . , Nk} ] (N \\N) 2. L′ := {M σ +3 M ′ ∈ L|M 6= N ∧M ′ 6= N}\n∪ {M θ +3 Ni|M θ +3 N ∈ L, i ∈ {1, . . . , k}} ∪ {Ni τ|DomNi+3 M|N τ +3 M ∈ L, i ∈ {1, . . . , k}}\n3. loc′(e) := Ni if e ∈ domNi for some i ∈ {1, . . . , k} and loc′(e) := loc(e) otherwise. such that SigD′(Ni) are valid signatures and axi, lemi ⊆ Sen(SigD′(Ni)) for i = 1, . . . , k.\nVertical Split. Similar to a horizontal split we introduce a vertical split which divides a node into two nodes and locates one node on top of the other. While all outgoing links start at the top node, we are free to reallocate incoming links to either node.\nDefinition 6 (Vertical Split). Let S = (〈N ,L〉, loc,Supp) be a structuring of (Σ,Ax,Lem) and P = {N1, N2} be a partitioning for some N ∈ N such that N1 is lemma independent. Then, the vertical split S wrt. N and P is S ′ = (D′, loc′,Supp) with D′ = 〈N ′,L′〉 where\nN ′ :={N1, N2} ] (N \\N)\nL′ :={M σ +3 M ′ ∈ L|M 6= N ∧M ′ 6= N} ∪ {N1 id +3 N2}\n∪ {M σ +3 N1 | M σ +3 N ∈ L} ∪ {N2 σ +3 M | N σ +3 M ∈ L}\nloc′(e) = N2 if loc(e) = N and e ∈ DomD ′(N2)\nN1 if loc(e) = N and e 6∈ DomD′(N2) loc(e) otherwise\nsuch that SigD′(Ni), i = 1, 2, are valid signatures and axi, lemi ⊆ Sen(SigD′(Ni)), i = 1, 2. Conversely, S is a vertical merge of N1 and N2 in S ′."
    }, {
      "heading" : "Vertical Split",
      "text" : ""
    }, {
      "heading" : "Vertical Merge",
      "text" : "Example 1. We illustrate the horizontal and vertical split rules by considering a single theory axiomatizing a Field with binary operations + and × consisting of a Distributivity axiom (ΦD := ∀x, y, z.x×(y+z) = x×y+x×z) and the axioms of an Abelian Group for + and ×, respectively (Φ+AG := ∀x, y, z . x+(y+ z) = (x+ y) + z,∀x, y . x+ y = y+x, ∀x . x+ 0 = x, ∀x . x+ -(x) = 0 and Φ×AG := ∀x, y, z . x×(y× z) = (x× y)× z,∀x, y . x× y = y×x, ∀x . x× 1 = x, ∀x . x× inv(x) = 1). Assume axioms are contained in a single node Field, which forms a trivial structuring. In a first step we can split that node vertically by separating the distributivity axiom from the other axioms. In a second step we can separate the Abelian Group axioms for + and × by a horizontal split. This is shown in the following Figure:\nΦD Φ+AG Φ×AG\n(0) (1) Vertical Split\n(2) Horizontal Split\nΦD\nΦ+AG, Φ × AG\nid\nΦD\nΦ+AG Φ × AG\nid id\nFactorization. The factorization rule allows one to merge equivalent specifications into a single generalized specification and then to represent the individual ones as instantiations of the generalized specification. A precondition of this rule is that all individual specifications inherit the same (underlying) theories.\nDefinition 7 (Factorization). Let S = (〈N ,L〉, loc,Supp) be a structuring of (Σ,Ax,Lem). Let K1, . . . ,Kn,M1, . . . ,Mp ∈ N with p > 1 such that sigMj ∪ axMj 6= ∅ and ∃σi,j . Ki σi,j +3 Mj ∈ L for i = 1, . . . , n, j = 1, . . . , p.\nSuppose there are sets sig, ax and lem with (sig∪ ax∪ lem)∩DomD = ∅ and signature morphisms θ1, . . . , θp and σ1, . . . , σn such that - ∀e ∈ DomD(Ki). θj(σi(e)) = σi,j(e) and σi,j(e) = e ∨ σi,j(e) 6∈ DomD\n- sigMj ⊆ θj(sig) ⊆ DomD(Mj), axMj ⊆ θj(ax) ⊆ DomD(Mj) - ∀e ∈ lem holds ∃l ∈ {1, . . . p}. θl(e) ∈ lemMl , θi(e) = θj(e) implies i = j and θj(e) ∈ DomD implies loc(θj(e)) ∈Mj\n- there is a support mapping SuppN for ax ∪ ⋃ i=1,...,n σi(DomD(Ki)) and lem. Then S ′ = (〈N ′,L′〉, loc′,Supp′) is a factorization of S wrt. M1, . . ., Mp and SuppN iff\nN ′ :={N} ∪ {Nj |j ∈ {1, . . . p}} ∪ N \\ {M1, . . .Mp} with N = 〈sig, ax, lem〉, Nj = 〈∅, ∅, lemMj \\ θj(lem)〉\nL′ :={K σ +3 K ′ ∈ L|K,K ′ 6∈ {M1, . . .Mp}\n∪ {Ki σi +3 N|Ki σi,j +3 Mj, j ∈ {1, . . . p}, i ∈ {1, . . . n}}\n∪ {N θj +3 Nj|j ∈ {1, . . . p}}\n∪ {K τ +3 Nj|K τ +3 Mj ∧ (∀i ∈ {1, . . . n}.K 6= Ki ∧ τ 6= σi,j)\n∪ {Nj τ +3 K|Mj τ +3 K ∈ L, j ∈ {1, . . . p}}\nloc′(x) :=  N if x ∈ DomD′(N) \\ ⋃ i=1,...,n DomD′(Ki) Nj if x ∈ DomD(Nj) and ∀K σ +3 Nj. x 6∈ DomD′(K)\nloc(x) otherwise.\nSupp′ :=Supp ∪ SuppN .\nExample 2. Consider again our example a Field axioms, which we have transformed into the structuring (3) (p. 6). On the last structuring (3) we can apply the factorization rule to extract the general abelian group axioms (Φ◦AG := ∀x, y, z . x ◦(y ◦ z) = (x ◦ y) ◦ z,∀x, y . x ◦ y = y ◦x, ∀x . x ◦ e = x, ∀x . x ◦ i(x) = e) and obtain the respective axioms for + and × by morphisms σ1 := ◦ 7→ +, e 7→ 0, i 7→ − and σ2 := ◦ 7→ ×, e 7→ 1, i 7→ inv. This is illustrated in the following diagram and the final structuring contains 5 axioms and the initial structuring contained 9 axioms.\nΦD\nΦ+AG Φ × AG\nid id\nΦD\n∅ ∅ id id\nΦ◦AG\nσ1 σ2\n(3) (4) Factorization\nThe factorization rule only covers a sufficient criterion demanding that each theory imported by a definition link to one specification is also imported via definition links by all other specifications. The more complex case in which a theory is imported via a path of links can be handled by allowing one to shortcut a path in a single global link. This results in the following rule.\nDefinition 8 (Transitive Enrichment). Let S = (〈N ,L〉, loc,Supp) be a structuring of (Σ,Ax,Lem), K,N ∈ N and there is a path K _? σ +3 N between both. Then, S ′ = (〈N ,L ∪ {K σ +3 N}〉, loc,Supp) is a transitive enrichment of D.\nDefinition links in a development graph can be redundant, if there are alternatives paths which have the same morphisms or if they are not used in any reachable node of the target. We formalize these notions as follows:\nDefinition 9 (Removable Link). Let S = (D, loc,Supp) (D = 〈N ,L〉) be a structuring of (Σ,Ax,Lem). Let l ∈ L and D′ = 〈N ,L\\{l}〉. l is removable from S and S ′ = (D′, loc,Supp) is a reduction of S iff 1. ∀l′ : M σ +3 N. if l′ provides exclusively σ(e) from some e ∈ DomD(M)\nthen e ∈ DomD′(N) and l 6= l′; 2. ∀e ∈ DomD.∀M ∈ dDe. if loc(e) _?\nσ +3M then there exists M ′ ∈ dD′e such that loc(e) _?\nσ +3M ′; 3. ∀φ ∈ LemD. Supp(φ) ⊆ DomD′(N) and ∀SiglocD (N) ⊆ DomD′(N).\nTheorem 1 (Structuring Preservation). Let S := (D, loc,Supp) (D = 〈N ,L〉) be a structuring of (Σ,Ax,Lem). Then\n1. every horizontal split of S wrt. some N ∈ N and partitioning P of N , 2. every vertical split of S wrt. some N ∈ N and partitioning P of N , 3. every factorization of S wrt. nodes M1, . . .Mp ∈ N , 4. every transitive enrichment of S, and 5. every reduction of S\nis a structuring of (Σ,Ax,Lem).\nThe theorem follows from the soundness proofs for each rule given in Appendix 6."
    }, {
      "heading" : "4 Refactoring Process",
      "text" : "In order to evaluate the refactoring rules on real theories we have implemented the development graphs and the rules in Scala2 and added support to read formulas in TSTP format [9] using the Java parser from [8]. The support mapping is given as an extra datastructure representing the information which formula has been used in the proof of a theorem. In the case of TSTP we extract that information from the files by using the names of the formulas. Since the TSTP format does not include signature declarations, we add declarations for all occurring symbols in a TSTP file in an initialization step. We used the untyped part of TSTP and hence the declarations only contain arity information but no types.\nThe refactoring rules are parameterized over the theories and possibly the subsets of the local signature, axioms and lemmata to split over. To compute the parametric information we provided some basic heuristic tactics. Using the support mapping, we define that an axiom (resp. lemma) depends on a symbol declaration, if the symbol occurs in the axiom (resp. lemma) and a lemma depends on another axiom or lemma, if the latter is in its support mapping. A symbol declaration is always independent. This dependency relation induces a partial order on the local domain of each node in a development graph.\nTactic for horizontal split. This rule requires the partitioning of the local signature, axioms and lemmas for a given theory into independent parts such that given the same imports than the original node, each part is a valid theory and lemma independent of the other part. We implemented a heuristic that given a local domain of some node, searches for a largest subset which has a non-empty intersection of its occurring symbols and supporting axioms and lemmata. If such a set exists, the largest such set is used to split the theory horizontally into that set and the rest.\nTactics for vertical split. The rule requires to find a subset of the local domain, which is independent of the rest and use it as the content of the lower theory. We implemented two heuristics to search for this subset. First, we consider all maximal elements wrt. the dependency relation and use that as content for the new upper theory constructed by vertical split. Second, we consider all minimal elements and use it as content for the lower theory constructed by vertical split. These two tactics allow one to incrementally split a theory into layered slices of the dependency relation.\nTactic for factorization. This rule requires to find isomorphic subsets in two different theories to factorize over. The notion of isomorphism between formulas is very strict, as we only search for renamings. Furthermore, we extended the isomorphism to the support mapping such that lemmata can only be identified with isomorphic lemmata which supporting axioms and lemmata are also isomorphic wrt. the same renaming. Thus, an axiom can never be factorized with a\n2 http://www.scala-lang.org/\nlemma and vice-versa. Even with that strict notion, computation of such subsets is already expensive. If the entire local domain of a given node is isomorphic to the local domain of the second node, both nodes are factorized according the definition of the factorization rule. If the identified subset in the first node does not cover the complete second node, we first try to split the second node to isolate the subset. To this end we first try to split the second node horizontally using the identified subset. If that fails, we first try to split vertically using the subset for the upper part and finally as the lower part. If one of these splittings was successful, the factorization is applied on the isolated part. Otherwise the factorization fails.\nIn addition to these main tactics, we have implemented the tactics to delete superfluous links as well as deletion of empty nodes which technically corresponds to vertically merging the empty node with their importing theories.\nAutomatic Procedure. In order to automate the theory formation process we have implemented the usual tacticals to describe more complex search behaviors. The tactic language is defined as follows starting from the basic tactics described above:\nT ::= SplitHorizontal |SplitV erticallyMaximal |SplitV erticallyMinimal | Factorize |RemoveSuperfluousEmptyTheories | T ∗ |T + |T ;T |T onfail T\nThe tactics take as argument a structuring and if they could be applied, return a new structuring and otherwise fail. The tacticals for as many as possible iteration (∗), as many as possible but at least one (+) and sequencing (;) are standard. The tactical onfail executes the second tactic expression only if the first failed. Using this language we have implemented the following automatic procedure. The goal of the procedure is starting from an unstructured graph, i.e. a single theory containing all declarations, axioms and lemmata, to search for possibilities to factorize common patterns. Factorization is only possible if at least one application of the horizontal split rule was possible, which in turn may require the application of a preparatory vertical split. Following that initial part, we try to split further vertically using the maximal elements of the theory and finally removing the superfluous links and empty theories. Hence, the initial phase of the automation consists of\ninittac ≡̇ ((SplitV erticallyMinimalEntries+;SplitHorizontally∗) onfail SplitHorizontally+); SplitV erticallyMaximalEntries∗; RemoveSuperfluousEmptyTheories∗\nThat initialization tactic succeeds only if at least one vertical split or one horizontal split could be done. Following that, we start to factorize. If at least one factorization was possible, we first clean up the structuring by removing superfluous links and empty theories before trying again to split vertically. The overall\ntactic is thus\ninittac; (Factorize+;RemoveSuperfluousEmptyTheories∗; SplitV erticallyMinimalEntries∗)∗"
    }, {
      "heading" : "5 Evaluation",
      "text" : "We have applied the factorization procedure presented in the previous section to TSTP versions of the Mizar library articles www.mizar.org, which have been created by Joseph Urban and are available at http://www.cs.miami.edu/~tptp/ MizarTPTP/TPTPArticles/. This is a collection of 922 files in TSTP format (www.cs.miami.edu/~tptp/TSTP) where theorems are annotated by information which theorems and axioms have been used in their proofs. The files consist of the axioms and theorems of each article including all directly included articles, but without transitive expansion of all inclusions. Hence, the knowledge in each file is already quite tailored to the knowledge necessary to define the additional mathematical concepts and to enable the proofs of the theorems. We have run the procedure on all examples with a timeout of 5 minutes each. The environment was a virtual machine with 4 virtual CPUs, 16GB RAM, under openSuSE 12.2 64-bit, running on a host with 2 Intel Xeon Westmere E5620 QuadCore CPUs, 2,4GHz, 96GB RAM and VMware ESXi 4.1.\nFor most articles no factorization has been found. However, there are 13 articles where factorization was possible, which are presented in the table Fig. 5. The results are summarized in the following format: for each file we indicate in the Axioms column the number of axioms in the initial development graph and the final development graph. Analogously, the Theorems column indicates the number of theorems respectively in the initial and the final development graph. The Reduction column indicates how much the factorization reduced the overall number of axioms and theorems. The last column indicates if the\nautomatic procedure had terminated within the 5 minutes time frame or timeout was reached.\nWhile reducing the number of axioms by factorization is already interesting in order to reduce the search space for automatic provers, reducing the number of theorems is more interesting as it means less theorems to prove. For all but one file where factorizations have been found, only axiom factorization have been found. However, in the article membered. top.rated obtained from the Mizar article [10] “On the Sets Inhabited by Numbers” we could factorize 36 theorems into 16 theorems. On closer inspection this is not surprising because it concerned theorems about sets of reals, sets of rationals, sets of integers, sets of naturals and sets of complex numbers, all defined and proved according to the same schema. The resulting development graph is shown on the right side of Fig. 5, and the factor theory containing the 5 theorems, from which all others are obtained by renaming, is node 9 in gray/orange. The factorization is visible via\nthe 5 outgoing edges towards node 11 which are annotated with the respective morphisms."
    }, {
      "heading" : "6 Related Work and Conclusion",
      "text" : "Related to the structuring of theories, there is a large work on anti-unification, i.e. computing common generalizations of different formuala or theories (e.g. [2,7,3]). The resulting structuring approach is primarily botton-up and driven by the pure existence of anti-unifiers. In contrast, our approach is top-down as it introduces measures for the intended structuring (i.e. semantic appropriateness, closure and minimality) to guide the formation process. For example, we split up theories in smaller ones but that are still self-contained in the sense that each theorem of the original theory can be proven in one of the new (smaller) ones. Anti-unification is an important technique to test the applicability of the factorization rule, for instance, but applicability of a rule is not the driving force of the formation process.\nIn this paper we were concerned with trying to reveal shared definitions, axiomatizations and theorems in a given formal theory. Based on structurings which extend development graphs with notions to exclude redundancies and include dependency information, we presented a set of rules on structurings. We implemented the rules with simple heuristics to detect isomorphic subsets which are sufficient to find simple factorization and applied it to the TSTP formulations of the Mizar articles. Not surprisingly, not many factorizations could be found, which is due to Mizar’s non-transitive reuse principle of other articles and the fact\nthat these were chosen carefully by the authors of the Mizar article. Moreover, the heuristics to compute isomorphic axioms and theorems was very restricted. However, a few factorizations could be found, and especially one were the number of theorems could be halved. This indicates that adding theory morphisms to the Mizar language may be useful, but that needs to be confirmed by further analysis of larger subsets. On the other hand the non-transitive import mechanisms of Mizar already seems to allow for a good organization of the knowledge. That kind of mechanism is typically not implemented in specification languages, but exists in development graphs in form of local axiom links.\nFuture work will consist of analyzing larger subsets of the whole Mizar library, i.e. sets of Mizar articles, for possible factorizations. We also plan to apply it to libraries of other proof assistants assuming we can get the dependency information which axioms/theorems have been used in which proof. Also other automation tactics and especially heuristics to identify isomorphic formulas need to be explored, as well as heuristics to identify subsets for horizontal and vertical splits. On a more theoretical level, we will investigate how axioms and theorems could be identified, in order to allow to factorize alternative axiomatizations of the same theory without losing information, such as, e.g., alternative forms to axiomatize groups. Finally, the whole system can be applied to any untyped first-order subset of TPTP theories to search for redundancies. However, the resulting development graphs cannot be saved as TPTP theories, as it does not support renaming. Hence, we propose to extend the TPTP language in that respect."
    }, {
      "heading" : "Proof of Theorem 1 (Structure Preservation)",
      "text" : ""
    }, {
      "heading" : "Horizontal Split",
      "text" : "It holds trivially that DomD = DomD′ .\n– loc′ is surjective because by construction each Ni, i = 1, . . . , k has a local entity. Furthermore, for each Ni and each e ∈ domNi holds loc′(e) = Ni by construction. Furthermore, since loc−1(N) = domN , none of the incoming links into N provided any entity, and consequently none of the incoming links into N1, . . . , Nk do. Hence, loc ′−1(Ni) = dom Ni , i = 1, 2 and since\ndomN := domN1 ] . . . ] domNk , loc′(e) is unique for e ∈ domN . – If N is not a top-level node in D, then DomdD′e = DomdDe = Σ ]Ax ]Lem\nbecause the domains of nodes reachable from N are not affected by the horizontal split. If N is a top-level node, then all Ni with 1 ≤ i ≤ k are top-level nodes. Since domN = domN1 ] . . . ] domNk and ImportsD(N) = ImportsD′(N1) = . . . = ImportsD′(Nk), it holds\nDomD(N) = dom N ∪ ImportsD(N) = dom N1 ∪ . . . domNk ∪ ImportsD(N) = domN1 ∪ . . . domNk ∪ ImportsD′(N1) ∪ . . . ∪ ImportsD′(Nk) = domN1 ∪ ImportsD′(N1) ∪ . . . ∪ dom\nNk ∪ ImportsD′(Nk) = DomD′(N1) ∪ . . . ∪DomD′(Nk)\nThus, DomdD′e = DomdDe = Σ ]Ax ] Lem. – Assume φ ∈ LemD and ψ ∈ Supp(φ). If locD(ψ) 6= N and locD(φ) 6= N , then\nboth locD(ψ), locD(φ) are in D′ and we consider p : locD(ψ) _? σ +3 locD(φ). If N ∈ p then p := [p1, M θ +3 N τ +3 M ′, p2] and by construction the path\n[p1, M θ +3 Ni τ|DomNi+3 M ′, p2] are in D′ for 1 ≤ i ≤ k. Since locD(ψ) 6= N , each τ|DomNi behaves equivalently on the image of ψ imported in Ni and hence locD′(ψ) _? σ′ +3 locD′(φ) for some σ′ such that σ′(ψ) = σ(ψ). If N 6∈ p, then p is also a path in D′ and locD′(ψ) _? σ +3 locD′(φ) holds trivially. If locD(φ) = N then since all Ni are mutually lemma independent, without loss of generality we can assume φ ∈ axN1 ∪ lemN1 and this loc′D′(φ) = N1. If locD(ψ) = N , then ψ\n′ ∈ axN1 ∪ lemN1 because N1 is lemma independent. Thus, loc′D′(ψ) = N1 and loc ′ D′(ψ) = N1 _? id +3 N1 = loc ′ D′(φ) holds trivially. Otherwise, locD(ψ) = loc ′ D′(ψ) and since N was reachable from locD(ψ) by construction N1 is also reachable from loc ′ D′(ψ)."
    }, {
      "heading" : "Vertical Split",
      "text" : "– First, we have to prove that loc′ is a location mapping. loc′ is surjective because by construction each node Ni (with i = 1, 2) has some local entity e ∈ domNi . Thus loc′(e) = Ni and Ni is in the range of loc′. Furthermore, ∀e ∈ domNi . loc′(e) = Ni holds by definition. Finally, let e ∈ DomD′ = DomD: loc ′(e) = Ni implies loc(e) = N and therefore there is no node in\nN \\ {N} which provides e. Furthermore, since N1 id +3 N2 ∈ L′, N1 and\nN2 cannot provide the same entity e. – By definition ∀e ∈ domNi implies loc′(e) = Ni for i = 1, 2 in D′. For all\nother nodes in D′ \\{N1, N2} the property is inherited by (D, loc,Supp) being a structuring and loc(e) = loc′(e) if loc(e) 6= N .\n– Since DomD(N) = DomD′(N2) and N _? σ +3M ∈ D iff N2 _? σ +3M ∈ D′ DomdDe = DomdD′e. – Suppose φ ∈ LemD, ψ ∈ Supp(φ) with loc(φ) = M and loc(ψ) = M ′. If N 6∈ {M,M ′} then loc′(φ) = M , loc′(ψ) = M ′ and M _? σ +3M ′ in D′ trivially. If M = N and M ′ 6= N then loc′(φ) ∈ {N1, N2}, and again Ni _?\nσ +3M ′ in D′. The case of M 6= N and M ′ = N is proven analogously. We are left with the case of M = M ′ = N . SinceN1 is independent ofN2 , it holds that for all φ\n′ ∈ axN1∪lemN1 . Supp(φ)∩ (axN2 ∪ lemN2) = ∅. Thus φ ∈ axN1∪lemN1 implies that ψ ∈ axN1∪lemN1 as well andN1 _?\nid +3 N1 holds trivially. ut"
    }, {
      "heading" : "Factorization",
      "text" : "– We have to prove that loc′ is a location mapping. First, we prove that loc′\nis surjective. For any node K ∈ N ′ \\ {N,N1, . . . Np} loc−1(K) = loc−1(K) holds. Since sigN ∪ axN 6= ∅ but (sigN ∪ axN ) ∩ DomD = ∅ it holds that sigN ∪ axN ⊆ loc′−1(N). Furthermore, sigMj ∪ axMj ⊆ loc′−1(Nj) since sigMj ∪ axMj ⊆ θj(sigN ∪ axN ) and θj(sigN ∪ axN ) ∩ (sigN ∪ axN ) = ∅. Second we have to prove ∀K ∈ N ′. ∀e ∈ domK . loc′(e) = K holds. If K 6∈ {N,N1, . . . Np} then loc′(e) = loc(e) = K. If K = N then domN ∈ DomD′(N) and dom\nN 6∈ DomD(Ki) for i = 1, . . . , n because domN ∩ DomD = ∅. Thus ∀e ∈ domN . loc′D′(e) = N . Finally, if K = Nj then domNj = lemMj \\ θj(lem) In particular, domNj ∩ DomD′(N) = ∅ implying that loc′D′(e) = Nj for all e ∈ domNj . Third, we prove that all e ∈ DomDG′ are provided by a unique node. The only interesting case is that e is provided by N or some Nj . In case of N both domN and also entries provided by some link from Ki are by definition not in DomD and thus not provided by any node already in D but by definition also not provided by Nj . It remains the case that an entry e is provided by two nodes Ni and Nj . Since all e ∈ DomDG were provided by a unique node, this implies that e has to be a mapped lemma of N but that violates the precondition that each θi has to map e into a different entity.\n– Next we prove that D and D′ coincide in the entities they provide at their maximal nodes. Since N is not a maximal node, it is sufficient to prove that Nj and Mj coincide in their provided entities:"
    }, {
      "heading" : "DomD′(Nj) = lem",
      "text" : "Mj \\ θj(lem) ∪ ⋃ {σ(DomD′(K)) | K σ +3 Nj}\n= lemMj \\ θj(lem) ∪ ⋃ {σ(DomD′(K)) | K σ +3 Nj,K 6= N}\n∪ θj(sig) ∪ θj(ax) ∪ θj(lem) ∪ ⋃ {σi,j(DomD(Ki,j))|i = 1...n}\n= lemMj ∪ sigMj ∪ axMj ∪ ⋃ {σ(DomD(K)) | K σ +3 Mj,K 6= Ki, σ 6= σi,j}\n∪ ⋃ {σi,j(DomD(Ki,j)) | i = 1...n} ∪ θj(lem)\n= DomD(Mj) ∪ θj(lem).\n– Suppose φ ∈ LemD′ and ψ ∈ SuppD′(φ). If loc ′(φ), loc′(ψ) 6∈ {N,N1, . . . Np}\nthen loc′(φ) = loc(φ) and loc′(ψ) = loc(ψ) and therefore, ∃σ. loc(ψ) _? σ +3 loc(φ) with σ(ψ) = ψ in D. Since D′ inherits all links away from M1, . . .Mp and paths travesing some Ki and Mj can be mapped to paths traversing Ki, N , and Nj . ∃σ. loc′(ψ) _? σ +3 loc′(φ) with σ(ψ) = ψ also in D′- Next, let loc′(φ) = Nj : by definition we know that φ ∈Mj and Supp(φ) ⊆ DomD(Mj). Since DomD(Mj) ⊆ DomD′(Nj) we know that Supp′(φ) = Supp(φ) ⊆ DomD′(Nj) and thus ∀ψ ∈ Supp′(φ). loc′(ψ) _?\nσ +3 Nj with σ(ψ) = ψ. Finally, let loc′(φ) = N . Then SuppN ⊆ Supp′ is a support mapping for φ in particular."
    }, {
      "heading" : "Transitive enrichment",
      "text" : "Obviously, the inclusion of the global link does not affect the visibility (e.g. Dom ) of any node in N nor the local entities provided by the individual nodes (i.e. dom). Hence, all properties of a structuring are trivially forwarded to the enriched structuring."
    }, {
      "heading" : "Removable link",
      "text" : "– We have to prove that loc is also a location mapping for D′. It holds that ∀N ∈ N . locD(N) = locD′(N) since dom(N) remains unchanged and also all e ∈ locD(N) that are exclusively provided by some link in D are still provided exclusively in D′. Thus, loc is also surjective in D′, also ∀N ∈ N .∀e ∈ domN . locD′(e) = locD(e) = N and ∀e ∈ DomD′ . locD′(e) is the only node providing e. – D′ and D′ coincide in the entities they provide at their maximal nodes, which is an immediate consequence of condition (2) of Def. 9. – Also ∀φ ∈ LemD′ . ∀ψ ∈ Supp(φ). ∃σ. loc(ψ) _? σ +3 loc(φ) ∧ σ(ψ) = ψ is\nimplied by condition (3) of Def. 9. ut"
    } ],
    "references" : [ {
      "title" : "Mind the gap - maintaining formal developments in MAYA",
      "author" : [ "S. Autexier", "D. Hutter" ],
      "venue" : "In Festschrift in Honor of J.H. Siekmann. Springer, LNCS 2605,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "Generalization with taxonomic information",
      "author" : [ "A.M. Frisch", "C.D.P. Jr" ],
      "venue" : "In 8th National Conference on Artificial Intelligence, pages 775–761. AAAI-Press,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 1990
    }, {
      "title" : "Matching concepts across HOL libraries",
      "author" : [ "T. Gauthier", "C. Kaliszyk" ],
      "venue" : "In Intelligent Computer Mathematics, pages 267–281. Springer, LNAI 8543,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Institutions: Abstract model theory for specification and programming",
      "author" : [ "J.A. Goguen", "R.M. Burstall" ],
      "venue" : "Journal of the Association for Computing Machinery, 39:95–146, 1992. Predecessor in: LNCS 164, 221–256,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 1984
    }, {
      "title" : "Management of change in verification systems",
      "author" : [ "D. Hutter" ],
      "venue" : "In Proceedings 15th IEEE International Conference on Automated Software Engineering, ASE-2000, pages 23–34. IEEE Computer Society,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2000
    }, {
      "title" : "Development graphs - proof management for structured specifications",
      "author" : [ "T. Mossakowski", "S. Autexier", "D. Hutter" ],
      "venue" : "Journal of Logic and Algebraic Programming, special issue on Algebraic Specification and Development Techniques, 67(1-2):114– 145, april",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Extended formula normalization for -retrieval and sharing of mathematical knowledge",
      "author" : [ "I. Normann", "M. Kohlhase" ],
      "venue" : "In Towards Mechanized Mathematical Assistants (Calculemus/MKM). Springer, LNCS 4573,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Reusable tptp parser in java",
      "author" : [ "A. Riazanov", "A. Tchaltsev" ],
      "venue" : "http://www. freewebs.com/andrei_ch/TPTP_2007.01.30.tgz,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "The TPTP World - Infrastructure for Automated Reasoning",
      "author" : [ "G. Sutcliffe" ],
      "venue" : "In E. Clarke and A. Voronkov, editors, Proceedings of the 16th International Conference on Logic for Programming Artificial Intelligence and Reasoning, number 6355 in LNAI, pages 1–12. Springer-Verlag,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "On the sets inhabited by numbers",
      "author" : [ "A. Trybulec" ],
      "venue" : "Journal of Formalized Mathematics, 15,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 2003
    } ],
    "referenceMentions" : [ {
      "referenceID" : 4,
      "context" : "Algebraic specification techniques provide appropriate frameworks for structuring complex specifications and the authors introduced the notion of an development graph [5,1,6] as a technical means to work with and reason about such structured specifications.",
      "startOffset" : 167,
      "endOffset" : 174
    }, {
      "referenceID" : 0,
      "context" : "Algebraic specification techniques provide appropriate frameworks for structuring complex specifications and the authors introduced the notion of an development graph [5,1,6] as a technical means to work with and reason about such structured specifications.",
      "startOffset" : 167,
      "endOffset" : 174
    }, {
      "referenceID" : 5,
      "context" : "Algebraic specification techniques provide appropriate frameworks for structuring complex specifications and the authors introduced the notion of an development graph [5,1,6] as a technical means to work with and reason about such structured specifications.",
      "startOffset" : 167,
      "endOffset" : 174
    }, {
      "referenceID" : 3,
      "context" : "We base our framework on the notions of development graphs (and thus on the notion of institutions [4]) to specify and reason about structured specifications.",
      "startOffset" : 99,
      "endOffset" : 102
    }, {
      "referenceID" : 8,
      "context" : "In order to evaluate the refactoring rules on real theories we have implemented the development graphs and the rules in Scala and added support to read formulas in TSTP format [9] using the Java parser from [8].",
      "startOffset" : 176,
      "endOffset" : 179
    }, {
      "referenceID" : 7,
      "context" : "In order to evaluate the refactoring rules on real theories we have implemented the development graphs and the rules in Scala and added support to read formulas in TSTP format [9] using the Java parser from [8].",
      "startOffset" : 207,
      "endOffset" : 210
    }, {
      "referenceID" : 9,
      "context" : "rated obtained from the Mizar article [10] “On the Sets Inhabited by Numbers” we could factorize 36 theorems into 16 theorems.",
      "startOffset" : 38,
      "endOffset" : 42
    }, {
      "referenceID" : 1,
      "context" : "[2,7,3]).",
      "startOffset" : 0,
      "endOffset" : 7
    }, {
      "referenceID" : 6,
      "context" : "[2,7,3]).",
      "startOffset" : 0,
      "endOffset" : 7
    }, {
      "referenceID" : 2,
      "context" : "[2,7,3]).",
      "startOffset" : 0,
      "endOffset" : 7
    } ],
    "year" : 2015,
    "abstractText" : "Structuring theories is one of the main approaches to reduce the combinatorial explosion associated with reasoning and exploring large theories. In the past we developed the notion of development graphs as a means to represent and maintain structured theories. In this paper we present a methodology and a resulting implementation to reveal the hidden structure of flat theories by transforming them into detailed development graphs. We review our approach using plain TSTPrepresentations of MIZAR articles obtaining more structured and also more concise theories.",
    "creator" : "LaTeX with hyperref package"
  }
}