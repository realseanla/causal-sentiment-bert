{
  "name" : "1606.01307.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Scene Grammars, Factor Graphs, and Belief Propagation",
    "authors" : [ "Jeroen Chua", "Pedro F. Felzenszwalb" ],
    "emails" : [ "jeroen_chua@brown.edu,", "pff@brown.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "The primary motivation of this work is that objects and scenes can be represented using hierarchical structures defined by compositional rules. For instance, faces are composed of eyes, nose, mouth. Similarly, geometric objects such as curves can be defined in terms of shorter curves that are recursively described. A hierarchical structure defined by compositional rules defines a rich description of a scene that captures both the presence of different objects and relationships among them. Moreover, compositional rules provide contextual cues for inference with ambiguous data. For example, the presence of some parts of a face in a scene provides contextual cues for the presence of other parts.\nIn the models we consider, every object has a type from a finite alphabet and a pose from a finite but large pose space. While classical language models generate sentences using a single derivation, the grammars we consider generate scenes using multiple derivations. These derivations can be unrelated or they can share sub-derivations. This allows for very general descriptions of scenes.\nWe show how to represent the distributions defined by probabilistic scene grammars using factor graphs, and we use loopy belief propagation (LBP) [17, 15] for approximate inference. Inference with LBP simultaneously combines “bottom-up” and “top-down” contextual information. For example, when faces are defined using a composition of eyes, nose and mouth, the evidence for a face or one of its parts provides contextual influence for the whole composition. Inference via message passing naturally captures chains of contextual evidence. LBP also naturally combines multiple contextual cues. For example, the presence of an eye may provide contextual evidence for a face at two different\nar X\niv :1\n60 6.\n01 30\n7v 1\n[ cs\n.C V\n] 3\nlocations because a face has a left and a right eye. However, the presence of two eyes side by side provides strong evidence for a single face between them.\nWe demonstrate the practical feasibility of the approach on two very different applications: curve detection and face localization. Figure 1 shows samples from the two different grammars we use for the experimental results. The contributions of our work include (1) a unified framework for contextual modeling that can be used in a variety of applications; (2) a construction that maps a probabilistic scene grammar to a factor graph together with an efficient message passing scheme; and (3) experimental results showing the effectiveness of the approach.\nProbabilistic grammars and compositional models are widely used for parsing sentences in natural language processing [16]. Recursive descriptions of objects using grammars and production rules have also been widely used in computer graphics to generate geometric objects, biological forms, and landscapes [19]. A variety of other compositional models have been used in computer vision. The models we consider are closely related to the Markov backbone model in [14]. Other related approaches include [2, 20, 8, 21, 12, 10]. These previous methods have relied on MCMC or heuristic methods for inference, or dynamic programming for scenes with single objects. The models we consider generalize part-based models for object detection such as pictorial structures [11, 7] and constellations of features [3]. In particular, the grammars we consider define objects that are composed of parts but allow for modeling objects with variable structure. The models we consider also explicitly capture scenes with multiple objects."
    }, {
      "heading" : "2 Probabilistic Scene Grammars and a Factor Graph Representation",
      "text" : "Our point of departure is a probabilistic scene grammar that defines a distribution over scenes. The approach is based on the Markov backbone from [14]. Scenes are defined using a library of building blocks, or bricks, that have a type and a pose. Bricks are generated spontaneously or through expansions of other bricks. This leads to a hierarchical organization of the elements of a scene.\nDefinition 2.1. A probabilistic scene grammar G consists of\n1. A finite set of symbols, or types, Σ.\n2. A finite pose space, ΩA, for each symbol A ∈ Σ.\n3. A finite set of production rules,R. Each rule r ∈ R is of the form A0 → {A1, . . . , ANr}, where Ai ∈ Σ. We use RA to denote the rules with symbol A in the left-hand-side (LHS). We use Ar,i to denote the i-th symbol in the right-hand-side (RHS) of a rule r.\n4. Rule selection probabilities, P (r), with ∑ r∈RA P (r) = 1 for each symbol A ∈ Σ.\n5. For each rule r = A0 → {A1, . . . , ANr} we have categorical distributions gr,i(z|ω) defining the probability of a pose z for Ai conditional on a pose ω for A0.\n6. Self-rooting probabilities, A, for each symbol A ∈ Σ.\n7. A noisy-or parameter, ρ.\nThe bricks defined by G are pairs of symbols and poses,\nB = {(A,ω) | A ∈ Σ, ω ∈ ΩA}.\nDefinition 2.2. A scene S is defined by\n1. A set O ⊆ B of bricks that are present in S.\n2. A rule r ∈ RA for each brick (A,ω) ∈ O, and a pose z ∈ ΩAi for each Ai in the RHS of r.\nLet H = (B, E) be a directed graph capturing which bricks can generate other bricks in one production. For each rule r, if gr,i(z|ω) > 0, we include ((A0, ω), (Ai, z)) in E. We say a grammar G is acyclic if H is acyclic.\nA topological ordering of B is an ordering of the bricks such that (A,ω) appears before (B, z) whenever (A,ω) can generate (B, z). When G is acyclic we can compute a topological ordering of B by topological sorting the vertices of H .\nDefinition 2.3. An acyclic grammar defines a distribution over scenes, P (S), through the following generative process.\n1. Initially O = ∅.\n2. For each brick (A,ω) ∈ B we add (A,ω) to O independently with probability A.\n3. We consider the bricks in B in a topological ordering. When considering (A,ω), if (A,ω) ∈ O we expand it.\n4. To expand (A,ω) we select a rule r ∈ RA according to P (r) and for each Ai in the RHS of r we select a pose z according to gr,i(z|ω). We add (Ai, z) to O with probability ρ.\nNote that because of the topological ordering of the bricks, no brick is included in O after it has been considered for expansion. In particular each brick in O is expanded exactly once. This leads to derivation trees rooted at each brick in the scene. The expansion of two different bricks can generate the same brick, and this leads to a “collision” of derivations. When two derivations collide they share a sub-derivation rooted at the point of collision. Derivations terminate using rules of the form A→ ∅, or through early termination of a branch with probability ρ."
    }, {
      "heading" : "2.1 Factor Graph Representation",
      "text" : "We can represent the distribution over scenes, P (S), using a factor graph with binary variables.\nDefinition 2.4. A scene S generated by an acyclic grammar G defines a set of random variables,\nX(A,ω) ∈ {0, 1} ∀(A,ω) ∈ B (1) R(A,ω, r) ∈ {0, 1} ∀(A,ω) ∈ B,∀r ∈ RA (2)\nG(A,ω, r, i, z) ∈ {0, 1} ∀(A,ω) ∈ B,∀r ∈ RA, 1 ≤ i ≤ Nr,∀z ∈ ΩAr,i (3)\nwhere\n1. X(A,ω) = 1 if (A,ω) ∈ O. 2. R(A,ω, r) = 1 if rule r is used to expand (A,ω).\n3. G(A,ω, r, i, z) = 1 when (A,ω) is expanded with rule r, and z is the pose selected for Ai.\nLet G(A,ω) be the vector of variables G(B, z, r, i, ω) where Ar,i = A. We have X(A,ω) = 0 when X(A,ω) is not generated spontaneously or by the expansion of another other brick. Therefore,\nP (X(A,ω)|G(A,ω)) = { (1− ρ)c(1− A) X(A,ω) = 0 1− (1− ρ)c(1− A) otherwise\n(4)\nwhere c is the number of variables in G(A,ω) with value 1.\nLet R(A,ω) be the vector of random variables R(A,ω, r). The generative process determines R(A,ω) by selecting a rule r ∈ RA for expanding (A,ω) when X(A,ω) = 1, and no rule is selected when X(A,ω) = 0. Therefore,\nP (R(A,ω)|X(A,ω)) =  1 R(A,ω) = 0, X(A,ω) = 0 P (r) R(A,ω) = I(r), X(A,ω) = 1\n0 otherwise (5)\nwhere I(r) is an indicator vector for r ∈ RA Let G(A,ω, r, i) be the vector of random variables G(A,ω, r, i, z). The generative process selects a pose z for Ar,i if the rule r is used to expand a brick. Therefore,\nP (G(A,ω, r, i)|R(A,ω, r)) =  1 G(A,ω, r, i) = 0, R(A,ω, r) = 0\ngr,i(z|ω) G(A,ω, r, i) = I(z), R(A,ω, r) = 1 0 otherwise\n(6)\nwhere I(z) is an indicator vector for z ∈ ΩAr,i . The joint distribution, P (X,R,G), defined by an acyclic grammar can be expressed using a factored representation following the structure of the generative process defined by G,\nP (X,R,G) = ∏ (A,ω)∈B P (X(A,ω)|G(A,ω))P (R(A,ω)|X(A,ω)) ∏ r∈RA,1≤i≤Nr P (G(A,ω, r, i)|R(A,ω, r))  . (7) We can express P (X,R,G) using a factor graph over the binary variables, with a factor for each term in the product\nabove. The factors in the factor graph representation are\nΨ1(A,ω)(X(A,ω), G(A,ω)) = P (X(A,ω)|G(A,ω)) (8)\nΨ2(A,ω)(R(A,ω), X(A,ω)) = P (R(A,ω)|X(A,ω)) (9)\nΨ3(A,ω,r,i)(G(A,ω, r, i), R(A,ω, r)) = P (G(A,ω, r, i)|R(A,ω, r)). (10)\nAlthough we have assumed an acyclic grammar in the derivation of the distribution P (X,R,G) in equation (7), the factor graph construction can also be applied to arbitrary grammars. This makes it possible to define probability distributions over scenes using cyclic grammars, without relying on the generative process formulation."
    }, {
      "heading" : "3 Inference Using Belief Propagation",
      "text" : "To perform approximate inference with the factor graph representation, we use loopy belief propagation (LBP) [17, 15]. Here we describe how to compute LBP messages efficiently for the factor graphs that represent scene grammars.\nThe factors in our model are of one of two kinds: The factor Ψ1 defined in equation (8) captures a noisy-OR distribution, and the factors Ψ2 and Ψ3 defined in equations (9) and (10) capture categorical distributions in which the outcome probabilities depend on the state of a switching random variable. Figure 2 shows the local graphical representation for the two types of factors. The computation of messages from variables to factors follows the standard LBP equations. Below we describe how to efficiently compute the messages from factors to variables. The computational complexity of message updates for both kinds of factors is linear in the degree of the factor. In the derivations below we assume all messages have non-zero value."
    }, {
      "heading" : "3.1 Message passing for noisy-OR factors",
      "text" : "Consider a factor F (y1, . . . , yN , z) that represents a noisy-OR relationship between binary inputs y1, ...yN , and a binary output z. Suppose we have a leak in the noisy-OR with probability and independent failure parameter 1− ρ.\nWe define β = − log(1− ρ). We can write the factor F as\nF (y1, ...yN , 0) = (1− ) N∏ i=1 exp(−βyi), (11)\nF (y1, ...yN , 1) = 1− F (y1, ...yN , 0). (12)\nThe message passing equations are straightforward to derive and we simply state them here,\n1− µF→Z(1) = µF→Z(0) = (1− ) N∏ i=1 ( µYi→F (0) + µYi→F (1) exp(−β) ) (13)\nri = (1− ) ∏ j 6=i ( µYj→F (0) + µYj→F (1) exp(−β) ) (14)\nµF→Yi(yi) = ri exp(−βyi)(µZ→F (0)− µZ→F (1)) + µZ→F (1). (15)"
    }, {
      "heading" : "3.2 Message passing for categorical factors",
      "text" : "Consider a factor F (y, z1, . . . , zN ) that represents a mixture of categorical distributions. The binary values z1, . . . , zN specify the outcome and y controls the outcome probabilities. Concretely,\nF (y, z1, ...zN ) =\n{ 0 ∑N i=1 zi 6= 1∏N\ni=1(θ i y) zi otherwise\n(16)\nwhere θiy is the probability of the i-th outcome with the mixture component defined by y. In this case we can derive the following message passing equations,\nµF→Zi(1) = (∏ j 6=i µZj→F (0) )∑ y µY→F (y)θ i y (17)\nµF→Zi(0) = (∏ j 6=i µZj→F (0) )∑ y µY→F (y) (∑ j 6=i µZj→F (1) µZj→F (0) θjy )\n(18)\nµF→Y (y) = ( N∏ i=1 µZi→F (0) ) N∑ i=1 µZi→F (1) µZi→F (0) θiy. (19)"
    }, {
      "heading" : "4 Learning Model Parameters",
      "text" : "For a grammar with fixed structure we can use EM to learn the the production rule probabilities, P (r), and the self-rooting parameters, A. The approach involves iterative updates. In each iteration, we (1) use LBP to compute (approximate) conditional marginal probabilities on training examples with the current model parameters, and (2) update the model parameters according to sufficient statistics derived from the output of LBP.\nLet Qe(A,ω, r) be the marginal probability of brick (A,ω) being expanded using rule r in the training example e. In the factor graph representation, this corresponds to the marginal probability that a random variable takes a particular value, P (R(A,ω, r) = 1), a quantity that is approximated by the output of LBP. The update for P (r) is,\nP (r) = 1\nZA ∑ e ∑ ω∈Ωa Qe(A,ω, r). (20)\nThe value of ZA is determined by normalizing probabilities over r ∈ RA. We update the self-rooting parameters, A, in an analogous way, using approximate marginals computed by LBP."
    }, {
      "heading" : "5 Experiments",
      "text" : "To demonstrate the generality of our approach we conducted experiments with two different applications: curve detection, and face localization. Previous approaches for these problems typically use fairly distinct methods. Here, we demonstrate we can handle both problems within the same framework. In particular we have used a single implementation of a general computational engine for both applications. The computational engine can perform inference and learning using arbitrary scene grammars. We report the speed of inference as performed on a laptop with an Intel R© i7 2.5GHz CPU and 16 GB of RAM. Our framework is implemented in Matlab/C using a single thread."
    }, {
      "heading" : "5.1 Curve detection",
      "text" : "To study curve detection we used the Berkeley Segmentation Dataset (BSD500) [1] following the experimental setup described in [9]. The dataset contains natural images and object boundaries manually marked by human annotators. For our experiments, we used the standard split of the dataset with 200 training images and 200 test images. For each image we use the boundaries marked by a single human annotator to define ground-truth binary contour maps J .\nFrom a binary contour map J we generate a noisy image I by sampling each pixel I(x, y) independently from a normal distribution whose mean depends on the value of J(x, y).\nI(x, y) ∼ N(µ(J(x, y)), σ). (21)\nFor our experiments, we used µ(0) = 150, µ(1) = 100, σ = 40. To model binary contour maps we use a first-order Markov process that generates curves of different orientations and varying lengths. The grammar is defined by two symbols: C (oriented curve element) and J (curve pixel). We consider curves in one of 8 possible orientations. For an image of size [n,m], the pose space for for C is an (n×m)×8 grid and the pose space for J is an n×m grid.\nWe can express the rules of the grammar as\nC((x, y), θ)→ J(x, y) 0.05 (22) C((x, y), θ)→ J(x, y), C((x, y) +Rθ(1, 0), θ) 0.73 (23) C((x, y), θ)→ J(x, y), C((x, y) +Rθ(1,+1), θ) 0.11 (24) C((x, y), θ)→ J(x, y), C((x, y) +Rθ(1,−1), θ) 0.11 (25)\nwhere Rθ(x, y) denotes a rotation of (x, y) by θ. Consider generating a “horizontal” curve, with orientation θ = 0, starting at pixel (x, y). The process starts at the brick C((x, y), 0). Expansion of this brick will generate a brick J(x, y) to denote that pixel (x, y) is part of a curve in the scene. Expansion of C((x, y), 0) with the first rule ends the curve, while expansion with one of the other rules continues the curve in one of the three pixels to the right of (x, y).\nThe values on the right of the rules above indicate their probabilities. To learn the rule probabilities and self-rooting parameters, we used the approach outlined in Section 4. We show random contour maps J generated by this grammar in Figure 1. The model generates multiple curves in a single image due to the self-rooting parameters.\nIn Figure 3 we show curve detection results using the curve grammar for some examples from the BSDS500 test set (see the supplementary material for more results). We illustrate the estimated probability that each pixel is part of\na curve, P (X(J, (x, y)) = 1|I). This involves running LBP in the factor graph representing the curve grammar. For inference with an observed image, I , we use the model in equation (21). In the factor graph, this means the variable X(J, (x, y)) is connected to and receives a fixed-message from I(x, y). Inference on a (481× 321) test image took 1.5 hours.\nFor a quantitative evaluation we compute an AUC score, corresponding to the area under the precision-recall curve obtained by thresholding P (X(J, (x, y)) = 1|I). We also evaluate a baseline “no-context” model, where the probability that a pixel belongs to a curve is computed using only the observation at that pixel. The grammar model obtained an AUC score 0.71 while the no-context baseline achieved an AUC score of 0.11. For comparison, in [9] an AUC score of 0.73 was reported for the single-scale Field-of-Patterns (FOP) model.1\nThe use of contextual information defined by the curve grammar described here significantly improves the curve detection performance. Although our method performed well in detecting curves in extremely noisy images, the model has some trouble finding curves with high curvature. We believe this is primarily because the grammar we used does not have a notion of curvature. It is possible to define more detailed models of curves to improve performance. However, we note that a simple first-order model of curves with no curvature information is sufficient to compete well against other approaches such as [9]."
    }, {
      "heading" : "5.2 Face Localization",
      "text" : "To study face localization, we performed experiments on the Faces in the Wild dataset [13]. The dataset contains faces in unconstrained environments. Our goal for this task is to localize the face in the image, as well as face parts such as eyes, nose, and mouth. We randomly select 200 images for training, and 100 images for testing. Although the dataset comes annotated with the identity of the persons in the image, it does not come with part annotations. We manually annotate all training and test images with bounding box information for the parts: Face, Left eye, Right eye, Nose, Mouth. Examples of the manual annotation are shown in Figure 4.\nThe face grammar has symbols Face (F ), Left eye (L), Right eye (R), Nose (N ), and Mouth (M ). Each symbol has an associated set of poses of the form (x, y, s), which represent a position and scale in the image. We refer to the collection of {L,R,N,M} symbols as the parts of the face. The grammar has a single rule of the form F → {L,R,N,M}. We express the geometric relationship between a face and each of its parts by a scale-dependent\n1The contour maps used in [9] may differ from ours since images in the BSDS500 have multiple annotations.\noffset and region of uncertainty in pose space. The offset captures the mean location of a part relative to the face, and the region of uncertainty captures variability in the relative locations.\nConcretely, suppose we had a Face with pose (x, y, s). Then, for each part Z ∈ {L,R,N,M}, the Face would expand to a part Z somewhere in a uniform region centered at (x′, y′) = (x, y) + sbZ . Having a part-dependent base offset bZ allows us to express information such as “the mouth is typically near the bottom of the face” and “the nose is typically near the middle of the face”. The dependence of the offset on the scale s of the Face allows us to place parts in their correct position independent of the Face size. We model the relationship between scales of a Face and a part in a similar way. Modeling the relation between scales allows us to represent concepts such as large faces tending to have large parts. We learn the geometric parameters such as the part offsets by collecting statistics in the training data.\nFigure 1 shows samples of scenes with one face generated by the grammar model we estimated from the training images in the face dataset. Note the location and scale of the objects varies significantly in different scenes, but the relative positions of the objects are fairly constrained. Samples of scenes with multiple faces are included in the supplemental material.\nOur data model is based on HOG filters [4]. We train HOG filters using publicly-available code from [6]. We train separate filters for each symbol in the grammar using our annotated images to define positive examples. Our negative examples are taken from the PASCAL VOC 2012 dataset [5], with images containing the class “People” removed.\nThe score of a HOG filter is real-valued. We convert this score to a probability using Platt’s method [18], which involves fitting a sigmoid. This allows us to estimate P (X(A,ω) = 1|score) for each symbol A ∈ {F,L,R,N,M}. For the observation model we require a quantity that can be interpreted as P (score|X(A,ω) = 1), up to a proportionality constant. We note that P (score|X(A,ω) = 1) ∝ P (X(A,ω) = 1|score)/P (X(A,ω) = 1). We approximate P (X(A,ω) = 1) using the self-rooting probability, A. To connect the data model to the grammar, the normalized scores of each filter are used to define messages into the corresponding bricks in the factor graph.\nThe result of inference with our grammar model leads to the (approximate) probability that there is an object of each type in each pose in the image. We show detection and localization results on images with multiple faces in the supplementary material. To quantify the performance of the model for localizing the face and its parts on images containing a single face we take the highest probability pose for each symbol. As a baseline we consider localizing each symbol using the HOG filter scores independently, without using a compositional rule.\nFigure 4 shows some localization results. The results illustrate the context defined by the compositional rule is crucial for accurate localization of parts. The inability of the baseline model to localize a part implies the local image evidence is weak. By making use of contextual information in the form of a compositional rule we can perform accurate localization despite locally weak image evidence.\nWe provide a quantitative evaluation of the grammar model the baseline model in Table 1. The Face localization accuracy of both models are comparable. However, when attempting to localize smaller objects such as eyes, context\nbecomes important since the local image evidence is ambiguous. We also ran an experiment with the grammar model without a HOG filter for the face. Here, the grammar is unchanged but there is no data model associated with the Face symbol. As can be seen in the bottom row of Table 1, we can localize faces very well despite the lack of a face data model, suggesting that contextual information alone is enough for accurate face localization. Inference using the grammar model on a (250× 250) test image took 2 minutes."
    }, {
      "heading" : "6 Conclusion",
      "text" : "Probabilistic scene grammars define priors that capture relationships between objects in a scene. By using a factor graph representation we can apply belief propagation for approximate inference with these models. This leads to a robust algorithm for aggregating local evidence through contextual relationships. The framework is quite general and the practical feasibility of the approach was illustrated on two different applications. In both cases the contextual information provided by a scene grammar proves fundamental for good performance."
    }, {
      "heading" : "Acknowledgements",
      "text" : "We would like to thank Stuart Geman and Jackson Loper for many helpful discussions about the topics of this research."
    }, {
      "heading" : "A Contour Detection Results",
      "text" : "Figures 5 and 6 show more contour detection results on images from the BSDS500 at a larger resolution so the reader can examine more details."
    }, {
      "heading" : "B Multiple Faces",
      "text" : "In Figure 7 we show unconstrained samples from the grammar model for faces. Note how the model generates scenes with multiple faces, and also generates parts that appear on their own, since every symbol has a non-zero probability of self-rooting.\nIn Figure 8 we show localization results for images with multiple faces. In this case we show the top K poses for each symbol after performing non-maximum suppression, where K is the number of faces in the image.\nIn general we do not know in advance the number of symbols of each type that are present in the scene. In this case it is not possible to simply select the top K poses for each symbol. A different strategy is to use a threshhold, and select bricks that have marginal probabilities above the threshold to generate detections. The particular threshhold used depends on the desired trade-off between false positives and false negatives. A threshhold for a particular application can be set by examining a Precision-Recall curve. For three example images, we manually selected a single threshhold for detection that leads to good results. In Figure 9 we show all Face bricks with marginal probability above the threshold, after applying non-maximum suppression."
    }, {
      "heading" : "C Contextual Influence",
      "text" : "Figure 10 shows the results of inference when conditioning on various parts being in the image in specific poses. The grammar used here was a simplified version of the face grammar in the main paper. The symbols are Face (F ), Eye (E), Nose (N ), and Mouth (M ). The pose of each symbol is the set of pixels in the image (there is no scale variation). The only compositional rule is F → {E,E,N,M}. Note that we use the same symbol to represent the left and right eyes.\nAs can be seen in Figure 10, when we condition on the presence of a Face at a particular position (first row), the model “expects” to see parts of the face in certain regions in the image. When we condition on the location of an Eye (second row), the model does not know whether the Eye should be a left eye or right eye, hence there are two modes for the location of the Face, and two modes for the location of another Eye. Intuitively LBP is performing the following chain of reasoning: (1) the eye that is known to be present can be a left or right eye, (2) there are two possible regions of the image in which the face can occur, depending on whether the eye that is known to be present is a left or right eye, and finally (3) given each possible pose for the face, the other parts of the face should be located in a particular spatial configuration. When we condition on more parts, LBP can infer that it is more likely for the face to be in one region of the image over another region, and the beliefs for the other face parts reflect this reasoning."
    } ],
    "references" : [ {
      "title" : "Contour detection and hierarchical image segmentation",
      "author" : [ "Pablo Arbelaez", "Michael Maire", "Charless Fowlkes", "Jitendra Malik" ],
      "venue" : "IEEE Transactions on Pattern Analysis and Machine Intelligence,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2011
    }, {
      "title" : "Compositionality, MDL priors, and object recognition",
      "author" : [ "Elie Bienenstock", "Stuart Geman", "Daniel Potter" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 1997
    }, {
      "title" : "A probabilistic approach to object recognition using local photometry and global geometry",
      "author" : [ "Michael Burl", "Markus Weber", "Pietro Perona" ],
      "venue" : "In European Conference on Computer Vision,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 1998
    }, {
      "title" : "Histograms of oriented gradients for human detection",
      "author" : [ "Navneet Dalal", "Bill Triggs" ],
      "venue" : "In IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2005
    }, {
      "title" : "The PASCAL Visual Object Classes Challenge 2012",
      "author" : [ "M. Everingham", "L. Van Gool", "C.K.I. Williams", "J. Winn", "A. Zisserman" ],
      "venue" : null,
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2012
    }, {
      "title" : "Pictorial structures for object recognition",
      "author" : [ "Pedro F. Felzenszwalb", "Daniel P. Huttenlocher" ],
      "venue" : "International Journal of Computer Vision,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2005
    }, {
      "title" : "Object detection grammars",
      "author" : [ "Pedro F. Felzenszwalb", "David McAllester" ],
      "venue" : "Univerity of Chicago Computer Science Technical Report 2010-02,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2010
    }, {
      "title" : "Multiscale fields of patterns",
      "author" : [ "Pedro F. Felzenszwalb", "John G. Oberlin" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2014
    }, {
      "title" : "Learning a hierarchical compositional shape vocabulary for multi-class object representation",
      "author" : [ "Sanja Fidler", "Marko Boben", "Aleš Leonardis" ],
      "venue" : "In ArXiv:1408.5516,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2014
    }, {
      "title" : "The representation and matching of pictorial structures",
      "author" : [ "Martin A. Fischler", "Robert A. Elschlager" ],
      "venue" : "IEEE Transactions on computers,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 1973
    }, {
      "title" : "Object detection with grammar models",
      "author" : [ "Ross B. Girshick", "Pedro F. Felzenszwalb", "David Mcallester" ],
      "venue" : "In Advances in Neural Information Processing Systems,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2011
    }, {
      "title" : "Labeled faces in the wild: A database for studying face recognition in unconstrained environments",
      "author" : [ "Gary B. Huang", "Manu Ramesh", "Tamara Berg", "Erik Learned-Miller" ],
      "venue" : "Technical Report 07-49,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2007
    }, {
      "title" : "Context and hierarchy in a probabilistic image model",
      "author" : [ "Ya Jin", "Stuart Geman" ],
      "venue" : "In IEEE Conference on Computer Vision and Pattern Recognition,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2006
    }, {
      "title" : "Factor graphs and the sum-product algorithm",
      "author" : [ "Frank R Kschischang", "Brendan J Frey", "Hans-Andrea Loeliger" ],
      "venue" : "IEEE Transactions on Information Theory,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2001
    }, {
      "title" : "Foundations of statistical natural language processing",
      "author" : [ "Christopher D Manning", "Hinrich Schütze" ],
      "venue" : null,
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 1999
    }, {
      "title" : "Loopy belief propagation for approximate inference: An empirical study",
      "author" : [ "Kevin P. Murphy", "Yair Weiss", "Michael I. Jordan" ],
      "venue" : "In Uncertainty in Artificial Intelligence,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 1999
    }, {
      "title" : "Probabilities for SV machines. In Advances in Large Margin Classifiers, pages 61–74",
      "author" : [ "John C. Platt" ],
      "venue" : null,
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 1999
    }, {
      "title" : "The algorithmic beauty of plants",
      "author" : [ "Przemyslaw Prusinkiewicz", "Aristid Lindenmayer" ],
      "venue" : null,
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 1991
    }, {
      "title" : "Image parsing: Unifying segmentation, detection, and recognition",
      "author" : [ "Zhuowen Tu", "Xiangrong Chen", "Alan L. Yuille", "Song-Chun Zhu" ],
      "venue" : "International Journal of computer vision,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : "20",
      "year" : 2005
    } ],
    "referenceMentions" : [ {
      "referenceID" : 15,
      "context" : "We show how to represent the distributions defined by probabilistic scene grammars using factor graphs, and we use loopy belief propagation (LBP) [17, 15] for approximate inference.",
      "startOffset" : 146,
      "endOffset" : 154
    }, {
      "referenceID" : 13,
      "context" : "We show how to represent the distributions defined by probabilistic scene grammars using factor graphs, and we use loopy belief propagation (LBP) [17, 15] for approximate inference.",
      "startOffset" : 146,
      "endOffset" : 154
    }, {
      "referenceID" : 14,
      "context" : "Probabilistic grammars and compositional models are widely used for parsing sentences in natural language processing [16].",
      "startOffset" : 117,
      "endOffset" : 121
    }, {
      "referenceID" : 17,
      "context" : "Recursive descriptions of objects using grammars and production rules have also been widely used in computer graphics to generate geometric objects, biological forms, and landscapes [19].",
      "startOffset" : 182,
      "endOffset" : 186
    }, {
      "referenceID" : 12,
      "context" : "The models we consider are closely related to the Markov backbone model in [14].",
      "startOffset" : 75,
      "endOffset" : 79
    }, {
      "referenceID" : 1,
      "context" : "Other related approaches include [2, 20, 8, 21, 12, 10].",
      "startOffset" : 33,
      "endOffset" : 55
    }, {
      "referenceID" : 18,
      "context" : "Other related approaches include [2, 20, 8, 21, 12, 10].",
      "startOffset" : 33,
      "endOffset" : 55
    }, {
      "referenceID" : 6,
      "context" : "Other related approaches include [2, 20, 8, 21, 12, 10].",
      "startOffset" : 33,
      "endOffset" : 55
    }, {
      "referenceID" : 10,
      "context" : "Other related approaches include [2, 20, 8, 21, 12, 10].",
      "startOffset" : 33,
      "endOffset" : 55
    }, {
      "referenceID" : 8,
      "context" : "Other related approaches include [2, 20, 8, 21, 12, 10].",
      "startOffset" : 33,
      "endOffset" : 55
    }, {
      "referenceID" : 9,
      "context" : "The models we consider generalize part-based models for object detection such as pictorial structures [11, 7] and constellations of features [3].",
      "startOffset" : 102,
      "endOffset" : 109
    }, {
      "referenceID" : 5,
      "context" : "The models we consider generalize part-based models for object detection such as pictorial structures [11, 7] and constellations of features [3].",
      "startOffset" : 102,
      "endOffset" : 109
    }, {
      "referenceID" : 2,
      "context" : "The models we consider generalize part-based models for object detection such as pictorial structures [11, 7] and constellations of features [3].",
      "startOffset" : 141,
      "endOffset" : 144
    }, {
      "referenceID" : 12,
      "context" : "The approach is based on the Markov backbone from [14].",
      "startOffset" : 50,
      "endOffset" : 54
    }, {
      "referenceID" : 15,
      "context" : "To perform approximate inference with the factor graph representation, we use loopy belief propagation (LBP) [17, 15].",
      "startOffset" : 109,
      "endOffset" : 117
    }, {
      "referenceID" : 13,
      "context" : "To perform approximate inference with the factor graph representation, we use loopy belief propagation (LBP) [17, 15].",
      "startOffset" : 109,
      "endOffset" : 117
    }, {
      "referenceID" : 0,
      "context" : "1 Curve detection To study curve detection we used the Berkeley Segmentation Dataset (BSD500) [1] following the experimental setup described in [9].",
      "startOffset" : 94,
      "endOffset" : 97
    }, {
      "referenceID" : 7,
      "context" : "1 Curve detection To study curve detection we used the Berkeley Segmentation Dataset (BSD500) [1] following the experimental setup described in [9].",
      "startOffset" : 144,
      "endOffset" : 147
    }, {
      "referenceID" : 7,
      "context" : "For comparison, in [9] an AUC score of 0.",
      "startOffset" : 19,
      "endOffset" : 22
    }, {
      "referenceID" : 7,
      "context" : "However, we note that a simple first-order model of curves with no curvature information is sufficient to compete well against other approaches such as [9].",
      "startOffset" : 152,
      "endOffset" : 155
    }, {
      "referenceID" : 11,
      "context" : "2 Face Localization To study face localization, we performed experiments on the Faces in the Wild dataset [13].",
      "startOffset" : 106,
      "endOffset" : 110
    }, {
      "referenceID" : 7,
      "context" : "We express the geometric relationship between a face and each of its parts by a scale-dependent 1The contour maps used in [9] may differ from ours since images in the BSDS500 have multiple annotations.",
      "startOffset" : 122,
      "endOffset" : 125
    }, {
      "referenceID" : 3,
      "context" : "Our data model is based on HOG filters [4].",
      "startOffset" : 39,
      "endOffset" : 42
    }, {
      "referenceID" : 4,
      "context" : "Our negative examples are taken from the PASCAL VOC 2012 dataset [5], with images containing the class “People” removed.",
      "startOffset" : 65,
      "endOffset" : 68
    }, {
      "referenceID" : 16,
      "context" : "We convert this score to a probability using Platt’s method [18], which involves fitting a sigmoid.",
      "startOffset" : 60,
      "endOffset" : 64
    } ],
    "year" : 2016,
    "abstractText" : "We consider a class of probabilistic grammars for generating scenes with multiple objects. Probabilistic scene grammars capture relationships between objects using compositional rules that provide important contextual cues for inference with ambiguous data. We show how to represent the distribution defined by a probabilistic scene grammar using a factor graph. We also show how to efficiently perform message passing in this factor graph. This leads to an efficient approach for inference with a grammar model using belief propagation as the underlying computational engine. Inference with belief propagation naturally combines bottom-up and top-down contextual information and leads to a robust algorithm for aggregating evidence. We show experiments on two different applications to demonstrate the generality of the framework. The first application involves detecting curves in noisy images, and we address this problem using a grammar that generates a collection of curves using a first-order Markov process. The second application involves localizing faces and parts of faces in images. In this case, we use a grammar that captures spatial relationships between the parts of a face. In both applications the same framework leads to robust inference algorithms that can effectively combine weak local information to reason about a scene.",
    "creator" : "LaTeX with hyperref package"
  }
}