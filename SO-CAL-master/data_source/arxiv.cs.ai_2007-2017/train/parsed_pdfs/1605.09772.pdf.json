{
  "name" : "1605.09772.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Technical Report: Directed Controller Synthesis of Discrete Event Systems",
    "authors" : [ "Daniel Ciolek", "Victor Braberman", "Nicolás D’Ippolito", "Sebastián Uchitel" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n60 5.\n09 77\n2v 1\n[ cs\n.S Y\n] 3\n1 M\nay 2\n01 6\nI. INTRODUCTION\nDiscrete Event Systems (DES) are dynamic systems that react to the occurrence of diverse discrete events. DES arise in many domains including robotics, logistics, manufacturing, and communication networks. These applications require control and coordination to ensure that the system goals are achieved. Numerous techniques for automatically verifying the correctness of controllers have been devised in the area of model checking. A different yet related approach, Controller Synthesis, pursues the automatic construction of controllers satisfying a formal specification.\nThe field of synthesis of controllers for DES was introduced by Ramadge and Wonham [1] for controlling systems within a given set of constraints. In this setting, the environment (also called plant) and goals are specified using a formal language, and a procedure generates a correct by construction controller (or supervisor). The environment is usually modeled with state machines whose event sets are partitioned into controllable and uncontrollable actions. A controller must achieve its goals by dynamically disabling some of the controllable actions.\nAn alternative formulation of the controller synthesis problem considers the setting of ω-regular languages [2], instead of an automata-based DES. In this setting two-player games with Boolean objectives (where a win of one player coincides with a loss by the other player) have been suggested to reason about the interaction between the program and the environment [3], [4].\nWe address control problems for behavior models expressed as deterministic Labeled Transition Systems (LTS)\n1. Departamento de Computación, Universidad de Buenos Aires, Argentina 2. Department of Computing, Imperial College, London, UK 3. CONICET\nThis work was submitted to the 55th IEEE Conference on Decision and Control and was partially supported by grants ERC PBM-FIMBSE, ANPCYT PICT 2011-1774, ANPCYT PICT 2012-0724, ANPCYT PICT 2013- 2341, UBACYT 20020130100384BA, UBACYT 20020130300036BA, CONICET PIP 112 201301 00688 CO, PIDDEF 04/ESP/15/BAA.\nand parallel composition (‖) defined broadly as a synchronous product. This setting allows to ease the modeling of complex environments by describing its behavior compositionally. Such descriptions are compact and, hence, obtaining the complete behavior of the environment via composition produces an exponential explosion. For this reason we want to avoid the computation of the composition ahead of time, building it on-the-fly instead (hopefully obtaining a solution by exploring a reduced portion of the state space).\nHereinafter we present the Directed Controller Synthesis (DCS) of DES for safety and co-safety (i.e. reachability) goals. Informally, we want the controller to always avoid safety violations while eventually ensuring co-safety objectives. More formally, we make use of the Linear Temporal Logic (LTL) [5] operators. Thus, given the model of the environment components E0, . . . , En, the safety goal GS and the co-safety goal GC , we look for a component M such that when composed with the environment it satisfies the goals, namely E0‖ . . . ‖En‖M |= ¬GS ∧ ♦GC .\nDCS explores the solution space for reactive controllers on-the-fly guided by a domain-independent heuristic. The main contribution of this paper is the heuristic derived from an abstraction of the environment that exploits the componentized way in which complex environments are described. We highlight that componentization not only simplifies modeling, but also allows for preprocessing procedures that can improve the applicability of controller synthesis techniques.\nThe paper is organized as follows. Section II comments on previous and related work. Section III provides background. Section IV comments on details to take into account during the on-the-fly exploration of the state space. Section V presents the LTS abstraction and a heuristic derived from it. Section VI reports on the results obtained with our implementation. Finally, section VII discuses some conclusions and avenues for future work."
    }, {
      "heading" : "II. RELATED WORK",
      "text" : "Traditional controller synthesis techniques for safety objectives look for maximal (i.e. least restrictive) controllers [6], since safety properties can many times be trivially satisfied by restricting the system to an unproductive zone. Maximality comes at a cost in complexity given that it requires to explore the complete state space.\nMonolithic approaches to controller synthesis work with the complete state space but, since it is exponential with respect to the size of the components, explicit representations are impractical. The Model Based Planner (MBP) presented in [7] uses Binary Decision Diagrams (BDD) [8] to keep a symbolic representation of the state space, in an attempt to cope with the state explosion problem. MBP is based on\nthe NuSMV model checker and hence, its input is a model described in the SMV language, implementing different variations of goals (including liveness with CTL).\nContrarily to monolithic approaches, compositional approaches to controller synthesis (as the one implemented by Supremica [9]) build a controller for each component, such that when composed achieve the system requirements. Although this allows to greatly reduce the impact of the state explosion problem it also restricts its application to simple goals, such as safety, since it is not possible to guarantee composability for richer goals.\nController synthesis is also related to the area of Automated Planning, a branch of artificial intelligence. However, the work in planning has been oriented mainly towards nonreactive environments, which are insufficient in the setting in which controller synthesis is applied. MBP provides a translation from a planning input to an SMV script and shows that a planning problem can be solved as a control problem by taking advantage of the advances on model checking [10].\nIn planning the state space is usually represented explicitly, but the construction is performed on-the-fly guided by heuristics [11]. Informed search procedures – like A* [12] – are used to perform a goal-directed exploration, generally obtaining a solution by inspecting a reduced portion of the state space. Many variations of the planning problem have been attacked this way and some – especially those that contemplate nondeterminism such as FOND planning [13] – are closely related to controller synthesis.\nInspired by planning, informed search procedures have been introduced in model checking to accelerate the search for an error [14], [15]. Although with this approach a trace to an error can be found faster, verifying the correctness of a model still requires to explore the complete state space. Despite the positive results of these techniques, their application to controller synthesis has been scarcely explored.\nIn [16] an on-the-fly synthesis method is presented for discrete and dense-time system, using depth-first search without a heuristic guide. For linear hybrid systems, an on-the-fly informed search algorithm is presented in [17], which excels at design space exploration by quickly assessing whether a problem has no solution, rather than guiding the exploration towards a goal. Finally the Controller Synthesis Module of the CIRCA architecture [18], which works on a timed automaton model, uses heuristics with a limited lookahead and a verification procedure to detect and prune bad choices. In all these approaches the on-the-fly search procedure is similar to ours, but the setting differs since we consider as input the specification of the environment components, and hence the abstractions and heuristics diverge.\nHerein we present an extension to our previous work on the Modal Transition System Analyser (MTSA) [19] tool that now includes the DCS algorithm. As mentioned before, in the present work we focus on safety and co-safety (i.e. reachability) goals, the former being optional while the latter mandatory since the heuristic needs a desirable end to properly direct the search."
    }, {
      "heading" : "III. BACKGROUND",
      "text" : "Definition 1 (Labeled Transition Systems). A Labeled Transition System (LTS) is a tuple E = (S,A,→, s0), where S is a finite set of states, A is its alphabet, →⊆ (S ×A× S) is a transition relation, and s0 ∈ S is the initial state.\nNotation 1. Let E and M be LTSs such that:\n• E = (SE , AE ,→E , s0), with s and s′ states of SE • M = (TM , AM ,→M , t0), with t and t′ states of TM\nNotation 2 (Step). We denote (s, l, s′) ∈→ by s l→ s′.\nDefinition 2 (Parallel Composition). The Parallel Composition (‖) is a symmetric operator such that it yields an LTS E‖M = (SE×TM , AE∪AM ,→E‖M , 〈s0, t0〉), where →E‖M is a relation that satisfies the following rules:\ns l →E s ′\n〈s, t〉 l →E‖M 〈s′, t〉\nl∈(AE\\AM ) t\nl →M t ′\n〈s, t〉 l →E‖M〈s, t′〉\nl∈(AM\\AE)\ns l →E s ′, t l →M t ′\n〈s, t〉 l →E‖M 〈s′, t′〉\nl∈(AE∩AM )\nExample 1. In Fig.1 we show an example of the application of the parallel composition operator (‖). Note that synchronizing actions produce an update in the states of both LTSs, while nonshared actions produce an update in only one LTS at a time. Observe also that shared actions that are not available from both LTSs at a given point cannot be executed (e.g. d available from t0 but not from s0 cannot be executed from the initial state 〈s0, t0〉).\nGiven a partition of the alphabet in controllable and uncontrollable actions, a controller M must achieve its goal G by disabling some of the controllable actions in E, while only monitoring uncontrollable actions. We say that a controller M satisfies a goal G in an environment E if and only if every trace accepted by E‖M satisfies G.\nDefinition 3 (Trace). A trace of an LTS E is a sequence of labels π=l0, l1 . . . of AE , for which there exists a sequence of states s0, s1, . . . of SE such that ∀i≥0 . si li→E si+1.\nDefinition 4 (Safety). We say that a trace π satisfies a safety goal GS given as a set of labels, if and only if a label of GS never occurs in π.\nDefinition 5 (Co-Safety). We say that a trace π satisfies a co-safety goal GC given as a set of labels, if and only if there is at least one occurrence of a label of GC in π.\nExample 2. In Fig.2 we show two controllers for EI‖EII that are guaranteed to reach {d} assuming that only a, b and c are controllable. The controller in Fig.2a simply disables a from the initial state to avoid entering a state where d is no longer reachable. Note that this controller does not force the order of actions b and c, that is, it imposes the least restrictive constraints. On the other hand, the controller in Fig.2b forces the order between actions b and c, hence, despite being correct it is not a maximal controller.\nNotation 3. States of the composition are ordered pairs, however we may need to refer to the step relation for any ordering. For this purpose we may use the following notation:\n{s, t} l →E‖M{s ′, t′} ⇔〈s, t〉 l →E‖M 〈s ′, t′〉 ∨ 〈s, t〉 l →E‖M 〈t ′, s′〉∨\n〈t, s〉 l →E‖M 〈s ′, t′〉 ∨ 〈t, s〉 l →E‖M 〈t ′, s′〉\nWhen using the set notation we relax the convention that s and s′ belong to E while t and t′ belong to M since the order of the states is made irrelevant.\nNotation 4. For brevity we denote that a set of states s0, s1, . . . , sn belongs to a set q, that is to say that ∀i . 0 ≤ i ≤ n ⇒ si ∈ q, as [s1, s2, . . . , sn]q ."
    }, {
      "heading" : "IV. ON-THE-FLY EXPLORATION",
      "text" : "In this section we discuss the main algorithm that constitutes DCS. Given a heuristic function that estimates the distance from a state to a goal, DCS looks for a controller by computing the parallel composition on-the-fly guided by the heuristic. The procedure is a modification of Best First Search (a classical informed search procedure) adapted to account for uncontrollable actions. We keep a priority queue of open states, ordered by their estimated distance to a goal, initialized only with the initial state. At each iteration the algorithm takes the most promising state from the queue and expands a child state following its best unexplored action. The expanded state is evaluated using the heuristic, and it is then inserted in the open queue (the value of the state is set as the estimate of its best unexplored action).\nFor controllable states we need only one successful successor, while for uncontrollable states all their successors have to be able to reach a goal. Thus we allow a controllable state to remain in the open queue as long as it has unexplored actions to broaden the search (i.e. competing with its descendants). Mixed states, that is states with both controllable and uncontrollable actions, are treated as uncontrollable states. This is because mixed states represent a race condition between the controller and the environment, which can always be won by the environment. Thereby the validity of the controller cannot depend on the result of race conditions. This treatment of controllable and uncontrollable nodes is similar to AND/OR search procedures [20].\nWhen a state is recognized either as a co-safety goal or a safety error, it is marked and this information is propagated back to its ancestors until an interrupting state is reached and reopened. The propagation of an error is interrupted when a controllable ancestor with unexplored actions is reached. Whereas, the propagation of a goal is interrupted when an uncontrollable ancestor with unexplored actions is reached. The process is repeated until the initial state is marked as a goal or an error. In the former the states reachable from the initial state form a controller, while in the latter there is no controller.\nObserve that while there is an obvious advantage in exploring the most promising controllable action first, there is no such advantage in exploring the best uncontrollable action since all such actions must lead to a goal. Thus we could avoid the computation of the heuristic for uncontrollable states. Instead we use the reverse ranking and expand the least desirable uncontrollable action first. We do this in an attempt to find an error as fast as possible and consequently being able to close the state avoiding futile exploration.\nIn the worst case, the heuristic misguides the search and the algorithm explores the complete state space. With the additional cost of computing the heuristic for each state, the complexity of the algorithm is worse than its monolithic counterpart. That is, DCS could take an exponential amount of time. In spite of that, if the heuristic accurately guides the exploration with a small computational overhead, great savings could be obtained."
    }, {
      "heading" : "V. ABSTRACTION AND HEURISTIC",
      "text" : "In this section we present the abstraction we use and the heuristic it induces. The main goal of the heuristic is to provide an estimate of the distance from a state to a goal without computing the parallel composition. However, in order to provide informative estimates the effects of synchronization need to be taken into account to some point. For this reason we build an abstraction of the environment that, instead of considering the cross product of states, it works on sets of states. More precisely, if the states contained in the set can synchronize (with the standard parallel composition), then the synchronizing action must be available from the set.\nAt first glance considering the power set of states may seem detrimental, but we also apply a rule of monotonic growth. That is, the reachable sets of states are restricted to\nsets that contain all the traversed states from the initial state. Thus the abstraction size is polynomial with respect to the number of states in the components. We then use the length of the paths that reach a co-safety goal in the abstraction as an estimate of the real distance to the goal."
    }, {
      "heading" : "A. LTS Abstraction and Composition",
      "text" : "Intuitively, we build an abstraction that, once it reaches a point where a state is covered, it never drops a state. The abstraction behaves as if, after a transition, not only a new state is covered but also the source state is not left. This progressively distances the abstraction from the real environment (as it collects states), yet it keeps information about the causal relationship between actions.\nWe begin by defining the LTS abstraction for a single LTS, that yields an LTS whose reachable region forms a sequence of sets of states.\nDefinition 6 (LTS Abstraction). The abstraction of an LTS E is an LTS Ẽ = (2SE , 2AE , E , {s0}), where E is the relation that satisfies:\nq A Eq ′ ⇔ ( ∀s, s′, a . [s]q ∧ s a →Es ′ ⇒ [s, s′]q′ ∧ a∈A )\n∧ (\n∀s′ . [s′]q′ ⇒ [s ′]q ∨ ∃s, a . [s]q ∧ a∈A ∧ s a →Es ′ )\nObserve that in the abstraction not only the states are sets of the original states, but also the labels are sets of the original labels. Furthermore, there is only one set of actions available from each set of states, that is, the maximal set of enabled actions.\nWe now define the abstracting composition, an operation for composing these abstracted LTSs. Informally, this operation works by applying a relaxed synchronization rule that follows that of (‖), but considering sets of states.\nDefinition 7 (Abstracting Composition). The Abstracting Composition ( ≈ ) is a symmetric operator in the spirit of (‖) that yields an abstract LTS Ẽ ≈ M̃ = (SẼ ∪ SM̃ , AẼ ∪ AM̃ , Ẽ ≈ M̃ , m̃0 ∪ t̃0}) and Ẽ ≈ M̃ is the relation that satisfies:\nq A Ẽ ≈ M̃ q ′ ⇔ (\n∀s,s′,t,t′,a . [s,t]q∧〈s,t〉 a →E‖M 〈s ′,t′〉 ⇒ [s′,s,t′,t]q′∧a∈A )\n∧ (\n∀s′ . [s′]q′ ⇒ [s ′]q∨∃s,t,t ′,a . [s, t]q∧a∈A∧{s,t} a →E‖M{s ′, t′} )\nNote that we do not need to compute E‖M since we only check locally that states s and t synchronize following the rules in Def.2.\nProperty 1. Given LTSs E and M the number of sets of states reachable in Ẽ ≈ M̃ is, in worst case, |SE |+ |SM |.\nProof. The proof is immediate given that once every state in SM ∪ SE is included in a set of states q, no other set of states can be reached. Thus, in the worst case each step contributes only one fresh state, leading to |SE |+ |SM | steps before reaching the last possible fresh state.\nExample 3. In Fig.3 we show examples for the LTS abstraction (Def. 6) and the abstracting composition (Def. 7) of LTSs EI and EII . In Fig.3a the abstraction of EI is depicted. The first step of ẼI is constituted by the actions a and b (the actions available from s0), reaching a set of states with s1 (the target\nof a) and s2 (the target of b), plus states already reached in previous steps (i.e. s0). The second step only adds the action d available from s2 reaching s3, once all the reachable states are included in the set a self loop captures potential infinite behaviours.\nIn Fig.3b a similar construction is shown for the abstracting composition between ẼI and ẼII . Note that despite the fact that d is available from t0 it is not available from {s0, t0} since it is a synchronizing action not enabled at s0.\nDespite looking very dissimilar there is a strong relation between a model and its abstraction. In particular if π is a trace of E‖M , π is a path contained in Ẽ ≈ M̃ . We say that a sequence of actions π=l0, l1 . . . is a contained path in Ẽ ≈ M̃ if and only if there is a trace Π=L0, L1 . . . of Ẽ ≈ M̃ such that ∀i . li ∈ Li. Moreover, we may abuse notation and denote that for a given label li exists a set Li such that li ∈ Li ∧ q Li Ẽ ≈ M̃ q ′ using directly li as the label of the transition as follows: q li Ẽ ≈ M̃ q\n′. Note that by Def. 7 every trace of E‖M is a path contained in Ẽ ≈ M̃ . However, not every contained path can be mapped to a trace in E‖M . Therefore after computing the abstraction some paths will relate to traces while others will not, yet a priori we have no way to distinguish between these cases. We can easily filter some paths that are obviously uninteresting, such as the paths that contain noncomponent-steps or nonsynchronizing-steps (e.g. s0 c →ẼI ≈ ẼII t2). For this reason we define abstracting path to more precisely capture the notion of path that will help us estimate the distance to a goal.\nDefinition 8 (Abstracting Path). We say that a sequence of actions l0, l1, . . . is an abstracting path of Ẽ ≈ M̃ if and only if there is a sequence of states s0, s1, . . . of SE ∪ SM and a sequence of sets of states q0, q1, . . . of SẼ ≈ M̃ such that:\n∀i . ([si]qi ∧ qi li Ẽ ≈ M̃ qi+1 ∧ ∃t,t ′ . {si, t} li→E‖M {si+1, t ′})∨ (si=si+1 ∧ li=τ )\nThis definition allows not only for valid intra-LTS steps (e.g. s0 a →ẼI ≈ ẼIIs1), but it also allows for inter-LTS steps as long as they are potential synchronization steps (e.g. s0 a →ẼI ≈ ẼII t1). This is important since an isolated component may not be able to reach a goal, but it may be necessary for an intermediate synchronization step. Observe that we add a\nspecial action τ to “delay” a step from a state [si]qi to actions available from [si]qi+1 . This allows to consider paths that skip necessary synchronization steps, while still considering them in the estimation. This definition filters the paths that are not solely constituted by these intra-LTS and inter-LTS steps. However, it remains that not every abstracting path is a trace, yet we use the length of these paths as an estimate of the expected distance to a co-safety goal.\nProperty 2. Given LTSs E and M every trace π of E‖M is an abstracting path of Ẽ ≈ M̃ .\nProof. The proof is straightforward, since given that π = l0, l1, . . . is a trace of E‖M there exists a sequence of states:\n〈s0, t0〉 l0→E‖M 〈s1, t1〉 l1→E‖M . . .\nThen by Def. 7 there exists a sequence of sets of states q0, q1, . . . such that ∀i . [si, ti]qi and\nq0 l0 Ẽ ≈ M̃ q1 l1 Ẽ ≈ M̃ . . .\nTherefore by Def. 8 π is an abstracting path of Ẽ ≈ M̃ .\nWe compute the estimate simply by taking the length of an abstracting path that reaches a co-safety goal. Paths that reach a safety violation are considered to have an infinite (∞) distance to the goal. Interestingly, this can never overestimate the distance to the goal, but it can underestimate it. Heuristics that do not overestimate the distance to the goal are called admissible and have been studied in the literature since they enjoy useful properties (e.g. early error detection).\nLemma 1 (Admissibility). The length of an abstracting path that reaches a co-safety goal is an admissible heuristic, that is, it does not overestimate the distance to the goal.\nProof. Note that in the worst case a path π reaching a goal is a trace of the environment, thus its length estimates exactly the distance to the goal. In any other case π is not a valid sequence of actions of the environment, that is to say is an artifact of the weakened composition rules of the abstraction. Hence π may skip some necessary intermediate steps required to actually reach the goal in the environment. Therefore, the length of π underestimates the distance to the goal."
    }, {
      "heading" : "B. Heuristic Computation",
      "text" : "In this section we show how we build the abstraction and compute the heuristic estimates for the actions available from a given state. For computing the heuristic we need all the abstracting paths reaching a goal or an error from an initial state. For this we build a graph whose paths are all such abstracting paths, which is naturally induced from Def. 8. However, instead of explicitly representing the special action τ , we represent the “distance” between states by a positive integer that we call generation.\nDefinition 9 (Generation). Given an abstracted LTS Ẽ we define the generation of a state s of SẼ as the index g of the sequence of sets of states of Ẽ in which the state s appears for the first time, denoted sg. More formally,\ns g ⇔ g = max\ni { i | ∀ 0 ≤ j < i, ∃lj . qj\nlj Ẽ qj+1 ∧ s 6∈ qj}\nThe generation is useful since given a transition from a state si into sj with generations n and m respectively, we can deduce the “distance” between them by subtracting |m−n|.\nDefinition 10 (Abstracting Path Graph). Given LTSs E and M , the Abstracting Path Graph of Ẽ ≈ M̃ is a graph G(Ẽ ≈ M̃) = (V , E , gen) where:\n• V = SE ∪ SM , is a set of vertices formed by states • E = {(si, l, sj) | ∃q, q ′, t, t′ . [si, t]q ∧ q l Ẽ ≈ M̃ q ′ ∧\n{si, t} l →E‖M {sj , t ′}}, is a set of labeled edges • gen : V → N, is a function mapping states to their\nrespective generations Informally, two vertices of the graph are connected by an edge if and only if there is a step, connecting the corresponding states, that is part of an abstracting path.\nExample 4. In Fig.4 we show the abstracting path graph of ẼI ≈ ẼII . Each edge of the graph represents a possible step in the abstraction that is a part of an abstracting path. The first column of the graph contains the states at generation 0 (s0 and t0), the second column contains the fresh states at generation 1 (s1, s2, t1 and t2), while the third column contains the fresh states at generation 3 (s3). An edge that skips one or more columns (or generations) represents a fragment of an abstracting path with τ -steps. For example, the edge labeled d connecting t0 with s3 represents a τ -step followed by action d. This is because d is not available from the initial state and is delayed (i.e. the path has a length of 2).\nWe can use this graph to build a ranking of the available actions from the initial state of EI‖EII , namely 〈s0, t0〉, by measuring the distance to the co-safety goal {d}. The available actions are a, b and c (as mentioned before d is disabled from the initial state). The shortest paths to d starting with b and c have a length of 2, while there are no paths reaching d starting with a. Hence, we estimate an infinite distance to the goal for every path starting with a. Ranking the actions by these estimates directs us to explore the actions b and c. In spite of that, we are underestimating the distance to the goal since our estimation assumes that immediately after either b or c we would be able to execute d. This is an artifact of the weak composition rules since both b and c need to be executed (in any order) before d. Still, these estimates effectively guide the exploration towards the goal.\nIn Fig. 5 we present a procedure that given a state 〈sE0 , . . . , sEn〉 of the composition E0‖ . . . ‖En, and sets of actions desired to reach and to avoid , it returns the information required to compute a heuristic ranking:\n1) errors , a set of states that do not conduce to a goal. 2) goals , a set of transitions connected by a reach action. 3) edges of the abstracting path graph. 4) generations of the states in the graph.\nThe procedure works by iteratively building the sequence of sets of states produced by the abstraction (Def. 7) and, at the same time, the abstracting path graph (Def. 10). At each iteration a new set qg is considered, where g indicates the current generation. We then compute the set of ready transitions, that is, the steps available from qg following the relaxed synchronization rule from Def. 7. Observe that once a transition is processed it is never considered again. Also note that states are considered errors until they show potential to reach a goal (i.e. deadlock states are treated as errors). Since the procedure processes each transition once its complexity is Θ( ∣\n∣ Ẽ0 ≈ ... ≈ Ẽn\n∣\n∣), which considering the weakened synchronization rules, can be bigger than the actual transitions in the individual components. In the worst case, the complexity cannot surpass the connection of every state by every action, that is to say that its upper-bound complexity is O ( ( ∑n\ni=0 |AEi |)( ∑n i=0 |SEi |) 2 )\n. Once we have built the abstracting path graph, obtaining a ranking for the actions enabled from the state 〈sA, . . . , sN 〉 is straightforward. The states reached by the goals transitions are set with an estimated distance to a goal of 0, while the states in the errors set are set with an ∞ estimated distance. Then, we propagate these estimates from the states to its parents following the edges backwards. For each step we increase the estimated distance between parent and child according to the information stored in the generations map.\nFor a state with multiple children we keep as an estimate the minimum of its children’s, since we are interested in reaching the goal as fast as possible. When this back-propagation ends, all the enabled actions have an estimated distance to the goal, thus it is just a matter of sorting them with respect to these values. However, the same action could have multiple estimated values since we allow not only intra-LTS transitions but also inter-LTS transitions; in these cases we keep the best (minimum) estimate.\nSummarizing, the procedure computes – through the construction of the graph – the length of the abstracting paths starting at a given initial state and reaching a co-safety goal. The algorithm concentrates on the best estimates, which are used to guide the on-the-fly exploration. Thus, it effectively computes an admissible heuristic, since it can never overestimate the distance to the goal (Lemma 1)."
    }, {
      "heading" : "VI. EVALUATION",
      "text" : "In this section we report on an evaluation of DCS. We compare DCS with three other approaches running on an Intel i7-3770 with 8GB of RAM:\n1) Monolithic explicit state representation, previously implemented in MTSA1 (similar to CTCT [21]). 2) Monolithic symbolic state representation using BDD, implemented in MBP [7]. 3) Compositional explicit state representation implemented in Supremica (SUP) [9].\nThe aim of the evaluation is to assess the gains in scalability with the use of the informed search procedure. For this reason, we want case studies with the capability to scale up to higher complexities. Fortunately, both MBP and Supremica come bundled with the specification for one of the most traditional examples in controller synthesis: Line Transfer (LT); which was first introduced by Wonham [21]. The fact that the models were written by the tools authors’ is important because it reduces the impact of a threat to validity that would be an ill-designed model. However, in order to be able to scale the problem up we had to extend the models, yet we maintain the same structure.\nGiven the complexity of: writing identical specifications in the different formal languages, finding examples that can be scaled up and presenting the results; we opt for concentrating in varying three independent parameters for the LT. This gives us a big enough number of environments with different topologies to evaluate the techniques. Still, this represents another threat to validity, since ideally the techniques should be compared with a more diverse set of inputs.\nThe LT consists of series of machines M1,M2, . . . ,Mn connected by buffers B1, B2, . . . , Bn and ending in a special machine called Test Unit (TU ). A machine Mi takes work pieces from the buffer Bi−1 (with the exception of machine M1 that takes the work pieces from the outside). After an undetermined amount of time, the working machine Mi outputs a processed work piece through buffer Bi. Finally, when a work piece reaches the TU it can be accepted and\n1Available at https://bitbucket.org/dciolek/mtsa\ntaken out of the system or it can be rejected and placed back in buffer B1 for reprocessing. The only controllable actions in this case study are the taking of work pieces. An error ensues if a machine tries to take a work piece from an empty buffer or if it tries to place a processed work piece in a full buffer. One of the goals for the controller is to avoid the actions that lead to errors, the other goal is to reach a state where a processed work piece can be accepted or rejected. We do not require the controller to achieve accepted pieces as acceptance and rejection are not decided by the controller.\nThe case study can be scaled in three directions:\n1) Machines (M): number of interconnected machines. 2) Workload (W): maximum number of work pieces a\nmachine can process simultaneously. 3) Capacity (C): capacity of the buffers.\nExample 5. In Fig. 6 we present the TL model as accepted by MTSA, given in the Finite State Processes modeling language (FSP). Technically, FSP is a process calculus, in the spirit of CSP, designed to be easily machine and human readable. FSP includes standard constructs such as action prefix (->), external choice (|), alphabet extension (+) and parallel composition (||).\nWe model the Machines and TU separately; and afterwards the Buffer. The Machine starts idle and can get as many work pieces as its workload allows it. Uncontrollably the processing ends and the element is put in the next buffer. The TU gets an element from the last buffer and can either accept it or reject it making it return to the first buffer. Note that on attempting an invalid operation the Buffer goes into an ERROR state (i.e. a deadlock). The ||Plant process represents the parallel composition between all the processes.\nIn Table I we consider some “small scale” cases, in which we consider all the combinations of the parameters for the following values: M in [4, 5, 6], W in [1, 2, 3], C in [1, 2, 3].\nWe report the time in seconds required by each tool to synthesize a controller with a Time Out (TO) of 30 minutes.\nAs it can be seen in the table, the number of states in the environment grows very quickly and it soon takes the tools to their limits. Nonetheless, DCS is able to solve all the problems under the second mark. MTSA soon runs Out of Memory (OM) while, despite also working with a full representation of the environment, MBP solves many problems including large instances. Whereas Supremica outperforms the other methods in the simpler cases but falls short on the more complex ones.\nExample 6. Analyzing the controller generated by DCS for the TL case study, we see that the heuristic guides the search for the controller disregarding unnecessary actions such as simultaneously processing multiple work pieces. The controller found by DCS is roughly a sequence of states such that each state is connected with the following with interleaving get and put actions until an accept or reject becomes available. In Fig.7 we show the controller generated by DCS for 2 machines. Despite the fact that the technique pursues a reachability objective, it accidentally finds controllers with cyclic behavior, this is caused by the reopening of already explored states. However, this is not to be expected in general.\nIn a second experiment we assess the boundaries of the technique using “big scale” cases shown in Fig. 8. We remove the other techniques from the evaluation since they cannot tackle these problems. For ease of presentation we report on a subset of the combinations of the parameters where W and C take the same values. Note that W and C are directly related with the number of states in the Machine and Buffer LTSs respectively, while M relates to the number of components. Thus, the evaluation still allows to see how the technique performs as the complexity and the number of components increase independently.\nSummarizing, we have evaluated DCS against other approaches to controller synthesis. DCS shows promise given that it is able to cope with increasing complexities beyond the capabilities of similar tools. The largest case tackled by DCS considers an environment with 8.9e2734 states (solved in 1728s) generating a controller with 2503 states."
    }, {
      "heading" : "VII. CONCLUSIONS AND FUTURE WORK",
      "text" : "In this paper we present DCS, a method that looks for a controller exploring the state space on-the-fly guided by a domain-independent heuristic. The method performs better than other approaches both in time and memory for the selected case study, despite its worst case complexity. The approach forgoes maximality since reachability goals allow for a directed search in a reduced portion of the state space.\nThe risk of DCS is that it could fail to properly guide the exploration, triggering an unnecessary large exploration of the state space. Thus, despite our efforts to keep the approach as general as possible, further experiments are required in order to properly asses the generality of the technique. For this reason we plan to work on automatic translations to simplify the comparison with other tools.\nThese preliminary results show promise and hence we intend to extend the technique. Our primary concern is to deal with general liveness goals, since the domain of application of controller synthesis usually have these kind of requirements.\nWe highlight that a compact representation of the problem is essential for extracting useful guidance for the informed\nsearch procedure. Thus, when dealing with DES, elements such as components and synchronization provide vital information to take into account. Furthermore, even when the LTS abstraction achieves remarkable results, there are other heuristics that could be used (instead or in combination) that could perform better. The field of directed controller synthesis is almost uncharted, and we believe it can lead to a leap in the applicability of controller synthesis techniques."
    } ],
    "references" : [ {
      "title" : "Supervisory Control of a Class of Discrete Event Processes",
      "author" : [ "P.J. Ramadge", "W.M. Wonham" ],
      "venue" : "SIAM Journal on Control and Optimization, vol. 25, 1987.",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 1987
    }, {
      "title" : "On the Synthesis of a Reactive Module",
      "author" : [ "A. Pnueli", "R. Rosner" ],
      "venue" : "Proc. 16th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL, 1989.",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 1989
    }, {
      "title" : "Decidability of Second-order Theories and Automata on Infinite Trees",
      "author" : [ "M.O. Rabin" ],
      "venue" : "Bulletin of the American Mathematical Society , vol. 74, 1968.",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 1968
    }, {
      "title" : "The Temporal Semantics of Concurrent Programs",
      "author" : [ "A. Pnueli" ],
      "venue" : "Proc. of the Int. Symp. on Semantics of Concurrent Computation , 1979.",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 1979
    }, {
      "title" : "On the Supremal Controllable Sublanguage of a Given Language",
      "author" : [ "Wonham", "W. Murray", "Ramadge", "Peter J." ],
      "venue" : "SIAM Journal on Control and Optimization, vol. 25, no. 3, 1987.",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 1987
    }, {
      "title" : "A Tool for Controller Synthesis via Symbolic Model Checking",
      "author" : [ "A. Gromyko", "M. Pistore", "P. Traverso" ],
      "venue" : "Proceeding of the 8th Int. Workshop on Discrete Event Systems, 2006.",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Binary Decision Diagrams",
      "author" : [ "S.B. Akers" ],
      "venue" : "IEEE Transactions in Computers, vol. 27, 1978.",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 1978
    }, {
      "title" : "Compositional synthesis of discrete event systems using synthesis abstraction",
      "author" : [ "S. Mohajerani", "R. Malik", "S. Ware", "M. Fabian" ],
      "venue" : "Control and Decision Conf., CCDC, 2011.",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Planning as Model Checking",
      "author" : [ "F. Giunchiglia", "P. Traverso" ],
      "venue" : "Recent Advances in AI Planning , vol. 1809 of Lecture Notes in Comp. Sci., 2000.",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 1809
    }, {
      "title" : "Planning as Heuristic Search",
      "author" : [ "B. Bonet", "H. Geffner" ],
      "venue" : "Artificial Intelligence, vol. 129, 2001.",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "A Formal Basis for the Heuristic Determination of Minimum Cost Paths",
      "author" : [ "P.E. Hart", "N.J. Nilsson", "B. Raphael" ],
      "venue" : "SIGART Bulletin, no. 37, 1972.",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 1972
    }, {
      "title" : "Non-Deterministic Planning with Conditional Effects",
      "author" : [ "C.J. Muise", "S.A. McIlraith", "V. Belle" ],
      "venue" : "Proc. 24th Int. Conf. on Automated Planning and Scheduling, ICAPS, 2014.",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Directed Explicit Model Checking with HSF-SPIN",
      "author" : [ "S. Edelkamp", "A. Lluch-Lafuente", "S. Leue" ],
      "venue" : "SPIN, vol. 2057 of Lecture Notes in Comp. Sci., 2001.",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "Adapting an AI Planning Heuristic for Directed Model Checking",
      "author" : [ "S. Kupferschmid", "J. Hoffmann", "H. Dierks", "G. Behrmann" ],
      "venue" : "Model Checking Software, vol. 3925 of Lecture Notes in Comp. Sci., 2006.",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "On-the-fly Controller Synthesis for Discrete and Dense Time Systems",
      "author" : [ "S. Tripakis", "K. Altisen" ],
      "venue" : "Proc. of World Congress on Formal Methods in the development of Computing Systems, vol. 1 of FM, 1999.",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 1999
    }, {
      "title" : "On-the-Fly Control Software Synthesis",
      "author" : [ "V. Alimguzhin", "F. Mari", "I. Melatti", "I. Salvo", "E. Tronci" ],
      "venue" : "Model Checking Software, vol. 7976 of Lecture Notes in Comp. Sci., 2013.",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Exploiting Implicit Representations in Timed Automaton Verification for Controller Synthesis",
      "author" : [ "R.P. Goldman", "D.J. Musliner", "M.J.S. Pelican" ],
      "venue" : "Proc. 5th Int. Workshop of Hybrid Systems: Computation and Control, HSCC, 2002.",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "MTSA: The Modal Transition System Analyser",
      "author" : [ "N. D’Ippolito", "D. Fischbein", "M. Chechik", "S. Uchitel" ],
      "venue" : "Proc. 23rd IEEE/ACM Int. Conf. on Automated Software Engineering , ASE, 2008.",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "On the Optimal Solutions to AND/OR Series-Parallel Graphs",
      "author" : [ "R. Simon", "R.C.T. Lee" ],
      "venue" : "Journal of the ACM, vol. 18, 1971.",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 1971
    }, {
      "title" : "Notes on Control of Discrete-Event Systems.",
      "author" : [ "W. Wonham" ],
      "venue" : "Dep. of Electrical and Comp. Engineering, University of Toronto,",
      "citeRegEx" : "21",
      "shortCiteRegEx" : "21",
      "year" : 1999
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "The field of synthesis of controllers for DES was introduced by Ramadge and Wonham [1] for controlling systems within a given set of constraints.",
      "startOffset" : 83,
      "endOffset" : 86
    }, {
      "referenceID" : 1,
      "context" : "An alternative formulation of the controller synthesis problem considers the setting of ω-regular languages [2], instead of an automata-based DES.",
      "startOffset" : 108,
      "endOffset" : 111
    }, {
      "referenceID" : 2,
      "context" : "In this setting two-player games with Boolean objectives (where a win of one player coincides with a loss by the other player) have been suggested to reason about the interaction between the program and the environment [3], [4].",
      "startOffset" : 224,
      "endOffset" : 227
    }, {
      "referenceID" : 3,
      "context" : "More formally, we make use of the Linear Temporal Logic (LTL) [5] operators.",
      "startOffset" : 62,
      "endOffset" : 65
    }, {
      "referenceID" : 4,
      "context" : "least restrictive) controllers [6], since safety properties can many times be trivially satisfied by restricting the system to an unproductive zone.",
      "startOffset" : 31,
      "endOffset" : 34
    }, {
      "referenceID" : 5,
      "context" : "The Model Based Planner (MBP) presented in [7] uses Binary Decision Diagrams (BDD) [8] to keep a symbolic representation of the state space, in an attempt to cope with the state explosion problem.",
      "startOffset" : 43,
      "endOffset" : 46
    }, {
      "referenceID" : 6,
      "context" : "The Model Based Planner (MBP) presented in [7] uses Binary Decision Diagrams (BDD) [8] to keep a symbolic representation of the state space, in an attempt to cope with the state explosion problem.",
      "startOffset" : 83,
      "endOffset" : 86
    }, {
      "referenceID" : 7,
      "context" : "Contrarily to monolithic approaches, compositional approaches to controller synthesis (as the one implemented by Supremica [9]) build a controller for each component, such that when composed achieve the system requirements.",
      "startOffset" : 123,
      "endOffset" : 126
    }, {
      "referenceID" : 8,
      "context" : "MBP provides a translation from a planning input to an SMV script and shows that a planning problem can be solved as a control problem by taking advantage of the advances on model checking [10].",
      "startOffset" : 189,
      "endOffset" : 193
    }, {
      "referenceID" : 9,
      "context" : "In planning the state space is usually represented explicitly, but the construction is performed on-the-fly guided by heuristics [11].",
      "startOffset" : 129,
      "endOffset" : 133
    }, {
      "referenceID" : 10,
      "context" : "Informed search procedures – like A* [12] – are used to perform a goal-directed exploration, generally obtaining a solution by inspecting a reduced portion of the state space.",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 11,
      "context" : "Many variations of the planning problem have been attacked this way and some – especially those that contemplate nondeterminism such as FOND planning [13] – are closely related to controller synthesis.",
      "startOffset" : 150,
      "endOffset" : 154
    }, {
      "referenceID" : 12,
      "context" : "Inspired by planning, informed search procedures have been introduced in model checking to accelerate the search for an error [14], [15].",
      "startOffset" : 126,
      "endOffset" : 130
    }, {
      "referenceID" : 13,
      "context" : "Inspired by planning, informed search procedures have been introduced in model checking to accelerate the search for an error [14], [15].",
      "startOffset" : 132,
      "endOffset" : 136
    }, {
      "referenceID" : 14,
      "context" : "In [16] an on-the-fly synthesis method is presented for discrete and dense-time system, using depth-first search without a heuristic guide.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 15,
      "context" : "For linear hybrid systems, an on-the-fly informed search algorithm is presented in [17], which excels at design space exploration by quickly assessing whether a problem has no solution, rather than guiding the exploration towards a goal.",
      "startOffset" : 83,
      "endOffset" : 87
    }, {
      "referenceID" : 16,
      "context" : "Finally the Controller Synthesis Module of the CIRCA architecture [18], which works on a timed automaton model, uses heuristics with a limited lookahead and a verification procedure to detect and prune bad choices.",
      "startOffset" : 66,
      "endOffset" : 70
    }, {
      "referenceID" : 17,
      "context" : "Herein we present an extension to our previous work on the Modal Transition System Analyser (MTSA) [19] tool that now includes the DCS algorithm.",
      "startOffset" : 99,
      "endOffset" : 103
    }, {
      "referenceID" : 18,
      "context" : "This treatment of controllable and uncontrollable nodes is similar to AND/OR search procedures [20].",
      "startOffset" : 95,
      "endOffset" : 99
    }, {
      "referenceID" : 19,
      "context" : "1) Monolithic explicit state representation, previously implemented in MTSA1 (similar to CTCT [21]).",
      "startOffset" : 94,
      "endOffset" : 98
    }, {
      "referenceID" : 5,
      "context" : "2) Monolithic symbolic state representation using BDD, implemented in MBP [7].",
      "startOffset" : 74,
      "endOffset" : 77
    }, {
      "referenceID" : 7,
      "context" : "3) Compositional explicit state representation implemented in Supremica (SUP) [9].",
      "startOffset" : 78,
      "endOffset" : 81
    }, {
      "referenceID" : 19,
      "context" : "Fortunately, both MBP and Supremica come bundled with the specification for one of the most traditional examples in controller synthesis: Line Transfer (LT); which was first introduced by Wonham [21].",
      "startOffset" : 195,
      "endOffset" : 199
    }, {
      "referenceID" : 0,
      "context" : "TU = Idle, Idle = (get[M] -> Testing ), Testing = (ret[1] -> reject -> Idle | accept -> Idle) +{ret[0.",
      "startOffset" : 54,
      "endOffset" : 57
    }, {
      "referenceID" : 2,
      "context" : "In Table I we consider some “small scale” cases, in which we consider all the combinations of the parameters for the following values: M in [4, 5, 6], W in [1, 2, 3], C in [1, 2, 3].",
      "startOffset" : 140,
      "endOffset" : 149
    }, {
      "referenceID" : 3,
      "context" : "In Table I we consider some “small scale” cases, in which we consider all the combinations of the parameters for the following values: M in [4, 5, 6], W in [1, 2, 3], C in [1, 2, 3].",
      "startOffset" : 140,
      "endOffset" : 149
    }, {
      "referenceID" : 4,
      "context" : "In Table I we consider some “small scale” cases, in which we consider all the combinations of the parameters for the following values: M in [4, 5, 6], W in [1, 2, 3], C in [1, 2, 3].",
      "startOffset" : 140,
      "endOffset" : 149
    }, {
      "referenceID" : 0,
      "context" : "In Table I we consider some “small scale” cases, in which we consider all the combinations of the parameters for the following values: M in [4, 5, 6], W in [1, 2, 3], C in [1, 2, 3].",
      "startOffset" : 156,
      "endOffset" : 165
    }, {
      "referenceID" : 1,
      "context" : "In Table I we consider some “small scale” cases, in which we consider all the combinations of the parameters for the following values: M in [4, 5, 6], W in [1, 2, 3], C in [1, 2, 3].",
      "startOffset" : 156,
      "endOffset" : 165
    }, {
      "referenceID" : 0,
      "context" : "In Table I we consider some “small scale” cases, in which we consider all the combinations of the parameters for the following values: M in [4, 5, 6], W in [1, 2, 3], C in [1, 2, 3].",
      "startOffset" : 172,
      "endOffset" : 181
    }, {
      "referenceID" : 1,
      "context" : "In Table I we consider some “small scale” cases, in which we consider all the combinations of the parameters for the following values: M in [4, 5, 6], W in [1, 2, 3], C in [1, 2, 3].",
      "startOffset" : 172,
      "endOffset" : 181
    } ],
    "year" : 2016,
    "abstractText" : "This paper presents a Directed Controller Synthesis (DCS) technique for discrete event systems. The DCS method explores the solution space for reactive controllers guided by a domain-independent heuristic. The heuristic is derived from an efficient abstraction of the environment based on the componentized way in which complex environments are described. Then by building the composition of the components on-the-fly DCS obtains a solution by exploring a reduced portion of the state space. This work focuses on untimed discrete event systems with safety and co-safety (i.e. reachability) goals. An evaluation for the technique is presented comparing it to other well-known approaches to controller synthesis (based on symbolic representation and compositional analyses).",
    "creator" : "LaTeX with hyperref package"
  }
}