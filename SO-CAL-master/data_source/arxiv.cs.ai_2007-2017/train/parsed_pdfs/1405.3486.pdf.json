{
  "name" : "1405.3486.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "ESmodels: An Epistemic Specification Solver",
    "authors" : [ "ZHIZHENG ZHANG", "KAIKAI ZHAO" ],
    "emails" : [ "zzz@seu.edu.cn)" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n40 5.\n34 86\nv1 [\ncs .A\nI] 1\n4 M\nKEYWORDS: logic programming, epistemic specification, knowledge representation"
    }, {
      "heading" : "1 Introduction",
      "text" : "The language of epistemic specification initially proposed in (Gelfond and Przymusinska 1991), (Gelfond and Przymusinska 1993), (Gelfond 1994), and (Gelfond 1991) is an extension of the language of answer set programs by modal operators K and M to represent beliefs of the agent capable of introspection in the presence of multiple belief sets. Intuitively, it use KF to denote an proposition F is believed to be true in each of the agent’s belief sets, and MF to denote an proposition F is believed to be true in some of the agent’s belief sets. This extension is believed to be useful by discussing its application to formalization of commonsense reasoning. Along its syntax and semantics in (Gelfond and Przymusinska 1991), a few efforts were made to establish reasoning algorithms in (Zhang 2006) and (Watson 1994), and theoretical foundation in (Zhang 2003), (Watson 2000), and (Wang and Zhang 2005). Recently, research on epistemic specifications increases again because introspective reasoning is becoming reality and forseeable as showed in (Faber and Woltran 2011), (Faber and Woltran 2009), and (Truszczyński 2011). To eliminate some unintended interpretations which exist under the original definition, a new semantics is defined in (Gelfond 2011) to arguably close to the intuitive meaning of modalities. Currently, efforts are still desired to made to establish and validate properties of epistemic specifications and the corresponding reasoning algorithms, and to investigate the use of the language. The design and implementation of an epistemic specification solver is hoped to facilitate those efforts.\nThis article introduces an epistemic specification solver ESmodels that is recently being designed and implemented as a flexible platform for experiment with epistemic specifications. The language of ESmodels has two types of subjective literals Kl and ¬Kl. To express other types\nof subjective literals, we propose a group of transformation rules rewriting epistemic specifications with arbitrary types of subjective literals in ESmodels’s language. In ESmodels, a generate-test algorithm for computing world views of the epistemic specification is employed. It is worth noting that efficient ASP solver Clasp is coupled into ESmodels to help to generate candidate world views efficiently. Optimization approaches are preliminarily used to promoting the efficiency of the basic algorithm. Presently, we are applying ESmodels in solving security conditions in conformant planning, and encoding constraint satisfaction problems."
    }, {
      "heading" : "2 Language",
      "text" : ""
    }, {
      "heading" : "2.1 Syntax and Semantics",
      "text" : "An ESmodels’s epistemic specification is a collection of finite rules in the following form\nl0 or...or lk : − lk+1, ..., lj , Slj+1, ..., Slm, not lm+1, ..., not ln\nwhere each li for 0 ≤ i ≤ n is an objective literal, ie. either an atom A or the negation ¬A of A, and S is either K or ¬K, not is negation as failure. The set of all objective literals appears in an epistemic specification Π is denoted by LitΠ. Given a rule r in the above form, let head(r) denote its head {l0, ..., lk}, and body(r) the body {lk+1, ..., lj , Slj+1, ..., Slm, not lm+1, ..., not ln}. Furthermore, let bodyP (r) be the positive objective body {lk+1, ..., lg} and bodyN (r) negative objective body {lm+1, ..., ln} of r, and bodyS(r) the subjective body {lj+1, ..., lm}. In addition, we use bodyK(r) to denote the set of objective literals in the body of r which appears in term K, and body−K(r) to denote the set of objective literals in the body of r which appears in term ¬K.\nEpistemic specifications with variables are considered as shorthands for their ground instantiations. In the rest of this section, except special noted, we always consider the epistemic specification is grounded.\nLet W be a non-empty collection of sets of objective literals, and l an objective literal.\n- Kl is satisfied with regard to W , denoted by W |=Kl , iff ∀ω ∈ W : l ∈ ω. - ¬Kl is satisfied with regard to W , denoted by W |= ¬Kl , iff ∃ω ∈ W : l /∈ ω.\nDefinition 1 Let Π be an epistemic specification and W be a non-empty collection of sets of objective literals in Π. W is a world view of Π iff W is the collection of all answer sets of ΠW denoted by AN(ΠW ), where ΠW is an ASP program obtained from Π by the following reduct laws:\n- RL1: removing all rules containing subjective literals not satisfied by W ; - RL2: removing any remaining subjective literals of the form ¬Kl; - RL3: replacing any remaining subjective literals of the form Kl by l.\nExample 1 Let an epistemic specification Π1 consist of the following three rules:\np or q. p : − ¬K q. q : − ¬K p.\nWith regard to {{p}},¬K q is satisfied while ¬K p is not satisfied. Hence,Π{{p}}1 = {p or q. p : −.} and then AN(Π{{p}}1 ) = {{p}}. So {{p}} is a world view of Π1. Similarly, {{q}} is also a world view of Π1."
    }, {
      "heading" : "2.2 Representation of Other Subjective Literals",
      "text" : "To handle other subjective literals usingESmodels, namely K not l,¬K not l, Ml, ¬Ml, M not l, and ¬M not l, we can convert an epistemic specification Π with arbitrary subjective literals in rules bodies into an epistemic specification ΠES such that ΠES has only subjective literals in the form Kl or ¬Kl by the following transformation procedure.\n1 For each objective literal l, add a rule l′ : − not l to ΠES if there exist a subjective occurrence of ¬K not l or Ml or ¬Ml or K not l in Π, where l′ is a new created objective literal corresponding to l. 2 Add each rule of Π to ΠES after performing the following operations on it.\n- Replace ¬K not l by ¬Kl′; - Replace Ml by ¬Kl′; - Replace ¬Ml by Kl′; - Replace K not l by Kl′; - Replace M not l by ¬Kl; - Replace ¬M not l by Kl.\nThen, we define its world view based semantics as follows.\nDefinition 2 For an epistemic specification Π with arbitrary subjective literals, let Lit be a set of objective literals appearing in Π, and ΠES its corresponding ESmodels epistemic specification, a collection of sets of objective literals W is a world view of Π iff there exists a world view W ′ of ΠES such that W = {ω ∩ Lit|ω ∈ W ′}.\nExample 2 Given an epistemic specification Π2 : {p : − ¬Mq. q : − ¬Kp.} then we have Lit2 = {p, q} and ΠES2 : {p : −Kl. l : −not q. q : − ¬Kp.}. Π ES 2 has two world views {{q}} and {{p, l}}, hence, Π2 has two world views {{q}} and {{p}}.\nExample 3 Given an epistemic specification Π3 : {p : − not q,Mq. q : − not p,Mq.}, then we have ΠES3 : {p : −not q,¬Kl. l : −not q. q : −not p,¬Ki. i : −not q.}. Π ES 3 has two world views {{i, l}} and {{i, p, l}, {q}}, hence, Π3 has two world views {{}} and {{p}, {q}}."
    }, {
      "heading" : "2.3 Connection to Gelfond’s New Epistemic Specification",
      "text" : "In the syntactic aspect of the epistemic specification defined in (Gelfond 2011), it allows two more subjective literals of forms, K not l and ¬K not l, in the rule’s body. The modality M is defined to be expressed in terms of K by M l =def ¬K not l. Semantically, let W be a non-empty collection of sets of objective literals, and l an objective literal.\n- Kl is satisfied with regard to W , denoted by W |=Kl , iff ∀S ∈ W : l ∈ S. - ¬Kl is satisfied with regard to W , denoted by W |= ¬Kl , iff ∃S ∈ W : l /∈ S. - K not l is satisfied with regard to W , denoted by W |= K not l iff for every S ∈ W , l /∈ S,\notherwise S |= ¬ K not l\nThe set W is called a world view of Π if W is the collection of all answer sets of ΠW , where ΠW is obtained by\n- removing all rules containing subjective literals not satisfied by W ; - removing any remaining subjective literals of the form ¬Kl or ¬Knot l; - replacing any remaining subjective literals of the form Kl by l and any Knot l by not l.\nTheorem1 shows that ESmodels can compute the world view of any Gelfond’s new epistemic specification.\nTheorem 1 For any Gelfond’s new epistemic specification Π, let Lit be a set of objective literals appearing in Π, a collection of sets of objective literals W is a world view of Π under Gelfond’s new definition iff there exists a world view W ′ of ΠES such that W = {S ∩ Lit|S ∈ W ′}.\nProof The main idea of this proof is as follows. Let LitES be objective literals appearing in ΠES , ← direction: if there is a world view W ′ of ΠES , then for any ω ∈ W ′, ω is an answer set of (ΠES)W ′\n. Let W = {S ∩ Lit|S ∈ W ′}, then ω ∩ Lit is an answer set of ΠW under Gelfond’s new definition (because the Gelfond-Lifschitz reduction of ΠW wrt. ω∩Lit just possibly has less facts {l : −.|l ∈ ω−Lit and l does not appear in bodies of any rules} than the Gelfond-Lifschitz reduction of (ΠES)W ′\nwrt. ω). → direction: if W is a world view of Π, then we create W ′ as follows: for each ω ∈ W , we have ω′ = ω ∪ {l ∈ LitES − Lit|l : −not l′ ∈ ΠES , l′ /∈ ω} in W ′. Then, ω′ is an answer set of (ΠES)W ′ (because the Gelfond-Lifschitz reduction of (ΠES)W ′\nwrt. ω′ just possibly has more facts {l : −.|l ∈ ω−Lit and l does not appear in bodies of any rules} than the Gelfond-Lifschitz reduction of ΠW wrt. ω).\nExample 4 Given an epistemic specification Π4 : {p : −Mp.}, under Gelfond’s definition Π4 has two world views {{}} and {{p}}. By the transformation defined in last subsection, we have ΠES4 : {p : −¬Kl. : −not p.}, and ESmodels can find ΠES4 ’s two world views: {{l}} and {{p}}, that is, Π4 also has two world views {{}} and {{p}} by ESmodels.\n3 Computing World Views in ESmodels\nA generate-test algorithm forms a basis of computing world views in ESmodels. Now, we are taking two preliminary steps to optimize the algorithm."
    }, {
      "heading" : "3.1 Basic Algorithm",
      "text" : "Let Π be an epistemic specification, EL(Π) be a set of objective literals such that l ∈ EL(Π) iff Kl or -Kl occurring in Π. Then, we call a pair (S, S′) an assignment of EL(Π) iff"
    }, {
      "heading" : "S ∪ S′ = EL(Π) and S ∩ S′ = ∅",
      "text" : "Then, we define an answer set program Π(S,S ′) obtained by:\n- removing from Π all rules containing subjective literals Kl such that l ∈ S′, or subjective literal ¬Kl such that l ∈ S,\n- removing from the rest rules in Π all other occurrences of subjective literals of the form ¬Kl, - replacing remaining occurrences of literals of the form Kl by l.\nTheorem 2 Given an epistemic specification Π and a collection W of sets of objective literals. W is a world view of Π if an assignment (S, S′) of EL(Π) exists such that\n- W is the collection of all answer sets of Π(S,S ′), - W satisfies the assignment, that is, S ∩ ( ⋂\nA∈W\n) == S and S′ ∩ ( ⋂\nA∈W\n)\n== ∅.\nProof If both S ∩ ( ⋂\nA∈W\n) == S and S′ ∩ ( ⋂\nA∈W\n)\n== ∅ are satisfied, we have Π(S,S ′) = ΠW .\nHence, if W is the collection of all answer sets of Π(S,S ′) then W is the collection of all answer sets of ΠW , that is, W is a world view of Π.\nBy Theorem 2, an immediate method of computing the world views of an epistemic specification includes three main stages: generating a possible assignment, reducing the epistemic specification into an answer set program, and testing if the collection of the answer sets of the answer set program satisfies the assignment. At a high level of abstraction, the method can be implemented as showed in the following algorithm.\nAlgorithm 1 ESMODELS. Input:\nΠ: An epistemic specification; Output:\nAll world views of Π; 1: for every possible assignment of EL(Π) (S, S′) of Π do 2: Π ′ = Π(S,S ′) {reduces Π to an answer set program Π ′\nby (S, S′)} 3: W = computerASs(Π ′ ) {computes all answer sets of Π ′ } 4: if S ∩ ( ⋂\nA∈W\n) == S and S′ ∩ ( ⋂\nA∈W\n)\n== ∅ then 5: output W 6: end if 7: end for\nESMODELS firstly gets all subjective literals EL(Π) and generates all possible assignments ofEL(Π). For each assignment(S, S′), the algorithm reducesΠ to an answer set programΠ′, i.e., Π′ = Π(S,S\n′). Next, it calls exiting ASP solver like Smodels, Clasp to compute all answer sets W of Π′. Finally, it verifies the W . W is a world view of Π, if W satisfies S ∩ ( ⋂\nA∈W\n)\n== S\nand S′ ∩ ( ⋂\nA∈W\n)\n== ∅. ESMODELS stops, when all possible assignments are tested."
    }, {
      "heading" : "3.2 Optimization Approaches",
      "text" : ""
    }, {
      "heading" : "3.2.1 Reducing Subjective Literals",
      "text" : "However, ESMODELS has a high computational cost, especially with a large number of subjective literals. Therefore, we introduce a new preprocessing function to reduce reduce EL(Π) before generating all possible assignments of EL(Π). We first give several propositions.\nLet Π be an epistemic specification and a pair (S, S′) of objective literals of Π, TΠ be an lower bound operator on (S, S′) defined as follows:\nTΠ(S, S ′) =\n(\n{head(r)||head(r)| = 1, body+(r) ⊆ S, body−(r) ⊆ S′},\n{l|¬∃r ∈ Π(l ∈ head(r)), or ∀r ∈ Π, l ∈ head(r) ⇒ (body+(r) ∩ S′ 6= ∅ or body−(r) ∩ S 6= ∅)} )\nwhere body+(r) = bodyP (r) ∪ bodyK(r), body−(r) = bodyN (r) ∪ body−K(r). Intuitively, TΠ(S, S\n′) computes the objective literals that must be true and that not true with regard to S and S′ which are sets of literals known true and known not true respectively. Clearly, we can use this operation to reduce the searching space of subjective literals. This idea is guaranteed by the following definitions and propositions.\nDefinition 3 A pair (S, S′) of sets of objective literals is a partial model of an epistemic specification Π if, for any world view W of Π, S ∩ ( ⋂\nA∈W\n) == S and S′ ∩ ( ⋂\nA∈W\n)\n== ∅.\nTheorem 3 TΠ(S, S ′) is a partial model if (S, S′) is a partial model of an epistemic specification Π, .\nProof Let (A,B)|1 to denote A of a pair (A,B), and (A,B)|2 to denote B. The main idea of this proof is as follows. For any world view W of Π, S ∩ ( ⋂\nA∈W\n) == S and S′ ∩ ( ⋂\nA∈W\n)\n== ∅, by the definition of TΠ, the Gelfond-Lifschitz reduction of ΠW wrt. any ω ∈ W must have l : −|l ∈ TΠ(S, S′)|1 and must not have any rule with head in TΠ(S, S′)|2, hence, we have TΠ(S, S ′)|1 ∩ ( ⋂\nA∈W\n)\n== TΠ(S, S ′)|1 and TΠ(S, S′)|2 ∩\n( ⋂\nA∈W\n)\n== ∅.\nCorollary 1 Let, T iΠ(S, S ′) = TΠ(T i−1 Π (S, S ′)), then T kΠ(∅, ∅) is a partial model of Π.\nProof Because (∅, ∅) is a partial model, TΠ(∅, ∅) is a partial model, and so on, T 2Π(∅, ∅) ... T k Π(∅, ∅) are partial models of Π\nAn epistemic specification rule r is defeated by (S, S′) if body+(r)∩S′ 6= ∅ or body−(r)∩S′ 6= ∅. Let (S, S′) be a partial model of an epistemic specification Π, Π|(S,S′) is obtained by\n- removing from Π all rules defeated by (S, S′), - removing from the rest rules in Π all other occurrences of literals of the form not l or ¬Kl\nsuch that l ∈ S′, - removing remaining occurrences of literals of the form l or Kl such that l ∈ S. - adding l ← . if l ∈ S - adding ← l. if l ∈ S′\nTheorem 4 If (S, S′) is a partial model of an epistemic specification Π, Π|(S,S′) and Π have the same world views.\nProof The main idea in this proof is as follows. For any world view W of Π, if S ∩ ( ⋂\nA∈W\n)\n== S\nand S′ ∩ ( ⋂\nA∈W\n)\n== ∅, then ΠW and (Π|(S,S′))W have the same answer sets. And, for any world view W of Π|(S,S′), we have that W is a world view of Π.\nBy theorem 3 and 4, we can design PreProcess showed in algorithm 2. Firstly, it sets the pair (S, S ′ ) as (∅, ∅). Then it expands the partial model of Π and reducts the Π ′ according to (S, S ′\n). Next, we updates the partial model by the new program. Finally, it compares the new partial model with the previous one. If the partial model is stable, it stops and returns Π ′\n; Otherwise, it repeats this procedure.\nAlgorithm 2 PreProcess. Input:\nΠ: An epistemic specification; Output:\nΠ ′\n: A reduction of Π; 1: (S, S′) = (∅, ∅), 2: repeat 3: (S, S′) = TΠ′(S, S ′) 4: Π′ = Π′|(S,S′) 5: until S, S′ are fixed 6: return Π′\nObviously, PreProcess and partial model are very helpful for reducing search space. We thus provide an EFFICIENT ESMODELS as follows:\nAlgorithm 3 EFFICIENT ESMODELS. Input:\nΠ: An epistemic specification; Output:\nAll world views of Π; 1: Π′=PreProcess(Π) 2: for every possible assignment of EL(Π′) do 3: Π′ = Π′ (S,S′) 4: Π′=PreProcess(Π′) 5: W = computerASs(Π′) 6: if S ∩ ( ⋂\nA∈W\n) == S and S′ ∩ ( ⋂\nA∈W\n)\n== ∅ then 7: output W 8: end if 9: end for"
    }, {
      "heading" : "3.2.2 Using Multicore Technology",
      "text" : "In ESmodels, another way of improving efficiency is the use of multicore technology. Based on Algorithm 3, by parallel generation of possible assignments and parallel calling of ASP solver, the efficiency of ESmodels can be improved greatly."
    }, {
      "heading" : "4 Applications",
      "text" : ""
    }, {
      "heading" : "4.1 Conformant Planning",
      "text" : "Consider the planning problem with multiple possible initial states, what makes it become much harder is to find a so called secure plan that enforces the goal from any initial state. (Eiter et al. 2003) gives three security conditions to check whether a plan is secure:\n1. the actions of the plan are executable in the respective stages of the execution; 2. at any stage, executing the respective actions of the plan always leads to some legal suc-\ncessor state; and 3. the goal is true in every possible state reached if all steps of the plan are successfully\nexecuted.\nHere, we consider a track of effects of executing an action sequence as a belief set, thus can intuitively encode those security conditions in epistemic specification constraints. We use nonexecutable to denote the actions are not executable, inconsistent to denote that a state is illegal, success to sign a state satisfies the goal, and goal(m) to denote the state reached after a given steps number m satisfies the goal, and o(A, T ) to denote an action A happens in the step T :\n- for security condition 1: ← M nonexecutable. - for security condition 2: ← M inconsistent. - for security condition 3: success ← goal(m). and ← ¬K success.\nMoreover, to guarantee the above security testing is put on tracks caused by the same action sequence, we write a new constraint.\n← ¬Ko(A, T ), o(A, T ). (1)\nIntuitively, rule (1) says that if one action A happened in stage T of one track, it happened in stage T of all tracks. Thus, we can easily get a Conformant Planning Module consisting of the above five constraints and the following action generation rules:\n• Set a planning horizon m: #const x = m. step(0..x). • Generating one action for each step: 1{o(A, T ) : action(A)}1 ← step(T ), T < m.\nCombine the conformant planning module with a planning domain (including action axioms e.g., inertial law) encoded in an answer set program, the result epistemic specification represents a conformant planning problem, and its world view(s) corresponds to the secure plan(s) of the problem. Here, we use a case provided in (Palacios and Geffner 2006) to demonstrate the conformant planning approach using epistemic specification. Given a conformant planning problem P with an initial state I = p ∨ q (i.e., nothing else is known; there is no CWA), and action a and b with effects a causes q if r, a causes ¬s if r, and b causes s if q, the planning goal is q, s. Then, we describe the planning domain as follows.\n• Signatures: action(a). action(b). f luent(in, p). f luent(in, q). f luent(in, r). f luent(in, s). • Causal Laws: h(pos(q), T + 1) : −o(a, T ), h(pos(p), T ), step(T ). h(neg(s), T + 1) : −o(a, T ), h(pos(r), T ), step(T ). h(pos(s), T + 1) : −o(b, T ), h(pos(q), T ), step(T ). • Inertial Laws: h(pos(X), T + 1) : −fluent(in,X), h(pos(X), T ), step(T ), not h(neg(X), T + 1).\nh(neg(X), T + 1) : −fluent(in,X), h(neg(X), T ), step(T ), not h(pos(X), T + 1).\n• Initial: 1{h(pos(p), 0), h(pos(q), 0)}2. 1{h(pos(F ), 0), h(neg(F ), 0)}1 : −fluent(in, F ). • Goal: goal(T ) : −h(pos(q), T ), h(pos(s), T ), step(T ).\nWhen we set m = 2, ESmodels can find the unique world view including twelve literal sets, and each of them includes o(a, 0) and o(b, 1) that means the program has a conformant plan a b."
    }, {
      "heading" : "4.2 Constraints Satisfaction",
      "text" : "In some situations, constraints on the variable are with epistemic features, that is, a variable’s value is not only affected by the values of other variables, but also determined by all possible values of other variables. Here, we demonstrate the use of ESmodels in solving such constraint satisfaction problems using a dinner problem:Jim, Bones, Checkov, Mike, Jack, Uhura, and Scotty, and Tommy received a dinner invitation, and the constraints on their decisions and the constraints description in epistemic specification rules are as follows:\n• if Checkov may not participate, then Jim will participate: jim : − not checkove. • if Jim may not participate, then bones will participate: bones : − not jim. • if only one of Jack and Mike will participate: jack : − not mike. mike : − not jack. • if Jack must participate, then Uhura will participate: uhura : −Kjack. • if Uhura may not participate, then Scotty will participate: scotty : − not uhura. • if Scotty must participate, then Tommy will participate: tommy : −Kscotty. • Checkov will participate. checkov.\nESmodels can find the unique world view{{checkov, tommy, scotty, jim,mike} {checkov, tommy, scotty, jim, jack}} that means Jim, Checkov, Scotty, and tommy must participate, Bones and Uhura must not participate, Jack and Mike may or may not participate."
    }, {
      "heading" : "5 Conclusion",
      "text" : "ESmodels is an epistemic specification solver designed and implemented as an experiment platform to investigate the semantics, language, related reasoning algorithms, and possible applications of epistemic specifications. A significant feature of this solver is that its language is more compact than that defined in literatures, but capable of representing many subjective literals via a group of transformation rules. Besides, this solver can compute world views under Gelfond’s new definition, while that presented by Zhang in (Zhang 2007) and Watson in (Watson 1994) are based on the early definition of epistemic specifications. In addition, we find the compact encoding of conformant planning problems and constraint satisfaction problems in the epistemic specification language, which primarily shows ESmodels’s potential in applications1.\nThe work presented here is primary. Now, we are designing and exploring more efficient algorithm for ESmodels and evaluate it using those benchmarks in the conformant planning field."
    }, {
      "heading" : "Acknowledgment",
      "text" : "We acknowledge the support from Project 60803061 and 61272378 by National Natural Science Foundation of China, and Project BK2008293 by Natural Science Foundation of Jiangsu.\n1 In the early related work, Gelfond investigated the value of epistemic specifications in formalizing commonsense reasoning"
    } ],
    "references" : [ {
      "title" : "A logic programming approach to knowledge-state planning, ii: The dlvk system",
      "author" : [ "T. EITER", "W. FABER", "N. LEONE", "G. PFEIFER", "A. POLLERES" ],
      "venue" : "Artificial Intelligence 144, 1, 157–211.",
      "citeRegEx" : "EITER et al\\.,? 2003",
      "shortCiteRegEx" : "EITER et al\\.",
      "year" : 2003
    }, {
      "title" : "Manifold answer-set programs for meta-reasoning",
      "author" : [ "W. FABER", "S. WOLTRAN" ],
      "venue" : "Logic Programming and Nonmonotonic Reasoning. Springer, 115–128.",
      "citeRegEx" : "FABER and WOLTRAN,? 2009",
      "shortCiteRegEx" : "FABER and WOLTRAN",
      "year" : 2009
    }, {
      "title" : "Manifold answer-set programs and their applications",
      "author" : [ "W. FABER", "S. WOLTRAN" ],
      "venue" : "Logic programming, knowledge representation, and nonmonotonic reasoning. Springer, 44–63.",
      "citeRegEx" : "FABER and WOLTRAN,? 2011",
      "shortCiteRegEx" : "FABER and WOLTRAN",
      "year" : 2011
    }, {
      "title" : "Strong Introspection",
      "author" : [ "M. GELFOND" ],
      "venue" : "National Conference on Artificial Intelligence. 386–391.",
      "citeRegEx" : "GELFOND,? 1991",
      "shortCiteRegEx" : "GELFOND",
      "year" : 1991
    }, {
      "title" : "Logic programming and reasoning with incomplete information",
      "author" : [ "M. GELFOND" ],
      "venue" : "Annals of mathematics and artificial intelligence 12, 1-2, 89–116.",
      "citeRegEx" : "GELFOND,? 1994",
      "shortCiteRegEx" : "GELFOND",
      "year" : 1994
    }, {
      "title" : "New semantics for epistemic specifications",
      "author" : [ "M. GELFOND" ],
      "venue" : "Logic Programming and Nonmonotonic Reasoning. Springer, 260–265.",
      "citeRegEx" : "GELFOND,? 2011",
      "shortCiteRegEx" : "GELFOND",
      "year" : 2011
    }, {
      "title" : "Definitions in epistemic specifications",
      "author" : [ "M. GELFOND", "H. PRZYMUSINSKA" ],
      "venue" : "LPNMR (200201-03). 245–259.",
      "citeRegEx" : "GELFOND and PRZYMUSINSKA,? 1991",
      "shortCiteRegEx" : "GELFOND and PRZYMUSINSKA",
      "year" : 1991
    }, {
      "title" : "Reasoning on open domains",
      "author" : [ "M. GELFOND", "H. PRZYMUSINSKA" ],
      "venue" : "LPNMR. Vol. 1993. 397–413.",
      "citeRegEx" : "GELFOND and PRZYMUSINSKA,? 1993",
      "shortCiteRegEx" : "GELFOND and PRZYMUSINSKA",
      "year" : 1993
    }, {
      "title" : "Compiling uncertainty away: Solving conformant planning problems using a classical planner (sometimes)",
      "author" : [ "H. PALACIOS", "H. GEFFNER" ],
      "venue" : "AAAI. AAAI Press, 900–905.",
      "citeRegEx" : "PALACIOS and GEFFNER,? 2006",
      "shortCiteRegEx" : "PALACIOS and GEFFNER",
      "year" : 2006
    }, {
      "title" : "Revisiting epistemic specifications",
      "author" : [ "M. TRUSZCZYŃSKI" ],
      "venue" : "Logic programming, knowledge representation, and nonmonotonic reasoning. Springer, 315–333.",
      "citeRegEx" : "TRUSZCZYŃSKI,? 2011",
      "shortCiteRegEx" : "TRUSZCZYŃSKI",
      "year" : 2011
    }, {
      "title" : "Nested epistemic logic programs",
      "author" : [ "K. WANG", "Y. ZHANG" ],
      "venue" : "Logic Programming and Nonmonotonic Reasoning. Springer, 279–290.",
      "citeRegEx" : "WANG and ZHANG,? 2005",
      "shortCiteRegEx" : "WANG and ZHANG",
      "year" : 2005
    }, {
      "title" : "An inference engine for epistemic specifications",
      "author" : [ "R. WATSON" ],
      "venue" : "1994.M.S. Thesis, Department of Computer Science, University of Texas at El Paso..",
      "citeRegEx" : "WATSON,? 1994",
      "shortCiteRegEx" : "WATSON",
      "year" : 1994
    }, {
      "title" : "A splitting set theorem for epistemic specifications",
      "author" : [ "R. WATSON" ],
      "venue" : "Proceedings of the 8th International Workshop on Non-MonotonicReasoning (NMR-2000).",
      "citeRegEx" : "WATSON,? 2000",
      "shortCiteRegEx" : "WATSON",
      "year" : 2000
    }, {
      "title" : "Minimal change and maximal coherence for epistemic logic program updates",
      "author" : [ "Y. ZHANG" ],
      "venue" : "IJCAI. 112–120.",
      "citeRegEx" : "ZHANG,? 2003",
      "shortCiteRegEx" : "ZHANG",
      "year" : 2003
    }, {
      "title" : "Computational properties of epistemic logic programs",
      "author" : [ "Y. ZHANG" ],
      "venue" : "KR. 308–317.",
      "citeRegEx" : "ZHANG,? 2006",
      "shortCiteRegEx" : "ZHANG",
      "year" : 2006
    }, {
      "title" : "Epistemic reasoning in logic programs",
      "author" : [ "Y. ZHANG" ],
      "venue" : "IJCAI. 647–653.",
      "citeRegEx" : "ZHANG,? 2007",
      "shortCiteRegEx" : "ZHANG",
      "year" : 2007
    } ],
    "referenceMentions" : [ {
      "referenceID" : 6,
      "context" : "The language of epistemic specification initially proposed in (Gelfond and Przymusinska 1991), (Gelfond and Przymusinska 1993), (Gelfond 1994), and (Gelfond 1991) is an extension of the language of answer set programs by modal operators K and M to represent beliefs of the agent capable of introspection in the presence of multiple belief sets.",
      "startOffset" : 62,
      "endOffset" : 93
    }, {
      "referenceID" : 7,
      "context" : "The language of epistemic specification initially proposed in (Gelfond and Przymusinska 1991), (Gelfond and Przymusinska 1993), (Gelfond 1994), and (Gelfond 1991) is an extension of the language of answer set programs by modal operators K and M to represent beliefs of the agent capable of introspection in the presence of multiple belief sets.",
      "startOffset" : 95,
      "endOffset" : 126
    }, {
      "referenceID" : 4,
      "context" : "The language of epistemic specification initially proposed in (Gelfond and Przymusinska 1991), (Gelfond and Przymusinska 1993), (Gelfond 1994), and (Gelfond 1991) is an extension of the language of answer set programs by modal operators K and M to represent beliefs of the agent capable of introspection in the presence of multiple belief sets.",
      "startOffset" : 128,
      "endOffset" : 142
    }, {
      "referenceID" : 3,
      "context" : "The language of epistemic specification initially proposed in (Gelfond and Przymusinska 1991), (Gelfond and Przymusinska 1993), (Gelfond 1994), and (Gelfond 1991) is an extension of the language of answer set programs by modal operators K and M to represent beliefs of the agent capable of introspection in the presence of multiple belief sets.",
      "startOffset" : 148,
      "endOffset" : 162
    }, {
      "referenceID" : 6,
      "context" : "Along its syntax and semantics in (Gelfond and Przymusinska 1991), a few efforts were made to establish reasoning algorithms in (Zhang 2006) and (Watson 1994), and theoretical foundation in (Zhang 2003), (Watson 2000), and (Wang and Zhang 2005).",
      "startOffset" : 34,
      "endOffset" : 65
    }, {
      "referenceID" : 14,
      "context" : "Along its syntax and semantics in (Gelfond and Przymusinska 1991), a few efforts were made to establish reasoning algorithms in (Zhang 2006) and (Watson 1994), and theoretical foundation in (Zhang 2003), (Watson 2000), and (Wang and Zhang 2005).",
      "startOffset" : 128,
      "endOffset" : 140
    }, {
      "referenceID" : 11,
      "context" : "Along its syntax and semantics in (Gelfond and Przymusinska 1991), a few efforts were made to establish reasoning algorithms in (Zhang 2006) and (Watson 1994), and theoretical foundation in (Zhang 2003), (Watson 2000), and (Wang and Zhang 2005).",
      "startOffset" : 145,
      "endOffset" : 158
    }, {
      "referenceID" : 13,
      "context" : "Along its syntax and semantics in (Gelfond and Przymusinska 1991), a few efforts were made to establish reasoning algorithms in (Zhang 2006) and (Watson 1994), and theoretical foundation in (Zhang 2003), (Watson 2000), and (Wang and Zhang 2005).",
      "startOffset" : 190,
      "endOffset" : 202
    }, {
      "referenceID" : 12,
      "context" : "Along its syntax and semantics in (Gelfond and Przymusinska 1991), a few efforts were made to establish reasoning algorithms in (Zhang 2006) and (Watson 1994), and theoretical foundation in (Zhang 2003), (Watson 2000), and (Wang and Zhang 2005).",
      "startOffset" : 204,
      "endOffset" : 217
    }, {
      "referenceID" : 10,
      "context" : "Along its syntax and semantics in (Gelfond and Przymusinska 1991), a few efforts were made to establish reasoning algorithms in (Zhang 2006) and (Watson 1994), and theoretical foundation in (Zhang 2003), (Watson 2000), and (Wang and Zhang 2005).",
      "startOffset" : 223,
      "endOffset" : 244
    }, {
      "referenceID" : 2,
      "context" : "Recently, research on epistemic specifications increases again because introspective reasoning is becoming reality and forseeable as showed in (Faber and Woltran 2011), (Faber and Woltran 2009), and (Truszczyński 2011).",
      "startOffset" : 143,
      "endOffset" : 167
    }, {
      "referenceID" : 1,
      "context" : "Recently, research on epistemic specifications increases again because introspective reasoning is becoming reality and forseeable as showed in (Faber and Woltran 2011), (Faber and Woltran 2009), and (Truszczyński 2011).",
      "startOffset" : 169,
      "endOffset" : 193
    }, {
      "referenceID" : 5,
      "context" : "To eliminate some unintended interpretations which exist under the original definition, a new semantics is defined in (Gelfond 2011) to arguably close to the intuitive meaning of modalities.",
      "startOffset" : 118,
      "endOffset" : 132
    }, {
      "referenceID" : 5,
      "context" : "In the syntactic aspect of the epistemic specification defined in (Gelfond 2011), it allows two more subjective literals of forms, K not l and ¬K not l, in the rule’s body.",
      "startOffset" : 66,
      "endOffset" : 80
    }, {
      "referenceID" : 0,
      "context" : "(Eiter et al. 2003) gives three security conditions to check whether a plan is secure: 1.",
      "startOffset" : 0,
      "endOffset" : 19
    }, {
      "referenceID" : 8,
      "context" : "Here, we use a case provided in (Palacios and Geffner 2006) to demonstrate the conformant planning approach using epistemic specification.",
      "startOffset" : 32,
      "endOffset" : 59
    }, {
      "referenceID" : 15,
      "context" : "Besides, this solver can compute world views under Gelfond’s new definition, while that presented by Zhang in (Zhang 2007) and Watson in (Watson 1994) are based on the early definition of epistemic specifications.",
      "startOffset" : 110,
      "endOffset" : 122
    }, {
      "referenceID" : 11,
      "context" : "Besides, this solver can compute world views under Gelfond’s new definition, while that presented by Zhang in (Zhang 2007) and Watson in (Watson 1994) are based on the early definition of epistemic specifications.",
      "startOffset" : 137,
      "endOffset" : 150
    } ],
    "year" : 2014,
    "abstractText" : "(To appear in Theory and Practice of Logic Programming (TPLP)) ESmodels is designed and implemented as an experiment platform to investigate the semantics, language, related reasoning algorithms, and possible applications of epistemic specifications. We first give the epistemic specification language of ESmodels and its semantics. The language employs only one modal operator K but we prove that it is able to represent luxuriant modal operators by presenting transformation rules. Then, we describe basic algorithms and optimization approaches used in ESmodels. After that, we discuss possible applications of ESmodels in conformant planning and constraint satisfaction. Finally, we conclude with perspectives.",
    "creator" : "LaTeX with hyperref package"
  }
}