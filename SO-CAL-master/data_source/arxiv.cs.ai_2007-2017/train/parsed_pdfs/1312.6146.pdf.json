{
  "name" : "1312.6146.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Generating Shortest Synchronizing Sequences using Answer Set Programming",
    "authors" : [ "Canan Güniçen", "Esra Erdem", "Hüsnü Yenigün" ],
    "emails" : [ "canangunicen@sabanciuniv.edu", "esraerdem@sabanciuniv.edu", "yenigun@sabanciuniv.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Keywords: finite automata, shortest synchronizing sequence, ASP"
    }, {
      "heading" : "1 Introduction",
      "text" : "For a state based system that reacts to events from its environment by changing its state, a synchronizing sequence is a specific sequence of events that brings the system to a particular state no matter where the system initially is. Synchronizing sequences have found applications in many practical settings. In model based testing, it can be used to bring the unknown initial state of an implementation to a specific state to start testing [1,2]. As Natarajan [3] and Eppstein [4] explain, it can be used to orient a part to a certain position on a conveyor belt. Another interesting application is from biocomputing, where one can use a DNA molecule encoding a synchronizing sequence to bring huge number of identical automata (in the order of 1012 automata/µl) to a certain restart state [5].\nSuch a state based system can be formalized as a finite state automaton (FA). We restrict ourselves to deterministic FA, which is defined as a tuple A = (Q,Σ, δ), where Q is a finite set of states, Σ is a finite input alphabet, and δ : Q×Σ 7→ Q is a transition function, defining how each state of A is changed by the application of inputs. The transition function δ is extended to words in Σ? naturally as δ(q, ε) = q, δ(q, wx) = δ(δ(q, w), x), where q ∈ Q, w ∈ Σ?, x ∈ Σ, and ε is the empty word. A FA A = (Q,Σ, δ) is called completely specified when δ is a total function. We will only consider completely specified FA in this work. Figure 1 is an example of a FA.\nWe can now define a synchronizing sequence formally. Given an FA A = (Q,Σ, δ), an input sequence w ∈ Σ? is called a synchronizing sequence for A if ∀q, q′ ∈ Q, δ(q, w) = δ(q′, w). As an example, baab is a synchronizing sequence for A1 given in Figure 1.\nar X\niv :1\n31 2.\n61 46\nv1 [\ncs .A\nI] 2\n0 D\nec 2\n01 3\nSynchronizing sequences attracted much attention from a theoretical point of view as well. In the literature, a synchronizing sequence is also referred to as a synchronizing word, reset sequence, or a reset word. Not every FA has a synchronizing sequence, and one can check the existence of a synchronizing sequence for a given FA in polynomial time. On the other hand, the problem of finding a shortest synchronizing sequence is known to be NP-hard [4]. For this reason, several heuristic approaches have been suggested to compute short synchronizing sequences [4,6,7,8]. These algorithms guarantee a synchronizing sequence of length O(n3) where n is the number of states in the FA. The best known upper bound is n(7n2 +6n−16)/48 [9]. However, it has been conjectured by Černý almost half a century ago that this upper bound is (n − 1)2 [10,11] after providing a class of FA with n states whose shortest synchronizing sequence is of length (n − 1)2. The conjecture is shown to hold for certain classes of automata [4,5,12,13,14,15]. However, the conjecture is still open in general, and it is one of the oldest open problems of finite state automata theory.\nDespite the fact that it is NP-hard, considering the computation of shortest synchronizing sequences is still useful. Such attempts are valuable both for understanding the characteristics of shortest synchronizing sequence problem (see e.g. [16]) and for forming a base line for the performance evaluation of heuristics for computing short synchronizing sequences.\nIn this work, we formulate the problem of computing a shortest synchronizing sequence in Answer Set Programming (ASP) [17,18]—a knowledge representation and reasoning paradigm with an expressive formalism and efficient solvers. The idea of ASP is to formalize a given problem as a “program” and to solve the problem by computing models (called “answer sets” [19]) of the program using “ASP solvers”, such as Clasp [20].\nAfter we represent the shortest synchronizing sequence problem in ASP, we experimentally evaluate the performance and effectiveness of ASP, in comparison with two other approaches, one based on SAT [16] and the other on a brute-force algorithm [21]. For our experiments with the SAT-based approach, we extend the SAT formulation of the existence of a synchronizing sequence of a given length [16], to FA with more than two input symbols.\nThe rest of the paper is organized as follows. In Section 2 we present four different ASP formulations for the problem. An existing SAT formulation [16] is extended to FAs with more than two inputs in Section 3. The experimental results are given in Section 4 to compare the approaches. Finally, in Section 5 we give concluding remarks and some future research directions."
    }, {
      "heading" : "2 ASP Formulations of the Shortest Synchronizing Sequence Problem",
      "text" : "Let us first consider the decision version of the shortest synchronizing sequence problem: For an FA A = (Q,Σ, δ) and a positive integer constant c, decide whether A has a synchronizing word w of length c.\nWithout loss of generality, we represent states and input symbols of an FA A = (Q,Σ, δ), by the range of numbers 1..n and 1..k (n = |Q|, k = |Σ|), respectively. Then an FA A = (Q,Σ, δ) can be described in ASP by three forms of atoms given below:\n– state(s) (1 ≤ s ≤ n) describing the states in Q, – symbol(j) (1 ≤ j ≤ k) describing the input symbols in Σ, and – transition(s, j, s′) (1 ≤ s, s′ ≤ n, 1 ≤ j ≤ k) describing the transitions δ(s, j) = s′.\nWe represent possible lengths i of sequences by atoms of the form step(i) (1 ≤ i ≤ c).\nA synchronizing sequence of length c is characterized by atoms of the form synchro(i, x) (1 ≤ i ≤ c, 1 ≤ x ≤ k) describing that the i’th symbol of the word is x.\nUsing these atoms, we can represent the decision version of the shortest synchronizing sequence problem with a “generate-and-test” methodology used in various ASP formulations. In the following, we present two different ASP formulations based on this approach.\nIn these ASP formulations, we use an auxiliary concept of a path in A characterized by a sequence w1, w2, . . . , wx of symbols in Σ, which is defined as a sequence q1, q2, . . . , qx+1 of states in Q such that δ(qi, wi) = qi+1 for every i (1 ≤ i ≤ x). The existence of such a path of length i in A from a state s to a state q (i.e., the reachability of a state q from a state s by a path of length i in A) characterized by the first i symbols of a word w is represented by atoms of the form path(s, i+ 1, q) defined as follows:\npath(s, 1, s)← state(s) path(s, i+ 1, q)← path(s, i, r), synchro(i, x), transition(r, x, q),\nstate(s), state(r), state(q), symbol(x), step(i) (1)"
    }, {
      "heading" : "2.1 Connecting All States to a Sink State",
      "text" : "In the first ASP formulation, which we call ASP1, first we “generate” a sequence w of c symbols by the following choice rule:\n1{synchro(i, j) : symbol(j)}1← step(i) (2)\nwhere step(i) is defined by a set of facts:\nstep(i)← (1 ≤ i ≤ c) (3)\nNext, we ensure that it is a synchronizing sequence by “testing” that it does not violate the condition:\nC1 There exists a sink state f ∈ Q such that every path in A characterized by w ends at f .\nby adding the following constraints\n← sink(f),not path(s, c+ 1, f), state(s), state(f) (4)\nwhere sink(f) describes a sink state:\n1{sink(f) : state(f)}1← . (5)\nThe union of the program ASP1 that consists of the rules (2), (3), (4), (5), (1), with a set of facts describing an FA A has an answer set iff there exists a synchronizing sequence of length c for A."
    }, {
      "heading" : "2.2 Merging States Pairwise",
      "text" : "In the second ASP formulation, which we call ASP2, first we “generate” a sequence w of c symbols by the choice rule (2).\nNext, we ensure that it is a synchronizing sequence by “testing” that it does not violate the following condition, instead of constraint C1:\nD1 For every pair qi, qi+1 of states in Q = {q1, q2, . . . , qn}, δ(qi, w) = δ(qi+1, w).\nby adding the following cardinality constraints\n← 1{merged(r) : state(r), r < n}n− 2 (6)\nwhere merged(r) describes that there exists a state s reachable from the states r and r+1 by paths characterized by the first i symbols of w for some i (1 ≤ i ≤ c):\nmerged(r)← path(r, i, s), path(r + 1, i, s), state(s), state(r), state(r + 1), step(i)\n(7)\nThe union of the program ASP2 that consists of the rules (2), (3), (6), (7), (1), with a set of facts describing an FA A has an answer set iff there exists a synchronizing sequence of length c for A."
    }, {
      "heading" : "2.3 Optimization",
      "text" : "The ASP formulations given in Section 2.1 and Section 2.2, with a set of facts describing an FA A, have answer sets if the given FA A has a synchronizing sequence of length c. In order to find the length of the shortest synchronizing sequence, one can perform a binary search on possible values of c.\nIn this section, we present another ASP formulation where we let the ASP solver first decide the length l of a shortest synchronizing sequence, where l ≤ c:\n1{shortest(l) : 1 ≤ l ≤ c}1← (8)\nand declare possible lengths of sequences:\nstep(j)← shortest(i) (1 ≤ j ≤ i ≤ c). (9)\nNext, we ensure that l is indeed the optimal value, by the following optimization statement\n#minimize[shortest(l) = l]← (10)\nWe denote by ASPopt1 (resp. ASP opt 2 ) the ASP formulation obtained from ASP1 (resp. ASP2) by adding the rules (8) and (10), and replacing the rules (3) by the rules (9). If ASPopt1 (resp. ASP opt 2 ) with a set of facts describing an FA A has an answer set X then X characterizes a shortest synchronizing sequence for A."
    }, {
      "heading" : "3 SAT Formulation of the Shortest Synchronizing Sequence Problem",
      "text" : "In [16], a SAT formulation of the problem of checking if an FA A has a synchronizing sequence of a certain length is presented. However, this formulation is given only for FA with two input symbols. We extend this SAT formulation to FA with any number of input symbols as follows.\nWe first define a boolean operator ∇ that will simplify the description of our SAT formulation. For a given set of boolean variables {r1, r2, . . . , rk}, we define ∇{r1, r2, · · · , rk} as follows:\n∇ {r1,r2,· · ·,rk} ≡ ((r1 ⇒ ( ¬ r2 ∧ ¬ r3 ∧ · · · ∧ ¬ rk))∧ (r2 ⇒ ( ¬ r1 ∧ ¬ r3 ∧ · · · ∧ ¬ rk))∧ · · · (rk ⇒ ( ¬ r1 ∧ ¬ r2 ∧ · · · ∧ ¬ rk−1))∧ (r1 ∨ r2 ∨ · · · ∨ rk ))\nIntuitively, ∇{r1, r2, · · · , rk} is true with respect to an interpretation I iff exactly one of the variables ri is true and all the others are false with respect to I.\nChecking the existence of a synchronizing sequence of length c is converted into a SAT problem by considering the following boolean formulae. Below we use the notation [c] to denote the set {1, 2, . . . , c}.\n– F1: An input sequence of length c has to be created. At each step of this input sequence, there should be exactly one input symbol being used. For this purpose, we generate Boolean variables Xl,x which should be set to true (by an interpretation) only if at step l the input symbol x is used. The following formulae make sure that only one input symbol is picked for each step l.\nσ1 = ∧ l∈[c](∇{Xl,x|x ∈ X})\n– F2: Similar to what we accomplish in ASP formulations by atoms of the form path(s, i, q), we need to trace the state reached when the input sequence guessed by formula σ1 is applied. For this purpose, boolean variables Si,j,k (which we call state tracing variables) are created which are set to true (by an interpretation) only if we are at state qk at step j when we start from state qi. We first make sure that for each starting state and at any step, there will always be exactly one current state.\nσ2 = ∧ i∈[n],l∈[c](∇{Si,l,j |j ∈ n})\n– F3: The initial configuration of the FA A must be indicated. For this purpose state tracing variables should be initialized for their first step.\nσ3 = ∧ i∈[n](Si,1,i)\n– F4: Again, similar to the constraints in ASP formulations, over atoms of the form path(s, i, q), we have the corresponding SAT formulae to make sure that state tracing variables are assigned according to the transitions of the FA A. For each state qj and input x of A, if we have δ(qj , x) = qk in A, then we generate the following formulae:\nσ4 = ∧ i,j∈[n],l∈[c],x∈X((Si,l,j ∧ Xl,x)⇒ Si,l+1,k)\n– F5: A synchronizing sequence w merges all the states at a sink state after the application of w. We use boolean variable Yi to pick a sink state. Since only one of the states has to be a sink state, we introduce the following formulae:\nσ5 = (∇{Yi|i ∈ [n]})\n– F6: Finally, we need to make sure that all the states reach the sink state picked by F5 at the end of the last step after the application of the synchronizing sequence guessed by formulae F1.\nσ6 = ∧ i,j∈[n](Yi ⇒ Sj,c+1,i)\nThe conjunction of all formulae introduced above is a Boolean formula that is satisfiable iff there exists a synchronizing sequence of FA A of length c."
    }, {
      "heading" : "4 Experimental Study",
      "text" : "In this section, we present the experimental study carried out to compare the performance of the ASP formulations, the SAT formulation, and the brute–force algorithm for generating a shortest synchronizing sequence.\nWe first present our experiments using finite automata that are generated randomly. Given the number of states and the number of input symbols, an FA is generated by assigning the next state of each transition randomly. If the FA generated in this way does not have a synchronizing sequence, then it is discarded. Otherwise, it is included in the set of FAs used in our experiments. We generated 100 random FAs this way for each number of states we used in the experiments (except for the biggest set of tests with 50 states and 4-6 input symbols, where we use only 50 FAs to speed up the experiments).\nThe implementation of the brute–force algorithm in the tool COMPAS [21] is used. The brute–force algorithm could be used for FAs with up to 27 states. Beyond this number of states, COMPAS could not complete the computation due to memory restrictions.\nWe implemented tools that create ASP and SAT formulations from a given FA and an integer constant c as explained in Section 2, Section 3, and also the SAT formulation given in [16] for FAs with two inputs only.\nIn the results given below, the formulations ASP1, ASP2, ASP opt 1 , and ASPopt2 refer to the ASP formulations given in Section 2. SAT 1 and SAT 2 refer to the SAT formulations given in [16] and Section 3, respectively. BF refers to the brute–force algorithm.\nNote that the ASP formulations ASPopt1 and ASP opt 2 report the length of a shortest synchronizing sequence, provided that the constant c given is not smaller than the length of a shortest synchronizing sequence. When c is not big enough, another experiment is performed by doubling the value of c. We report only the results from successful ASPopt1 and ASP opt 2 experiments, where a sufficiently large c is given. An experimental study is presented in [16] where the length of the shortest synchronizing sequence is reported to be around 2 √ n on the average for an n state automaton with two input symbols. We therefore initially take the value of c as 2 √ n.\nOn the other hand, the ASP formulations ASP1 and ASP2, and also the SAT formulations SAT 1 and SAT 2, only report if a synchronizing sequence of length c exists or not. Therefore, one has to try several c values to find the length of the shortest synchronizing sequence using these formulations. In our experiments with these formulations, we find the length of a shortest synchronizing sequence by applying a binary search on the value of c, by using a script that invokes the ASP solver for each attempt on a possible value of c separately. We similarly take the initial value of c to be 2 √ n as explained above. The time reported is the total time taken by all the attempts until the length of a shortest synchronizing sequence is found. The memory reported is the average memory usage in these attempts.\nThe experiments are carried out using MiniSat 2.2.0 [22] and Clingo 3.0.3 [23] running on Ubuntu Linux where the hardware is a 2.4Ghz Intel Core-i3 machine.\nIn Table 1 and Table 2, the time and the memory performance of the formulations ASP1, ASP2, SAT 1, and the brute–force algorithm are given. We could not get a report on the memory usage of COMPAS for the brute–force algorithm, hence no data is given for the brute–force algorithm in Table 2. In this set of experiments, the number of states n ranges between 5 and 27, and the number of input symbols is fixed to 2.\nIn Table 3 and Table 4, the time and the memory performance of the formulations ASPopt1 , ASP opt 2 , and SAT 2 are given on FAs with the number of states n ∈ {30, 40, 50} and the number of inputs k ∈ {2, 4, 6}. Table 1 shows that the brute–force approach uses much more time than the other approaches, especially as the size of the FA gets bigger. Therefore, after a certain threshold size, the brute–force approach is not an alternative.\nBy investigating the results given in Table 1 and Table 3, one can see that the ASP formulation approach of ASP1 and ASP opt 1 perform better than ASP2 and ASPopt2 , in general. This may be due to that the number of ground instances of (4) and (5) is smaller than that of (6) and (7). However, after intelligent grounding of Clingo, the program sizes of ASPopt1 and ASP opt 2 become comparable. On the other hand, we have observed that ASPopt2 leads to more backtracking and restarts compared to ASPopt1 . For example, for an instance of 50 states and 2 input symbols, ASPopt1 leads to 82878 choices and no restarts, whereas ASPopt2 leads to 137276 choices and 4 restarts. This may be due to that, in ASPopt1 with respect to (4) and (5) , once a sink node is selected, for every state,"
    }, {
      "heading" : "30 2 6063 7143 4973 6140 42764",
      "text" : ""
    }, {
      "heading" : "30 4 7309 7438 5278 7457 49681",
      "text" : ""
    }, {
      "heading" : "30 6 7735 7621 7496 10457 52250",
      "text" : ""
    }, {
      "heading" : "40 2 6709 6029 5616 7448 67362",
      "text" : ""
    }, {
      "heading" : "40 4 7050 7073 7880 8550 78697",
      "text" : ""
    }, {
      "heading" : "40 6 7764 8024 7983 10234 84671",
      "text" : ""
    }, {
      "heading" : "50 2 7222 8336 8965 16072 86453",
      "text" : ""
    }, {
      "heading" : "50 4 8438 9056 9931 12843 85157",
      "text" : ""
    }, {
      "heading" : "50 6 8773 9228 10729 14092 93118",
      "text" : "existence of a path of a fixed length is checked; on the other hand, in ASPopt2 with respect to (6) and (7), for every state, existence of two paths of the same length is checked, which may intuitively lead to more backtracking and restarts. On the other hand, the memory performances of all ASP approaches are similar, as displayed by Table 2 and Table 4.\nAs for the comparison of the ASP and SAT approaches, one can see that the ASP approaches are both faster and uses less memory than the SAT approach, in general. However, the ASP approach seems to have a faster increase in the running time compared to the SAT approach. This trend needs to be confirmed by further experiments.\nWe also experimented with finite state automata from MCNC’91 benchmarks [24]. We used only those finite state machine examples in this benchmark set that correspond to completely specified finite state automata. The results of these experiments are given in Table 5 for the time comparison. We obtained similar results to what we have observed in our experiments on random finite state automata. The time performance of the ASP approaches are better than the SAT approach in these experiments as well. We note that the benchmark example “dk16”, which is also the automaton having the largest number of states, has the longest running time among the automata in the benchmark set.\nHowever, the running time does not depend only on the number of states. The number of input symbols and the length of the shortest synchronizing sequence would also have an effect. For the comparison of the memory used for these examples, all ASP approaches used around 6 MBytes of memory, whereas the SAT approach used minimum 6 MBytes and maximum 38 MBytes memory for these experiments."
    }, {
      "heading" : "5 Conclusion and Future Work",
      "text" : "In this paper, the problem of finding a shortest synchronizing sequence for a FA is formulated in ASP. Four different ASP formulations are given. Also an extension of the SAT formulation of the same problem given in [16] is suggested.\nThe performance of these formulations are compared by an experimental evaluation. The ASP and SAT formulations are shown to scale better than the brute–force approach. The experiments indicate that the ASP formulations perform better than the SAT approach. However this needs to be further investigated with an extended set of experiments.\nBased on the encouraging results obtained from this work, using ASP to compute some other special sequences used in finite state machine based testing can be considered as a future research direction. For example checking the existence of, and computing a Preset Distinguishing Sequence is a PSPACE– hard problem [1]. Although checking the existence and computing an Adaptive Distinguishing Sequence [1] can be performed in polynomial time, generating a minimal Adaptive Distinguishing Sequence is an NP–hard problem. These hard problems can be addressed by using ASP."
    } ],
    "references" : [ {
      "title" : "Testing finite-state machines: State identification and verification",
      "author" : [ "D. Lee", "M. Yannakakis" ],
      "venue" : "IEEE Trans. Comput. 43(3)",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 1994
    }, {
      "title" : "Switching and Finite Automata Theory",
      "author" : [ "Z. Kohavi", "N.K. Jha" ],
      "venue" : "Cambridge University Press",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "An algorithmic approach to the automated design of parts orienters",
      "author" : [ "B.K. Natarajan" ],
      "venue" : "FOCS, IEEE Computer Society",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 1986
    }, {
      "title" : "Reset sequences for monotonic automata",
      "author" : [ "D. Eppstein" ],
      "venue" : "SIAM J. Comput. 19(3)",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 1990
    }, {
      "title" : "Synchronizing monotonic automata",
      "author" : [ "D.S. Ananichev", "M.V. Volkov" ],
      "venue" : "Theor. Comput. Sci. 327(3)",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Some results of implemented algorithms of synchronization",
      "author" : [ "A. Trahtman" ],
      "venue" : "10th Journees Montoises d’Inform., Liege, Belgium",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Synchronizing finite automata with short reset words",
      "author" : [ "A. Roman" ],
      "venue" : "Applied Mathematics and Computation 209(1)",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Effective synchronizing algorithms",
      "author" : [ "R. Kudlacik", "A. Roman", "H. Wagner" ],
      "venue" : "Expert Systems with Applications 39(14)",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Modifying the upper bound on the length of minimal synchronizing word",
      "author" : [ "A.N. Trahtman" ],
      "venue" : "In Owe, O., Steffen, M., Telle, J.A., eds.: FCT. Volume 6914 of Lecture Notes in Computer Science., Springer",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "A remark on homogeneous experiments with finite automata",
      "author" : [ "J. Černý" ],
      "venue" : "Mat.-Fyz. Časopis Sloven. Akad. Vied 14",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 1964
    }, {
      "title" : "On directable automata",
      "author" : [ "J. Černý", "A. Pirick", "B. Rosenauerov" ],
      "venue" : "Kybernetika 07(4)",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 1971
    }, {
      "title" : "Synchronizing finite automata on eulerian digraphs",
      "author" : [ "J. Kari" ],
      "venue" : "Theor. Comput. Sci. 295",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "Synchronizing generalized monotonic automata",
      "author" : [ "D.S. Ananichev", "M.V. Volkov" ],
      "venue" : "Theor. Comput. Sci. 330(1)",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "The cernú conjecture for aperiodic automata",
      "author" : [ "A. Trakhtman" ],
      "venue" : "Discrete Mathematics & Theoretical Computer Science 9(2)",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Synchronizing automata preserving a chain of partial orders",
      "author" : [ "M.V. Volkov" ],
      "venue" : "Theor. Comput. Sci. 410(37)",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Experimental study of the shortest reset word of random automata",
      "author" : [ "E. Skvortsov", "E. Tipikin" ],
      "venue" : "Proceedings of the 16th international conference on Implementation and application of automata. CIAA’11, Berlin, Heidelberg, Springer-Verlag",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "What is answer set programming? In: Proc",
      "author" : [ "V. Lifschitz" ],
      "venue" : "of AAAI, MIT Press",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Answer set programming at a glance",
      "author" : [ "G. Brewka", "T. Eiter", "M. Truszczynski" ],
      "venue" : "Commun. ACM 54(12)",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Classical negation in logic programs and disjunctive databases",
      "author" : [ "M. Gelfond", "V. Lifschitz" ],
      "venue" : "New Generation Computing 9",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 1991
    }, {
      "title" : "clasp: A conflict-driven answer set solver",
      "author" : [ "M. Gebser", "B. Kaufmann", "A. Neumann", "T. Schaub" ],
      "venue" : "Proc. of LPNMR.",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Compas: a computing package for synchronization",
      "author" : [ "K. Chmiel", "A. Roman" ],
      "venue" : "Proceedings of the 15th international conference on Implementation and application of automata. CIAA’10, Berlin, Heidelberg, Springer-Verlag",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "An extensible sat-solver",
      "author" : [ "N. Eén", "N. Sörensson" ],
      "venue" : "Proc. of SAT.",
      "citeRegEx" : "22",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "Potassco: The Potsdam answer set solving collection",
      "author" : [ "M. Gebser", "R. Kaminski", "B. Kaufmann", "M. Ostrowski", "T. Schaub", "M. Schneider" ],
      "venue" : "AI Communications 24(2)",
      "citeRegEx" : "23",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Logic synthesis and optimization benchmarks user guide version",
      "author" : [ "S. Yang" ],
      "venue" : null,
      "citeRegEx" : "24",
      "shortCiteRegEx" : "24",
      "year" : 1991
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "In model based testing, it can be used to bring the unknown initial state of an implementation to a specific state to start testing [1,2].",
      "startOffset" : 132,
      "endOffset" : 137
    }, {
      "referenceID" : 1,
      "context" : "In model based testing, it can be used to bring the unknown initial state of an implementation to a specific state to start testing [1,2].",
      "startOffset" : 132,
      "endOffset" : 137
    }, {
      "referenceID" : 2,
      "context" : "As Natarajan [3] and Eppstein [4] explain, it can be used to orient a part to a certain position on a conveyor belt.",
      "startOffset" : 13,
      "endOffset" : 16
    }, {
      "referenceID" : 3,
      "context" : "As Natarajan [3] and Eppstein [4] explain, it can be used to orient a part to a certain position on a conveyor belt.",
      "startOffset" : 30,
      "endOffset" : 33
    }, {
      "referenceID" : 4,
      "context" : "Another interesting application is from biocomputing, where one can use a DNA molecule encoding a synchronizing sequence to bring huge number of identical automata (in the order of 10 automata/μl) to a certain restart state [5].",
      "startOffset" : 224,
      "endOffset" : 227
    }, {
      "referenceID" : 3,
      "context" : "On the other hand, the problem of finding a shortest synchronizing sequence is known to be NP-hard [4].",
      "startOffset" : 99,
      "endOffset" : 102
    }, {
      "referenceID" : 3,
      "context" : "For this reason, several heuristic approaches have been suggested to compute short synchronizing sequences [4,6,7,8].",
      "startOffset" : 107,
      "endOffset" : 116
    }, {
      "referenceID" : 5,
      "context" : "For this reason, several heuristic approaches have been suggested to compute short synchronizing sequences [4,6,7,8].",
      "startOffset" : 107,
      "endOffset" : 116
    }, {
      "referenceID" : 6,
      "context" : "For this reason, several heuristic approaches have been suggested to compute short synchronizing sequences [4,6,7,8].",
      "startOffset" : 107,
      "endOffset" : 116
    }, {
      "referenceID" : 7,
      "context" : "For this reason, several heuristic approaches have been suggested to compute short synchronizing sequences [4,6,7,8].",
      "startOffset" : 107,
      "endOffset" : 116
    }, {
      "referenceID" : 8,
      "context" : "The best known upper bound is n(7n +6n−16)/48 [9].",
      "startOffset" : 46,
      "endOffset" : 49
    }, {
      "referenceID" : 9,
      "context" : "However, it has been conjectured by Černý almost half a century ago that this upper bound is (n − 1) [10,11] after providing a class of FA with n states whose shortest synchronizing sequence is of length (n − 1).",
      "startOffset" : 101,
      "endOffset" : 108
    }, {
      "referenceID" : 10,
      "context" : "However, it has been conjectured by Černý almost half a century ago that this upper bound is (n − 1) [10,11] after providing a class of FA with n states whose shortest synchronizing sequence is of length (n − 1).",
      "startOffset" : 101,
      "endOffset" : 108
    }, {
      "referenceID" : 3,
      "context" : "The conjecture is shown to hold for certain classes of automata [4,5,12,13,14,15].",
      "startOffset" : 64,
      "endOffset" : 81
    }, {
      "referenceID" : 4,
      "context" : "The conjecture is shown to hold for certain classes of automata [4,5,12,13,14,15].",
      "startOffset" : 64,
      "endOffset" : 81
    }, {
      "referenceID" : 11,
      "context" : "The conjecture is shown to hold for certain classes of automata [4,5,12,13,14,15].",
      "startOffset" : 64,
      "endOffset" : 81
    }, {
      "referenceID" : 12,
      "context" : "The conjecture is shown to hold for certain classes of automata [4,5,12,13,14,15].",
      "startOffset" : 64,
      "endOffset" : 81
    }, {
      "referenceID" : 13,
      "context" : "The conjecture is shown to hold for certain classes of automata [4,5,12,13,14,15].",
      "startOffset" : 64,
      "endOffset" : 81
    }, {
      "referenceID" : 14,
      "context" : "The conjecture is shown to hold for certain classes of automata [4,5,12,13,14,15].",
      "startOffset" : 64,
      "endOffset" : 81
    }, {
      "referenceID" : 15,
      "context" : "[16]) and for forming a base line for the performance evaluation of heuristics for computing short synchronizing sequences.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 16,
      "context" : "In this work, we formulate the problem of computing a shortest synchronizing sequence in Answer Set Programming (ASP) [17,18]—a knowledge representation and reasoning paradigm with an expressive formalism and efficient solvers.",
      "startOffset" : 118,
      "endOffset" : 125
    }, {
      "referenceID" : 17,
      "context" : "In this work, we formulate the problem of computing a shortest synchronizing sequence in Answer Set Programming (ASP) [17,18]—a knowledge representation and reasoning paradigm with an expressive formalism and efficient solvers.",
      "startOffset" : 118,
      "endOffset" : 125
    }, {
      "referenceID" : 18,
      "context" : "The idea of ASP is to formalize a given problem as a “program” and to solve the problem by computing models (called “answer sets” [19]) of the program using “ASP solvers”, such as Clasp [20].",
      "startOffset" : 130,
      "endOffset" : 134
    }, {
      "referenceID" : 19,
      "context" : "The idea of ASP is to formalize a given problem as a “program” and to solve the problem by computing models (called “answer sets” [19]) of the program using “ASP solvers”, such as Clasp [20].",
      "startOffset" : 186,
      "endOffset" : 190
    }, {
      "referenceID" : 15,
      "context" : "After we represent the shortest synchronizing sequence problem in ASP, we experimentally evaluate the performance and effectiveness of ASP, in comparison with two other approaches, one based on SAT [16] and the other on a brute-force algorithm [21].",
      "startOffset" : 198,
      "endOffset" : 202
    }, {
      "referenceID" : 20,
      "context" : "After we represent the shortest synchronizing sequence problem in ASP, we experimentally evaluate the performance and effectiveness of ASP, in comparison with two other approaches, one based on SAT [16] and the other on a brute-force algorithm [21].",
      "startOffset" : 244,
      "endOffset" : 248
    }, {
      "referenceID" : 15,
      "context" : "For our experiments with the SAT-based approach, we extend the SAT formulation of the existence of a synchronizing sequence of a given length [16], to FA with more than two input symbols.",
      "startOffset" : 142,
      "endOffset" : 146
    }, {
      "referenceID" : 15,
      "context" : "An existing SAT formulation [16] is extended to FAs with more than two inputs in Section 3.",
      "startOffset" : 28,
      "endOffset" : 32
    }, {
      "referenceID" : 15,
      "context" : "In [16], a SAT formulation of the problem of checking if an FA A has a synchronizing sequence of a certain length is presented.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 20,
      "context" : "The implementation of the brute–force algorithm in the tool COMPAS [21] is used.",
      "startOffset" : 67,
      "endOffset" : 71
    }, {
      "referenceID" : 15,
      "context" : "We implemented tools that create ASP and SAT formulations from a given FA and an integer constant c as explained in Section 2, Section 3, and also the SAT formulation given in [16] for FAs with two inputs only.",
      "startOffset" : 176,
      "endOffset" : 180
    }, {
      "referenceID" : 15,
      "context" : "SAT 1 and SAT 2 refer to the SAT formulations given in [16] and Section 3, respectively.",
      "startOffset" : 55,
      "endOffset" : 59
    }, {
      "referenceID" : 15,
      "context" : "An experimental study is presented in [16] where the length of the shortest synchronizing sequence is reported to be around 2 √ n on the average for an n state automaton with two input symbols.",
      "startOffset" : 38,
      "endOffset" : 42
    }, {
      "referenceID" : 21,
      "context" : "0 [22] and Clingo 3.",
      "startOffset" : 2,
      "endOffset" : 6
    }, {
      "referenceID" : 22,
      "context" : "3 [23] running on Ubuntu Linux where the hardware is a 2.",
      "startOffset" : 2,
      "endOffset" : 6
    }, {
      "referenceID" : 23,
      "context" : "We also experimented with finite state automata from MCNC’91 benchmarks [24].",
      "startOffset" : 72,
      "endOffset" : 76
    }, {
      "referenceID" : 15,
      "context" : "Also an extension of the SAT formulation of the same problem given in [16] is suggested.",
      "startOffset" : 70,
      "endOffset" : 74
    }, {
      "referenceID" : 0,
      "context" : "For example checking the existence of, and computing a Preset Distinguishing Sequence is a PSPACE– hard problem [1].",
      "startOffset" : 112,
      "endOffset" : 115
    }, {
      "referenceID" : 0,
      "context" : "Although checking the existence and computing an Adaptive Distinguishing Sequence [1] can be performed in polynomial time, generating a minimal Adaptive Distinguishing Sequence is an NP–hard problem.",
      "startOffset" : 82,
      "endOffset" : 85
    } ],
    "year" : 2013,
    "abstractText" : "For a finite state automaton, a synchronizing sequence is an input sequence that takes all the states to the same state. Checking the existence of a synchronizing sequence and finding a synchronizing sequence, if one exists, can be performed in polynomial time. However, the problem of finding a shortest synchronizing sequence is known to be NP-hard. In this work, the usefulness of Answer Set Programming to solve this optimization problem is investigated, in comparison with brute-force algorithms and SAT-based approaches.",
    "creator" : "LaTeX with hyperref package"
  }
}