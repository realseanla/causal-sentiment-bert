{
  "name" : "1701.02392.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Reinforcement Learning via Recurrent Convolutional Neural Networks",
    "authors" : [ "Tanmay Shankar", "Santosha K Dwivedy", "Prithwijit Guha" ],
    "emails" : [ "tanmay.shankar@gmail.com", "dwivedy@iitg.ac.in", "pguha@iitg.ac.in" ],
    "sections" : [ {
      "heading" : null,
      "text" : "I. INTRODUCTION\nDeep Reinforcement Learning (DRL) algorithms exploit model-free Reinforcement Learning (RL) techniques, to achieve high levels of performance on a variety of tasks, often on par with human experts in the same domain [1]. These DRL methods use deep networks to either approximate the actionvalue functions as in Deep Q Networks [1]–[3], or directly parametrizing the policy, as in policy gradient methods [4]. While DRL methods adopt model-free approaches in order to generalize performance across various tasks, it is difficult to intuitively understand the reasoning of DRL approaches in making a particular choice of action, since they often ignore the underlying structure of the tasks.\nIn contrast, model-based methods [5]–[8] exploit this inherent structure to make decisions, based on domain knowledge. The estimates of the transition model and reward function associated with the underlying Markov Decision Process (MDP) are transferable across environments and agents [9], and provide insight into the system’s choice of actions. A significant deterrent from model-based RL is the indirect nature of learning with the estimated model; subsequent planning is required to obtain the optimal policy [10].\nTo jointly exploit this inherent structure and overcome this indirect nature, we present a novel fusion of Reinforcement and Deep Learning, by representing classical solutions to RL\nproblems within the framework of Deep Learning architectures; in particular Recurrent Convolutional Neural Networks (RCNNs). By explicitly connecting the steps of solving MDPs with architectural elements of RCNNs, our representation inherits properties of such networks; allowing the use of backpropagation on the defined RCNNs as an elegant solution to model-based RL problems. The representation also exploits the inherent structure of the MDP to reduce the cost of replanning, further incentivizing model-based approaches.\nThe contributions of this paper are hence three-fold. We define a Value Iteration RCNN (VI RCNN), whose forward passes carry out Value Iteration to efficiently obtain the optimal policy. Second, we define a Belief Propagation RCNN (BP RCNN), to update beliefs of state via the Bayes Filter. Backpropagation through this network learns the underlying transition model of the agent in partially observable environments. Finally, we define a QMDP RCNN by combining the VI RCNN and the BP RCNN. The QMDP RCNN computes optimal choices of actions for a given belief of state. Backpropagation through the QMDP RCNN learns the reward function of an expert agent, in a Learning from Demonstration via Inverse Reinforcement Learning (LfD-IRL) setting [11]. The learnt reward function and transition model may then be used to re-plan via the VI RCNN, and the QMDP RCNN to make optimal action choices for new beliefs and the learnt Q-values. 1\nWe note that [12] follows an approach mathematically similar to the VI RCNN; however it differs in being a modelfree approach. The model-based approach followed here learns MDP models transferable across environments and agents. Further, the QMDP RCNN approach proposed here follows more naturally than the fully connected layer used in [12]. The gradient updates of the QMDP RCNN adopt an intuitive form, that further contributes to an intuitive understanding of the action choices of the QMDP RCNN, as compared to [12].\nWe evaluate each of the RCNNs proposed in simulation, where the given task is a 2-D robot planning problem. We demonstrate the capacity of the VI RCNN to reduce the cost of re-planning by significantly reducing the execution time as compared to classical Value Iteration. We evaluate the BP\n1Please find our code and supplementary material at https:// github.com/tanmayshankar/RCNN_MDP.\nar X\niv :1\n70 1.\n02 39\n2v 1\n[ cs\n.L G\n] 9\nJ an\n2 01\n7\nRCNN based on the accuracy of the learnt transition models against ground truth models, and show that it appreciably outperforms naive model-based methods for partially observable environments. Our experiments finally demonstrate that the QMDP RCNN is able to generate policies via re-planning with learnt MDP models, that accurately represent policies generated from ground truth MDP models."
    }, {
      "heading" : "II. THE VALUE ITERATION RCNN",
      "text" : "In this section, we formulate Value Iteration as a recurrent convolution, and hence present the Value Iteration RCNN (VI RCNN) to carry out Value Iteration. We consider a standard Markov Decision Process, consisting of a 2-dimensional state space S of size Nd × Nd, state s ∈ S, action space A of size Na, actions a ∈ A, a transition model T (s, a, s′), reward function R(s, a), and discount factor γ. Value Iteration, which is typically used in solving for optimal policies in an MDP, invokes the Bellman Update equation as Vk+1(s) = maxa R(s, a) + γ ∑ s′ T (s, a, s ′)Vk(s ′). Value Iteration as a Convolution: In our 2-D state space, S, states s and s′ are defined by 2 pairs of indices (i, j) and (p, q). The summation over all states s′ may hence be equivalently represented as ∑ s′ = ∑Nd p=1 ∑Nd q=1. The transition model is hence of size N2d × Na × N2d . We may express Vk+1(s) as maxaR(s, a) + γ ∑Nd p=1 ∑Nd q=1 T (s, a, s ′)p,qVk(s ′)p,q .\nActions correspond to transitions in the agent’s state, dictated by the internal dynamics of the agent, or in the case of physical robots, restricted by the robot’s configuration and actuator capacities. It is impossible for the agent to immediately move from its current state to a far away state. This allows us to define a w neighborhood centred around the state s′, W (s′), so the agent only has a finite probability of transitioning to other states within W . Mathematically, T (s, a, s′) 6= 0 if |i−p| ≤ w and |j−q| ≤ w or if s ∈W (s′), and T (s, a, s′) = 0 for s 6∈W (s′).\nFurther, the transition model is often invariant to the spatial location of the occurring transition. For example, a differential drive robot’s dynamics are independent of the robot’s position. We assume the transition model is stationary over the state space, incorporating appropriate state boundary conditions. We may now visualize this w neighborhood restricted transition model itself to be centred around s′. By defining a flipped transition model as: T (s, a, s′)m,n = T (s, a, s ′)Nt−m,Nt−n, and indexing it\nby (u, v), we may express Vk+1(s) as maxaR(s, a) + γ ∑w u=−w ∑w v=−w T (s, a, s ′)u,vVk(s ′)i−u,j−v . We may represent this as a convolution:\nVk+1(s) = max a\nR(s, a) + γ T (s, a, s′) ∗ Vk(s′) (1)\nThe Value Iteration RCNN: We define a Value Iteration RCNN (VI RCNN) to represent classical Value Iteration, based on the correlation between the Bellman update equation, and the architectural elements of an RCNN. Equation (1) can be thought of as a single layer of a recurrent convolutional neural network consisting of the following 4 stages: 1) Convolutional Stage: The convolution of T (s, a, s′)∗Vk(s′)\nrepresents the convolutional stage. 2) Max-Pooling Stage: The maximum at every state s taken\nover all actions a, maxa is analogous to a max-pooling stage along the action ‘channel’. 3) Fixed Bias Stage: The introduction of the reward term R(s, a) is treated as addition of a fixed bias. 4) Recurrence Stage: As k is incremented in successive iterations, Vk+1(s) is fed back as an ‘input’ to the network, introducing a recurrence relation into the network.\nWe may think of Vk(s′) as a single-channel Nd×Nd image. T (s, a, s′) then corresponds to a series of Na transition filters, each of Nt × Nt size (Nt = 2w + 1), each to be convolved with the image. The values of the transition filters correspond directly to transition probabilities between states s and s′, upon taking action a. Note that these convolutional transition filters naturally capture the spatial invariance of transitions by virtue of lateral parameter sharing inherent to convolutional networks. Further, in this representation, each transition filter corresponds directly to a particular action. This unique oneto-one mapping between actions and filters proves to be very useful in learning MDP or RL models, as we demonstrate in section III. Finally, the VI RCNN is completely differentiable, and can be trained by applying backpropagation through it."
    }, {
      "heading" : "III. THE BELIEF PROPAGATION RCNN",
      "text" : "In this section, we present the Belief Propagation RCNN (BP RCNN), to represent the Bayes filter belief update within the architecture of an RCNN, and hence learn MDP transition models. For an agent to make optimal choices of actions in partially observable environments, an accurate belief of state b(s) is required. Upon taking an action a and receiving observation z, we may use the Bayes filter to propagate the\nbelief b(s′) in terms of an observation model O(s′, a, z), associated with probability p(z|s′, a). The discrete Bayes filter is depicted in (2). Note the denominator is equivalent to p(z|a, b), and can be implemented as a normalization factor η.\nb(s′) = O(s′, a, z)\n∑ s∈S T (s, a, s\n′)b(s)∑ s′∈S O(s ′, a, z) ∑ s∈S T (s, a, s ′)b(s) (2)\nBayes Filter as a Convolution and an Element-wise Product: We may represent the motion update of the traditional Bayes filter as a convolution, analogous to the representation of∑ s′ T (s, a, s ′)Vk(s ′) step of Value Iteration as T (s, a, s′) ∗ Vk(s ′) in equation (1). Transitions in a Bayes filter occur from s to s′, in contrast to the ‘backward’ passes executed in Value Iteration, from s′ to s. This suggests our transition model is centred around s rather than s′, and we may represent∑ s as ∑Nd i=1 ∑Nd j=1. We write the intermediate belief b(s′)p,q\nas ∑w u=−w ∑w v=−w T (s, a, s\n′)u,v b(s)p−u,q−v , which can be expressed as a convolution b(s′) = T (s, a, s′) ∗ b(s). For the Bayes Filter correction update, we consider a simple observation model O(z, s′) for observation z in state s′. The agent observes its own state as szx,y , indexed by x and y, given that the actual state of the robot is s′i,j , with a probability p(szx,y|s′i,j). Analogous to the w neighborhood for the transition model, we introduce a h neighborhood for the observation model, centred around the observed state szx,y . Thus O(szx,y, s\n′) 6= 0 for states s′i,j within the h neighborhood H(szx,y), and O(s z x,y, s\n′) = 0 for all s′i,j 6∈ H(szx,y). The correction update in the Bayes filter can be represented as a masking operation on the intermediate belief b(s′), or an element-wise (Hadamard) product ( ). Since the observation O(sz) is also centred around sz , we may express b(s′)i,j as η O(sz)i−x,j−y b(s′)i,j ∀ i, j, which corresponds to a normalized element-wise product b(s′) = η O(sz) b(s′). Upon combining the motion update convolution and the correction update element-wise product, we may represent the Bayes Filter as a convolutional stage followed by an element-wise product. We have:\nb(s′) = η O(sz) T (s, a, s′) ∗ b(s) (3)\nThe Belief Propagation RCNN: We define a Belief Propagation RCNN (BP RCNN) to represent the Bayes Filter belief update, analogous to the representation of Value Iteration as the VI RCNN. A single layer of the BP RCNN represents equation (3), consisting of the following stages: 1) Convolution Stage: The convolution T (s, a, s′) ∗ b(s) rep-\nresents the convolution stage of the BP RCNN. 2) Element-wise Product Stage: The element-wise multiplica-\ntion O(sz) b(s′), can be considered as an element-wise product (or Hadamard product) layer in 2D. 3) Recurrence Stage: The network output, b(s′), is fed as the input b(s) at the next time step, forming an output recurrence network.\nForward passes of the BP RCNN propagate beliefs of state, given a choice of action at and a received observation zt. The belief of state at any given instant, b(s), is treated as a single channel Nd×Nd image, and is convolved with a single transition filter Tat , corresponding to the action executed, at. A key difference between the VI RCNN and the BP RCNN is that only a single transition filter is activated during the belief propagation, since the agent may only execute a single action at any given time instant. The BP RCNN is also completely differentiable. Training and Loss: Learning the weights of the BP RCNN via backpropagation learns the transition model of the agent. Our objective is thus to learn a transition model T ′(s, a, s′) such that network output b(s′) is as close to the target belief b̂(s′) as possible, at every time step. Formally, we minimize a loss function defined as the least square error between both beliefs over all states: Lt = ∑Nd i=1 ∑Nd j=1 ( b̂(s′t) − b(s′t) )2 i,j\n, with conditions on the transition model, 0 ≤ T ′(s, a, s′)m,n ≤ 1, and ∑w m=−w ∑w n=−w T\n′(s, a, s′)m,n = 1 ∀ a ∈ A, being incorporated using appropriate penalties.\nThe BP RCNN is trained in a typical RL setting, with an agent interacting with an environment by taking random action choices (at, at+1...), and receiving corresponding observations, (zt, zt+1...). The target beliefs, b̂(s′), are generated as one-hot representations of the observed state. While training the BP RCNN, the randomly initialized transition model magnifies the initial uncertainty in the belief as it is propagated forward in time, leading to instability in learning the transition model. Teacher forcing [13] is adopted to handle this uncertainty; thus the target belief, rather than the network output, is propagated as the input for the next time step. Since the target belief is independent of the initial uncertainty of the transition model, the network is able to learn a meaningful set of filter values. Teacher forcing, or such target recurrence, also decouples consecutive time steps, reducing the backpropagation through time to backpropagation over data points that are only generated sequentially."
    }, {
      "heading" : "IV. THE QMDP RCNN",
      "text" : "We finally present the QMDP RCNN as a combination of the VI RCNN and the BP RCNN, to retrieve optimal choices of actions, and learn the underlying reward function of the\nPOMDP (in addition to the transition model). Treating the outputs of the VI RCNN and the BP RCNN as the action-value function, Q(s, a), and the belief of state, b(s) respectively at every time step, we may fuse these outputs to compute belief space Q-values Q(b(s), a) using the QMDP approximation. We have Q(b(s), a) = ∑ s∈S Q(s, a)MDP b(s), which may alternately be represented as a Frobenius Inner product 〈b(s), Q(s, a)〉F . Optimal action choices yat , corresponding to the highest belief space Q-values, and can be retrieved from the softmax of Q(b(s), a):\nyat = eQ(b(s),a)∑ a e Q(b(s),a) (4)\nThe QMDP RCNN: In addition to the stages of the VI RCNN and BP RCNN, the QMDP RCNN is constructed from the following stages: 1) Frobenius Inner Product Stage: The QMDP approximation\nstep Q(b(s), a) = 〈b(s), Q(s, a)〉F . represents an Frobenius inner product stage. This can be implemented as a ‘valid’ convolutional layer with zero stride. 2) Softmax Stage: yat = softmax Q(b(s), a) represents the softmax stage of the network.\nThe resultant QMDP RCNN, as depicted in Figure 3, combines planning and learning in a single network. Forward passes of the network provide action choices yat as an output, and backpropagating through the network learns the reward function, and updates Q-values and optimal action choices via planning through the VI RCNN component. Training and Loss: The QMDP RCNN is trained in a Learning from Demonstration - Inverse Reinforcement Learning setting.\nAn expert agent demonstrates a set of tasks, recorded as a series of trajectories {(at, zt), (at+1, zt+1)...}, which serve as inputs to the network. The actions executed in the expert trajectories are represented in a one-hot encoding, serving as the network targets ŷat . The objective is to hence learn a reward function such that the action choices output by the network match the target actions at every time step. The loss function chosen is the cross-entropy loss between the output actions and the target actions at a given time step, defined as Ct = − ∑ a ŷ a t lny a t . The QMDP RCNN learns the reward function by backpropagating the gradients retrieved from this loss function through the network, to update the reward function. The updated reward estimate is then fed back to the VI RCNN component to update the Q-values, and hence the action choices of the network. Experience replay [14] is used to randomize over the expert trajectories and transitions while training the QMDP RCNN.\nThe closed form of the gradient for reward updates is of the form of R(s, a) αt←− −(yat − ŷat )b(s). The (yat − ŷat ) term thus dictates the extent to which actions are positively or negatively reinforced, while the belief term b(s) acts in a manner similar to an attention mechanism, which directs the reward function updates to specific regions of the state space where the agent is believed to be.\nWe emphasize that the QMDP RCNN differs from traditional DRL approaches in that the QMDP RCNN is not provided with samples of the reward function itself via its interaction with the environment, rather, it is provided with action choices made by the expert. While the LfD-IRL approach employed for the QMDP RCNN is on-policy, the in-\nTABLE I Transition Model Error and Replanning Policy Accuracy for BP RCNN.\nValues in Bold represent best-in-class performance. Parameter values marked * are maintained during variation of alternate parameters, and are used during final experiments. Algorithm: Belief Propagation RCNN Weighted Counting Naive Counting\nParameter Type Transition Error Replanning Accuracy Transition Error Replanning Accuracy Transition Error Replanning Accuracy Environment Observability Fully Observable 0.0210 96.882 % 0.0249 96.564 % 0.0249 96.564 % Partially Observable* 0.1133 95.620 % 1.0637 75.571 % 0.1840 83.590 %\nTeacher Forcing Output Recurrence 3.5614 21.113 % 3.0831 27.239 %\nNo use of Recurrence. Target Recurrence* 0.1133 95.620 % 1.0637 75.571 %\nLearning Rate Adaptation\nRMSProp 2.8811 40.315 % 2.5703 44.092 % No use of Learning Rate.Linear Decay 0.2418 93.596 % 1.3236 52.451 %\nFilter-wise Decay* 0.1133 95.620 % 1.0637 75.571 %\nFig. 4. Plot of the time per iteration of Value Iteration versus size of the State Space. The time taken by the VI RCNN is orders of magnitude lesser than regular Value Iteration, for all transition space sizes.\nbuilt planning (via the VI RCNN) causes reward updates to permeate the entire state space. The dependence of the LfDIRL approach in the QMDP RCNN on expert-optimal actions for training differs from the BP RCNN, which uses arbitrary (and often suboptimal) choices of actions."
    }, {
      "heading" : "V. EXPERIMENTAL RESULTS AND DISCUSSIONS",
      "text" : "In this section, experimental results are individually presented with respect to each of the 3 RCNNs defined. VI RCNN: Here, our contribution is a representation that enables a more efficient computation of Value Iteration. We thus present the per-iteration run-time of Value Iteration via the VI RCNN, versus a standard implementation of Value Iteration. Both algorithms are implemented in Python, run on an Intel Core i7 machine, 2.13 GHz, with 4-cores. The inherent parallelization of the convolution facilitates the speed-up of VI by several orders of magnitude, as depicted in Figure 4; at best, the VI RCNN completes a single iteration 5106.42 times faster, and at worst, it is 1704.43 times faster than the regular implementation. BP RCNN: The primary objective while training the BP RCNN is to determine an accurate estimate of the transition model. We evaluate performance using the least square error between the transition model estimate and the ground truth model, defined as C ′t = ∑ a ∑ u ∑ v (T a u,a − T ′au,v)\n2. Since the final objective is to use these learnt models to generate new policies by replanning via the VI RCNN, we also present the replanning accuracy of each model; defined as the percentage of actions chosen correctly by the network’s policy,\ncompared to the original policy. A comparison is provided against the models learnt using a counting style algorithm analogous to that used in [15], as well as a weighted-counting style algorithm that updates model-estimates by counting over belief values. We experiment with the performance of these algorithms under both fully and partially observable settings, and whether teacher forcing is used (via target recurrence) or not (as in output recurrence). Different methods of adapting the learning rate are explored, including RMSProp, linear decay, and maintaining individual learning rates for each transition filter, or filter-wise decay, as presented in Table I.\nThe BP RCNN’s loss function is defined in terms of the non-stationary beliefs at any given time instant. An online training approach is hence rather than batch mode. We observe the filter-wise decay outperforms linear decay when different actions are chosen with varying frequencies. RMSProp suffers from the oscillations in the loss function that arise due to this dynamic nature, and hence performs poorly. The use of teacher forcing mitigates this dynamic nature over time, increasing replanning accuracy from 21.11% to 95.62%. The 95.62% replanning accuracy attained under partial-observability approaches the 96.88% accuracy of the algorithm under fully observable settings. QMDP RCNN: For the QMDP RCNN, the objective is learn a reward function that results in a similar policy and level of performance as the original reward. Since learning such a reward such that the demonstrated trajectories are optimal does not have a unique solution, quantifying the accuracy of the reward estimate is meaningless. Rather, we present the replanning accuracy (as used in the BP RCNN) for both learnt and known transition models and rewards. We also run policy evaluation on the generated policy using the original rewards, and present the increase in expected reward for the learnt models; defined as 1\nN2d\n∑ s V (s)learnt−V (s)orig V (s)orig . The results are\npresented in Table II. As is the case in the BP RCNN, RMSProp (and adaptive learning rates in general) counter the magnitude of reward updates dictated by the QMDP RCNN, and hence adversely affect performance. Experience Replay marginally increases the replanning accuracy, but has a significant effect on the increase in expected reward. Similarly, using delayed feedback (after passes through an entire trajectory) also boosts the increase in expected reward. On learning both rewards and transition models, the QMDP RCNN achieves an appreciable 65.120% policy error and a minimal −10.688% change in\nexpected reward. We emphasize that given access solely to observations and action choices of the agent, and without assuming any feature engineering of the reward, the QMDP RCNN is able to achieve near-optimal levels of expected reward. Utilizing the ground truth transition with the learnt reward, the QMDP RCNN performs marginally worse, with a 63.476% accuracy and a −11.429% change in expected reward.\nThe true efficacy of the BP RCNN and the QMDP RCNN lie in their ability to learn accurate transition models and reward functions in partially observable settings, where they outperforms existing model-based approaches of naive and weighted counting by significant margins, in terms of replanning accuracy, transition errors, and expected reward. Finally, we note that while all 3 defined RCNN architectures are demonstrated for 2-D cases, these architectures can be extended to any number of dimensions, and number of actions, with suitable modifications to the convolution operation in higher dimensions."
    }, {
      "heading" : "VI. CONCLUSION",
      "text" : "In this paper, we defined 3 RCNN like architectures, namely the Value Iteration RCNN, the Belief Propagation RCNN, and the QMDP RCNN, to facilitate a more natural representation of solutions to model-based Reinforcement Learning. Together, these contributions speed up the planning process in a partially observable environment, reducing the cost of replanning for model-based approaches. Given access to agent observations and action choices over time, the BP RCNN learns the transition model, and the QMDP RCNN learns the reward function, and subsequently replans with learnt models to make nearoptimal action choices. The proposed architectures were also found to outperform existing model-based approaches in speed and model accuracy. The natural symbiotic representation of planning and learning algorithms allows these approaches to be extended to more complex tasks, by integrating them with sophisticated perception modules."
    } ],
    "references" : [ {
      "title" : "Playing atari with deep reinforcement learning",
      "author" : [ "V. Mnih", "K. Kavukcuoglu", "D. Silver", "A. Graves", "I. Antonoglou", "D. Wierstra", "M. Riedmiller" ],
      "venue" : "NIPS Deep Learning Workshop, 2013.",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Deep reinforcement learning with double q-learning",
      "author" : [ "H. van Hasselt", "A. Guez", "D. Silver" ],
      "venue" : "CoRR, vol. abs/1509.06461, 2015. [Online]. Available: http://arxiv.org/abs/1509.06461",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Deep recurrent q-learning for partially observable mdps",
      "author" : [ "M.J. Hausknecht", "P. Stone" ],
      "venue" : "CoRR, vol. abs/1507.06527, 2015. [Online]. Available: http://arxiv.org/abs/1507.06527",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Policy gradient methods for reinforcement learning with function approximation",
      "author" : [ "R.S. Sutton", "D. Mcallester", "S. Singh", "Y. Mansour" ],
      "venue" : "In Advances in Neural Information Processing Systems 12. MIT Press, 2000, pp. 1057–1063.",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2000
    }, {
      "title" : "A comparison of direct and model-based reinforcement learning",
      "author" : [ "C.G. Atkeson", "J.C. Santamarı́a" ],
      "venue" : "Proceedings of the 1997 IEEE International Conference on Robotics and Automation, vol. 4. IEEE Press, 1997, pp. 3557–3564. [Online]. Available: ftp://ftp.cc.gatech.edu/pub/people/cga/rl-compare.ps.gz",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "Reinforcement learning in robotics: A survey",
      "author" : [ "J. Kober", "J.A. Bagnell", "J. Peters" ],
      "venue" : "I. J. Robotic Res., vol. 32, no. 11, pp. 1238–1274, 2013. [Online]. Available: http://dx.doi.org/10.1177/0278364913495721",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Quasi-online reinforcement learning for robots",
      "author" : [ "B. Bakker", "V. Zhumatiy", "G. Gruener", "J. Schmidhuber" ],
      "venue" : "Proceedings of the 2006 IEEE International Conference on Robotics and Automation ICRA, 2006.",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Generalized model learning for reinforcement learning on a humanoid robot.",
      "author" : [ "T. Hester", "M. Quinlan", "P. Stone" ],
      "venue" : "in ICRA. IEEE,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2010
    }, {
      "title" : "Inverse reinforcement learning in partially observable environments",
      "author" : [ "J. Choi", "K.-E. Kim" ],
      "venue" : "J. Mach. Learn. Res., vol. 12, pp. 691– 730, Jul. 2011. [Online]. Available: http://dl.acm.org/citation.cfm?id= 1953048.2021028",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Introduction to Reinforcement Learning, 1st ed",
      "author" : [ "R.S. Sutton", "A.G. Barto" ],
      "venue" : null,
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1998
    }, {
      "title" : "Apprenticeship learning via inverse reinforcement learning",
      "author" : [ "P. Abbeel", "A.Y. Ng" ],
      "venue" : "In Proceedings of the Twenty-first International Conference on Machine Learning. ACM Press, 2004.",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Value iteration networks",
      "author" : [ "A. Tamar", "S. Levine", "P. Abbeel" ],
      "venue" : "CoRR, vol. abs/1602.02867, 2016. [Online]. Available: http://arxiv.org/abs/ 1602.02867",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Deep learning",
      "author" : [ "A.C. Ian Goodfellow", "Yoshua Bengio" ],
      "venue" : "2016, book in preparation for MIT Press. [Online]. Available: http: //www.deeplearningbook.org",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2016
    }, {
      "title" : "Self-improving reactive agents based on reinforcement learning, planning and teaching",
      "author" : [ "L.-J. Lin" ],
      "venue" : "Machine Learning, vol. 8, no. 3–4, pp. 293–321, 1992. [Online]. Available: http://www.cs.ualberta.ca/ ∼sutton/lin-92.pdf",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 1992
    }, {
      "title" : "Near-optimal reinforcement learning in polynomial time",
      "author" : [ "M. Kearns", "S. Singh" ],
      "venue" : "Mach. Learn., vol. 49, no. 2-3, pp. 209–232, Nov. 2002. [Online]. Available: http://dx.doi.org/10.1023/A:1017984413808",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "Incentivizing exploration in reinforcement learning with deep predictive models",
      "author" : [ "B.C. Stadie", "S. Levine", "P. Abbeel" ],
      "venue" : "CoRR, vol. abs/1507.00814, 2015. [Online]. Available: http://arxiv.org/abs/1507. 00814",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Reinforcement learning with long short-term memory",
      "author" : [ "B. Bakker" ],
      "venue" : "In NIPS. MIT Press, 2002, pp. 1475–1482.",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "Action-conditional video prediction using deep networks in atari games",
      "author" : [ "J. Oh", "X. Guo", "H. Lee", "R.L. Lewis", "S.P. Singh" ],
      "venue" : "CoRR, vol. abs/1507.08750, 2015. [Online]. Available: http://arxiv.org/abs/1507. 08750",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Nonparametric model-based reinforcement learning",
      "author" : [ "C.G. Atkeson" ],
      "venue" : "Advances in Neural Information Processing Systems 10, [NIPS Conference, Denver, Colorado, USA, 1997], 1997, pp. 1008–1014. [Online]. Available: http://papers.nips.cc/paper/ 1476-nonparametric-model-based-reinforcement-learning",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "Longterm planning by short-term prediction",
      "author" : [ "S. Shalev-Shwartz", "N. Ben-Zrihem", "A. Cohen", "A. Shashua" ],
      "venue" : "CoRR, vol. abs/1602.01580, 2016. [Online]. Available: http://arxiv.org/abs/1602.01580",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 2016
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Deep Reinforcement Learning (DRL) algorithms exploit model-free Reinforcement Learning (RL) techniques, to achieve high levels of performance on a variety of tasks, often on par with human experts in the same domain [1].",
      "startOffset" : 216,
      "endOffset" : 219
    }, {
      "referenceID" : 0,
      "context" : "These DRL methods use deep networks to either approximate the actionvalue functions as in Deep Q Networks [1]–[3], or directly parametrizing the policy, as in policy gradient methods [4].",
      "startOffset" : 106,
      "endOffset" : 109
    }, {
      "referenceID" : 2,
      "context" : "These DRL methods use deep networks to either approximate the actionvalue functions as in Deep Q Networks [1]–[3], or directly parametrizing the policy, as in policy gradient methods [4].",
      "startOffset" : 110,
      "endOffset" : 113
    }, {
      "referenceID" : 3,
      "context" : "These DRL methods use deep networks to either approximate the actionvalue functions as in Deep Q Networks [1]–[3], or directly parametrizing the policy, as in policy gradient methods [4].",
      "startOffset" : 183,
      "endOffset" : 186
    }, {
      "referenceID" : 4,
      "context" : "In contrast, model-based methods [5]–[8] exploit this inherent structure to make decisions, based on domain knowledge.",
      "startOffset" : 33,
      "endOffset" : 36
    }, {
      "referenceID" : 7,
      "context" : "In contrast, model-based methods [5]–[8] exploit this inherent structure to make decisions, based on domain knowledge.",
      "startOffset" : 37,
      "endOffset" : 40
    }, {
      "referenceID" : 8,
      "context" : "The estimates of the transition model and reward function associated with the underlying Markov Decision Process (MDP) are transferable across environments and agents [9],",
      "startOffset" : 167,
      "endOffset" : 170
    }, {
      "referenceID" : 9,
      "context" : "A significant deterrent from model-based RL is the indirect nature of learning with the estimated model; subsequent planning is required to obtain the optimal policy [10].",
      "startOffset" : 166,
      "endOffset" : 170
    }, {
      "referenceID" : 10,
      "context" : "Backpropagation through the QMDP RCNN learns the reward function of an expert agent, in a Learning from Demonstration via Inverse Reinforcement Learning (LfD-IRL) setting [11].",
      "startOffset" : 171,
      "endOffset" : 175
    }, {
      "referenceID" : 11,
      "context" : "We note that [12] follows an approach mathematically similar to the VI RCNN; however it differs in being a modelfree approach.",
      "startOffset" : 13,
      "endOffset" : 17
    }, {
      "referenceID" : 11,
      "context" : "more naturally than the fully connected layer used in [12].",
      "startOffset" : 54,
      "endOffset" : 58
    }, {
      "referenceID" : 11,
      "context" : "The gradient updates of the QMDP RCNN adopt an intuitive form, that further contributes to an intuitive understanding of the action choices of the QMDP RCNN, as compared to [12].",
      "startOffset" : 173,
      "endOffset" : 177
    }, {
      "referenceID" : 12,
      "context" : "Teacher forcing [13] is adopted to handle this uncertainty; thus the target belief, rather than the network",
      "startOffset" : 16,
      "endOffset" : 20
    }, {
      "referenceID" : 13,
      "context" : "Experience replay [14] is used to randomize over the expert trajectories and transitions while training the QMDP RCNN.",
      "startOffset" : 18,
      "endOffset" : 22
    }, {
      "referenceID" : 14,
      "context" : "A comparison is provided against the models learnt using a counting style algorithm analogous to that used in [15], as well as a weighted-counting style algorithm that updates model-estimates by counting over belief values.",
      "startOffset" : 110,
      "endOffset" : 114
    } ],
    "year" : 2017,
    "abstractText" : "Deep Reinforcement Learning has enabled the learning of policies for complex tasks in partially observable environments, without explicitly learning the underlying model of the tasks. While such model-free methods achieve considerable performance, they often ignore the structure of task. We present a natural representation of to Reinforcement Learning (RL) problems using Recurrent Convolutional Neural Networks (RCNNs), to better exploit this inherent structure. We define 3 such RCNNs, whose forward passes execute an efficient Value Iteration, propagate beliefs of state in partially observable environments, and choose optimal actions respectively. Backpropagating gradients through these RCNNs allows the system to explicitly learn the Transition Model and Reward Function associated with the underlying MDP, serving as an elegant alternative to classical model-based RL. We evaluate the proposed algorithms in simulation, considering a robot planning problem. We demonstrate the capability of our framework to reduce the cost of re-planning, learn accurate MDP models, and finally re-plan with learnt models to achieve near-optimal policies.",
    "creator" : "LaTeX with hyperref package"
  }
}