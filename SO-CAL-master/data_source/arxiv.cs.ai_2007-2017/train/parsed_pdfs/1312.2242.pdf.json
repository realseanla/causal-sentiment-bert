{
  "name" : "1312.2242.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "CLIC:  A  Framework  for  Distributed,  On-‐Demand,   Human-‐Machine  Cognitive  Systems  \n   N.  Mavridis  (1),  S.  Konstantopoulos  (1),  I.  Vetsikas  (1),  \nI.  Heldal  (2),  P.  Karampiperis  (1),  G.  Mathiason  (2),  S.  Thill  (2),   K.  Stathis  (3),  V.  Karkaletsis  (1)    \n   (1)  Institute  of  Informatics  and  Telecommunications  \nNCSR  “Demokritos”,  Athens,  Greece   (2)  University  of  Skovde,  Sweden  \n(3)  Royal  Holloway,  University  of  London,  U.K.   Abstract   Traditional   Artificial   Cognitive   Systems   (for   example,   intelligent   robots)   share   a   number   of   common   limitations.   First,   they   are   usually   made   up   only   of   machine   components;  humans  are  only  playing  the  role  of  user  or  supervisor.    And  yet,  there   are  tasks  in  which  the  current  state  of  the  art  of  AI  has  much  worse  performance  or   is   more   expensive   than   humans:   thus,   it   would   be   highly   beneficial   to   have   a   systematic   way   of   creating   systems   with   both   human   and   machine   components,   possibly   with   remote   non-‐expert   humans   providing   snippets   of   some   seconds   of   their  capacities  in  real-‐time.  Second,  their  components  are  specific  and  dedicated  to   one   and   only   one   system,   and   are   often   underutilized   for   significant   fractions   of   their   lifetime.   Third,   there   is   no   inherent   support   for   robust,   fault-‐tolerant   operation,   and   if   a   new   component   becomes   available,   with   better   performance   and/or  cheaper  cost,  one  cannot  easily  replace  the  old  component.  Fourth,  and  quite   importantly  in  terms  of  their  economics,  they  are  viewed  as  a  resource  that  needs  to   be  developed  and  owned,  not  as  a  utility;  i.e.  not  as  a  service  provided  on  demand.     Motivated   by   the   above   state   of   affairs,   in   this   paper   we   are   presenting   CLIC:   a   framework  for  constructing  cognitive  systems  that  overcome  the  above  mentioned   limitations.  With   the   four-‐layer   software   architecture   of   CLIC,  we   provide   specific   yet   extensible   mechanisms   that   enable   the   creation   and   operation   of   distributed   cognitive  systems  that  fulfill  the  following  desiderata:  First,  that  are  distributed  yet   situated,  interacting  with  the  physical  world  though  sensing  and  actuation  services,   and   that   are   also   combining   services   provided   by   humans   as   well   as   services   implemented  by  machines.  Second,  that  are  made  up  of  components  that  are  time-‐ shared   and   re-‐usable   across   systems.   Third,   that   provide   increased   robustness   through  self-‐repair  mechanisms.  Fourth,  that  are  constructed  and  reconstructed  on   the   fly,   with   components   that   dynamically   enter   and   exit   the   system,   while   the   system   is   in   operation,   on   the   basis   of   availability,   and   pricing,   and   need.   Quite   importantly,  fifth,  the  cognitive  systems  created  and  operated  by  CLIC  do  not  need   to   be   owned   and   can   be   provided   on   demand,   as   a   utility   –   thus   transforming   human-‐machine   situated   intelligence   to   a   service,   and   opening   up   numerous   interesting  research  directions  and  application  opportunities.  \n1.  Introduction  \nTraditionally,  most  of  the  cognitive  systems  that  have  been  engineered  in  the  past,   have  had  a  number  of  common  characteristics.  First,  they  were  primarily  composed   of  electronic  or  machine  elements;  and  not  human  elements.  For  example,  consider   the  case  of  an  intelligent  robot  equipped  with  vision  that  aims  to  fulfill  a  mechanical   task  –  search  for  a  certain  kind  of  object,   fetch,  and  place  it  at  a  specific  container.   Such  a  system  is  comprised  of  electronic  sensing  components  (camera,  sonars  etc.),   electronic   cognition   components   (software   components   performing   pattern   recognition,  planning,  motor  control  etc.),  and  electromechanical  actuation:  an  arm   with   a   gripper,   which   fetches   and   places   objects.   Notice   that   there   are  no  human   components  within  such  a  cognitive  system;  even  if  the  system  was  interacting  with   a  human,  the  human  is  not  part  of  the  sensory,  cognitive  or  actuation  components  of   the  system;  but  rather  has  the  role  of  a  supervisor,  controller,  or  collaborator  which   is  external  to  the  cognitive  system  itself.  Second,  notice  that  the  actual  components   of   the   cognitive   system   (in   this   case,   a   robot)   that   was   just   described   are   all   physically   part   of   the   system   itself;   they   are   not   spatially   distributed,   and   furthermore,   they   are   specific   to   this   system   (robot)   and   dedicate   all   of   their   operating  time  to  this  robot.  I.e.  they  are  usually  neither  distant,  nor  distributed,  and   neither   time-‐shared   nor   reused   for   various   cognitive   systems.   Furthermore,   the   components  not  only  do  not  partake  to  different  cognitive  systems,  but  the  cognitive   system  is  dependent  on  them  throughout  its  operating  time;  if  a  sensor  fails,  there  is   no  graceful  way  for  it  to  be  replaced  without  disrupting  the  operation  of  the  system.   Thus,   there   is   no   inherent   support   for   robust,   fault-‐tolerant   operation,   and   furthermore,   if   a   new   component   (for   example,   camera   or   pattern   recognition   algorithm   becomes   available,   with   better   performance   and/or   cheaper   cost,   one   cannot  easily  replace  the  old  component.   The  motivation  behind  this  paper  is  to  contribute  to  improving  the  above-‐described   state  of  affairs.  We  address  the  following  questions:  How  can  the  cognitive  systems   of   the   future   exhibit   improved   characteristics?   Can   they   consist   also   of   human   components,  given  that   for  some  cases   they  exhibit  better  performance  and/or  are   more   readily   available   than   electronic   elements?   For   example:   humans   are  much   better   in   performing   activity   recognition   as   compared   to   the   state-‐of-‐the   art   automated   systems   (better   performance).   Another   example   is   that   of   a   human   observer  next  to  a  broken  traffic  camera,  who  can  be  useful  acting  as  a  sensor  that   reports   traffic   conditions   (availability).   Based   on   this   the   following   questions   are   raised  up:  Can   the   cognitive   systems  of   the   future   include  distributed   components   that  are  time-‐shared  and  re-‐used   for  various  systems,  and  also  enable  much  higher   robustness  and  flexibility?  For  example  –  why  should  the  surveillance  cameras  of  a   city   be   dedicated   only   to   surveillance,   and  why   can   they   not   be   reused   for   other   purposes   too?   Can   we   even   reach   a   stage,   where   one   is   able   to   offer   situated   cognitive  systems  as  an  on-‐demand  service,  on  the  basis  of  the  type  of  the  requests?   All  of  this  seems  like  quite  distant  from  the  state  of  the  art  of  today  –  but  is  it?   It  might   not   be   that   distant:   it   is  worth   noting   a   number   of   recent   developments,   from  across  the  Atlantic:  First,   the  DARPA  2009  Network  Challenge,  often  referred  \nto   as   the   “Ten   Red   Balloons”   competition.   During   this   Challenge,   ten   large   red   balloons   were   placed   in   locations   around   the   United   States,   with   their   location   unknown  to  the  participating  teams.  The  goal  of   the  teams  was  to  create  a  system   that   is   able   to   locate   the   balloons   in   minimum   time.   There   was   no   restriction   regarding  the  components  of  the  system:  they  could  be  electronic,  human,  or  both.  A   team   from   the   MIT   Media   Lab   won   the   challenge:   through   an   ingenious   scheme   thousands  of  non-‐expert  humans  were  recruited  lending  some  seconds  of  their  eyes   to  the  resulting  system;  this  information  was  propagated  and  combined,  in  order  for   the   system   to  determine   the   location  of   the  balloons,   see  Tang  et   al.   [Tan11].  One   can   view   the   system   that   was   created   as   a  massive   distributed   cognitive   system:   with   sensing   (vision)   provided   by   human   components,   pattern   recognition   (red   balloon   recognition)   provided   by   humans   too,   and   information   fusion   as   well   as   propagation   provided   by   electronic   components.   Notice   that   in   this   system   the   components   are   human   as  well   as  machine,   they   are   distant   (spread   over   a   large   geographical   area).   Furthermore,   the   human   components   are  not  dedicated   to   the   system   (i.e.   the   humans   that   spent   10   seconds   of   their   time   looking   around   for   a   balloon  are  also  using  their  eyes  and  brains  for  other  tasks),  i.e.  their  sensing  as  well   as  cognition  apparatus  is  time-‐shared  and  re-‐used.  Finally,  there  is  a  large  degree  of   robustness   to  the  system  as  false-‐reports  can  be  crossed-‐out  of  the  system  through   the   special   algorithms   used   and   through   the   inherent   redundancy   in   sensing   resources.   But   there   are   also  many   other   recent   developments   of   a   similar   nature:   Another   notable   example   is   Von   Ahn's   [Ahn08]   ingenious   CAPTCHA-‐breaker   scheme.   CAPTCHAs  are  often  used  in  order  to  stop  spam  email  programs  and  other  bots  from   creating  thousands  of  email  accounts  in  order  to  propagate  spam.  They  are  usually   strings   of   letters   and   numbers,   with   character   sets   that   contain   geometric   distortions   and   occlusions.   The   characters   in   the   CAPTCHAs   are   very   easy   for   humans  to  recognize;  however,  they  are  quite  difficult  for  machines,  given  the  state   of  the  art  of  Optical  Character  Recognition  (OCR).  Thus,  a  solution  towards  breaking   CAPTCHAs,   involves   finding   non-‐expert   humans   online,   and   incentivizing   them   adequately,   so   that   they  break   the  CAPTCHA   (by   recognizing   the   characters)  with   the  answer  collected  by  the  spam  mailer  program,  which  opens  the  accounts  right   away.   The   humans   effectively   lend   some   seconds   of   their   mind   to   the   system,   performing   the   cognitive   service   of   character   recognition   for   it,   incentivized   by   illegal   downloads   that   the   system   offers   to   them   in   return   for   their   services.   In   essence,   a   large   distributed   cognitive   system   is   effectively   created   consisting   of   human  as  well  as  machine  components,  which  dynamically  enter  and  exit  the  system,   in  order  to  be  able  to  achieve  superior  results  that  would  have  been  impossible  by   either  alone  as  demonstrated  in  the  DARPA  10  Red  Balloons  challenge.   Finally,   we   consider   a   third   recent   development,   the   cloud   computing   paradigm.   Traditionally,   computation   required   ownership   of   resources:   computers,   storage   space,  and  software.  With  cloud  computing,  computation  is  viewed  as  a  utility.  What   do  we  mean  by  “utility”?  In  a  similar  sense  with  modern  power  and  water  networks,   users  of  the  cloud  do  not  need  to  own  the  means  of  production  or  distribution  (i.e.   power   generators,  water   sources   and  distribution  networks):   they   just   connect   to  \nthe   cloud,   and   time-‐share   reusable   distant   distributed   computation,   storage,   and   code   resources,   in   a   transparent   fashion   (not   knowing   the   whereabouts   or   the   specifics  of  them),  and  with  high  robustness.   But   how   are   the   cloud,   CAPTCHA   breakers,   and   the   ten   red-‐balloon   challenge   relevant  to  the  cognitive  systems  of  the  future?  To  answer  this  question,  the  aim  of   CLIC   is   to   provide   a   conceptual   framework   to   integrate   ideas,   constructs,   architectures   and   techniques   from   human-‐machine   cognitive   systems,   artificially   intelligent   agents   and   services   of   the   kind   presented   in   cloud   computing   to   build   human-‐machine   cognitive   and   intelligent   systems  on  demand.  The   contribution  of   the   proposed   framework   is   the   identification   and   conceptual   definition   of   four   layers   that   need   to   be   available   for   building   cognitive   systems   applications.  More   concretely,  the  CLIC  framework  specifies  the  components  in  each  layer,  the  relations   between  components  within  a   layer,   as  well   as   the   relation  of   components  among   different   layers.  The  ideas  presented  are  also  exemplified  using  a  cognitive  system   application   for   a   transport   system   so   that   the   reader   can   appreciate   the   broader   implications  and  relevance  of  CLIC  for  the  construction  of  future  cognitive  systems.   The  paper   is  structured  as   follows.  We  start  by  providing  an  overview  of   the  CLIC   framework   and   a  description  of   its   basic   concepts   and   terminology   as  well   as   the   proposed  architecture.  Then  we  describe  a  use  case  built  by  the  CLIC  framework:  a   cognitive   system   for   transport   management.   An   extensive   discussion   and   juxtaposition   of   how   the   four   layers   of   our   framework   can   be   applicable   to   a   practical  application  follows.  We  continue  with  a  detailed  discussion  that  identifies   the  research  challenges  for  developing  systems  in  the  CLIC  framework,  while  at  the   same  time  we  review  existing  research  that  is  relevant  to  the  ideas  of  the  framework   and   how   such   research   opens   up   opportunities   for   further   work   and   real-‐world   large-‐scale  applications.  \n2.  Overview  and  Basic  Concepts    \nThe  basic  entity  of  CLIC  is  that  of  a  cognitive  system  which  is  construed  conceptually   as  a   (possibly   large)  monolithic  agent;   composed  of  components   that  partake   in  an   information   processing   topology.   In   this   paper   we   will   discuss   use   cases   that   construct   feed-‐forward   pipelines,   the   simplest   topology   possible,   although   arbitrarily  complex  topologies  are  admissible  by  the  framework.   The  components  themselves  (for  example,  a  human  sensing  component)  can  belong   to  other  agents  (if  we  also  consider  humans  themselves  as  agents).  Since  cognitive   systems  can  be  constructed  as  having  an  underlying  multi-‐agent  network,  we  also   can  adopt   the  viewpoint  of   the  composite  unitary  agent   that   is   created   from   them,   and  not  that  of  the  underlying  multi-‐agent  network.   In  order  to  address  the  design  challenge  of  distributed,  human-‐machine,  on  demand,   and  on-‐the-‐fly  cognitive  systems,  we  propose  a  two-‐fold  extension  of  the  concept  of   cloud  computing  and  we  develop  the  mechanisms  that  enable  the  construction  and   deployment  of  cognitive  systems  using  our  proposed  framework:  \n• Cloud  computing  is  a  computing  paradigm  of  interchangeable  processing  and   storage  components  that  are  distributed,  time-‐shared,  and  re-‐used.  \n• Cloud  computing  is  also  well  suited  for  defining   fault-‐tolerance  mechanisms   for  falling  back  to  alternative  processing  and  storage  services.  \n• The   first   extension   pertains   to   the   design   of   situated   systems,   that   is,   of   systems  that  contain  not  only  abstract  processing  elements,  but  also  sensing   and   actuation   elements.   This   leads   us   to   categorize   components   as   sensing   components  (S),  processing  components  (P),  or  actuation  components  (A).  \n• The  second  extension  pertains  to  the  inclusion  of   interchangeable  human  as   well  as  machine   components.  This   leads  to  categorize  specific   instances  of  a   component  as  being  of  human  nature  (h)  or  of  machine  nature  (e).1  \n   Thus,  in  total  we  have  six  possible  combinations:  Sh,  Se,  Ph,  Pe,  Ah,  and  Ae.   A  sensing  component   transduces   information   from  the  physical  world   to   its  output   and  does  not  receive  any  informational  input  from  the  system.  Examples  of  sensing   components   are:   Electronic   Cameras   (Se),   Electronic   Temperature   Sensors   (Se),   Humans  providing   textual  reports  of  what   they  have  seen  (Sh),  Humans  providing   reports  of  whether  they  heard  a  particular  sound  (Sh)  and  so  on.   A   processing   component   transforms   information   from   its   input   to   its   output.   For   example,  one  could  have  an  electronic  Face  Recognition  processing  component  (Pe);   its  input  is  a  stream  of  images  of  faces,  its  output  is  a  list  of  estimated  identities.  Or   one   could   have   a   human   processing   component   (Ph)   that   provides   a   natural   language-‐translation  service;  its  input  is  text  in  English,  its  output  text  in  Chinese.   Finally,  one  can  also  have  actuation  components,   transducing   information  from  the   input  to  action  in  the  physical  world;  for  example,  a  robotic  arm  (Ae),  a  light  display   (Ae),  or  a  human  which  is  capable  of  picking  up  and  placing  objects  (Ah),  or  singing   songs   whose   scores   are   sent   to   him   electronically   (Ah).   The   pictorial   representations  of  the  three  basic  components  are  shown  in  Figure  1,  together  with   the  connector  links  that  connect  them  in  a  processing  pipeline.     \n   Figure   1:   The   three   basic   component   types:   S   (Sensing),   P   (Processing),   A   (Actuation)     \n                                                                                                                 1   The   distinction   between   components   and   component   instances   should   be   noted   at   this   point:   a   component   is   the   class   of   the   individual   pieces   of   hardware   or   people   (component   instances)   that   perform  the  exact  same  function  and  are  perfectly  interchangeable.  \nFor   the   case   of   human   components   (Sh,   Ph,   or   Ah),   a   special   human-‐machine   interface  is  required,  which  is   internal  to  the  component  itself.  This  might  be  their   cell   phone,   a   touch-‐screen   interface;   a   keyboard;   a   spoken-‐language   dialogue   system,  a  browser  application,  an  online  game,  and  so  on.  Essentially,  for  the  case  of   human  components,  what  we  have  is  something  similar  to  Figure  2.     \n   Figure  2:  Internals  of  the  Human  versions  of  the  three  basic  components:  Sh,  Ph,  Ah.   The  Human-‐Machine  Interface  is  pictorially  depicted  (symbolized  by  keyboard  and   screen),  inside  the  wrapper  of  the  component.      In  Figure  2  there  is  also  a  depiction  of  generic  input  and  output  devices  for  human-‐ machine   interfacing   specific   for   the   human   components.   Research   questions   and   implementation   tasks   for   human-‐machine   interfaces   suitable   for   human   crowd-‐ servicing,   belong   to   L0   (Real-‐time   Human   Services   Interfacing)   of   the   supporting   mechanisms  for  CLIC.  Also,  research  questions  regarding  incentivization  of  humans   belong  to  L0  too.   An   extensible   yet   compact   typology   of   possible   sensing,   processing,   and   actuation   components,   either   human   or   machine,   is   one   of   the   features   of   CLIC.   Such   a   typology  should  also  support  multiple  levels  of  specification  abstraction,  as  we  shall   see:   moving   from   device-‐specific   towards   device-‐independent   descriptions.   This   typology  is  developed  as  part  of  Layer  L1  (the  Cognitive  Component  Interfacing).   It   is   worth   noting   that   each   of   the   above   components   comes   together   with   an   associated   service-‐level   agreement   (SLA),   prescribing   its   supported   functionality,   quality,  pricing  and  so  on.   Components  which  are  available  for  use  belong  to  the  Component  Pool.  They  have  to   declare  their  availability  through  the  mechanisms  provided  in  Layer  L1  of  CLIC,  the   Cognitive   Component   Interfacing   Layer.   This   Layer   prescribes   SLA   structures,   as   well  as  “wrappers”  for  making  specific  components  able  to  be  interfaced  with  CLIC.     \n   Figure   3:   Component   Pool:   where   available   components   reside,   while   other   components  exit  or  enter      So   far,  we   have   just   talked   about   basic   components,   and   several   aspects   of   them:   notation,   types,   special   provisions   for   human   components,   and   mentioned   the   lowest   layers:  L0  and  L1.  We  have  also   introduced   the  Component  Pool  as  well  as   the   Information   Pipeline.   The   important   question   that   follows   is:   how   can   one   assemble   components   and   bind   them   in   order   to   form   an   information   pipeline,   which  will  implement  a  Cognitive  System  within  CLIC?   CLIC   provides   two   main   avenues   for   doing   that:   one   can   start   by   giving   to   CLIC   either   a   mid-‐level   “Blueprint   Specification”   of   the   desired   Cognitive   System,   or   a   high-‐level   “Teleological   Specification”.   Let   us   start   with   the   first.   A   Blueprint   Specification  provides  a  description  of  the  information  processing  pipeline  that  will   implement  the  desired  cognitive  agent:  how  many  components,  their  overall  type,  as   well   as   the   topology   of   their   interconnection   are   specified   in   this   blueprint.   Also,   each   component   has   a   partial   specification   regarding   its   functionality   and   characteristics.   Thus,  we   do   not   have   a   full   specification   for   each   component   that   partakes  in  the  pipeline;  but  just  a  partial  specification,  i.e.  what  we  call  a  blueprint.   For   instance,   the  partial  specification  might  declare  that  we  need  to  have  a  sensor   that  can  detect  humans  in  a  specific  spatial  area  –  for  example,  in  front  of  the  main   entrance   of   a   specific   university.   There   might   be   many   available   sensing   components   in   the   component   pool   that  might   fulfill   this   partial   specification;   for   example,   a   human  with   a   PDA  willing   to   provide   a   report;   or   a   street   camera;   or   even   a   UAV-‐mounted   camera   that   can   fly   there   within   the   maximum   timeframe   provided  by  the  specification.  All  of  these  components  that  are  available  in  the  pool   could  potentially  implement  the  blueprint.  The  search  for  available  components  that   could   implement  a  blueprint,   the  negotiation  of  their  SLA  and  their  reservation,  as  \nwell  as  the  monitoring  of  their  operation  in  order  to  ensure  they  are  not  faulty  and   that  they  conform  to  the  SLA,  is  taken  care  of  through  the  mechanisms  of  Layer  L2,   usually   referred   to   as   the   “Service   Procurement   and   SLA   Monitoring”   Layer.   Furthermore,   L2   initiates   information   flow   through   the   pipeline,   once   it   has   been   implemented  and  its  components  have  been  bound.   The   second   avenue,   which   is   to   give   to   the   system   a   high-‐level   teleological   specification,  is  handled  by  the  top  layer  (L3)  of  the  CLIC  architecture.  This  layer  will   also   deal   with   possible   conflicting   goals   between   the   actors   of   the   system.   The   details   of   how   this   layer   and   all   the   other   layer  work  will   be   detailed   in   the   next   section.    \n3.  Architecture  \nWe   propose   a   four-‐layer   architecture,   which   provides   mechanisms   for:   Goal   Arbitration   and   Teleological   Description   at   the   highest   level   (L3),   Service   Procurement  and  Replacement  and  SLA  Monitoring  (L2),  and  Cognitive  Component   Interfacing  (L1).  The   low-‐level  mechanics  of   indexing  and  connecting  the  available   components   is   treated   in   pseudo-‐layer   L0   that,   although   essential,   is   outside   the   core   cognitive   architecture,   since   they   provide   the   infrastructure   of   using   and   negotiating  with  the  offered  services,  and  form  the  cloud  of  the  machine  and  human   services  that  the  cognitive  system  will  be  made  of,  but  they  are  not  part  of  the  CLIC   framework  itself,  which  is  the  way  that  we  select  which  of  these  services  are  going   to  be  contracted.   Let   us   now   illustrate   the   above   functionality   through   a   concrete   example.   Let   us   assume  that  a  user  of  CLIC  desires  to  create  a  simple  Cognitive  System  that  is  able  to   make  a  loud  noise  inside  a  certain  office  when  a  specific  person  stands  in  front  of  the   entrance   of   a   certain   building.   The   user   provides   Layer   2   with   the   following   “Blueprint  Specification”:  (Notice  here  that  for  the  sake  of  simplicity  we  have  chosen   a   basic   three-‐component   feed-‐forward   system.   Real   world   systems   implemented   through   CLIC   could   potentially   have   thousands   of   components   with   complicated   interconnection  topologies)     \n   Figure   4:   Example   Blueprint   Specification   of   a   basic   three-‐component   cognitive   system     \nOnce  the  Blueprint  Specification  has  arrived  at  Layer  2,  the  mechanisms  of  the  layer   search  the  available  Component  Pool  through  the  interfaces  of  Layer  1,   in  order  to   find  available  components  which  fulfill  the  partial  specification.  A  number  of  actual   component   candidates   arise   for   the   implementation   of   each   of   the   blueprint   components.   The   SLAs   of   each   of   the   candidates   are   fetched;   and   possibly   after   negotiation,  one  specific  available  component  is  selected  in  order  to  implement  each   blueprint  component.     \n   Figure   5:   Searching   the   available   component  pool,   examining   suitable   candidates,   and  selecting  the  winning  component  in  order  to  implement  the  first  component  of   a  Blueprint  Specification      Once   the  winning   components   are   selected,   they   are   reserved   through   a   contract.   Then,  they  are  interconnected  through  segments  of  the  information  pipeline  (Layer   2  utilizes  the  interfaces  of  Layer  1  towards  that  goal).  Still,  information  flow  has  not   started.  According  to  the  starting  time  specified   in  the  Blueprint  Spec,   information   flow  is  initiated  by  appropriate  signaling  from  Layer  2  to  the  components.     \n   Figure   6:   Interconnecting   the  chosen  components   to   the   information  pipeline  and   starting  the  information  flow.      After   information   flow   is   started,   the   user’s   desired   cognitive   system   which   was   described   in   the   blueprint   specification   has   been   actually   implemented   and   is   furthermore   in   operation.   During   operation,   Layer   2   has   the   important   role   of   monitoring   operation,   and   replacing   component   when   required.   Component   replacements   may   be   required   if   a   component   unexpectedly   becomes   faulty   or   unavailable;  if  the  contract  end  time  is  reached;  if  the  terms  of  the  SLA  are  not  kept;   or   if   the   availability   of   a   better   or   more   economical   component   makes   the   replacement  advantageous,  despite  any  potential  penalties.     \n   Figure  7:  Example  of  replacement  of  components      So  far,  we  have  shown  how  components  can  be  selected,  and  rented  and  replaced,  in   order   to   implement   and   operate   a   partially-‐specified   desired   Cognitive   System.   Through   the   mechanisms   described   above,   one   is   able   through   CLIC   to   create   Cognitive   Systems   that   are   situated,  whose   components   can   be   human   as  well   as   machine,  which  exhibit  high  robustness,  and  which  can  be  constructed  on  demand   as   well   as   reconstructed   on   the   fly.   However,   we   haven’t   yet   illustrated   how   the   components  of   such  a   system  can  be  not  only   reused,  but  also   time-‐shared.  Reuse   can   easily   be   envisioned;   once   the   operation   of   a   certain   cognitive   system   is   terminated,   they   are   free   to   be   procured   by   Layer   2   in   order   to   participate   in   another   Cognitive   System,   which   might   have   been   requested   to   be   created   and   operated  through  CLIC.   CLIC  can  reach  even  higher  utilization  of  components  and  minimization  of  their  idle   time.  This  is  illustrated  in  the  following  scenario.  While  the  person-‐detection-‐alarm   Cognitive  System  described  above  is  still  in  operation,  a  blueprint  specification  for  a   new  Cognitive  System  that  has  to  operate  at  the  same  time  is  sent  to  CLIC’s  Layer  2.   While   the   previous   cognitive   system   is   operating,   tis   components  might   be   time-‐ shared   as   illustrated   in   the   following   two   scenarios.   First,   a   component  might   be   able   to  either  share  its  output  with  another  recipient   (for  example,   the  output  of  a   camera  might  also  be  fed  to  a  car  detector,  in  parallel  to  the  face  recognizer;  in  that   respect,   the   Sensing   Component   S   can   partake   in   both   a   cognitive   system   performing  human  detection  as  well  as  in  another  which  does  traffic  estimation  and   reshaping).  Second,  a  component  might  have  unused  processing  cycles;  these  could   be  reused,  by   it  partaking   in  another  cognitive  system  which  requests   its  services,   through  time-‐sharing.  For  example,  there  might  be  another  cognitive  system  which   is  performing  massive   tagging  of   faces   in  a  video   that  was  shot  some  months  ago;   that  system  might  be  able  to  utilize  unused  cycles  of  the  face  recognition  Processing  \nComponent  P,  which  is  also  partaking  in  the  person-‐detector  alarm  cognitive  system   described  earlier  in  this  section.     \n  \n   Figure  8:  Two  ways  of  re-‐using  components:  output-‐sharing  (top)  and  time-‐sharing   (bottom)      Finally,  having  described  the  involvement  of  the  mechanisms  of  Layers  0,  1  and  2  in   the  operation  of  CLIC  and  the  construction,  operation,  and  maintenance  of  desired   Cognitive  Systems  through  CLIC,  let  us  describe  the  main  functionalities  of  Layer  3,   which   has   two   main   functions:   Goal   Arbitration   and   Teleological   Description  \nTranslation.  Goal  Arbitration  takes  place  during  the  run-‐time  of  a  Cognitive  System   deployed  through  CLIC;  Teleological  Translation  takes  place  before  the  construction   of  a  Cognitive  System  through  CLIC,  if  desired.     Let   us   start   with   the   latter:   Teleological   Description   Translation.   As   mentioned   above,  there  are  two  ways  for  a  user  of  CLIC  to  request  the  creation  of  a  particular   Cognitive   System:   through   a   Blueprint   Specification,   which   is   sent   to   Layer   2,   or   through  a  Teleological  Specification.  The  Teleological  Specification  does  not  contain   a  description  of  the  structure  of  a  system  and  the  specifications  of  its  components,   as   is   the   case   for   the  mid-‐level   Blueprint   Specification;   rather,   it   contains   a   high-‐ level  description  of  the  desired  purpose  of  the  system,  and  not  of  its  structure.  Layer   3   provides   tools   for   creating   such   descriptions,   and   then,   for   translating   them   to   mid-‐level  Blueprint  descriptions,  which  can  be  sent  to  Layer  2  for  procurement  and   operation,   i.e.   effectively   aiding   in   the   translation   of   high-‐level   teleological   descriptions  to  mid-‐level  structural.   Now,   let   us   move   to   Goal   Arbitration.   While   a   certain   cognitive   system   is   in   operation,   one   might   able   to   externally   dynamically   specify   parameters   of   the   current  goal  that  it  is  trying  to  pursue.  For  example,  in  a  traffic  control  scenario,  the   corresponding  system  would  have  to  serve  two  kinds  of  goals:  (a)  preset  ones,  such   as   reducing   traffic   congestion   as  well   as   pollution,   and   (b)   dynamic   ones,   such   as   maximizing   the   satisfaction   of   the   drivers   who   have   declared   their   own   desired   destination  points,  by  reducing  transit  time  etc.  The  total  goal  of  the  system  can  be   viewed   as   a   composite   of   all   the   above   dynamic   goals   as  well   as   its   preset   goals.   Many   of   the   component   goals   are   antagonistic,   or   even  worse,  might   be  mutually   impossible.   Thus,   the   purpose   of   the   goal   arbitrator   is   to   be   able   to   create   a   satisfactory  composite  goal,  in  view  of  these  potential  discrepancies.   Last  but  not   least,  after  this  more  detailed  conceptual   introduction  to  CLIC,  and  its   layers   of   mechanisms,   as   well   as   of   the   Cognitive   System   specifications   and   its   creation   and   operation   processes,   it   is   worth   commenting   upon   one   of   the   main   resulting   changes   catalyzed   by   CLIC:   Through   CLIC,   the   creation   and   operation   of   Cognitive  Systems  is  transformed  to  a  utility  provided  on-‐demand;  which  would  lead   to   an   increase   of   component   utilization   and   thus   potentially   to   large   economic   consequences.   For   example,   one   does   not   need   to   own   extensive   sensor   networks   (for  example  cameras   in  wide  areas)   in  order   to  be  able   to  operate  services  using   them;   they   can   be   time-‐shared   and   procured   on   demand,   when   and   if   they   are   needed.  The  same  holds  for  processing  and  actuation  services;  in  this  way,  an  open   market   of   component   services   is   created.  We   are   thus   envisioning   a  world  where   processing   code   can   run   in  machines   in   various   locations,   expert   and   non-‐expert   humans  provide  crowd-‐servicing  in  time-‐slices  of  seconds,  and  furthermore  robots   and  sensor  networks  can  be  freely  and  transparently  procured  and  interconnected   in   order   to   create   the   Cognitive   Systems   of   the   future,   through   CLIC.   In   essence,   Situated  Intelligence  is  transformed  to  a  commodity.   Finally,   apart   from   the   economic   and   open-‐market   far-‐reaching   consequences   of   CLIC,   there   is   yet   another   option   arising   through   it:   The   humans   providing   their   services  to  CLIC,  by  implementing  sensing,  processing,  or  actuation  components  for   it,  can  choose  to  do  so  for  a  variety  of  possible  incentives:  for  monetary  reward,  for  \nthe  sake  of  a  desired  common  cause,  as  a  volunteer,  or  in  exchange  for  having  CLIC   itself  fulfill  their  requests;  thus,  the  option  for  partial  auto-‐telicity  arises,  as  the  goal   of  the  cognitive  systems  that  are  created  can  arise  from  within  them  –  and  one  can   explore  advanced  ways  of  mediated  participative  collective  decision  making,  as  will   be  illustrated  in  our  traffic  control  use  case  presented  in  the  next  section.  \n4.  An  Example  Use  Case:  A  Traffic  Controller  Cognitive  System  \n  We  will   illustrate   the   concept   of   CLIC   systems   through   a   realistic   yet   demanding   real-‐world  example:  An  innovative  traffic  management  system  construed  as  a  single   cognitive  system  containing  humans  (e.g.  drivers,  pedestrians,  or  controllers)  as  well   as  machines   (e.g.   software,   cameras,  or   traffic   lights)  participating   in   the   cognitive   system.  More  specifically,  Sensing  for  this  huge  cognitive  system  will  be  provided  by   human  as  well  as  machine  components  (e.g.  human  verbal  reports,  traffic  cameras,   or  GPS),  Processing  will  be  provided  by  humans  as  well  as  machines,  and  Actuation   will   be   provided   by   human   (car   driving)   as   well   as   machine   (traffic   lights,   announcement  boards)  components  too.  Also,   it   is  worth  noticing  how  the  purpose   (teleology)  of  this  situated  and  distributed  cognitive  system  will  arise:  The  purpose  of   this   system   is   constructed   as   a   negotiated   mix   of   the   purposes   of   the   drivers   (desired   destinations   and   route   characteristics)   as   well   as   of   global   goals   (traffic   optimization),   in   essence   creating   a   partially   auto-‐telic   system.   Furthermore,   the   system  is  highly  fault-‐tolerant,  and  directly  scalable  to  different  and  larger  cities.     \n   Figure  9:  Block  Diagram  of  example  Use  Case:  Human-‐Machine  Cognitive  System  for   Traffic  Control      In   this   giant  unitary   cognitive   system,   the   following  dynamic   components  partake   (see  Figure  9):   Sensing   services   are   provided   by   human   as   well   as   machine   components.   Human   traffic   reports   are   acquired   through   driver-‐interfaces,   either  whenever   the   driver   wants  to  report  an  important  event  or  when  the  system  proactively  asks  a  specific   question   to   him.   At   the   same   time,   traffic   cameras,   whose   output   is   reusable   for   other  services  too,  provide  traffic  data;  and  the  GPS  units  of  the  car-‐installed  PDAs  of   drivers   participating   in   the   system   provide   real-‐time   position   information   for   a   subset  of  the  vehicles  of  the  city.   Processing  services  are  provided  by  humans  as  well  as  machines:  Sensor  fusion,  goal   arbitration   and   traffic   optimization   services   take   place   here,   with   special   GUI   Interfaces  for  the  human  controllers  (this  will  be  described  in  the  next  chapter).   Actuation  services  are  also  provided  by  both  humans  as  well  as  machines.  Humans   receive  suggested  routes,  which  they  are  incentivized  to  follow;  also,  human  traffic   police   regulate   important  points   of   traffic   if   required.  On   the  machine   side,   traffic   lights  are  controlled;  as  well  as  announcement  boards,  which  are  readable  both  by   the  drivers   that  participate   in   the  project   and  have  online  driver  PDAs,   as  well   as   those   drivers   that   do   not,   and   which   can   indirectly   modulate   flow   through   announcements  of  estimates  and  suggestions.  Of  course,  this  modulation  takes  place  \nSh  \nat   a   macro-‐level;   (many   cars   together)   and   not   at   the   micro-‐level   (each   car   -‐   separately),  as   is   the  case   for   the  drivers  participating   in  the  system  through  their   dedicated  PDAs.   But  any  cognitive  system,  apart  from  Sensing,  Processing,  and  Actuation,  requires  a   Goal.  It  is  worth  noticing  how  the  purpose  (teleology)  of  this  situated  and  distributed   cognitive  system  will  arise:  The  purpose  of  this  system  is  constructed  as  a  negotiated   mix  of   the  purposes  of   the  drivers  (desired  destinations  and  route  characteristics)   as  well  as  of  global  goals  (traffic  optimization).  The  system  is  essentially  trying  both   to  satisfy  the  goals  of  the  individual  drivers,  as  well  as  to  keep  the  traffic  moving  and   the  environment  of  the  city  in  a  good  condition.   The  use  case,  apart   from  being  a  real-‐world  scalable  problem  of   importance  on   its   own  right,  acts  as  a  very  good  illustration  of  the  concepts  and  mechanisms  of  CLIC,   which   could   easily   be   applied   to   a   huge   number   of   other   scenarios,   including   disaster   response,   law   enforcement,   surveillance,  military,   as  well   as  medical   and   postal  process  applications,  assistance  of  the  elderly  or  citizens  with  special  needs,   and   many   more,   where   fault-‐tolerant   distributed   human-‐machine   systems   are   required.  \n5.  Research  Directions  \nIn   this  section  we  will  give  more  details  of   the   four   layers  of  mechanisms  of  CLIC,   and   present   associated   research   motivating   the   construction   of   CLIC   in   related   fields.  We  will  start  by  discussing  the  lowest-‐level  layer  L0,  and  then  proceed  all  the   way  to  the  highest-‐level  L3.  \n5.1  L0:  Interfaces  for  real-‐time  human  services     The  aim  of  CLIC  is  to  procure  and  process  data  from  a  large  number  of  people;  data   that   has   to   be   related   to   or   combined   with   data   and   services   procured   from   machines.   It   is   up   to   L2   to   contract   the   users   in   the  best  way  possible.   Requesting   information  from  people  needs  to  be  done  through  a  user  interface  (UI)  accessible  at   this  lowest  level,  whose  goal  is  to  collect  appropriate  data  from  the  humans  acting   as  service  providers.  This  data  will  contribute  to  new  types  of  services  since  it  needs   to  be   combined  with  data   from  human   sources  or   from  both  human  and  machine   sources  (described  previously  and  illustrated  in  Figure  6  and  7).    These  services,  in   turn,  will  be  used  as   input   to   the  adaptive  service  procurement   layer  (L2),  e.g.   the   next  layer  in  the  architecture  (described  previously  and  illustrated  in  Figure  8).  This   UI   should   not   be   confused   with   the   user   interfaces   handling   high-‐level   cognitive   enquires  or  tasks  (at  L3).   Using   data   from   different   collocated   or   distributed   assemblies   of   people   and   processing   is   actively   investigated   by   various   HCI   related   areas,   e.g.   social   psychology,  cognitive  sciences,  behavioral  sciences  or  sociology.  The  interfaces  used   to  procure  data  from  humans  need  to  be  kept  simple  and  accessible  through  several   different  appliances.  Since  the  focus  is  to  show  possibilities  of  providing  services  by   combining   human   and   technology   sources,   the   starting   point   is   to   use   existing  UI  \ndesign  solutions  associated   to  data  processing  methodologies   considering  humans   as  data  providers  e.g.  from  crowd-‐centric  technologies  [Kit08],  from  mashup  studies   [Hol09],   or   by   using   on-‐line   communities   (e.g.   for   emergency   and   helping   public   safety  agencies  [Pal11]).  The  departure  will  be  based  on  methods  used  from  crowd-‐ sourcing,  examining  ad-‐hoc  online  communications  or  mashop  studies.   Regarding  existing  work  in  crowdsourcing,  a  prime  example  of  real-‐world  platforms   is  the  Amazon  Mechanical  Turk  (MTurk),  one  of  the  suites  of  Amazon  Web  Services,   that  enables  computer  programmers  (Requesters)  to  co-‐ordinate  the  use  of  human   intelligence  (Workers)  to  perform  tasks  that  computers  are  unable  to  do  yet.  These   services   have   been   used   already   for   a   wide   variety   of   tasks,   including   speech   transcription,   translation   as   well   as   evaluating   translation   quality   [Cal09],   annotation  [SorFor08],  user  studies   [Kit08],  and  much  more.  The  pioneering  work   of  Luis  Von  Ahn  on  Human  Computation  also  offers  a  good  illustration  of  real-‐world   crowdsourcing,   for   tasks   such   as   labeling   towards   automated   object   recognition   [AhnDab04],   as   well   as   on   exploring   the   potential   of   game-‐like   activities   for   harvesting  human  cycles  towards  collectively  solving  large-‐scale  problems  [Ahn06].   Of   particular   relevance   to   CLIC   and   in   particular   to   the   concept   of   the   Human-‐ Machine  Cloud  are  a  number  of  special   issues,  such  as  appropriate   task  routing   to   people  with  relevant  abilities,  which  can  be  implemented  for  the  case  of  relying  on   local-‐knowledge  of  the  agents  involved  through  the  approach  of  [Zha11],  ingenious   approaches   towards   achieving   simple   but   effective   quality   control   such   as   the   iterative   dual-‐pathway   structure   used   for   speech   transcription   in   [Lie11],   and   consideration   regarding   high   response   speed   real-‐time   crowd-‐powered   systems   [Ber11].   The  main  novel  characteristic  is  the  need  to  offer  a  real-‐time  service,  so  that  the  UI   can,   for   example,   decide   if   this   is   the   right   moment   to   interrupt   the   user   with   a   service  request  or  not,  and  the  UI  must  provide  support  tools  for  honoring  the  SLA.   These  would   include  e.g.  a  countdown  timer,  so  that  the  service  provider  knows  if   it's  still  worth  to  complete  the  task  or  she  is  already  in  violation  of  the  SLA  and  will   not  get  paid  anyway.   Based  on  earlier  studies  on  e.g.  considering  patterns   from  social  and  technological   sources  (e.g.  [Sch06],  [Hel07]),  to  process  information  this  part  of  the  project  will  be   able   to   contribute   towards   understanding   collaboration   in   complex   situations.   These  will  open  up  research  questions,   such  as  questions  on  social  possibilities   in   technical   settings,   for   example   to   define   usability   requirements   for   treating   data   from  combined  sources.  An  overall  idea  about  the  UI  needed  here  (in  relation  to  the   main  parts  of  this  project  and  the  overall  data  flow  is  in  Figure  10).  \nCognitive  Layer  (L3)\nHuman  agents Machines  (Technology)\nReal  time  service  layer\nRequest  &   contextual   inform ation UI  for  overall   request Adaptive  Service  procurement  layer  (L2) Q uality  &   Priority  &    Contextual   inform ation\nServices  based  on   1)      Humans   2)      Humans/machines   3)      Machines ... ... ... ... ...\nUI*  to  collect  data   from  human  agents  or  \nhuman/machines\n   Figure  10:  Behind  the  UI*  here  is  an  overall  request  (given  in  L3)  with  contextual   information.  This  together  with  automatic  information  from  L2  has  to  be  prepared   so  the  human  agents  easily  can  contribute  with  data.  The  human  agents  need  to  fill   in   their  data  via  UI*.  This  request  has   to  be  meaningful  (request   for  services   from   humans   or   from   humans/machines   –   if   the   machines   services   are   not   enough),   through  the  UI*.      To   start   with,   we   can   begin   to   collect   data   from   human   agents   with   help   of   the   commonly   used   Application   Programming   Interfaces   (APIs)   e.g.   through   Java   and   PHP   (to   use   internet   oriented   languages,   instead   of   trying   to   decode   natural   languages)   [Kre10].   Software   development   APIs   make   it   possible   to   create   new   applications  requiring  no  permissions  and  little  programming  knowledge.  There  are   possibilities   in   e.g.   identifying   keyword   patterns   –   for   aggregating   data   [Bol05].   These  keyword  patterns  can  be  considered  identifiable  by  knowing  the  context  and   also  given  the  practical  pilot  project  that  this  project  can  follow  from  the  beginning.   Given  the  increasing  number  of  humans  engaged  in  micro-‐blogging  [Mil08]  together   with  the  possibility  to  use  mobile  interfaces,  this  project  can  engage  human  agents   to  contribute  the  needed  data.  Also  there  are  technical  possibilities  to  access  human   information  –  with  possible  adjustments  on  actual  interfacing  and,  in  the  beginning,   using  existing  web  applications.  Using  patterns  to  contribute  to  better  interfaces  can   be   further   developed,   especially   after   examining   the   data   obtained.   This   will   contribute   to   the   above   mentioned   crowdservicing.      There   are   also   methods   that   improve  this  by  following  the  information,  e.g.  using  the  method  suggested  by  Kittur   for  crowdsourcing  [Kit12].   Our   research   plan   is   to   investigate   how   social   and   technical   information   can   be   visually   represented  and   followed   through   these   complex   settings,   contributing   to   research  on  universal  interfaces.  By  testing  new  concepts  via  defining  prototypes  for  \ninterfaces   that   consider   data   from   mobiles   and   computers,   from   social   actors,   sensors   and   machines   this   project   contributes   to   better   understanding   universal   interfaces   that   satisfy   unobtrusiveness   requirements,   while   at   the   same   exposing   APIs   that   uniformly   apply   to   human-‐provided   and   machine-‐provided   real-‐time   services.    \n5.2  L1:  Cognitive  component  interfacing   In  order   to  materialize   the  CLIC   framework,  we  borrow  and  combine  architecture   and   integration   solution   from   two   different   communities:   from   Service-‐oriented   Architectures  (SOA)  and  IT  services  infrastructure  related  to  real-‐time  services  and   service  composition  and  from  robotics  and  cloud  computing  infrastructure  related  to   integrating  heterogeneous  components,  including  Sensing,  Processing  and  Actuation.   Services   in   general,   including   Web   services   in   IT,   services   in   business   and   governance,   or   any   other   part   of   the   services   system,   have   received   considerable   attention  from  both  academia  and  industry;  culminating  to  a  considerable  volume  of   literature   and   specifications   that   address   the   description,   discovery,   and   composition  of  services.   Focusing   on   the   IT   perspective,   different   standardization   bodies   have   produced   different   specifications   for   Service-‐oriented   Architectures   (SOA).   The   World   Wide   Web  Consortium  (W3C)  produced  the  Web  Services  Description  Language  (WSDL),  a   recommendation  for  specifying  the  format  and  values  of  data  flowing  into  and  out  of   Web   services   [WSDL2].   In   other   words,   WSDL   provides   a   standard   XML   schema   language   for   specifying   the   syntactic   details   of   how   to   invoke   a  Web   service;   the   semantics   of   these   services   and   data   can   be   expressed   by   annotating   WSDL   components  with  identifiers  from  a  semantic  model  [SAWSDL].  Similarly,  the  Object   Management   Group   have   recently   finalized   the   Service-‐oriented   Architecture   Modeling   Language   (SoaML),   a   meta-‐model   for   the   specification   and   design   of   services   within   a   service-‐oriented   architecture   [SoaML].   SoaML   is   more   geared   towards  using  UML  as  a  modeling   language   instead  of  Semantic  Web   technologies   used   by  W3C,   but   other   than   that   both   specify   SOA.   A   recent   trend   in   SOA   is   to   provide   RESTful   services,   that   is,   Web   APIs   over   the   HTTP   protocol.   The   Web   Application   Description   Language   (WADL)   aims   to   become   the   standard   in   describing  RESTful  services  [WADL].   All  these  generic  SOA  frameworks  specify  the  mechanisms  of  service  invocation  and   data   exchange   but   do   not   delve   into   the   specifics   of   defining   schemas   and   vocabularies   for  encoding  the  semantics  of   these  actions.  That   is   to  say,  specifying   the   semantics   of,   for   example,   a   camera   offered   as   a   service   would   require   vocabularies   for   specifying   inputs   (e.g.,   coordinates   of   the   location   the   service   consumer   needs   filmed),   outputs   (e.g.,   video   encoding),   and   the   service   provided   (e.g.,   real-‐time   video   from   the   input   location).   Such   vocabularies   receive   their   semantics   from   conceptualizations   or   reference   models   that   define   the   top-‐level   concepts   and   relations   of   the   domain.   The   SOA   Reference   Model   [SoaRM],   for   instance,  is  a  reference  model  for  specifying  services  in  SoaML.  Using  Semantic  Web   technologies,   OWL-‐S   aims   to   abstractly   modeling   services   and   their   properties   [OWL-‐S];  although   in  the  OWL-‐S  specification  WSDL  bindings  are  used  as  example  \ngroundings   of   OWL-‐S   concepts,   OWL-‐S   can   be   used   to   describe   any   services   infrastructure.  Oberle  et  al.  [OLG06]  provide  a  solution  with  the  DOLCE  foundational   ontology,   a   modular   and   extensible   general-‐purpose   top-‐level   ontology   [GGM02].   DOLCE   has   been   often   used   as   the   foundations   over   which   to   develop   service   ontologies,  more  recently  by  Ferrario,  Guarino,  et  al  [FGK11]  who  propose  a  unified   technical  and  business  perspective  of  services.   The   latter   work   shares   with   CLIC   the   vision   of   a   unified   abstract   description   of   services   provided   by   people   (in,   e.g.,   the   context   of   business   processes)   and   of   services   provided   by   machines   (in,   e.g.,   software   as   a   service   settings).   What   has   never  been  explicitly  foreseen  previously  is  the  provisioning  of  the  same  service,  or   rather  of  directly  interchangeable  services,  by  either  humans  or  machines.  Current   models  provide  for  the  description  of  a  service's  properties,  including  its  inputs  and   outputs  and  its  service  capacity;  querying  for  an  appropriate  service  to  fill  a  position   in   a   pipeline   amounts   to   looking   for   matching   inputs,   outputs,   processing,   and   setting   acceptable   margins   for   parameters   such   as   the   price   and   quality   of   the   service  or  the  speed  or  rate  at  which  the  service  is  provided.   What  is  missing  is  support  for  the  complex  situation  arising  from  the  involvement  of   human  real-‐time  services,  delivered  over  an  intelligent,  unobtrusive  user  interface:   in  most  situations  it  would  be  necessary  to  negotiate  over  multiple  issues  at  the  same   time,   including   negotiating   over   attracting   the   service   provider's   attention   in   the   first  place.  In  other  words,  and  regardless  of  the  negotiation  strategies  (discussed  in   Section  5.3  below),  it  must  be  possible  to  represent  the  price  offered  and  the  quality   of   service   expected   by   the   service   seeker   in   relation   to   each   other   and   not   as   orthogonal   parameters.   Symmetrically,   the   unobtrusive   and   extendable   UIs   (discussed  in  Section  5.1  above)  must  be  able  to  advertise  not  just  the  provision  of   services,   but   also   (depending   on   the   user's   current   activity)   the   minimal   price/service  level  offer  that  may  interrupt  the  current  activity.  \n5.2.2  A  cloud  of  sensing,  actuation,  and  processing  services   The   need   to   integrate   heterogeneous   components   is   very   strong   in   the   Ambient   Intelligence   community   [AHS01,   SS08].   In   Ambient   Intelligence,   there   is   a   strong   trend   to   build   over   the   Open   Services   Gateway   initiative   (OSGi)   framework,   a   platform   for   the   Java   programming   language.   OSGi   foresees   dynamic   component   addition   and   removal,   as   well   as   publish-‐and-‐subscribe,   event-‐based   inter-‐ component  communication.  OSGi  has  been  used  as  the  basis  for  integrating  sensing,   actuation,   and   processing   components   in   Ambient   Intelligence   [DVC08].   Similar   frameworks   have   been   developed   in   robotics,   where   many   popular   integration   frameworks  facilitate  inter-‐component  communication  by  providing  middleware  for   the   exchange   of   typed   messages   where   components   subscribe   as   consumers   or   producers.  RobotOS   is   a   prime,   and  very  popular,   example   [QBN07],   although   this   approach  is  ubiquitous  in  robotics.   Although   very   similar   to   the  CLIC   vision,   such   approaches   lack   the   scalability   and   openness   of   CLIC   where   we   foresee   a   global   market   of   amalgamated   human-‐ machine   services,   radically   heterogeneous   and   pushing   beyond   the   confines   of   a   single  smart  home  or  smart  lab  or  robotic  platform.  For  CLIC,  the  infrastructure  as  a  \nservice   (IaaS)   paradigm   is   a   more   promising   starting   point,   as   it   circumvents   centralized   middleware   for   data   exchange   and   follows   an   approach   where   components  expose  interfaces  through  which  to  directly  communicate.   Naturally   IaaS   operates   at   a   very   low   layer,   where   the   only   service   offered   is   a   virtual   machine;   however   IaaS   software   such   as   Eucalyptus   implements   considerable   functionality   needed   in   CLIC;   a   Eucalyptus   cloud   has   a   (possibly   distributed)   cloud   controller   which   handles   registering   and   deregistering   physical   hosts,   virtual  machines,   and   storage,   changing   properties   of   the   virtual  machines,   and   querying   about   existing   resources.   The   cloud   controller   connects   to   the   individual  node  controllers   in   each  physical  machine,   to  know   if   things  are  up  and   running   and   to   apply   changes.   Furthermore,   elastic   storage   is   implemented   as   a   software  as  a  service  (SaaS)  facility  where  access  to  a  (distributed,  variable  size)  data   store   is   provided   over   an   API   and   not   as   direct   access   to   a   storage   device;   SaaS   storage  abstracts  over   the  specifics  of  where   the  storage  device   is   located  or  even   how  many  storage  devices  contribute  towards  a  virtual  store.   These  concepts  are  very  similar   to   those  of  our  cloud  of   cognitive  components,   so   that   CLIC   will   explore   cloud   computing   infrastructure,   and   not   conventional   message-‐queuing   middleware,   as   the   basis   for   binding   its   SOA   conceptualization.   What   is  missing   from   the   current   cloud   infrastructure   is   the  development  of   SaaS   components   for   sensing   and   actuation   that   apply   the   same   principles   as   elastic   storage:  abstract  data  producers  (sensors)  and  consumers  (actuators)  that  provide   a  utility  without  exposing  any  implementation  details.  \n5.2.3  Implementing  the  CLIC  framework   The  objectives  we  need  to  pursue  in  order  to  implement  the  CLIC  framework  relate   to   conceptual   as   well   as   implementation   issues.   At   the   conceptual   level,   we   will   develop   a   unifying   conceptual   reference  model   for   human   and  machine   real-‐time   services   and   the   service-‐level   agreements   and   policies   they   are   offered   under.   Besides   a   top-‐level   vocabulary   for   describing   taxonomic   hierarchies   of   data   and   service   types,   this   conceptualization  must   support   the   specification   of   soft   limits,   price/service   level   negotiations,   and   similar   situations   that   arise   from   the   involvement  of  human  service  provision.  One  promising  direction  is  to  assume  as  a   starting   point   SOA   extensions   of   the   DOLCE   foundational   ontology,   exploiting   DOLCE's  ability  to  qualify  propositions  and  concepts  with  complex  parameters.  \nAt   the   implementation   level,  we  will   ground   this   conceptualization  with  a  binding   mechanism  for  providing  such  services  as  a  scalable,  extendable,  and  decentralized   cloud.   This   mechanism  will   build   upon   current   cloud   computing   infrastructure   in   order  to  endow  robotics  middleware  with  the  scalable  and  distributed  nature  that   cloud   computing   offers   and   robotics  middleware   currently   lacks.   This  will   lead   to   APIs   and   data   type   vocabularies   for   cloud   nodes,   decentralized   service   registries,   and   extendibility   mechanisms   for   accommodating   future   and   unforeseen   service   and  data  types.  \n5.3  L2:  Adaptive  service  procurement  and  fault  tolerance   To  enable   the  procurement  of   the  necessary  services  at  L2,   in  order   to   implement   the   workflow   of   services   provided   by   the   cognitive   agent   at   L3,   the   resources/components  (both  sensors,  actuators  and  humans)  at  L1  needs  to  declare   their   capacities   and   service   level   in   service   level   agreements   (SLA).   This   includes   both   definitions   of   the   service   as   well   as   the   service   level   and   the   promised   performance   (e.g.   quality  or   time  of   completion).   For  human   resources,   additional   description   is   needed,   such   as   the   commitment   and   reliability   of   the   service   provided.  The  service  levels  of  resources  are  declared  by  the  resources  themselves,   and   in  addition,  human  resources  declare   their  SLA  as  a  promised   level  of   service   provided.   The   Service   Procurement   Agent   (SPA)   monitors   that   SLAs   are   upheld,   otherwise   it   needs   to   revise   and   re-‐negotiate   the   set   of   services   contracted   to   implement   the   task.   This   means   that   it   may   stop   using   some   failing   or   under-‐ performing  services,   in   favor  of  other  more  reliable  ones,   for  completing  that  task.   Once   the   properties   of   the   offered   services   are   declared   and  monitored   this  way,   adaptive  service  procurement  management  at  level  L2  can  plan,  monitor  and  revise   resources  used  in  the  task.   There  are  a  number  of  issues  that  the  SPA  must  tackle  in  order  to  complete  this  task:  \n5.3.1.  Selecting  the  Best  Services   The  SPA  uses  a  dynamic  database  about  available  services  (and  their  properties)  in   order   that,   for   each   task   to   execute,   the   currently   most   optimal   services   are   allocated   for   a   task.   Optimal   in   this   case  would   be   determined   by   their   price   and   service  level  that  they  offer  and  whether  a  service  satisfies  the  minimum  quality  set   by  the  workflow  of  services  provided  by  L3.  The  SPA  must  negotiate  what  services   to  assign  to  the  task  prior  to  execution,  depending  on  the  currently  offered  services.   Once  a  service  is  contracted,  the  SPA  reserves  this  service  for  the  duration  needed   by   the   workflow;   if   services   fail   to   perform   according   to   what   is   agreed   -‐   this   information   is   provided   to   the   SPA   by   the   QoS   estimation  module   -‐   the   SPA  will   locate   alternative   services   to   replace   the   ones   that   failed.   In   this  way,   the   needed   quality   is   ensured  during   the   duration   of   the   task.   If   there   are   insufficient   overall   resources/services  in  the  cloud  for  completing  the  task,  the  cognitive  agent  (L3)  is   notified   so   that   the   overall   task   (which   is   implemented   by   the   workflow)   can   be   aborted  or  an  alternative  workflow  can  be  issued  to  the  SPA.   In  the  literature,  e.g.  in  [SPJ09],  there  is  related  work  about  how  to  contract  a  set  of   cloud  services  in  order  to  satisfy  a  workflow  of  tasks  and  maintain  a  certain  level  of   quality  while  minimizing  expenses.  However,  in  all  this  literature,  it  is  assumed  that   the  price  offered  for  each  service  is  fixed.  On  the  other  hand,  nowadays  auctions  are   emerging  as  a  suitable  mechanism  for  balancing  supply  and  demand  in  cloud  service   procurement  settings  [BAV05,  MT10],  and  they  are  starting  to  emerge  in  real-‐world   cloud   systems,   such   as   Amazon’s   EC2   spot   instances   and   the   SpotCould   platform.   Allowing   service  prices   to  be  determined  by   supply   and  demand  also  provides   an   incentive  to  the  providers  to  improve  their  services  in  order  to  get  a  better  price  for   it,   while   at   the   same   time   it   ensures   that   providers   can   always   sell   their   service   without  having  to  find  the  optimal  price  for  it,  as  this  is  determined  by  the  auction;  \non  the  other  hand,  if  they  set  a  fixed  price  and  this  is  too  high  then  they  would  not   sell   the  service,  whereas   if   they  set   it   low,   then  they   lose  some  profitability,  hence   the  benefit  of  using  auctions.  This  means  that  much  of  this  pre-‐existing  work,  as   it   assumes   fixed   prices   (no   negotiation),   cannot   be   applied   to   the   setting   that   we   propose.  \n5.3.2.  Negotiation  with  Human  Providers   If  all  properties  of  the  services  offered  are  specified  beforehand  as  is  the  case  with   all   machine   services,   then   it   is   most   efficient   to   sell   them   in   auctions   as   we’ve   already  discussed.  However,  humans  can  offer  at  the  same  time  a  potentially  infinite   array  of  options  regarding  the  quality  of  the  service  that  they  offer.  Hence,  for  most   human  services   it  would  be  necessary  to  negotiate  with  them  over  the  quality  and   the   price   for   that   quality.   One   of   the   problems   that   we   need   to   tackle   when   we   negotiate  with  humans  automatically  is  the  ability  to  negotiate  over  multiple  issues   at   the   same   time   [SFWJ04],   for   example   price   and   quality   of   service   can   be   two   issues  to  be  negotiated  together.  In  this  context  we  will  focus  on  the  development  of   agent  negotiation  strategies  and  tactics  [LC10]  instead  of  other  parameters  such  as   the   negotiation   protocol   or   the   information   state   of   agents.   Strategies   are   computationally   tractable   functions   that   define   the   tactics   to   be   used   both   at   the   beginning  and  during  the  course  of  negotiation.  They  are  based  on  rules-‐of-‐thumb   distilled   from   behavioral   practice   in   human   negotiation.   Tactics,   in   turn,   are   functions  that  specify  the  short-‐term  moves  to  be  made  at  each  point  of  negotiation.   They  are  structured,  directed,  and  driven  by  strategic  considerations  [LWJ01].   Negotiation  tactics  and  strategies  is  not  a  new  topic  in  multi-‐agent  systems  research   [LMNC04].  We  need   to  study  strategies  and   tactics   for  alternating  offers  protocols   [Ru85,  WMV02]  based  on   concessions   [DTT08]   and   their   recent   implementations,   for  example  see  [BUMTS09]  and  [US09].  We  will  focus  on  both  bilateral  [FSJ98]  and   multilateral   [RZMS09]   models.   One   of   the   key   problems   in   these   settings   is   that   tactics   and   strategies   have   not   taken   into   consideration   the   interaction   of   agents   with   humans   and   especially   the   fact   that   the   human   will   tire   easily,   if   they   are   offered  too  many  offers  and  counter-‐offers.  \n5.3.3.  Estimation  of  the  QoS   In  order  to  know  whether  a  provider  honors  her  agreements  with  the  system,  it   is   necessary  to  be  able  to  estimate  the  quality  of  the  service  both  beforehand,  meaning   when  the  SPA  contracts  the  resources  and  at  the  time  when  the  service  is  supposed   to  be  offered.  Both  the  total  performance  and  the  capacity  of  each  resource  can  be   estimated,   or   learnt   from   the   historical   performance   of   the   SPA   (as   done   in   QoS-‐ oriented,   self-‐aware   networks   [GLN04]).   For   human   resources,   capacity   can   be   estimated  similarly  based  on  historic  performance,   combined  with   the  SLA  agreed   and  the  actual  performance.  Therefore  QoS  is   the  matter  of  balancing  the  needs  of   multiple   and   concurrent   users   here,  with   all   the   available   resources   of   the   cloud.   The  traditional  QoS  approach  uses  a  quote-‐for-‐price  approach  to  estimate  the  total   current   cost   of   resources   needed   for   a   task,   where   the   task   submitter   decides   whether  the  price  is  acceptable.  \nNow,  to  obtain  the  correct  QoS  estimations,  a  flexible  and  open  data  infrastructure  is   needed  comparable  or  possibly  related  to  inputs  obtained  from  human  agents.  Since   this   project   includes   human   agents   as   data   and   service   providers   these   input   collected   are   mainly   subjective   experiences,   observations   or   mainly   by   humans   observable  data.  Therefore,  for  this  project  not  only  the  estimation  of  QoS  is  in  the   focus,   but  we  will   relay  on   investigating  QoEs   (Quality   of  Experiences)   [ITU08]   in   the  traffic  context.  \n5.3.3  Implementing  the  CLIC  framework   In   CLIC,  we  use   our   expertise   in   designing   trading   agents   that   can   obtain   a   set   of   resources  while  maximizing  their  utility  (i.e.  getting  the  resources  that  best  satisfy   one’s  goals)  while  minimizing  expenses  to  create  a  strategy  for  the  SPA  that  allows   the  procurement  of  the  best  services,  i.e.  maximizes  the  agent’s  expected  utility.  We   will   start   from   our   methodology   [VS03,   VJS07]   and   use   our   work   on   realistic   auctions  [VJ10].  In  addition  to  bidding  in  auctions  for  services  and  the  flexibility  that   our  methodology  allows  in  re-‐planning  in  case  that  a  contracted  service  should  fail   to   deliver,   our   work   will   need   to   be   adapted   to   the   particular   demands   of   the   auctions   for   services;   we   will   begin   from   some   recently   completed   initial   work   about   bidding   in   a   single   auction   used   in   service   procurement   scenarios   [VSJ12],   which  will  be  extended  to  bidding  in  multiple  auctions.  Furthermore,  our  design  of   the   SPA   will   also   be   augmented   to   handle   the   multi-‐issue   negotiations   with   the   human  providers.  \nIn   the   negotiations   with   humans,   we   will   cater   for   selecting   the   right   level   of   granularity   for   selecting   offers   and   related   timing   of   an   offer   as   humans   will   be   slower   than   software   agents   and   less   tolerant   to  negotiate  with   small   increments.   This   integration   of   negotiation  models   and   their   associated   components   has   been   long  argued  for  [HR92]  but  has  yet  to  be  studied  in  detail,  especially  when  humans   are   equal   participants   in   the   negotiation.   Our   contribution   will   therefore   be   to   address  the  problem  of  negotiating  with  humans  and  agents  at  the  same  time,  being   able   to   discriminate   between   the   two,   and   integrate   these   for   both   humans   and   agents.  \nRegarding  the  QoS  issue,  as  the  estimation  of  QoS  alone  is  not  sufficient,  we  will  also   rely   on   investigating   QoEs   (Quality   of   Experiences)   [ITU08],   within   the   domain   context  of   the   traffic  management.  Experiences   are   going   to  be   approached   in   the   context,  by  a  number  of  reoccurring  possible  social  and  technical  patterns  [HEL07].   By  identifying  the  main  patterns  a  list  of  requirements  can  be  provided.  This  list  can   stand  as   the  bases  of  prioritizing   requirements   (also  both   the   social   and   technical   ones).  Afterwards,  a  short  action  list  with  that  part  of  the  requirements  that  can  be   handled   by   the   human   agents   can   be   defined.   The   list   will   contain   comparable   prioritized  requirements  and  can  be  considered  as  a  start-‐list  that  can  be  extended   later   (or   replaced   by   e.g.   more   complicated   algorithms).   Since   it   is   defined   by   humans  (both  system  users  but  also  service  providers)  as  important  requirements   these   can   be   used   for   predicting  QoEs   supported  with   objective  metrics.   This   can   provide   basic   information   for   identifying   and   simulating   meaningful   activities,  \nworkflows   in   the   test   environment.   Therefore   the   requests   contribute   to   instructions   and   also   provide  measurable   data,   with   the   right   format   to   the   next   level.   Even   the   data   is   limited   for   this   pilot   traffic   context,   basic   requirements   for   estimating  QoS  and  QoE  can  be  examined.      \nThe  limitation  to  the  traffic  scenario  context  is  important,  since  objective  estimation   for  the  QoE  is  hard.  We  will  use  simple  lists  of  requirements  to  begin  with,  and  then   we   will   continue   later   by   applying  more   advanced   databases   [MAT09]   and  more   advanced  software  tools  for  automatic  measurements,  e.g.  the  one  defined  by  Moore   [Moo10],  with  specific  focus  on  QoS  estimations  defined  by  Pessemier  [PESS11],  and   considering  methodologies  for  estimating  temporal  workflows  [XIA12].  \n5.4.  L3:  Composite  Cognitive  Agency   There   are   two   main   challenges   for   this   layer.   The   first   challenge   (C1)   is   how   to   specify  cognitive  systems  at  a  higher-‐level,   for  example  a   teleological   (intentional)   level  where  the  particular  components  the  system  is  composed  of  are  not  known  in   advance,   but   only   their   desired   cumulative   properties   and   behaviors.   The   second   challenge  (C2)  is  how  to  arbitrate  multiple  goals  which  might  also  be  coming  from   within  the  cognitive  system  itself,  thus  enabling  partial  auto-‐telicity.   Both  of   these  are  key  challenges,  but  at   least  the  first  one   is  not  within  easy  reach   from  today’s  state  of  the  art.  In  CLIC,  we  have  carefully  tried  to  decouple  them  from   the  operation  of  the  rest  of  the  system;  and,  we  have  also  decoupled  the  mechanisms   supporting   C1   from   those   of   C2,   too.   Thus,   one   could   well   have   CLIC   in   full   functionality,  creating  and  operating  distributed  human-‐machine  cognitive  systems   on-‐demand  and  with  on-‐the-‐fly  replacement,  without  satisfying  C1  in  Layer  L3;  and   this  can  be  indeed  the  case,  as  long  as  the  specification  of  the  desired  system  is  given   as  a  mid-‐level  structural  Blueprint  Specification  –  which  we  envision  to  be  the  norm   most  of  the  time.     However,   in   the   future,   we   also   envision   that  we  will   be   increasingly   able   to   use   higher-‐level  specifications,  such  as  Teleological  Specifications,  which  will  have  to  be   transformed   to   mid-‐level   Blueprint   Specs   through   Layer   L3.   In   order   to   address   challenges   C1   and   C2,   the   mechanisms   of   Layer   L3   are   broken   down   to   two   independent   groups:      (L3a):   Higher   Level   Specifications   -‐   From   Teleology   to   Structure   -‐   Generation   of   Blueprint   Specs   and   (L3b):   Goal   Management   and   Arbitration.  \n5.4.1  Cognitive  System  Specification  and  Construction   Regarding   L3a,   of   particular   importance   are   existing   theories   and   techniques   that   are  related  to  purposeful  agents  and  planning,  especially  as  extended  to  distributed   cognitive   systems.   There   is   a   long   tradition   of   viewing   human   interaction   with   different   types   of   technology   in   terms   of   “joint   cognitive   systems”   or   “distributed   cognition”   in  the  overlapping  research  areas  of  cognitive  systems  engineering  (e.g.   [HW83],  [HW05]),  cognitive  science  (e.g.  [Hut95]),  and  human-‐computer  interaction   (e.g.  [HHK00]).  The  underlying  assumption  is  that  in  many  cases  cognition  extends   beyond  what   is   going   on   inside   the   heads   of   individuals.  Much   of   this   research   is  \nconcerned   with   distributed   human-‐machine   cognition   in   environments   such   as   control  rooms  or  cockpits  (for  an  example  see  [NLSZ12]).  Most  research  in  the  area   of   Cognitive   Systems   &   Robotics,   on   the   other   hand,   has   been   concerned   with   autonomous   artificial   cognitive   systems   and,   in   some   cases,   the   interaction   with   humans  or  between  multiple  artificial  systems.  Most  of  this  research  is  still  guided   by   the   traditional   assumption   that   cognition   takes   place   ‘inside   the   head’   (or   the   robot  equivalent  thereof).    From  this  perspective,  CLIC  goes  beyond  the  state  of  the   art   by   importing   the   idea   of   distributed   or   joint   cognitive   systems   from   cognitive   systems  engineering/cognitive  science/human-‐computer  interaction  into  Cognitive   Systems   &   Robotics   research.   It   also   goes   beyond   the   state   of   the   art   in   distributed/joint   cognitive   system   by   considering   the   case   of   not   only   composite,   but  also  dynamically  varying  cognitive  agency.   The   proper   recruitment   of   services   to   satisfy   user   needs   in   such   distributed   and   dynamic  systems  can  in  principle  be  related  to  planning  and  executing  actions  in  a   single-‐body  agent.   In  both  cases,  an  overall  goal  exists  (\"track  this  car  through  the   city\";  \"drink  from  a  cup\")  and  in  both  cases,  these  tasks  decompose  into  a  sequence   of  \"action  primitives\"  that  are  given  by  the  embodiment  (e.g.  recruiting  appropriate   cameras  and  OCR  devices  to  read  license  plates;  generating  a  sequence  of  reach  for   cup-‐>grasp-‐>lift-‐>bring-‐to-‐mouth).   The   crucial   difference   is   that   the   embodiment   in   the   CLIC   case   is   not   constant.   Indeed,   although   it   is  known  at   a  given   time  what   services  are  available   (since  all   providers  announce  them),  it  is  not  necessarily  known  for  a  service  when  it  will  be   available   (since   providers   can   appear   and   disappear   outside   of   the   control   of   the   overall  system).  The  composite  cognitive  agency  thus  requires  novel  considerations   in   the  planning  aspects;   at   the   same   time,  previous   research,   for   instance   into   the   representation  of  motion  primitives  in  primate  brains  and  the  chaining  thereof  (e.g.   [FFGR05;   CTZB10;   TZ10;   TSZ11])   is   still   applicable   given   the   overall   similarity   discussed   above.   The   state   of   the   art   in   composite   cognitive   agency   is   therefore   furthered   by   applying   insights   from   human   and   primate   action   planning   to   this   more   technical   field   of   research.   Simultaneously,   cognitive   theories   of   action   planning  need  to  be  extended  to  account   for  the  composite  and  dynamic  nature  of   the  embodiment  in  CLIC;  requiring  additional  progress.     Our   approach   also   expands   upon   and   interconnects  with   existing  work   on   agents   which   are   built   using   a   symbolic   approach.   Following   the   BDI   (Belief-‐Desires-‐ Intntions)   architecture   [Bra99,   RG01],   a   well-‐known   example   is   the   KGP   (Knowledge-‐Goals-‐Plan)  model,   where   agents   are   construed   in   terms   of   cognitive   capabilities   interpreted  as  extended   logic  programs   [KMSST08].  These  capabilities   enable   the   agent   to   sense   the   environment,   decide  which   goals   are  most   relevant   next,   plan   for   these   goals,   reason   temporally   and   react   to   changes   in   the   environment  by  attempting  to  act  in  it.  CLIC  revisits  the  KGP  model  in  order  to  (a)   make   it   compatible  with  our   fundamental  approach,   i.e.   specify  a  meta-‐model   that   would  enable  us  to  create  agents  in  a  plug-‐and-‐play  fashion  from  components  that   would   represent   cognitive   capabilities,   including   those   capabilities   provided   by   humans   and   their   associated   interfaces;   and   (b)   study   the   relation   between   the   unitary   agent   architecture   of   CLIC   and   its   underlying   multi-‐agent   network   that  \nprovides   the   required   components.   To   address   the   many   issues   of   how   complex   agent   functionality  within   a   cognitive   agent   scales  up  CLIC   relies   on   the  notion  of   super-‐agents   [Sta10].   The   original   conception   of   super-‐agents   is   that   of   virtual   organizations  of  specialized  role-‐based  agents  that  attempt  to  govern  a  resource  by   delivering   the   functionality   of   a   single   monolithic   agent   in   a   more   distributed   fashion.   In   this   context,   CLIC   also   seeks   to   identify   how   the   cognitive   systems  we   envisage   relate   to   existing   work   on   virtual   organizations   in   Grid   computing   [MST11],  including  how  to  link  these  ideas  to  sensor  Grids  [SKPB07].     Furthermore,   towards   L3a,   from   a   practical   design   standpoint,   tools   and   methodologies   that   enable   the  designer  of   a  distributed  human-‐machine   cognitive   system   to   gradually   transform   teleological   specifications   to   blueprints   are   highly   relevant.  We   envision   generalizations   of   the   concepts   of   design   patterns,   BDI   like   plan   libraries,   simulink-‐like   macro-‐blocks,   or   extensions   of   graphical   block   languages   such   as   NXT-‐G   as   starting   points,   which   could   also   later   be   produced   starting  from  teleological  descriptions,  enabling  the  designer  to  semi-‐automatically   fill-‐in   the   details.   Towards   semi-‐automated   or   fully-‐automated   solutions,   highly   relevant   are   techniques   attacking   the   problem   from   an   AI   planning   approach   [McITCS02]  following  a  declarative  approach.  Planning  can  be  interpreted  as  a  kind   of  problem  solving,  where  an  agent  uses  its  beliefs  about  available  services  and  their   consequences,  in  order  to  identify  a  solution  over  an  abstract  set  of  possible  plans.     The  starting  point  of  the  CLIC  approach  is  that  it  introduces  into  the  cognitive  agents   mechanisms  that  handle  plan  libraries,  pre-‐specified  plans  in  the  form  of  workflows.   This   approach   can   be   extended   with   more   sophisticated   techniques   based   on   planning  from  first  principles  [KKC10]  and  extends  them  when  necessary  by  looking   at   services  as   capabilities   [SLK07].   In   this   context,   it   is   important   to   study  how   to   construct   the   coordination   primitives   of  workflows   and   develop  mechanisms   that   allow  parts  of  the  workflow  to  be  constructed  either  automatically  or  with  the  help   of  the  agent  (artificial  or  human)  who  specified  the  high-‐level  goal.  This  will  allow  us   to  acquire  clarifications  about  the  context  of  use  prior  to  producing  a  concrete  but   inconvenient  way  of  achieving  the  high-‐level  goal  by  interacting  with  the  remaining   layers.  \n5.4.2  Goal  Management  and  Arbitration   Moving   on   from   L3a   to   L3b,   Goal   Management   and   Arbitration   (L3b),   is   quite   interesting  in   its  own  right.  Here,  some  of  the  central  questions  are:     How  can  one   combine  intrinsic  with  extrinsic  motivations  within  such  a  system?  In  our  use-‐case   scenario,   how   can   one   keep   drivers   satisfied,   when   they   might   have   competing   goals,   and   also,   how   can   one   also   try   to   satisfice   more   global   goals   regarding   utilization  and  pollution?  Research  in  cognitive  science  has  also  concerned  itself  at   length  with  intrinsic  motivations  of  agents;  including  for  instance  some  fundamental   drives   or   a   fundamental   desire   to   minimize   energy   expenditure   (for   a   detailed   review/discussion   of   the   relation   between   motivation/emotion   and   goal-‐directed   behavior  see  [LZ11]).  Within  CLIC,   insights   from  such  research  can  be  applied   in  a   novel  way   for   this   type  of   system   to   assist   goal   arbitration.   Specifically,   it  may  be   viable  to  define  intrinsic  goals  (such  as  \"to  keep  traffic  flowing\")  and  assign  energy  \ncosts   to   different   goals   or   different   ways   to   execute   them   in   such   a   way   that   minimizing   the   energy   expenditure   of   the   system   corresponds   to   avoiding   conflicting  goals.   From   a   practical   implementation   viewpoint,   there   are   also   issues   regarding   the   informational  interconnection  of  the  goal  manager  (L3b)  with  its  input  sources,  and   its   communication   to   specific   components   of   the   cognitive   system   which   is   in   operation,  in  order  to  alter  their  parameters  of  operation  so  that  they  can  serve  the   current  goal  mix.  The  complementarity  with  Layer  L3a  is  worth  noticing  here;  L3b   deals  with  run-‐time   goal  management,  while  L3b  with  design-‐time   teleology   (goal)   and  other  high-‐level  descriptions.  \n5.4.3  Implementing  the  CLIC  framework   After   a   thorough   interconnection   and   juxtaposition   of   cognitive   agency   as   it   is   viewed  within  CLIC  to  existing  theoretical  approaches,  we  will  investigate  the  notion   of  teleology,  and  its  relation  to  design-‐time  vs.  run-‐time  goals,  auto-‐telicity,  intrinsic   vs.  extrinsic  motivations,  and  elaborate  on  the  multiple  gradations  existing  between   teleological  and  structural  descriptions  for  CLIC-‐like  distributed  cognitive  systems.   We  will  use  the  theoretical  devices  developed  in  order  to  create  software  and  tools   that   implement   Layer   L3,   i.e.   provide   functionality   for   transforming   high-‐level   teleological  descriptions   to  mid-‐level   structural  blueprint   specifications   (L3a),   and   for  arbitrating  multiple  goals  and  enabling  partial  auto-‐telicity  (L3b).  \n6.  Conclusion  \nMotivated   by   the   multiple   shortcomings   of   the   traditional   approach   towards   designing  and  building  artificial  cognitive  systems,  in  this  paper  we  have  presented   CLIC,   a   framework   for   constructing   and   maintaining   distributed   human-‐machine   cognitive  systems  on  demand.    CLIC’s  software  architecture  consists  of  four  layers  of   mechanisms,   proving   support   for   real-‐time   human-‐service   interfacing   (L0),   cognitive   component   interfacing   (L1),   adaptive   service   procurement   and   fault   tolerance  (L2),  and  composite  cognitive  agency  at   the  highest   level   (L3).  Cognitive   systems   that   are   created   and   maintained   through   CLIC   fulfill   the   following   Desiderata:   First,   they   are   distributed   yet   situated,   interacting   with   the   physical   world  though  sensing  and  actuation  services,  and  they  are  also  combining  services   provided  by  humans  as  well  as  services  implemented  by  machines.  Second,  they  are   made  up  of  components   that  are   time-‐shared  and  re-‐usable  across  systems.  Third,   they  possess  increased  robustness  through  self-‐repair  mechanisms.  Fourth,  they  are   constructed  and  reconstructed  on  the   fly,  with  components  that  dynamically  enter   and  exit  the  system,  while  the  system  is  in  operation,  on  the  basis  of  availability,  and   pricing,   and   need.   And   quite   importantly,   fifth,   the   cognitive   systems   created   and   operated  by  CLIC  do  not  need   to  be  owned  and   can  be  provided  on  demand,   as   a   utility   –   thus   transforming   human-‐machine   situated   intelligence   to   a   service,   and   opening  up  numerous  interesting  research  directions  and  application  opportunities.   We   started   this   paper   by   providing   an   introduction,   following   by   a   system   and   mechanism  description,  and  an  example  of  a  use-‐case.  Then,  we  moved  on  to  a  more  \ndetailed  description  of  the  four  layers  and  their  relation  to  existing  research,  as  well   as  the  important  new  research  directions  that  open  up.     Summing  up,  CLIC  enables   the  design  and  operation  of   cognitive  systems   to  move   much  beyond  the  current  state  of  the  art,  by  allowing  the  creation  of  fault-‐adaptive   complex   cognitive   systems   for   a   wide   variety   of   application   scenarios,   where   adjusting  and  recovering  from  failures  is  critical,  and  where  wide-‐area  networks  of   sensors  and  actuators,  human  and  machine,  are  required.  Most  importantly,  through   CLIC,   situated   intelligence   is   transformed   to   a   service,   resulting   to   significant   economic  consequences,  and  opening  up  the  new  era  of  robust  distributed  human-‐ machine  situated  collective  intelligence  on  demand.   Most  importantly,  apart  from  this  specific  use  case  example,  the  mechanisms  of  CLIC   enable   the   creation   of   other   such   fault-‐adaptive   complex   cognitive   systems   for   a   wide  variety  of  application  scenarios,  where  adjusting  and  recovering  from  failures   is   critical,   and   where   wide-‐area   networks   of   sensors   and   actuators,   human   and   machine,  are  required.      References      [Ahn08]  L.  Von  Ahn,  B.  Maurer,  C.  McMillen,  D.  Abraham,  and  M.  Blum,  “reCAPTCHA:  Human-‐Based  \nCharacter  Recognition  via  Web  Security  Measures”,  Science,   vol.  12:321(5895)  pp.  1465-‐1468,   2008.  \n[Ahn06]  L.  Von  Ahn,  “Games  with  a  purpose”,  IEEE  Computer,  vol.  39(6),  pp.92-‐94,  2006.   [AhnDab04]   L.   Von  Ahn,   and  L.  Dabbish,   “Labelling   images  with   a   computer   game”,   in  Proc.   of   the   SIGCHI  conference  on  Human  Factors  in  Computing  Systems  (CHI),  2004.     [BAV05]  A.  Anandasivam  and  D.  Neumann,  “Managing  revenue  in  grids”,   in  Proc.  of  the  42nd  Hawaii   International  Conference  on  System  Sciences  (HICSS),  pp.  1–10,  2009.   [AHS01]  E.  Aarts  and  R.  Harwig  and  M.  Schuurmans,  “Ambient  Intelligence”,  In  The  Invisible  Future,   Peter  J.  Denning  (Ed.).  McGraw-‐Hill,  Inc.,  New  York,  NY,  USA  235-‐250.    2001.   [Ber11]  M.  S.  Bernstein,   J.  Brandt,  R.  C.  Miller,  and  D.  R.  Karger,   “Crowds   in  Two  Seconds:  Enabling  \nRealtime   Crowd-‐Powered   Interfaces”,   In   Proc.   of   the   User   Interface   Software   and   Technology   Symposium  (UIST),  2011.  \n[Bol05]  M.  Bolim,  “End-‐User  Programming  for  the  Web”,  MIT  MS  thesis,  2005.   [Bra91]   Bratman,   M.   E.   (1999).   Intention,   Plans,   and   Practical   Reason.   CSLI   Publications.   ISBN   1-‐ 57586-‐192-‐5.   [BUMTS09]  S.  Bromuri,  V.  Urovi,  M.  Morge,  F.  Toni,  and  K.  Stathis,  “A  multi-‐agent  system  for  service  \ndiscovery,  selection  and  negotiation”,  in  Proc.  of  the  8th  International  Conference  in  Autonomous   Agents  and  Multi  Agent  Systems  (AAMAS),  2009.  \n[Cal09]  C.   Callison-‐Burch,   “Fast,   cheap,   and   creative:   evaluating   translation  quality   using  Amazon's   Mechanical   Turk”,   in   Proc.   of   the   Conference   on   Empirical   Methods   in   Natural   Language   Processing  (EMNLP),  2009.  \n[CTZB10]  F.  Chersi,   S.  Thill,   T.   Ziemke,   and  A.  M.  Borghi,   “Sentence  processing:   linking   language   to   motor  chains”,  Frontiers  in  Neurorobotics,  vol.  4(4),  2010.  \n[DTT08]  P.  M.  Dung,  Phan  M.  Thang,  and  F.  Toni,  “Argument-‐based  Decision  Making  and  Negotiation   in   E-‐business:   Contracting   a   Land   Lease   for   a   Computer   Assembly   Plant”,   in   Proc.   of   the   9th   International  Workshop  on  Computational  Logic  in  Multi-‐Agent  Systems  (CLIMA),  2008.  \n[DVC08]  R.  P.  Díaz  Redondo,  A.  F.  Vilas,  M.  R.  Cabrer,  J.  J.  Pazos  Arias,  J.  García  Duque,  and  A.  Gil  Solla,   “Enhancing   Residential   Gateways:   A   Semantic   OSGi   Platform”,   IEEE   Intelligent   Systems,   vol.   23(1),  pp.  32-‐40,  2008.  \n[FFGR05]  L.  Fogassi,  P.  F.  Ferrari,  B.  Gesierich,  S.  Rozzi,  F  Chersi,  and  G.  Rizzolatti,  “Parietal  lobe:  from   action  organization  to  intention  understanding”,  Science,  vol.  308,  pp  662-‐667,  2005.  \n[FGK11]   R.   Ferrario,   N.   Guarino,   C.   Janiesch,   T.   Kiemes,   and   F.   Probst,   “Towards   an   Ontological   Foundation   of   Services   Science:   The   General   Service   Model”,   Wirtschaftsinformatik,   vol.   47,   2011.  \n[FSJ98]   P.   Faratin,   C.   Sierra,   and   N.   R.   Jennings,   “Negotiation   decision   functions   for   autonomous   agents”,  Robotics  and  Autonomous  Systems,  vol.  24(3-‐4),  pp.  159-‐182,  1998.  \n[GGM02]  A.  Gangemi,  N.  Guarino,  C.  Masolo,  A.  Oltramari,  and  L.  Schneider,   “Sweetening  ontologies   with   DOLCE”,   in   Proc.of   the   13th   International   Conference   on   Knowledge   Engineering   and   Knowledge  Management  (EKAW),  2002.  \n[GLN04]  E.  Gelenbe,  R.  Lent,  and  A.  Nunez,  “Self-‐aware  networks  and  QoS”,  IEEE,  vol.  92(9),  pp.  1478-‐ 1489,  2004.  \n[Hel07]  I.  Heldal,  “The  Impact  of  Social  Interaction  on  Usability  for  Distributed  Virtual  Environment”   Journal  of  Virtual  Reality,  vol.  6(3),  pp.  45-‐54,  2007.  \n[HHK00]  J.  D.  Hollan,  E.  Hutchins,  and  D.  Kirsh,  „Distributed  cognition:  toward  a  new  foundation  for   human-‐computer   interaction  research”,  ACM  Transactions  on  Human-‐Computer  Interaction,  vol.   7(2),  pp.  174-‐196,  2000.  \n[Hol09]   A.   Holt,   “Executive   IT   Architect,   Mashup   business   scenarios   and   patterns\",   IBM   DeveloperWorks,  2009.  \n[HR92]  B.  Hayes-‐Roth,   “On  building   integrated  cognitive  agents:  A   review  of  Allen  Newell’s  unified   theories  of  cognition”,  Artificial  Intelligence,  vol.  59,  pp.  329–341,  1992.  \n[HW83]  E.  Hollnagel,   and  D.  D.  Woods,   “Cognitive   systems  engineering:  New  wine   in  new  bottles”,   International  Journal  of  Man-‐Machine  Studies,  vol.  18,  pp.  583-‐600,  1983.  \n[HW05]   E.   Hollnagel,   and   D.D.  Woods,   “Joint   cognitive   systems:   Foundations   of   cognitive   systems   engineering”,  Boca  Raton,  FL:  CRC  Press  /  Taylor  &  Francis,  2005.  \n[Hut95]  E.  Hutchins,  “Cognition  in  the  Wild.  Cambridge”,  MA:  MIT  Press,  2005.   [Kit12]  A.  Kittur,  S.  Khamkar,  P.  André,  and  R.  E.  Kraut,  “CrowdWeaver:  Visually  managing  complex  \ncrowd  work”,  in  Proc.  of  the  ACM  Conference  on  Computer  Supported  Cooperative  Work  (CSCW),   2012.  \n[Kit08]  A.  Kittur,  E.  H.  Chi,  and  B.  Suh,  “Crowdsourcing  user  studies  with  Mechanical  Turk”,  In  Proc.  of   the  26th  Annual  ACM  Conference  on  Human  Factors  in  Computing  Systems  (CHI),  2008.  \n[KKC10]   E.   Kirci,   E.K.   Kuban,   and   N.K.   Cicekli,   “Automated   Composition   of  Web   Services   with   the   Abductive  Event  Calculus”,  Information  Sciences,  vol.  180(19),  pp.  3589–3613,  2010.  \n[KMSST08]   A.   C.   Kakas,   P.   Mancarella,   F.   Sadri,   K.   Stathis,   and   F.   Toni,   “Computational   logic   foundations  of  KGP  agents”,  Journal  of  Artificial  Intelligence  Research  (JAIR),  vol.  33,  pp.285–348,   2008.  \n[Kre10]   D.   Kreps,   and   G.   Fletcher,   “#uksnow:   webscience   weather   watch”,   in   Proc.   of   Internet   Research  11.0  (IR11),  2010.  \n[LC10]   F.   Lopes   and   H.   Coelho,   “Strategic   and   Tactical   Behaviour   in   Automated   Negotiation”,   International  Journal  of  Artificial  Intelligence,  vol.  4(10),  pp.  35-‐63,  2010.  \n[Lie11]   B.   Liem,   H.   Zhang,   and   Y.   Chen   “An   iterative   dual   pathway   structure   for   speech-‐to-‐text   transcription”,  In  Proc.  of  the  3rd  Human  Computation  Workshop  (HCOMP),  2011.  \n[LMNC04]   F.   Lopes,   N.   J.   Mamede,   A.   Q.   Novais,   and   H.   Coelho,   “Negotiation   Strategies   for   Autonomous   Computational   Agents”,   in   Proc.   of   the   16th   European   Conference   on   Artificial   Intelligence  (ECAI),  pp.  38-‐42,  2004.  \n[LWJ01]   A.   Lomuscio,   M.   Wooldridge,   N.   R.   Jennings,   “A   Classification   Scheme   for   Negotiation   in   Electronic  Commerce”,  AgentLink,  pp.19-‐33,  2001.  \n[LZ11]   R.   Lowe,   T.   Ziemke,   “The   feeling   of   action   tendencies:   on   the   emotional   regulation   of   goal-‐ directed  behavior”,  Frontiers  in  Psychology,  vol.  2,  2011  \n[MAT09]  G  Mathiason,  “Virtual  Full  Replication  for  Scalable  Distributed  Real-‐Time  Data-‐bases”,  PhD   thesis,  2009    \n[McITCS02]  S.  A.  McIlraith,  T.  C.  Son,  “Adapting  Golog  for  Composition  of  Semantic  Web  Services”,  in   Proc.   of   the  8th   International  Conference  on  Knowledge  Representation  and  Reasoning   (KR),   pp.   482-‐496,  2002.  \n[MOO10]  K.  De  Moor,   K.   Ketyko,  W.   Joseph,   T.  Deryckere,   L.  De  Marez,   L.  Martens,   and  G.   Verleye,   “Proposed  Framework  for  Evaluating  Quality  of  Experience  in  a  Mobile,  Testbed-‐oriented  Living   Lab  Setting”,  Mobile  Networks  and  applications,  2010.  \n[MST11]  J.  McGinnis,  K.  Stathis,  and  F.  Toni,  “A  Formal  Model  of  Agent-‐Oriented  Virtual  Organisations   and  their  Formation”,  Multi-‐Agent  and  Grid  Systems,  vol.  7(6),  pp.  291–310,  2011.  \n[MT10]  M.  Mihailescu  and  Y.  M.  Teo,  “Dynamic  resource  pricing  on  federated  clouds”,  in  Proc.  of  the   International  Conference  on  Cluster,  Cloud  and  Grid  Computing  (CCGRID),  pp.  513–517,  2010.  \n[NLSZ12]  M.  Nilsson,   J.   Laere,  T.   Susi,   and  T.  Ziemke,   “Information   fusion   in  practice:  A  distributed   cognition  perspective  on  the  active  role  of  the  users”,  Information  Fusion,  vol.  13(1),  pp.  60-‐78,   2012.  \n[OLG06]   D.   Oberle,   S.   Lamparter,   S   Grimm,   D.   Vrandečić,   S   Staab,   and   A.   Gangemi,   “Towards   Ontologies   for   Formalizing   Modularization   and   Communication   in   Large   Software   Systems”,   Applied  Ontology,  vol.  1(2),  pp.  163-‐202,  2006.  \n[OWL-‐S]   D.   Martin,   M.   Burstein,   J.   Hobbs,   O.   Lassila,   et   al.,   “OWL-‐S:   Semantic   Markup   for   Web   Services”,  W3C  Member  Submission,  URL:  http://www.w3.org/Submission/OWL-‐S,  2002.  \n[Pal11]  L.  Palen,  S.  Vieweg,  and  K.  M.  Anderson,  “Supporting  “Everyday  Analysts”  in  Time-‐  and  Safety-‐ Critical  Situations”,  The  Information  Society  Journal,  vol.  27(1),  pp.  52-‐62,  2011.  \n[PESS11]   T.   De   Pessemier,   K.   De   Moor,   K.   Ketyko,   W.   Joseph,   L.   De   Marez,   and   L.   Martens,   “Investigating   the   influence   of   QoS   on   personal   evaluation   behaviour   in   a   mobile   context”,   Multimedia  tools  and  applications,  2011.  \n[QBN07]  M.  Quigley,  E.  Berger,  and  A.  Y.  Ng,  “STAIR:  Hardware  and  Software  Architecture”,  in  Proc.  of   the  AAAI  2007  Robotics  Workshop,  2007.  \n[RG91]   A.   S.   Rao   and   M.   P.   Georgeff.   Modeling   Rational   Agents   within   a   BDI-‐Architecture.   In   Proceedings   of   the   2nd   International   Conference   on   Principles   of   Knowledge   Representation   and  Reasoning,  pages  473–484,  1991.  \n[SAWSDL]   J.   Farrell   and   H.   Lausen,   “Semantic   Annotations   for   WSDL   and   XML   Schema”,   W3C   Recommendation,  URL:  http://www.w3.org/TR/sawsdl,  2007.  \n[Sch06]  R.  Schroeder,  I.  Heldal,  J.  Tromp,  “The  Usability  of  Virtual  Environments  and  Methods  for  the   Analysis   of   Interaction”,  Presence:  Teleoperators   in  Virtual  Environments,  MIT  Press,   vol.   15(6),   pp.  655-‐667,  2006.  \n[SFWJ04]   S.   S.   Fatima,  M.  Wooldridge,   and  N.   R.   Jennings,   “An   agenda-‐based   framework   for  multi-‐ issue  negotiation”,  Artificial  Intellegence,  vol.  152(1),  pp.  1-‐45,  2004.  \n[SKPB07]  K.  Stathis  and  S.  Kafetzoglou  and  S.  Papavassiliou  and  S.  Bromuri,  \"Sensor  Network  Grids:   Agent   Environments   Combined   with   QoS   in   Wireless   Sensor   Networks,\"   Autonomic   and   Autonomous  Systems,  Third  International  Conference  on  Autonomic  and  Autonomous  Systems   (ICAS'07),  2007.  \n[SLK07]   K.   Stathis,   G.K.   Lekeas   and   C.   Kloukinas,   “Competence   checking   for   the   global   e-‐service   society  using  games”,  Engineering  Societies  in  the  Agents  World  VII,  vol.  4457,  pp.  384-‐400,  2007.  \n[SoaML]   “Service   oriented   architecture   Modeling   Language   (SoaML),   Version   1.0”,   Object   Management  Group,  URL:  http://www.omg.org/spec/SoaML/1.0,  2012.  \n[SoaRM]  C.  Matthew  MacKenzie,  K.  Laskey,  F.  McCabe,  P.  F.  Brown,  and  R.  Metz,  “Reference  Model  for   Service  Oriented  Architecture  1.0”,  OASIS  Standard,  URL:  http://docs.oasis-‐open.org/soa-‐rm/v1.0,   2006.  \n[SorFor08]  A.  Sorokyn,  and  D.  Forsyth,  “Utility  Data  Annotation  using  Mechanical  Turk”,  In  Proc.  of  1st   IEEE  Workshop  on  Internet  Vision  at  CVPR,  2008.  \n[SPJ09]   S.   Stein,   T.   R.   Payne,   and  N.   R.   Jennings,   “Flexible   provisioning   of  web   service  workflows”,   ACM  Transactions  on  Internet  Technology,  vol.  9(1),  2009.  \n[SS09]  F.  Sadri  and  K.  Stathis,  “Ambient  Intelligence”.  Encyclopedia  of  Artificial  Intelligence,  pp  85-‐91,   2009.  \n[Sta10]  K.  Stathis,   “Autonomic  computing  with  self-‐governed  super-‐agents”,   in  Proc.  of   the  4th   IEEE   International   Conference   on   Self-‐Adaptive   and   Self-‐Organizing   Systems   Workshop   (SASOW),   2010.  \n[Tan11]   J.   C.  Tang,  M.  Cebrian,  N.  A.  Giacobe,  H.-‐W.  Kim,  T.  Kim,   and  D.  Wickert,   “Reflecting  on   the   DARPA  Red  Baloon  Challenge”,  Communications  of  the  ACM,  vol.  54(4),  pp.  78-‐85,  2011.  \n[TSZ11]  S.  Thill,  H.  Svensson,  and  T.  Ziemke,  “Modeling  the  development  of  goal  specificity  in  mirror   neurons”,  Cognitive  Computation,  vol.3(4),  pp  525-‐538,  2011.  \n[TZ10]  S.  Thill,  and  T.  Ziemke,  “Learning  new  motion  primitives  in  the  mirror  neuron  system:  A  self-‐ organising   computational  model”,   in  Proc.  of   the  11th   international  conference  on  Simulation  of   adaptive  behavior:  from  animals  to  animats  (SAB),  pp  413-‐423,  2010.  \n[US09]  V.  Urovi  and  K.  Stathis,  “Playing  with  Agent  Coordination  Patterns  in  MAGE”,  in  Proc.  of  the  5th   international   conference   on   Coordination,   organizations,   institutions,   and   norms   in   agent   systems,(COIN),  2009.  \n[VJ10]   I.   A.   Vetsikas   and   N.   R.   Jennings,   “Bidding   strategies   for   realistic   multi-‐unit   sealed-‐bid   auctions”,  Journal  of  Autonomous  Agents  and  Multi-‐Agent  Systems  (JAAMAS),  vol.  21(2),  pp.  265-‐291,   2010.  \n[VJS07]   I.   A.   Vetsikas,   N.   R.   Jennings,   and   B.   Selman,   “Generating   Bayes-‐Nash   equilibria   to   design   autonomous   trading   agents”,   in   Proc.   of   the   20th      International   Joint   Conference   on   Artificial   Intelligence  (IJCAI),  pp.  1543-‐1550,  2007.  \n[VS03]   I.   A.   Vetsikas   and   B.   Selman,   “A   principled   study   of   the   design   tradeoffs   for   autonomous   trading   agents”,in   Proc.   of   the   2nd   International   Joint   Conference   on   Autonomous   Agents   and   Multi-‐agent  Systems  (AAMAS),  pp.  473-‐480,  2003.  \n[VSJ12]   I.  A.  Vetsikas,   S.   Stein,   and  N.  R.   Jennings,   “Multi-‐unit   auctions  with  a   stochastic  number  of   asymmetric   bidders”,   submitted   to   20th   European   Conference   on   Artificial   Intelligence   (ECAI),   2012.  \n[WADL]   M.   Hadley,   “Web   Application   Description   Language”,   W3C   Member   Submission,   URL:   http://www.w3.org/Submission/wadl,  2009.  \n[WMV02]  P.  Winoto,  G.   I.  McCalla,   J.  Vassileva,  “An  Extended  Alternating-‐Offers  Bargaining  Protocol   for  Automated  Negotiation  in  Multi-‐Agent  Systems”,  in  Proc.  of  the  10th  International  Conference   on  Cooperative  Information  Systems  (CoopIS),  2002.  \n[WSDL2]   R.   Chinnici,   J.-‐J.   Moreau,   A.   Ryman,   and   S.   Weerawarana,   “Web   Services   Description   Language   2.0:   Core   Language”,   W3C   Recommendation,   URL:   http://www.w3.org/TR/wsdl20,   2007.  \n[XIA12]   L.   Xiao,   C.   Jinjun,   and   Y.   Yang,   “Temporal   QoS   Management   in   Scientific   Cloud  Workflow   Systems”,  Elsevier,  2012.  \n[Zha11]  H.  Zhang,  E.  Horvitz,  Y.  Chen,  and  D.  C.  Parkes,  “Task  Routing  for  prediction  tasks”,  In  Proc.  of   EC'11  Workshop  on  Social  Computing  and  User  Generated  Content,  2011  "
    } ],
    "references" : [ {
      "title" : "reCAPTCHA: Human-­‐Based Character Recognition via Web Security Measures",
      "author" : [ "L. Von Ahn", "B. Maurer", "C. McMillen", "D. Abraham", "M. Blum" ],
      "venue" : "Science, vol",
      "citeRegEx" : "Ahn et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Ahn et al\\.",
      "year" : 2008
    }, {
      "title" : "Games with a purpose",
      "author" : [ "L. Von Ahn" ],
      "venue" : "IEEE Computer, vol. 39(6),",
      "citeRegEx" : "Ahn,? \\Q2006\\E",
      "shortCiteRegEx" : "Ahn",
      "year" : 2006
    }, {
      "title" : "Labelling images with a computer game",
      "author" : [ "L. Von Ahn", "L. Dabbish" ],
      "venue" : "Proc. of the SIGCHI conference on Human Factors in Computing Systems (CHI),",
      "citeRegEx" : "Ahn and Dabbish,? \\Q2004\\E",
      "shortCiteRegEx" : "Ahn and Dabbish",
      "year" : 2004
    }, {
      "title" : "Managing revenue in grids",
      "author" : [ "A. Anandasivam", "D. Neumann" ],
      "venue" : "Proc. of the 42nd Hawaii International Conference on System Sciences (HICSS),",
      "citeRegEx" : "Anandasivam and Neumann,? \\Q2009\\E",
      "shortCiteRegEx" : "Anandasivam and Neumann",
      "year" : 2009
    }, {
      "title" : "Ambient Intelligence”, In The Invisible Future",
      "author" : [ "E. Aarts", "R. Harwig", "M. Schuurmans" ],
      "venue" : "Peter J. Denning (Ed.). McGraw-­‐Hill, Inc.,",
      "citeRegEx" : "Aarts et al\\.,? \\Q2001\\E",
      "shortCiteRegEx" : "Aarts et al\\.",
      "year" : 2001
    }, {
      "title" : "Crowds in Two Seconds: Enabling Realtime Crowd-­‐Powered Interfaces",
      "author" : [ "M.S. Bernstein", "J. Brandt", "R.C. Miller", "D.R. Karger" ],
      "venue" : "In Proc. of the User Interface Software and Technology Symposium (UIST),",
      "citeRegEx" : "Bernstein et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Bernstein et al\\.",
      "year" : 2011
    }, {
      "title" : "End-­‐User Programming for the Web",
      "author" : [ "M. Bolim" ],
      "venue" : "MIT MS thesis,",
      "citeRegEx" : "Bolim,? \\Q2005\\E",
      "shortCiteRegEx" : "Bolim",
      "year" : 2005
    }, {
      "title" : "A multi-­‐agent system for service discovery, selection and negotiation",
      "author" : [ "S. Bromuri", "V. Urovi", "M. Morge", "F. Toni", "K. Stathis" ],
      "venue" : "in Proc. of the 8th International Conference in Autonomous Agents and Multi Agent Systems (AAMAS),",
      "citeRegEx" : "Bromuri et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Bromuri et al\\.",
      "year" : 2009
    }, {
      "title" : "Fast, cheap, and creative: evaluating translation quality using Amazon's Mechanical Turk",
      "author" : [ "C. Callison-­‐Burch" ],
      "venue" : "in Proc. of the Conference on Empirical Methods in Natural Language Processing (EMNLP),",
      "citeRegEx" : "Callison.­.Burch,? \\Q2009\\E",
      "shortCiteRegEx" : "Callison.­.Burch",
      "year" : 2009
    }, {
      "title" : "Sentence processing: linking language to motor chains",
      "author" : [ "F. Chersi", "S. Thill", "T. Ziemke", "A.M. Borghi" ],
      "venue" : "Frontiers in Neurorobotics,",
      "citeRegEx" : "Chersi et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Chersi et al\\.",
      "year" : 2010
    }, {
      "title" : "Argument-­‐based Decision Making and Negotiation in E-­‐business: Contracting a Land Lease for a Computer Assembly",
      "author" : [ "P.M. Dung", "Phan M. Thang", "F. Toni" ],
      "venue" : "Plant”, in Proc. of the 9th International Workshop on Computational Logic in Multi-­‐Agent Systems (CLIMA),",
      "citeRegEx" : "Dung et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Dung et al\\.",
      "year" : 2008
    }, {
      "title" : "Parietal lobe: from action organization to intention understanding",
      "author" : [ "L. Fogassi", "P.F. Ferrari", "B. Gesierich", "S. Rozzi", "F Chersi", "G. Rizzolatti" ],
      "venue" : "Science, vol",
      "citeRegEx" : "Fogassi et al\\.,? \\Q2005\\E",
      "shortCiteRegEx" : "Fogassi et al\\.",
      "year" : 2005
    }, {
      "title" : "Negotiation decision functions for autonomous agents",
      "author" : [ "P. Faratin", "C. Sierra", "N.R. Jennings" ],
      "venue" : "Robotics and Autonomous Systems,",
      "citeRegEx" : "Faratin et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "Faratin et al\\.",
      "year" : 1998
    }, {
      "title" : "Sweetening ontologies with DOLCE",
      "author" : [ "A. Gangemi", "N. Guarino", "C. Masolo", "A. Oltramari", "L. Schneider" ],
      "venue" : "Proc.of the 13th International Conference on Knowledge Engineering and Knowledge Management (EKAW),",
      "citeRegEx" : "Gangemi et al\\.,? \\Q2002\\E",
      "shortCiteRegEx" : "Gangemi et al\\.",
      "year" : 2002
    }, {
      "title" : "Self-­‐aware networks and QoS",
      "author" : [ "E. Gelenbe", "R. Lent", "A. Nunez" ],
      "venue" : "IEEE, vol",
      "citeRegEx" : "Gelenbe et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Gelenbe et al\\.",
      "year" : 2004
    }, {
      "title" : "The Impact of Social Interaction on Usability for Distributed Virtual Environment",
      "author" : [ "I. Heldal" ],
      "venue" : "Journal of Virtual Reality,",
      "citeRegEx" : "Heldal,? \\Q2007\\E",
      "shortCiteRegEx" : "Heldal",
      "year" : 2007
    }, {
      "title" : "Distributed cognition: toward a new foundation for human-­‐computer interaction research",
      "author" : [ "J.D. Hollan", "E. Hutchins", "D. Kirsh" ],
      "venue" : "ACM Transactions on Human-­‐Computer Interaction,",
      "citeRegEx" : "Hollan et al\\.,? \\Q2000\\E",
      "shortCiteRegEx" : "Hollan et al\\.",
      "year" : 2000
    }, {
      "title" : "Executive IT Architect, Mashup business scenarios and patterns",
      "author" : [ "A. Holt" ],
      "venue" : "IBM DeveloperWorks,",
      "citeRegEx" : "Holt,? \\Q2009\\E",
      "shortCiteRegEx" : "Holt",
      "year" : 2009
    }, {
      "title" : "On building integrated cognitive agents: A review of Allen Newell’s unified theories of cognition",
      "author" : [ "B. Hayes-­‐Roth" ],
      "venue" : "Artificial Intelligence,",
      "citeRegEx" : "Hayes.­.Roth,? \\Q1992\\E",
      "shortCiteRegEx" : "Hayes.­.Roth",
      "year" : 1992
    }, {
      "title" : "Cognitive systems engineering: New wine in new bottles",
      "author" : [ "E. Hollnagel", "D.D. Woods" ],
      "venue" : "International Journal of Man-­‐Machine Studies,",
      "citeRegEx" : "Hollnagel and Woods,? \\Q1983\\E",
      "shortCiteRegEx" : "Hollnagel and Woods",
      "year" : 1983
    }, {
      "title" : "Joint cognitive systems: Foundations of cognitive systems engineering",
      "author" : [ "E. Hollnagel", "D.D. Woods" ],
      "venue" : "Boca Raton, FL: CRC Press / Taylor & Francis,",
      "citeRegEx" : "Hollnagel and Woods,? \\Q2005\\E",
      "shortCiteRegEx" : "Hollnagel and Woods",
      "year" : 2005
    }, {
      "title" : "Cognition in the Wild. Cambridge",
      "author" : [ "E. Hutchins" ],
      "venue" : null,
      "citeRegEx" : "Hutchins,? \\Q2005\\E",
      "shortCiteRegEx" : "Hutchins",
      "year" : 2005
    }, {
      "title" : "CrowdWeaver: Visually managing complex crowd work",
      "author" : [ "A. Kittur", "S. Khamkar", "P. André", "R.E. Kraut" ],
      "venue" : "in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW),",
      "citeRegEx" : "Kittur et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Kittur et al\\.",
      "year" : 2012
    }, {
      "title" : "Crowdsourcing user studies with Mechanical Turk",
      "author" : [ "A. Kittur", "E.H. Chi", "B. Suh" ],
      "venue" : "In Proc. of the 26th Annual ACM Conference on Human Factors in Computing Systems (CHI),",
      "citeRegEx" : "Kittur et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Kittur et al\\.",
      "year" : 2008
    }, {
      "title" : "Automated Composition of Web Services with the Abductive Event Calculus",
      "author" : [ "E. Kirci", "E.K. Kuban", "N.K. Cicekli" ],
      "venue" : "Information Sciences,",
      "citeRegEx" : "Kirci et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Kirci et al\\.",
      "year" : 2010
    }, {
      "title" : "Computational logic foundations of KGP agents",
      "author" : [ "A.C. Kakas", "P. Mancarella", "F. Sadri", "K. Stathis", "F. Toni" ],
      "venue" : "Journal of Artificial Intelligence Research (JAIR),",
      "citeRegEx" : "Kakas et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Kakas et al\\.",
      "year" : 2008
    }, {
      "title" : "uksnow: webscience weather watch",
      "author" : [ "D. Kreps", "G. Fletcher" ],
      "venue" : "in Proc. of Internet Research 11.0",
      "citeRegEx" : "Kreps and Fletcher,? \\Q2010\\E",
      "shortCiteRegEx" : "Kreps and Fletcher",
      "year" : 2010
    }, {
      "title" : "Strategic and Tactical Behaviour in Automated Negotiation",
      "author" : [ "F. Lopes", "H. Coelho" ],
      "venue" : "International Journal of Artificial Intelligence,",
      "citeRegEx" : "Lopes and Coelho,? \\Q2010\\E",
      "shortCiteRegEx" : "Lopes and Coelho",
      "year" : 2010
    }, {
      "title" : "An iterative dual pathway structure for speech-­‐to-­‐text transcription",
      "author" : [ "B. Liem", "H. Zhang", "Y. Chen" ],
      "venue" : "In Proc. of the 3rd Human Computation Workshop (HCOMP),",
      "citeRegEx" : "Liem et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Liem et al\\.",
      "year" : 2011
    }, {
      "title" : "Negotiation Strategies for Autonomous Computational Agents",
      "author" : [ "F. Lopes", "N.J. Mamede", "A.Q. Novais", "H. Coelho" ],
      "venue" : "in Proc. of the 16th European Conference on Artificial Intelligence (ECAI),",
      "citeRegEx" : "Lopes et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Lopes et al\\.",
      "year" : 2004
    }, {
      "title" : "A Classification Scheme for Negotiation in Electronic Commerce",
      "author" : [ "A. Lomuscio", "M. Wooldridge", "N.R. Jennings" ],
      "venue" : "AgentLink, pp.19-­‐33,",
      "citeRegEx" : "Lomuscio et al\\.,? \\Q2001\\E",
      "shortCiteRegEx" : "Lomuscio et al\\.",
      "year" : 2001
    }, {
      "title" : "The feeling of action tendencies: on the emotional regulation of goal-­‐ directed behavior",
      "author" : [ "R. Lowe", "T. Ziemke" ],
      "venue" : "Frontiers in Psychology,",
      "citeRegEx" : "Lowe and Ziemke,? \\Q2011\\E",
      "shortCiteRegEx" : "Lowe and Ziemke",
      "year" : 2011
    }, {
      "title" : "Virtual Full Replication for Scalable Distributed Real-­‐Time Data-­‐bases",
      "author" : [ "G Mathiason" ],
      "venue" : "PhD thesis,",
      "citeRegEx" : "Mathiason,? \\Q2009\\E",
      "shortCiteRegEx" : "Mathiason",
      "year" : 2009
    }, {
      "title" : "Adapting Golog for Composition of Semantic Web Services",
      "author" : [ "S.A. McIlraith", "T.C. Son" ],
      "venue" : "Proc. of the 8th International Conference on Knowledge Representation and Reasoning (KR),",
      "citeRegEx" : "McIlraith and Son,? \\Q2002\\E",
      "shortCiteRegEx" : "McIlraith and Son",
      "year" : 2002
    }, {
      "title" : "Proposed Framework for Evaluating Quality of Experience in a Mobile, Testbed-­‐oriented Living Lab Setting",
      "author" : [ "K. De Moor", "K. Ketyko", "W. Joseph", "T. Deryckere", "L. De Marez", "L. Martens", "G. Verleye" ],
      "venue" : "Mobile Networks and applications,",
      "citeRegEx" : "Moor et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Moor et al\\.",
      "year" : 2010
    }, {
      "title" : "A Formal Model of Agent-­‐Oriented Virtual Organisations and their Formation",
      "author" : [ "J. McGinnis", "K. Stathis", "F. Toni" ],
      "venue" : "Multi-­‐Agent and Grid Systems,",
      "citeRegEx" : "McGinnis et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "McGinnis et al\\.",
      "year" : 2011
    }, {
      "title" : "Dynamic resource pricing on federated clouds",
      "author" : [ "M. Mihailescu", "Y.M. Teo" ],
      "venue" : "Proc. of the International Conference on Cluster, Cloud and Grid Computing (CCGRID),",
      "citeRegEx" : "Mihailescu and Teo,? \\Q2010\\E",
      "shortCiteRegEx" : "Mihailescu and Teo",
      "year" : 2010
    }, {
      "title" : "Information fusion in practice: A distributed cognition perspective on the active role of the users",
      "author" : [ "M. Nilsson", "J. Laere", "T. Susi", "T. Ziemke" ],
      "venue" : "Information Fusion,",
      "citeRegEx" : "Nilsson et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Nilsson et al\\.",
      "year" : 2012
    }, {
      "title" : "Towards Ontologies for Formalizing Modularization and Communication in Large Software Systems",
      "author" : [ "D. Oberle", "S. Lamparter", "S Grimm", "D. Vrandečić", "S Staab", "A. Gangemi" ],
      "venue" : "Applied Ontology,",
      "citeRegEx" : "Oberle et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Oberle et al\\.",
      "year" : 2006
    }, {
      "title" : "OWL-­‐S: Semantic Markup for Web Services”, W3C Member Submission",
      "author" : [ "OWL-­‐S] D. Martin", "M. Burstein", "J. Hobbs", "O. Lassila" ],
      "venue" : "URL: http://www.w3.org/Submission/OWL-­‐S,",
      "citeRegEx" : "Martin et al\\.,? \\Q2002\\E",
      "shortCiteRegEx" : "Martin et al\\.",
      "year" : 2002
    }, {
      "title" : "Supporting “Everyday Analysts",
      "author" : [ "L. Palen", "S. Vieweg", "K.M. Anderson" ],
      "venue" : "The Information Society Journal,",
      "citeRegEx" : "Palen et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Palen et al\\.",
      "year" : 2011
    }, {
      "title" : "Investigating the influence of QoS on personal evaluation behaviour in a mobile context",
      "author" : [ "T. De Pessemier", "K. De Moor", "K. Ketyko", "W. Joseph", "L. De Marez", "L. Martens" ],
      "venue" : "Multimedia tools and applications,",
      "citeRegEx" : "Pessemier et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Pessemier et al\\.",
      "year" : 2011
    }, {
      "title" : "STAIR: Hardware and Software Architecture",
      "author" : [ "M. Quigley", "E. Berger", "A.Y. Ng" ],
      "venue" : "in Proc. of the AAAI 2007 Robotics Workshop,",
      "citeRegEx" : "Quigley et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Quigley et al\\.",
      "year" : 2007
    }, {
      "title" : "Modeling Rational Agents within a BDI-­‐Architecture",
      "author" : [ "A.S. Rao", "M.P. Georgeff" ],
      "venue" : "In Proceedings of the 2nd International Conference on Principles of Knowledge Representation and Reasoning,",
      "citeRegEx" : "Rao and Georgeff.,? \\Q1991\\E",
      "shortCiteRegEx" : "Rao and Georgeff.",
      "year" : 1991
    }, {
      "title" : "Semantic Annotations for WSDL and XML Schema",
      "author" : [ "J. Farrell", "H. Lausen" ],
      "venue" : "W3C Recommendation, URL: http://www.w3.org/TR/sawsdl,",
      "citeRegEx" : "Farrell and Lausen,? \\Q2007\\E",
      "shortCiteRegEx" : "Farrell and Lausen",
      "year" : 2007
    }, {
      "title" : "The Usability of Virtual Environments and Methods for the Analysis of Interaction”, Presence: Teleoperators in Virtual Environments",
      "author" : [ "R. Schroeder", "I. Heldal", "J. Tromp" ],
      "venue" : null,
      "citeRegEx" : "Schroeder et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Schroeder et al\\.",
      "year" : 2006
    }, {
      "title" : "An agenda-­‐based framework for multi-­‐ issue negotiation",
      "author" : [ "S.S. Fatima", "M. Wooldridge", "N.R. Jennings" ],
      "venue" : "Artificial Intellegence,",
      "citeRegEx" : "Fatima et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Fatima et al\\.",
      "year" : 2004
    }, {
      "title" : "Sensor Network Grids: Agent Environments Combined with QoS in Wireless Sensor Networks,",
      "author" : [ "K. Stathis", "S. Kafetzoglou", "S. Papavassiliou", "S. Bromuri" ],
      "venue" : "Autonomic and Autonomous Systems, Third International Conference on Autonomic and Autonomous Systems (ICAS'07),",
      "citeRegEx" : "Stathis et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Stathis et al\\.",
      "year" : 2007
    }, {
      "title" : "Competence checking for the global e-­‐service society using games",
      "author" : [ "K. Stathis", "G.K. Lekeas", "C. Kloukinas" ],
      "venue" : "Engineering Societies in the Agents World VII,",
      "citeRegEx" : "Stathis et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Stathis et al\\.",
      "year" : 2007
    }, {
      "title" : "Reference Model for Service Oriented Architecture 1.0",
      "author" : [ "C. Matthew MacKenzie", "K. Laskey", "F. McCabe", "P.F. Brown", "R. Metz" ],
      "venue" : "OASIS Standard, URL: http://docs.oasis-­‐open.org/soa-­‐rm/v1.0,",
      "citeRegEx" : "MacKenzie et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "MacKenzie et al\\.",
      "year" : 2006
    }, {
      "title" : "Utility Data Annotation using Mechanical Turk",
      "author" : [ "A. Sorokyn", "D. Forsyth" ],
      "venue" : "In Proc. of 1st IEEE Workshop on Internet Vision at CVPR,",
      "citeRegEx" : "Sorokyn and Forsyth,? \\Q2008\\E",
      "shortCiteRegEx" : "Sorokyn and Forsyth",
      "year" : 2008
    }, {
      "title" : "Flexible provisioning of web service workflows",
      "author" : [ "S. Stein", "T.R. Payne", "N.R. Jennings" ],
      "venue" : "ACM Transactions on Internet Technology,",
      "citeRegEx" : "Stein et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Stein et al\\.",
      "year" : 2009
    }, {
      "title" : "Ambient Intelligence",
      "author" : [ "F. Sadri", "K. Stathis" ],
      "venue" : "Encyclopedia of Artificial Intelligence, pp 85-­‐91,",
      "citeRegEx" : "Sadri and Stathis,? \\Q2009\\E",
      "shortCiteRegEx" : "Sadri and Stathis",
      "year" : 2009
    }, {
      "title" : "Autonomic computing with self-­‐governed super-­‐agents",
      "author" : [ "K. Stathis" ],
      "venue" : "Proc. of the 4th IEEE International Conference on Self-­‐Adaptive and Self-­‐Organizing Systems Workshop (SASOW),",
      "citeRegEx" : "Stathis,? \\Q2010\\E",
      "shortCiteRegEx" : "Stathis",
      "year" : 2010
    }, {
      "title" : "Reflecting on the DARPA Red Baloon Challenge",
      "author" : [ "J.C. Tang", "M. Cebrian", "N.A. Giacobe", "H.-­‐W. Kim", "T. Kim", "D. Wickert" ],
      "venue" : "Communications of the ACM,",
      "citeRegEx" : "Tang et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Tang et al\\.",
      "year" : 2011
    }, {
      "title" : "Modeling the development of goal specificity in mirror neurons",
      "author" : [ "S. Thill", "H. Svensson", "T. Ziemke" ],
      "venue" : "Cognitive Computation,",
      "citeRegEx" : "Thill et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Thill et al\\.",
      "year" : 2011
    }, {
      "title" : "Learning new motion primitives in the mirror neuron system: A self-­‐ organising computational model”, in Proc. of the 11th international conference on Simulation of adaptive behavior: from animals to animats (SAB), pp 413-­‐423",
      "author" : [ "S. Thill", "T. Ziemke" ],
      "venue" : null,
      "citeRegEx" : "Thill and Ziemke,? \\Q2010\\E",
      "shortCiteRegEx" : "Thill and Ziemke",
      "year" : 2010
    }, {
      "title" : "Playing with Agent Coordination Patterns in MAGE",
      "author" : [ "V. Urovi", "K. Stathis" ],
      "venue" : "Proc. of the 5th international conference on Coordination,",
      "citeRegEx" : "Urovi and Stathis,? \\Q2009\\E",
      "shortCiteRegEx" : "Urovi and Stathis",
      "year" : 2009
    }, {
      "title" : "Bidding strategies for realistic multi-­‐unit sealed-­‐bid auctions",
      "author" : [ "I.A. Vetsikas", "N.R. Jennings" ],
      "venue" : "Journal of Autonomous Agents and Multi-­‐Agent Systems (JAAMAS),",
      "citeRegEx" : "Vetsikas and Jennings,? \\Q2010\\E",
      "shortCiteRegEx" : "Vetsikas and Jennings",
      "year" : 2010
    }, {
      "title" : "Generating Bayes-­‐Nash equilibria to design autonomous trading agents",
      "author" : [ "I.A. Vetsikas", "N.R. Jennings", "B. Selman" ],
      "venue" : "in Proc. of the 20th International Joint Conference on Artificial Intelligence (IJCAI),",
      "citeRegEx" : "Vetsikas et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Vetsikas et al\\.",
      "year" : 2007
    }, {
      "title" : "A principled study of the design tradeoffs for autonomous trading agents”,in",
      "author" : [ "I.A. Vetsikas", "B. Selman" ],
      "venue" : "Proc. of the 2nd International Joint Conference on Autonomous Agents and Multi-­‐agent Systems (AAMAS),",
      "citeRegEx" : "Vetsikas and Selman,? \\Q2003\\E",
      "shortCiteRegEx" : "Vetsikas and Selman",
      "year" : 2003
    }, {
      "title" : "Multi-­‐unit auctions with a stochastic number of asymmetric bidders",
      "author" : [ "I.A. Vetsikas", "S. Stein", "N.R. Jennings" ],
      "venue" : "European Conference on Artificial Intelligence (ECAI),",
      "citeRegEx" : "Vetsikas et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Vetsikas et al\\.",
      "year" : 2012
    }, {
      "title" : "An Extended Alternating-­‐Offers Bargaining Protocol for Automated Negotiation in Multi-­‐Agent Systems",
      "author" : [ "P. Winoto", "G.I. McCalla", "J. Vassileva" ],
      "venue" : "in Proc. of the 10th International Conference on Cooperative Information Systems (CoopIS),",
      "citeRegEx" : "Winoto et al\\.,? \\Q2002\\E",
      "shortCiteRegEx" : "Winoto et al\\.",
      "year" : 2002
    }, {
      "title" : "Web Services Description Language 2.0: Core Language",
      "author" : [ "R. Chinnici", "J.-­‐J. Moreau", "A. Ryman", "S. Weerawarana" ],
      "venue" : "W3C Recommendation, URL: http://www.w3.org/TR/wsdl20,",
      "citeRegEx" : "Chinnici et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Chinnici et al\\.",
      "year" : 2007
    }, {
      "title" : "Task Routing for prediction tasks",
      "author" : [ "H. Zhang", "E. Horvitz", "Y. Chen", "D.C. Parkes" ],
      "venue" : "In Proc. of EC'11 Workshop on Social Computing and User Generated Content,",
      "citeRegEx" : "Zhang et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Zhang et al\\.",
      "year" : 2011
    } ],
    "referenceMentions" : [ ],
    "year" : 2013,
    "abstractText" : "Traditional\t\r   Artificial\t\r   Cognitive\t\r   Systems\t\r   (for\t\r   example,\t\r   intelligent\t\r   robots)\t\r   share\t\r   a number\t\r   of\t\r   common\t\r   limitations.\t\r   First,\t\r   they\t\r   are\t\r   usually\t\r   made\t\r   up\t\r   only\t\r   of\t\r   machine components;\t\r  humans\t\r  are\t\r  only\t\r  playing\t\r  the\t\r  role\t\r  of\t\r  user\t\r  or\t\r  supervisor.\t\r  \t\r  And\t\r  yet,\t\r  there are\t\r  tasks\t\r  in\t\r  which\t\r  the\t\r  current\t\r  state\t\r  of\t\r  the\t\r  art\t\r  of\t\r  AI\t\r  has\t\r  much\t\r  worse\t\r  performance\t\r  or is\t\r   more\t\r   expensive\t\r   than\t\r   humans:\t\r   thus,\t\r   it\t\r   would\t\r   be\t\r   highly\t\r   beneficial\t\r   to\t\r   have\t\r   a systematic\t\r   way\t\r   of\t\r   creating\t\r   systems\t\r   with\t\r   both\t\r   human\t\r   and\t\r   machine\t\r   components, possibly\t\r   with\t\r   remote\t\r   non-­‐expert\t\r   humans\t\r   providing\t\r   snippets\t\r   of\t\r   some\t\r   seconds\t\r   of their\t\r  capacities\t\r  in\t\r  real-­‐time.\t\r  Second,\t\r  their\t\r  components\t\r  are\t\r  specific\t\r  and\t\r  dedicated\t\r  to one\t\r   and\t\r   only\t\r   one\t\r   system,\t\r   and\t\r   are\t\r   often\t\r   underutilized\t\r   for\t\r   significant\t\r   fractions\t\r   of their\t\r   lifetime.\t\r   Third,\t\r   there\t\r   is\t\r   no\t\r   inherent\t\r   support\t\r   for\t\r   robust,\t\r   fault-­‐tolerant operation,\t\r   and\t\r   if\t\r   a\t\r   new\t\r   component\t\r   becomes\t\r   available,\t\r   with\t\r   better\t\r   performance and/or\t\r  cheaper\t\r  cost,\t\r  one\t\r  cannot\t\r  easily\t\r  replace\t\r  the\t\r  old\t\r  component.\t\r  Fourth,\t\r  and\t\r  quite importantly\t\r  in\t\r  terms\t\r  of\t\r  their\t\r  economics,\t\r  they\t\r  are\t\r  viewed\t\r  as\t\r  a\t\r  resource\t\r  that\t\r  needs\t\r  to be\t\r  developed\t\r  and\t\r  owned,\t\r  not\t\r  as\t\r  a\t\r  utility;\t\r  i.e.\t\r  not\t\r  as\t\r  a\t\r  service\t\r  provided\t\r  on\t\r  demand. Motivated\t\r   by\t\r   the\t\r   above\t\r   state\t\r   of\t\r   affairs,\t\r   in\t\r   this\t\r   paper\t\r   we\t\r   are\t\r   presenting\t\r   CLIC:\t\r   a framework\t\r  for\t\r  constructing\t\r  cognitive\t\r  systems\t\r  that\t\r  overcome\t\r  the\t\r  above\t\r  mentioned limitations.\t\r  With\t\r   the\t\r   four-­‐layer\t\r   software\t\r   architecture\t\r   of\t\r   CLIC,\t\r  we\t\r   provide\t\r   specific yet\t\r   extensible\t\r   mechanisms\t\r   that\t\r   enable\t\r   the\t\r   creation\t\r   and\t\r   operation\t\r   of\t\r   distributed cognitive\t\r  systems\t\r  that\t\r  fulfill\t\r  the\t\r  following\t\r  desiderata:\t\r  First,\t\r  that\t\r  are\t\r  distributed\t\r  yet situated,\t\r  interacting\t\r  with\t\r  the\t\r  physical\t\r  world\t\r  though\t\r  sensing\t\r  and\t\r  actuation\t\r  services, and\t\r   that\t\r   are\t\r   also\t\r   combining\t\r   services\t\r   provided\t\r   by\t\r   humans\t\r   as\t\r   well\t\r   as\t\r   services implemented\t\r  by\t\r  machines.\t\r  Second,\t\r  that\t\r  are\t\r  made\t\r  up\t\r  of\t\r  components\t\r  that\t\r  are\t\r  time-­‐ shared\t\r   and\t\r   re-­‐usable\t\r   across\t\r   systems.\t\r   Third,\t\r   that\t\r   provide\t\r   increased\t\r   robustness through\t\r  self-­‐repair\t\r  mechanisms.\t\r  Fourth,\t\r  that\t\r  are\t\r  constructed\t\r  and\t\r  reconstructed\t\r  on the\t\r   fly,\t\r   with\t\r   components\t\r   that\t\r   dynamically\t\r   enter\t\r   and\t\r   exit\t\r   the\t\r   system,\t\r   while\t\r   the system\t\r   is\t\r   in\t\r   operation,\t\r   on\t\r   the\t\r   basis\t\r   of\t\r   availability,\t\r   and\t\r   pricing,\t\r   and\t\r   need.\t\r   Quite importantly,\t\r  fifth,\t\r  the\t\r  cognitive\t\r  systems\t\r  created\t\r  and\t\r  operated\t\r  by\t\r  CLIC\t\r  do\t\r  not\t\r  need to\t\r   be\t\r   owned\t\r   and\t\r   can\t\r   be\t\r   provided\t\r   on\t\r   demand,\t\r   as\t\r   a\t\r   utility\t\r   –\t\r   thus\t\r   transforming human-­‐machine\t\r   situated\t\r   intelligence\t\r   to\t\r   a\t\r   service,\t\r   and\t\r   opening\t\r   up\t\r   numerous interesting\t\r  research\t\r  directions\t\r  and\t\r  application\t\r  opportunities.",
    "creator" : "Word"
  }
}