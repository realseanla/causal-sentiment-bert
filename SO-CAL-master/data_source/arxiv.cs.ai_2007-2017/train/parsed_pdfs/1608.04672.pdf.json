{
  "name" : "1608.04672.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Informal Physical Reasoning Processes",
    "authors" : [ "Kurt Ammon" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n60 8.\n04 67\n2v 1\n[ cs\n.A I]\n1 5\nA ug\nA fundamental question is whether Turing machines can model all reasoning processes. We introduce an existence principle stating that the perception of the physical existence of any Turing program can serve as a physical causation for the application of any Turing-computable function to this Turing program. The existence principle overcomes the limitation of the outputs of Turing machines to lists, that is, recursively enumerable sets. The principle is illustrated by productive partial functions for productive sets such as the set of the Gödel numbers of the Turing-computable total functions. The existence principle and productive functions imply the existence of physical systems whose reasoning processes cannot be modeled by Turing machines. These systems are called creative. Creative systems can prove the undecidable formula in Gödel’s theorem in another formal system which is constructed at a later point in time. A hypothesis about creative systems, which is based on computer experiments, is introduced."
    }, {
      "heading" : "1 Introduction",
      "text" : "Turing [1969, p. 21, and 1948, p. 17, in the original typescript] discusses the development of intelligence in man and in machines:\nIf the untrained infants mind is to become an intelligent one, it must acquire both discipline and initiative. So far we have been considering only discipline. To convert a brain or machine into a universal machine is the extremest form of discipline. But discipline is certainly not enough in itself to produce intelligence. That which is required in addition we call initiative. ... Our task is to discover the nature of this residue as it occurs in man, and to try and copy it in machines.\nThus, Turing’s discipline is the execution of a universal [Turing] machine, that is, the execution of an ordinary computer program. He writes: “That which is required in addition [to produce intelligence] we call initiative.” This means that Turing assumes that intelligence cannot completely be represented by any\n∗Correspondence to kurtammon[at]csyst.org. Comments are welcome.\nTuring machine, that is, any computer program, and requires something that is called initiative by Turing.\nRussell and Norvig [2010, p. 1020] refer to an assertion in the field of Artificial Intelligence :\nThe proposal for the 1956 summer workshop that defined the field of Artificial Intelligence (McCarthy et al., 1955) made the assertion that “Every aspect of learning or any other feature of intelligence can be so precisely described that a machine can be made to simulate it.\nThus, McCarthy et al. [1955] assume that “every aspect of learning or any other feature of intelligence” can be formalized, that is, can be represented by a Turing machine. In contrast, Turing [1969] assumes that something “is required in addition” to produce intelligence.\nThe reason why something “is required in addition” can be illustrated by productive functions which can be regarded as a formal abstraction of the construction of the undecidable formula in Gödel’s [1965] incompleteness theorem.\nLet P1, P2, P3, ... be a fixed listing of all Turing programs, that is, the set of instructions of all Turing machines (see Rogers [1987, p. 21]). The indices 1, 2, 3, ... of the Turing programs P1, P2, P3, ... are called Gödel numbers. We write ϕi for the partial\n1 function computed by the Turing program Pi, where i is any Gödel number. A Turing-computable partial function ψ is called productive for a set A of natural numbers if, given any Turing-computable total2 function ϕi whose output is a subset S of A, then ψ is defined for the input i and the output ψ(i) is contained in A, that is, ψ(i) ∈ A, but not in the output S of ϕi, that is, ψ(i) /∈ S.3 Roughly speaking, Turing programs cannot generate all members of a productive set A because, given any Turing-computable total function ϕi whose output is a subset S of A, then ψ(i) ∈ A and ψ(i) /∈ S. An example of a productive set is the set of the Gödel numbers of the Turing-computable total functions whose inputs and output are natural numbers (see Rogers [1987, p. 84, Example 2]).\nA set is called recursively enumerable if it is empty or the output\n{ϕi(1), ϕi(2), ϕi(3), ...} (1)\nof a Turing-computable total function ϕi (see Rogers [1987, p. 58]). Productive functions can be used to construct a larger recursively enumerable subset of a productive setA from any given recursively enumerable subset ofA. Referring to his definition of a productive partial function for a productive set [Rogers, 1987, p. 84], Rogers [1987, p. 90] writes:\n1A function is called partial if it is defined for some but not necessarily all natural numbers in its input.\n2A function is called total if it it defined for all natural numbers in its input. 3This definition of productive functions and sets is equivalent to Rogers [1987, pp. 84, 90] because of basic theorems such as Rogers [1987, p. 60, Theorem V, and p. 61, Corollary V(b)].\nIt follows from the definition of productiveness that if a set A is productive, then there is an effective procedure by which, given any recursively enumerable subset of A, we can get a larger recursively enumerable subset of A.\nThe core of the construction of larger recursively enumerable subsets of a productive set may be summarized in the informal rule\nif given Pi then apply ψ to i, (2)\nwhere Pi is a Turing program computing a total function whose output is a subset S of a productive set A and ψ is a productive function for A. The application of the productive function ψ in the rule (2) to the Gödel number i of the Turing program Pi yields a natural number ψ(i) ∈ A that is not contained in the output S of Pi. From the subset S of A and the natural number ψ(i) we can get a larger subset S ∪ {ψ(i)} of A.\nIt is not possible to use the Turing program Pi and the productive function ψ in (2) to construct a Turing program, say Pj , that computes a total function whose output is a subset of the productive set A and contains the rule (2) such that Pj generates the output of any given Turing program Pi in (2) and the natural numbers ψ(i) although ψ is Turing-computable. A reason is that the application of the productive function ψ to the Gödel number j of the Turing program Pj yields a natural number ψ(j) that is not contained in the output of Pj . This means that the application of the productive function ψ to j implies that such a Turing program Pj cannot be given, that is, it cannot exist. An explanation is that the application of the productive function ψ to the Gödel number j of Pj cannot be achieved in the Turing program Pj itself. Roughly speaking, Pj cannot refer to itself, that is, its own existence.\nBut a human can apply the informal rule (2). If any Turing program Pi according to (2) is given, a human can apply the productive function ψ to i and use the result ψ(i) to produce a set that is larger than the output of Pi although there is no Turing program whose output contains all outputs that a human produces by applying the informal rule (2). Thus, productive functions, which can be regarded as a formal abstraction of the construction of the undecidable formula in Gödel’s [1965] incompleteness theorem, provide an explanation for Turing’s [1969] assumption that intelligence cannot completely be represented by any Turing machine, that is, any computer program, and requires something that is called initiative. The application of the informal rule (2) appears as a dynamical process that cannot be formalized in advance because the Turing program Pi in (2) need not be given at present but can be given in the future by applying a productive function. This means that the Gödel numbers of the Turing programs Pi in the input of (2) need not be recursively enumerable.\nA scientific theory of the informal rule (2), in particular, a theory of its technical, that is, physical implementation requires the solution of three problems. The first problem is the problem of existence because the word “given” in (2) must refer to any given, that is, existing Turing program Pi. This problem is\nfundamental because the set of the possible Gödel numbers of the Turing programs Pi in the input of (2) is not recursively enumerable. The second problem is how a reference to a “given”, that is, existing Turing program Pi in (2) can be established. The third problem is the problem of the physical causation for the application of the productive function ψ in (2), that is, the push of the button to apply ψ to i.\nThe three problems of a scientific theory of the informal rule (2), that is, the problems of the existence of a Turing program Pi, the reference to Pi, and the causation to apply ψ to i are solved by an existence principle stating that the perception of the physical existence of a Turing program can serve as a physical causation for the application of any Turing-computable function, for example, a productive function, to this information.\nSection 2 introduces the existence principle. Section 3 outlines implications of the existence principle for reasoning processes. Section 4 discusses our results, in particular, the Church-Turing thesis."
    }, {
      "heading" : "2 Existence",
      "text" : "The following physical existence principle solves the three problems of a scientific theory of the informal rule (2) in Section 1, that is, the problems of the existence of a Turing program Pi, the reference to Pi, and the causation to apply a productive function ψ to the Gödel number i of Pi.\nPhysical Existence Principle. Let ψ be a productive partial function for a productive set A. The perception of the physical existence of any Turing program Pi that computes a total function whose output is a subset of the productive set A can serve as a physical causation for the application of the productive function ψ to the Gödel number i of Pi.\nThe principle solves the problem of the existence of the Turing program Pi in the informal rule (2) because it refers to the physical existence of Pi. Therefore, the set of the Gödel numbers of the Turing programs Pi in the input of (2) need not be recursively enumerable. Thus, the informal rule (2) can process a set of Gödel numbers that is not recursively enumerable because the set of the Gödel numbers that satisfy the conditions in (2) is productive. The physical existence principle also solves the problem of the reference to Pi because the perception of the physical existence of the Turing program Pi in (2) establishes a reference to Pi. For example, this perception can be achieved by light, that is, electromagnetic waves. A human can use his eyes to perceive a physical representation of Pi. A technical input device is a camera that is connected to a computer. In general, this perception can be achieved by any physical means, for example, the physical means for the perception of a Turing program Pi that is represented in the brain of a human. Finally, the physical existence principle also solves the problem of causation because the perception of the physical representation of Pi can cause a human to start the execution of a Turing program, that is, a computer program. The perception of the physical\nrepresentation of Pi by means of a connected camera can cause a computer to start a program.\nDefinition 1. A physical system that contains an implementation of the physical existence principle is called creative system.4\nBy means of the physical existence principle the informal rule (2) in Section 1 can be transformed into the following precise physical rule:\nRule 1. Let ψ be a productive partial function for a productive set A. Then\nif exists Pi then apply ψ to i, (3)\nwhere Pi is a Turing program computing a total function whose output is a subset S of the productive set A and exists means that Pi exists physically, describes an implementation of the physical existence principle.\nThus, the word exists in (3) refers to a physical process, that is, that the perception of the physical existence of Pi serves as a physical causation for the application of the productive function ψ to the Gödel number i of Pi according to the physical existence principle.\nIf a creative system according to Definition 1 contains an implementation of the physical rule (3), it applies the physical rule (3), that is, it applies the productive function ψ to the Gödel number i of any existing Turing program Pi computing a total function whose output is a subset S of the productive set A according to (3). This means that the Gödel numbers i in the input of the physical rule (3) need not be recursively enumerable because A is a productive set such that for any Turing program Pi computing a total function whose output is a subset S of A there exists a Turing program computing a total function whose output is a subset of A that is larger that S.\nIf we abstract the logical aspects from the physical existence principle we get the following principle:\nLogical Existence Principle. Let ψ be a productive partial function for a productive set A. A creative system can apply the productive function ψ to the Gödel number i of any existing Turing program Pi that computes a total function whose output is a subset of the productive set A.\nBy means of the logical existence principle we can prove theorems about creative systems.\nRoughly speaking, the following theorem states that the outputs of creative systems cannot be generated by Turing programs.\n4Ammon [1987, Section 3.1] defines a creative system by requiring that it can determine outputs of functions that cannot be computed by Turing programs, that is, for a given Turing program a creative system can determine such outputs that are not contained in the outputs of the Turing program. Roughly speaking, a creative system cannot be modeled by a Turing program because it can use the program as a basis for its further development.\nTheorem 1. Let ψ be a productive partial function for a productive set A, let C be a creative system that applies the physical rule (3), and let C produce any sequence\nj1, j2, j3, ... (4)\nof Gödel numbers that are contained in the productive set A. Then, there exists no Turing program whose output is the sequence (4).\nProof. Let Pi be an existing Turing program that produces the sequence (4) of Gödel numbers. Because the creative system C applies the physical rule (3), C produces an output ψ(i) by applying the productive function ψ to the Gödel number i of Pi. Because the Gödel numbers j1, j2, j3, ... in (4) are contained in the productive set A and ψ is a productive function for A, ψ(i) is not contained in the output of Pi, that is, ψ(i) is different from all Gödel numbers j1, j2, j3, ... in (4). Therefore, the Turing program Pi does not produce the sequence (4) which is produced by the creative system C. Thus, our original assumption that the Turing program Pi produces the sequence (4) yields a contradiction. Hence, there exists no Turing program whose output is the sequence (4).\nTheorem 1 implies the existence of creative physical systems that cannot be modeled by any Turing program, that is, Turing machine, because creative systems can perceive the physical existence of the Turing machine and thus use this machine as a basis to produce an output that is not contained in the output of this machine."
    }, {
      "heading" : "3 Reasoning",
      "text" : "The Turing program Pi in input of the physical rule (3) in Section 2 can be interpreted as a proposed description of the sequence (4) in Section 2 which is produced by the creative system C in Theorem 1. C applies the productive function ψ in (3) to the Gödel number i of Pi, that is, to the proposed description of the sequence (4). This produces an output ψ(i) which is not contained in the output of Pi according to the proof of Theorem 1. The output of Pi is a subset of the productive set A in Theorem 1. The output ψ(i) of C and the output\n{ϕi(1), ϕi(2), ϕi(3), ...} (5)\nof Pi, where ϕi is the function computed by Pi, form a larger recursively enumerable subset\n{ψ(i), ϕi(1), ϕi(2), ϕi(3), ...} (6)\nof A which is the output of another Turing program, say Pj . Thus, the creative system C uses a Turing program Pi in its input, which can be regarded as a proposed description of its output (4), to produce an output ψ(i) that can be used to construct a Turing program Pj whose output (6) is larger than the output (5) of Pi.\nThe construction of a Turing program Pj whose output (6) is larger than the output (5) of any Pi that exists physically and computes a total function\nwhose output is subset of a productive set cannot be formalized because there is no general formal procedure for the application of the productive function ψ to the Gödel number i within Pi. But the physical rule (3), which is an implementation of the existence principle, applies ψ to the Gödel number i of any Pi that satisfies the conditions given above such that the output ψ(i) can be used to construct a Turing program Pj whose output (6) is larger than the output (5) of Pi.\nThe Gödel number i of the Turing program Pi in the physical rule (3), which is an implementation of the existence principle, refers to Pi as a whole. This holistic aspect of the physical rule (3) explains why there is no general formal procedure for the application of the productive function ψ to the Gödel number i within Pi. Productive functions such as the function ψ in the physical rule (3) can be regarded as a formal abstraction of the construction of the undecidable formula in Gödel’s [1965] incompleteness theorem. Kleene [1952, p. 426] writes: “we can recognize that [the undecidable formula] Ap(p) [in the number-theoretic formal system] is true by taking into view the structure of that system as a whole”. Thus, the recognition of the truth of the undecidable formula Ap(p) in Gödel’s theorem, which cannot be proved in the number-theoretic formal system according to Gödel’s theorem, requires a reference to the (incomplete) formal “system as a whole” which cannot be achieved within the formal system itself because the formal system cannot take “into view the structure of that system as a whole”. In particular, the Turing program Pi in the physical rule (3) is a formal system which cannot take “into view the structure of that system as a whole” because the formal system, that is, the Turing program Pi cannot use its own Gödel number i to produce the result ψ(i) of applying the productive partial function ψ for the productive set A to i, that is, the application of ψ to the Gödel number i of Pi cannot be achieved within Pi. But we can recognize the truth that ψ(i) is a member of the productive set A. An explanation for our capability to recognize that ψ(i) is a member of A and the impossibility of the Turing program Pi to apply ψ to the Gödel number i of Pi within Pi can be found in restrictions for formal systems. Kleene [1952, p. 64] writes:\nMetamathematics must study the formal system as a system of symbols, etc. which are considered wholly objectively. This means simply that those symbols, etc. are themselves the ultimate objects, and are not being used to refer to something other than themselves. The metamathematician looks at them, not through and beyond them; thus they are objects without interpretation or meaning.\nThus, a reference of a formal system to itself as a whole cannot be achieved in the formal system, for example, the use of the Gödel number i of the Turing program Pi in (3) within Pi itself. The physical existence principle describes a general reference to a formal system as a whole because the perception of the physical existence of the Turing program Pi, that is, the formal system, establishes a general reference to this formal system as a whole. For example, in the physical rule (3) the Gödel number i is such a general reference to Pi as a whole.\nLet ψ be a productive partial function for a productive set A, let Px be a physically existing Turing program that computes a total function whose output is a subset of A, and let C be a creative system that applies the physical rule (3) in Section 2. We assume that the Gödel number x of Px is not known. The creative system C can find the Gödel number x of Px by generating 1, 2, 3, ..., i, ... and comparing P1, P2, P3, ..., Pi, ... with Px. If Pi is identical with Px, then the creative system C applies physical rule (3), that is, it produces an output ψ(i) by applying ψ to the Gödel number i of Pi which is identical with the Turing program Px that exists physically. If the Turing program Px computes a total function whose output is a subset of A, then ψ(i) is not in the output of Px, that is, Pi, according to Theorem 1 in Section 2. Thus, creative systems can take “into view the structure of [the Turing program Px, that is, Pi] as a whole” when they determine the Gödel number i of a physically existing Turing program Px whose Gödel number x is not known. This implies that creative systems can produce the output ψ(i) by applying ψ to the Gödel number i of any physically existing Turing program Pi computing a total function whose output is a subset of A although there is no general formal procedure to achieve this within Pi.\nIf we assume that the child’s mind can be represented by a formal system, that is, a Turing program, at every point in time the existence principle implies that the core of Turing’s [1969] initiative in Section 1 is an informal physical reference of the child’s mind to itself as a whole at any point in time. This reference is established by the perception of the physical structures in the child’s mind which form the basis for their further development, that is, there is no formal description of the child’s development that can be given in advance but the formal description at any point in time is the basis and method of its further development. Thus, the existence principle implies that the core of the development of the child’s mind, that is, the core of intelligence, is an informal physical reference and application of the child’s mind to itself as a whole at any point in time."
    }, {
      "heading" : "4 Discussion",
      "text" : "Referring to his “Theorem 2.4, with its corollaries” Davis [1982a, pp. 121-122] writes:\n... these results really constitute an abstract form of Gödel’s famous incompleteness theorem ... they imply that an adequate development of the theory of natural numbers, within a logic L, to the point where membership in some given set Q of integers can be adequately dealt with within the logic ... is possible only if Q happens to be recursively enumerable. Hence, non-recursively enumerable sets can, at best, be dealt with in an incomplete manner.\nThis implies that the sequence (4) in Theorem 1 in Section 2, which is produced by a creative system C by means of the physical rule (3), cannot be dealt\nwith within a logic L because the sequence (4) is not recursively enumerable according to Theorem 1, that is, there is no Turing program, say Pi, whose output is (4). The output of Pi corresponds to the “given set Q of integers” in the above quotation from Davis [1982a, pp. 121-122]. In the proof of Theorem 1 the creative system C applies the productive function ψ to the Gödel number i of Pi which produces an output ψ(i) that is not contained in the output of Pi but in the productive set A. Roughly speaking, creative systems can overcome the limits of any logic that deals with subsets of productive sets because they can apply productive functions, which can be computed by Turing machines, to the recursively enumerable sets to which the logic is restricted.\nTuring’s thesis states that every function that would be naturally regarded as computable is computable under his definition, that is, by one of his machines [Kleene, 1952, pp. 376-381]. Turing [1936, p. 231] restricts his machines to a finite number of m-configurations (machine configurations) which are called “states of mind” in his thesis. Turing [1936, pp. 249-250] supposes that the “number of states of mind” is finite because some of them “will be confused” if “we admitted an infinity of states of mind” (see Kleene [1952, pp. 376-377]). Gödel [1990, p. 306] regards the restriction to a finite number of states as a “philosophical error in Turing’s work” and points out that “mental procedures” may “go beyond mechanical procedures”. Gödel [1990, p. 306] writes:\nWhat Turing disregards completely is the fact that mind, in its use, is not static, but constantly developing, ... There may exist systematic methods of actualizing this development, which could form part of the procedure. Therefore, Turing’s number of distinguishable states of mind may converge toward infinity in the course of the application of the procedure.\nThe Turing program Pi in Section 2 produces an output (5). The Turing program Pj in Section 2 produces a larger output (6). The program Pj can be constructed from the Turing program Pi and the productive function ψ by means of the physical rule (3) in Section 2. The physical rule (3), which is an implementation of the physical existence principle, can be regarded as a “systematic method” that cannot be modeled by any Turing machine according to Theorem 1. In view of the structure of its output (6) the program Pj can be constructed from the Turing program Pi and the productive function ψ, which is computed by a Turing program, say Pk, in a straightforward manner such that the number of states in Pj is greater than the sum of the number of states in Pi and Pk. This suggests that the repeated application of the physical rule (3) can produce Turing programs whose number of states grows in the course of time. Thus, Turing’s assumption that the number of states is finite or infinite is misleading because the number of states may grow in the course of time. Therefore, a concept of time that cannot be formalized is necessary to understand the development of “mind”.\nAmmon [1993] describes an automatic proof of Gödel’s incompleteness theorem by a system that is composed of heuristics. Because these heuristics are\nrather elementary they might be constructed automatically. Such computer experiments (see Ammon [1988], [1992a], and [1992b]) and our theoretical results suggest the following principle:\nDevelopment Principle. A creative system is a self-developing process which starts from any universal programming language and any input. This process cannot be reduced to a Turing machine but to the language and the input from which it starts.\nThus, the structures in a creative system that exist presently form the basis, that is, the input and the method for its further development. This cannot be achieved by Turing programs. For example, the application of the productive function ψ to the Gödel number i of a Turing program Pi in the physical rule (3) in Section 2 cannot be achieved within Pi. The development principle implies that a creative system can be represented as a finite sequence of 0s and 1s or a binary number at any point in time but it can construct and change any of its structures in the course of time.5 This has implications for the technical development of a creative system because it should start with the manual development of a rather simple domain-specific language for a user interface which can be used for its further development.\nThe proof of Theorem 1 in Section 2 derives a contradiction from the assumption that an existing Turing program Pi computes the output (4) of a creative system C. The proof uses the Gödel number i of Pi which refers to Pi as a whole. The reference of i to Pi is contained in the physical rule (1) in the proof of Theorem 1. This physical reference of the Gödel number i to Pi cannot be modeled by any Turing machine Pi according to the proof because the application of the productive function ψ to the Gödel number i cannot be achieved within Pi, that is, there is no general Turing program modeling the application of ψ to the Gödel number i.\nAlthough the physical reference of the Gödel number i to an existing Pi in the proof of Theorem 1 is not Turing-computable, the construction of ψ(i), which is not in the output of Pi, can be formally represented in another more powerful Turing program that depends on the Gödel number i of Pi. For example, such a more powerful Turing program is the Turing program that produces the extended sequence (6) in Section 3. Even by means of the physical rule (1), that is, the physical existence principle, we cannot construct a general Turing program because we could apply a productive function ψ to such a Turing program according to Theorem 1, that is, there is no such general Turing program.\nThe application of the physical existence principle, for example the physical rule (1), requires resources, in particular time. The Turing program Pi in the physical rule (1) must exist physically before it can be perceived according to the physical existence principle. The output ψ(i) of the application of ψ to i and the extended sequence (6) can exist only at a later point in time. According to\n5Referring to computer experiments Ammon [1987, Section 5.3] writes: “The experiments show that the knowledge required for mathematical research is surprisingly simple and domain specific, but subject to rapid modifications and extensions.”\nTheorem 1 the output ψ(i) and the extended sequence (6) cannot be described in advance by a general formal system, that is, a Turing program. By means of the physical existence principle, for example the physical rule (1), more and more powerful Turing programs can be constructed in the course of time. As soon as the output ψ(i) or the extended sequence (6) exist physically and have been perceived according to the physical existence principle their construction can be described formally. Therefore, an informal concept of time is a prerequisite for an understanding of the informal physical evolution of formal systems such as Turing programs.\nThe physical existence principle and the logical existence principle in Section 2 are restricted to any productive partial function ψ for a productive set A and any Turing program Pi that computes a total function whose output is a subset of A. We can generalize the physical existence principle and the logical existence principle by allowing any Turing-computable partial function ψ and any Turing program Pi that satisfies any properties, that is, properties that cannot be formalized in any single formal system.\nGeneral Physical Existence Principle. Let ψ be a Turing-computable partial function. The perception of the physical existence of any Turing program Pi that satisfies any properties can serve as a physical causation for the application of the function ψ to the Gödel number i of Pi.\nGeneral Logical Existence Principle. Let ψ be a Turing-computable partial function. A creative system can apply the function ψ to the Gödel number i of any existing Turing program Pi that satisfies any properties.\nBy means of this generalized existence principle a creative system “can recognize that [the undecidable formula] Ap(p) [in Gödel’s incompleteness theorem] is true by taking into view the structure of that [number-theoretic formal] system as a whole” (see Kleene, [1952, p. 426]), that is, it can overcome the incompleteness of the formal system. Such a formal system can be represented as a Turing program Pi satisfying some simple properties, in particular, the property that the formal system is consistent. This means that a Turing-computable partial function ψ produces Kleene’s [1952, p. 426] representation of the undecidable formula Ap(p) in Gödel’s theorem from the Gödel number i of the Turing program Pi. A formal proof of Gödel’s undecidable formula Ap(p) can be achieved in another formal system, say Si, that depends on the Gödel number i of Pi representing the (incomplete) number-theoretic formal system. This implies that a creative system can prove the truth of Gödel’s undecidable formula Ap(p) in the formal system Si because it can refer to the (incomplete) number-theoretic formal system as a whole. Such a proof depends on the prerequisite that this number-theoretic formal system is consistent (see Kleene [1952, p. 426]). Because the application of the physical existence principle requires resources, in particular time, the Turing program Pi, which represents the number-theoretic formal system, must exist physically before it can be perceived according to the physical existence principle. The output ψ(i) of the application of ψ to the Gödel number i and the proof of ψ(i), that is, the undecidable formula Ap(p)\nin the formal system Si can exist only at a later point in time. According to Gödel’s theorem the output ψ(i), that is, the undecidable formula Ap(p) cannot be proved in the number-theoretic formal system, which is represented by Pi, but it can be proved by a creative system at a later point in time in another formal system Si which can be constructed by means of the existence principle. This applies to any existing number-theoretic formal system. By a repeated application of the physical existence principle a creative system can construct more and more powerful formal systems in the course of time which cannot be described by any (existing) formal system in advance although any individual construction can be proved in a formal system Si with the benefit of hindsight. This confirms that an informal concept of time is a prerequisite for an understanding of the informal physical evolution of formal systems which can be represented by Turing programs. We discuss the application of the general existence principle to Gödel’s incompleteness theorem in detail in the following paragraphs.\nDavis [1993, p. 611] argues that Gödel’s incompleteness theorem can be proved in a formal system:\nIt [Gödel’s theorem] is, however, a quite ordinary sentence of elementary number theory and can be proved with no difficulty whatever in any formal system adequate for elementary number theory, such as for example Peano arithmetic. Note that this powerful form of Gödel’s theorem applies uniformly to any formalism whatever.\nA formal system, say S1, “adequate for elementary number theory, such as for example Peano arithmetic”, in which Gödel’s theorem is proved, is incomplete as well. Thus, a proof of Gödel’s theorem for S1 requires another formal system, say S2, which refers to S1. A proof of Gödel’s theorem for S2 requires another formal system, say S3, which refers to S2, and so on. Thus, there is no proof in any formal system showing that Gödel’s theorem applies “to any formalism whatever”. An exception is any formal system itself such as S1, S2, S3, and so on in which Gödel’s theorem is proved.\nThe first part of Gödel’s (first incompleteness) theorem states that the undecidable formula Ap(p) is unprovable in the formal system if the system is consistent (see Kleene [1952, p. 207, Theorem 28]). The following definition prepares a theorem stating that a formalization of the proposition that Ap(p) is true can be proved in another formal system that is called observing system. Roughly speaking, an observing system formalizes the view of a mathematician who proves the first part of Gödel’s theorem.\nDefinition 2. Let S be a formal system. An observing system of the observed system S is a formal system S that is a copy of S containing a formal symbol S for S. If F is a formal expression, that is, a finite sequence of formal symbols, in S, we write F for the formal expression that represents F in S, that is, it contains the formal symbol S for S. F is called the observing formula of the observed formula F in S.\nExample 1. The construction of undecidable formula Ap(p) in Gödel’s theorem is based on a predicate A(a, b) which is defined by (see Kleene [1952, p. 206, Lemma 21]):\nA(a, b): a is the Gödel number of a formula Aa(a) with a free variable a and b is the Gödel number of a proof of the formula Aa(a), where a is the formal expression representing the number a.6\nThe definition of A(a, b) implicitly refers to formulas in a formal system, say, S. We extend the definition of A(a, b) by including an explicit reference to S. This yields:\nA′(a, b): a is the Gödel number of a formula Aa(a) in S with a free variable a and b is the Gödel number of a proof of the formula Aa(a) in S, where a is the formal expression representing the number a.\nThe predicate A(a, b) can be expressed by a formula A(a, b) in S (see Kleene [1952, p. 207]). Analogously, the extended predicate A′(a, b) can be expressed by a formula A′(a, b) in the formal system S that is an observing system of S and contains a formal symbol S for S (see Definition 2). Thus, the formula A′(a, b) is the observing formula A(a, b) of the formula A(a, b) in S. Analogously to the construction of the undecidable formula Ap(p), that is,\n∀b¬A(p, b), (7)\nfrom the formula A(a, b) in S (see Kleene [1952, p. 207]), we can construct an observing formula Ap(p) from the formula A\n′(a, b) in S as follows: Let p′ be the Gödel number of the formula ∀b¬A′(a, b), that is, Ap′ (a), which contains the free variable a and no other free variable. The substitution of the formal representation p′ of the Gödel number p′ for the variable a in Ap′(a), which uses Cantor’s diagonal method, yields Ap′ (p ′), that is,\n∀b¬A′(p′, b), (8)\nwhich is the observing formula Ap(p) of Gödel’s undecidable formula Ap(p) (see Kleene [1952, p. 207]).\nThe following theorem states that a formalization of the proposition that the undecidable formula Ap(p) in an observed formal system is true can be proved in the observing formal system.\nTheorem 2. Let Ap(p) be the undecidable formula in a formal system S. The observing formula Ap(p) of Ap(p) is provable in the observing system S of S if S is consistent.\nProof. The first half of Gödel’s theorem states that the formula Ap(p) is unprovable in the formal system S if S is consistent (see Kleene [1952, p. 207, Theorem 28]). Because the proposition that Ap(p) is unprovable in S is expressed, via the\n6We write An for the formula whose Gödel number is n. For An we may write An(a) showing the free variable a for use with substitution (see Kleene [1952, p. 206, Lemma 21]).\nGödel numbering, by the formula Ap(p), Ap(p) is a formalization of the proposition that Ap(p) is unprovable in S.\n7 The proposition that S is consistent can be formalized as well (see Kleene [1952, p. 210]). Let Consys be a formalization of the proposition that S is consistent. The proof of the first half of Gödel’s theorem that the formula Ap(p) is unprovable in S if S is consistent can also be formalized in S (see Kleene [1952, pp. 210-211]). Thus, we have\n⊢S Consys =⇒ Ap(p), (9)\nthat is, there is a proof in S that the consistency of S implies the formula Ap(p) in S.8 The formula\nConsys =⇒ Ap(p) (10)\nin (9) corresponds to the observing formula\nConsys =⇒ Ap(p), (11)\nin S and the proof of (10) in S corresponds to the observing proof of (11) in S. Thus,\n⊢S Consys =⇒ Ap(p), (12)\nthat is, there is a proof in S that the consistency of S implies the observing formula Ap(p) of Ap(p). Therefore, (12) corresponds to the theorem. Thus, the proof is complete.\nThe observing formula Ap(p) in S corresponds to the formula Ap′ (p ′) in Example 1. Because S is a copy of S containing a formal symbol for S, the observed theorems of all theorems in S can be proved in S. Because the observing formula Ap(p) of the undecidable formula Ap(p), which is not provable in S according to Gödel’s theorem, is provable in S, the representation of the formal expressions in S by Gödel numbers in the formal system S yields proofs of more theorems. Roughly speaking, the observing formal system S is more powerful than the observed formal system S.\nThe observing formula Ap(p), which contains a formal symbol S for S, can be interpreted as a formalization of the proposition that Ap(p) is true from a mathematician’s point of view who refers to S, that is, the observing system S is a formalization of a mathematician’s point of view who proves Gödel’s theorem. The formal system S depends on S, that is, it can be constructed from S because it is a copy of S containing a formal symbol S for S (see Definition 2).\nReferring to his undecidable formula Ap(p) in Gödel’s incompleteness theorem Kleene [1952, p. 426] writes:\n... if we suppose the number-theoretic formal system to be consistent, we can recognize that Ap(p) is true by taking into view the\n7Kleene [1952, p. 207] writes: “.. we can interpret the formula Ap(p) from our perspective of Gödel numbering as expressing the proposition that Ap(p) is unprovable, i.e., it is a formula A which asserts its own unprovability.\n8This proof is a part of the proof of Gödel’s second incompleteness theorem which states that the consistency of S cannot be proved in S (see Kleene [1952, pp. 210-211]).\nstructure of that system as a whole, though we cannot recognize the truth of Ap(p) by use only of the principles of inference formalized in that system, i.e. not ⊢ Ap(p). 9\nAs described above, the observing formula Ap(p) can be interpreted as a formalization of the proposition that Ap(p) is true from a mathematician’s point of view who proves Gödel’s theorem, that is, the proposition that Ap(p) is true can be formalized and be proved in the observing formal system S. The formal symbol S for S in S can be regarded as a reference to S “as a whole”.\nAccording to (9) in the proof of Theorem (2) the formula\nConsys =⇒ Ap(p), (13)\nwhich is a formalization of the first part of Gödel’s theorem, can be proved in S. But in this formalization (13) the reference to S is lost, in particular, the reference of Consys to S. It cannot be added to S because this implies that Ap(p) can be proved in S which contradicts Gödel’s theorem.\nThe observing system S is a formal copy of S containing a formal symbol S for S (see Definition 2). Because S is a formalization of Gödel’s theorem and proof from a mathematician’s point of view and Ap(p) cannot be proved in S, S, which is a formalization of the first part of Gödel’s theorem and proof including a reference to S, cannot be represented in S. This implies that S is more “powerful” than S. Therefore, a mathematician can construct a more “powerful” formal system S from any consistent formal system S because Gödel’s proof applies to any consistent system S, that is, “to any formalism whatever”. This means that Theorem 2 can be regarded as a proof of the general existence principle, where the Turing program Pi in the existence principle represents the system S and ψ in the existence principle corresponds to the construction of S from Pi, that is, S. Thus, the application of ψ to the Gödel number i of Pi yields S which contains a formal symbol S for S and a formal proof of the first part of Gödel’s theorem from a mathematician’s point of view who refers to S.\nTheorem 2 implies that the logical existence principle cannot be formalized, that is, it implies the existence of an informal physical process which is described by the physical existence principle. In view of Theorem 2 this process can include a reference to any formal system S which is represented in a more “powerful” formal system S by a formal symbol S for S. Thus, Theorem 2 implies the existence of physical systems that are capable of constructing a more “powerful” formal system S from any formal system S in an informal physical process. These systems are called creative.\nThe general existence principle is a generalization of the existence principle in Section 2 which is restricted to productive functions ψ for productive sets A that are applied to the Gödel number i of a Turing program Pi whose output is a subset of A. A creative system (see Definition 1 in Section 2) can apply ψ to the Gödel number i of any Pi although this application cannot be formalized\n9The expression “not ⊢ Ap(p)” in Kleene [1952] means that the undecidable formula Ap(p) in Gödel’s theorem is not provable in the formal system.\nbecause ψ is a productive function. The reason is that a general formal reference to the Gödel number i cannot be represented within Pi. This corresponds to the impossibility to represent a reference to S within a formalization (13) of the first part of Gödel’s theorem in S. This reference can only be represented in an extended formal system S that contains a formal symbol S for S representing this reference.\nFor decades there is a discussion whether Gödels incompleteness theorem implies limitations on what computers can prove (see Lucas [1961]). Russell and Norvig [2010, p. 1023] write:\nPhilosophers such as J. R. Lucas (1961) have claimed that this theorem shows that machines are mentally inferior to humans, because machines are formal systems that are limited by the incompleteness theorem - they cannot establish the truth of their own Gödel sentence - while humans have no such limitation.\n... it is impossible to prove that humans are not subject to Gödels incompleteness theorem because any rigorous proof would require a formalization of the claimed unformalizable human talent, and hence refute itself.\nTheorem 2 states that the observing formula Ap(p) is provable in the observing formal system S. As described above, Ap(p) can be interpreted as a formalization of the proposition that the undecidable formula Ap(p) in Gödel’s theorem is true from a mathematician’s point of view who proves Gödel’s theorem. The proof of Theorem 2 can be regarded as a rigorous proof that the construction of the formal system system S from any system S cannot be formalized. S is a formalization of the proof of the first part of Gödel’s (first incompleteness) theorem from a mathematicians point of view. This formalization is used in the proof of Gödel’s second incompleteness theorem. Furthermore, S contains a formal symbol S for S which is a formalization of the reference to S of a mathematician who proves the first part of Gödel’s (first incompleteness) theorem. This reference cannot be formalized in S because, as described above, a formalization of this reference yields a contradiction to Gödel’s (first incompleteness) theorem.\nAccording to Theorem 2 the observing formula Ap(p) of undecidable formula Ap(p) in a formal system S is provable in the observing system S of S if S is consistent. We write S0 for S and S1 for S. S1, that is, S, contains another undecidable formula whose observing formula can be proved in another observing system S2, and so on. Thus, a sequence S1, S2, S3, ... of more and more “powerful” formal systems arises which contain proofs of more and more formulas. As described above Theorem 2 implies that each of the formal systems Si cannot be represented in the preceding formal system Si−1. By means of Gödel numbers the proofs of more and more formulas in S1, S2, S3, ... can be transformed into proofs in number theory. Thus, a more and more complete number theory arises.\nChurch’s [1965, pp. 90, 100-102] thesis10 states that every effectively calculable function is general recursive, that is, computable by a Turing machine (see Church, 1965, pp. 90, 100-102, and Kleene [1952, pp. 300–301, 317–323]). Since “effective calculability” is an intuitive concept, the thesis cannot be proved (see Kleene [1952, p. 317]).11\nChurch [1965, pp. 90, 102] presents his thesis as a “definition of effective calculability:\n... (1) by defining a function to be effectively calculable if there is an algorithm for the calculation of its values ...\nAccording to Theorem 1 in Section 2 the sequence (4) produced by a creative system C that applies the physical rule (3) cannot be computed by any Turing program.\nChurch [1965, pp. 90, 102] proposes a second definition of effective calculability:\n... (2) by defining a function F (of positive integers) to be effectively calculable if, for every positive integer m, there exists a positive integer n such that F (m) = n is a provable theorem.\nIf we require for every Turing program Pi in the input of the physical rule (3) in Section 2 a proof in a formal system that the Turing program Pi computes a total function whose output is a subset of a productive set A, then, for every Gödel number (positive integer) i in the input of (3), whose output is the sequence (4) in Theorem 1, there exists a natural number y such that ψ(i) = y is a provable theorem in some formal system, say Si. Such a formal system also exists for any finite set of natural numbers i in the input of (3). But, because of Theorem 1, there exists no formal system S, which can be represented by a Turing program, such that ψ(i) = y, where y is a natural number, is a provable theorem in S for all Gödel numbers i of Turing programs Pi in the input of (3). Roughly speaking, Theorem 1 implies that the formal systems Si cannot be unified into a single formal system S.\nIn a letter of June 8, 1937, to Pepis Church wrote (see Sieg [1997, pp. 175– 176]):\n... if a numerical function f is effectively calculable then for every positive integer a there must exist a positive integer b such that a valid proof can be given of the proposition f(a) = b ...\nTherefore to discover a function which was effectively calculable but not general recursive would imply discovery of an utterly new principle of logic, not only never before formulated, but never before\n10The term Church’s thesis is due to Kleene [1965, p. 274] (see Kleene [1952, pp. 300, 317]). 11In his article “Why Gödel Didn’t Have Church’s Thesis” Davis [1982b, p. 22, footnote 26] writes: “We are not concerned here with attempts to distinguish ’mechanical procedures’ (to which Church’s thesis is held to apply) from a possible broader class of ’effective procedures’ ...”\nactually used in a mathematical proof - since all extant mathematics is formalizable within the system of Principia [Mathematica], or at least within one of its known extensions. Moreover this new principle of logic must be of so strange, and presumably complicated, a kind that its metamathematical expression as a rule of inference was not general recursive ...” .\nThe proof of Theorem 1 in Section 2 uses the physical rule (3) which is an implementation of the existence principle. As far as we know the existence principle was “never before actually used in a mathematical proof”. It allows the application of productive functions to any existing Turing program. This cannot be achieved by formal systems which cannot apply productive functions to the recursively enumerable subsets of productive sets with which they deal only incompletely. The logical existence principle abstracts the physical processes from the physical existence principle such that it can be regarded as a principle of logic which provides a general method of self-reference and self-application that cannot be formalized. The output (4) of the physical rule (3) in Theorem 1, which is an implementation of the existence principle, is not general recursive, that is, it cannot be computed by a Turing program. The existence principle may be regarded as strange because it refers to the perception of the physical existence of a Turing program as a whole.\nThis work was influenced by Post [1965]. For example, Post [1965, p. 417]\nwrites:\nThe Logical Process is Essentially Creative\nThis conclusion, so in line with Bergson’s “Creative Evolution”, ... We see that a machine would never give a complete logic; for once the machine is made we could prove a theorem it does not prove.\nIn “Creative Evolution” Bergson [1911, p. 342] writes:\nTime is invention or it is nothing at all.\nThe formal system S in Theorem 2 can be regarded as a “machine” that cannot prove the undecidable formula Ap(p). Theorem 2 states that the observing formula Ap(p) of Ap(p) can be proved in the observing formal system S which is a copy of S containing a formal symbol S for S. As described above, the observing formula Ap(p) can be regarded as a formalization of the proposition that the undecidable formula Ap(p) is “true”. A mathematician is capable of referring to the “machine” S as soon as S “is made”. Theorem 2 implies that this is achieved in a physical process that cannot be formalized in a single formal system.\nTheorem 2 confirms Maturana and Varela [1980]. For example, Maturana and Varela [1980, p. 51] write:\n... he [the observer] both creates (invents) relations and generates (specifies) the world (domain of interactions) in which he lives by\ncontinuously expanding his cognitive domain through recursive descriptions and representations of his interactions. The new, then, is a necessary result of the historical organization of the observer that makes of every attained state the starting point for the specification of the next one, which thus cannot be a strict repetition of any previous state; creativity is the cultural expression of this unavoidable feature.\nAs described above, a sequence S1, S2, S3, ... of more and more “powerful” observing systems can be produced in an informal process according to the general existence principle. The observing systems S1, S2, S3, ... can be regarded as recursive descriptions of an observer because each Si is constructed from the preceding system Si−1 and a formal symbol for Si−1. Thus, every attained state, that is, Si−1, is the starting point for the specification of the next one, that is, Si, which cannot be a strict repetition of any previous state, for example, Si−1, because Theorem 2 implies that each of the formal systems Si cannot represented in the preceding formal system Si−1. Maturana and Varela [1980, p. 53] write:\nWe cannot speak about the substratum in which our cognitive behavior is given, and about that of which we cannot speak, we must remain silent, as indicated by Wittgenstein. ... It means that we recognize that we, as thinking systems, live in a domain of descriptions, ..., and that through descriptions we can indefinitely increase the complexity of our cognitive domain.\nAs described above, Theorem 2 implies that the construction of the observing system S from the formal system S cannot be represented in S, that is, there is no general formal description of the construction of the formal system S from S.12 Maturana and Varela [1992, p. 242] write:\nBy existing, we generate cognitive “blind spots” that can be cleared only through generating new blind spots in another domain. We do not see what we do not see, and what we do not see does not exist.\nThe undecidable formula Ap(p) in Gödel’s theorem can be regarded as a “blind spot” in a formal system, say S. According to Theorem 2, this “blind spot” is “cleared” by the observing formula Ap(p) in the observing system S, which is a copy of S containing a formal symbol S for S. This means that the observing formula Ap(p), which is a formalization of the proposition that Ap(p) is “true”, can be proved in the observing system S, that is, in another “domain”. As described above, a reference to S cannot be represented in S, that is, the existence of the formal system S cannot be represented in S. In this sense, S cannot represent its own existence. This reference to S is represented in S by a formal symbol S for S (see Definition 2). As described above, Theorem 2\n12Ammon [1987, Section 3.4] introduces principles on creative processes that are based on computer experiments. For example, the shunyata principle in Ammon [1987, Section 3.4.5] states that there is no explicit and general description of creative processes.\nimplies that this reference to S as a whole is achieved in a physical process that cannot be formalized in a single formal system. Maturana and Varela [1992, p. 224] describe an experiment with a gorilla that suggests the existence of a physical reference of the gorilla to himself as a whole:\nA gorilla ... when first confronted with a mirror will appear amazed and interested, but after becoming used to it, he will ignore it. ... experimenters anesthetized a gorilla. A colored dot was painted between his eyes - a place that could be seen only in the mirror. After awakening from anesthesia, he was given a mirror. What a surprise! Her put his hand to his forehead to touch the colored dot. ... this experiment suggests that the gorilla can generate a domain of self through social distinctions. In this domain there is a possibility of reflection as with a mirror or with language.\nThis experiment suggests that the gorilla has a fixed “symbol” for himself, that is, any fixed means of representation in his brain that refers to himself. This reference to himself “as a whole” is generated physically when he sees himself in the mirror. It causes him to put his hand to his forehead. Thus, its own existence generates a physical reference between a “symbol” for himself in his brain and himself “as a whole” and a physical causation of an action. This confirms Maturana and Varela’s view because it suggests that the gorilla has a preliminary stage of a possibility of reflection in the sense that he can refer to himself “as a whole”. Theorem 2 implies that such as physical reference cannot be formalized in a single formal system. The construction of the observing system S from the formal system S can be regarded as a model of reflection because S is a copy of S that contains a formal symbol S referring to S as a whole.\nTheorem 2 states the observed formula of the undecidable formula in a formal system S can be proved in another formal system S which is a copy of S and contains a formal symbol S referring to S as a whole. The claim that Gödel’s theorem applies to any formal system implies that Gödel’s theorem also applies to S, that is, it is possible to refer to S and apply Gödel’s proof to S although there is no general formal reference to S, in particular, no general formal procedure for the application of Gödel’s proof to S, that is, to any observing formal system. The possibility of a reference to S as a whole, in particular, an application of Gödel’s proof to S, that is, to any formal system, is described in the general existence principle.\nAmmon [1993, Sections 4 and 5] describes a computer proof of Gödel’s theorem for any formal number theory T , that is, T corresponds to the formal system S in this paper. This computer proof of Gödel’s theorem can be represented in another formal system, say U . The claim that Gödel’s theorem applies to any formal number theory implies that Gödel’s theorem also applies to U although there is no general formal procedure for the application of Gödel’s proof to U , that is, any formal system in which Gödel’s proof is represented. As described above, a reason is that such a system cannot refer to itself as a whole. Referring to Penrose [1990, p. 694] Russell and Norvig [1995, p. 826] write:\nPenrose does not say why he thinks the ”Gödelian insight” [that the “Gödel sentence” G(F ) of a formal system F is true] is not formalizable, and it appears that in fact it has been formalized. In his Ph.D. thesis, Natarajan Shankar (1986) used the Boyer-Moore theorem prover BMTP to derive Gödel’s theorem from a set of basic axioms, in much the same way that Gödel himself did.8\n... 8 Ammon’s SHUNYATA system (1993) even appears to have developed by itself the diagonalization technique used by Gödel and developed originally by Cantor.\nBecause there is no general formal procedure for the application of Gödel’s proof to any formal system in which Gödel’s proof is represented, a formal proof of Gödel’s theorem cannot be general.13\nAs described above, the possibility to apply any Turing-computable function to any Turing program satisfying some properties, in particular, Gödel’s proof to any formal system in which Gödel’s proof is represented, is characterized in the general existence principle.\nGödel’s theorem states that any formal system, say S, satisfying some simple properties contains an undecidable formula Ap(p), that is, neither Ap(p) nor its negation ¬Ap(p) can be proved in S (see Kleene [1952, p. 207, Theorem 28]). The “Gödelian insight” in Russell and Norvig [1995, p. 826] corresponds to Kleene [1952, p. 426]): “... we can recognize that Ap(p) is true by taking into view the structure of that [formal] system as a whole”. Ap(p), that is, ∀b¬A(p, b), is a formalization of the proposition that the formula Ap(p) is not provable in the formal system S because b is the Gödel number of a proof of the formula Aa(a) in the definition of the predicate A(a, b) (see Kleene [1952, p. 206, Lemma 21]) which is expressed by the formula A(a, b) (see Kleene [1952, p. 207]).\nThus, Ap(p) is a formalization of the “true” proposition that Ap(p) is not provable in S although Ap(p) is not provable in S to according Gödel’s theorem.\n13Ammon’s SHUNYATA program [1993] generated a proof of Gödel’s theorem in the form: There is a closed formula F in any formal number theory T such that\n• if the theory T is consistent, F is not provable in T , and\n• if the theory T is ω-consistent, ¬F is not provable in T\nwhose formalization in Ammon [1993] is:\nall T (fnt(T ) → there-is F (closed-formula(F, T ) & (consistent(T ) → not(provable(F, T ))) & (ω-consistent(T ) → not(provable(¬F, T ))))).\nIn the formalization fnt(T ) means that T is a formal number theory. Thus, the formalization of Gödel’s theorem in Ammon [1993] refers to the [incomplete] formal theory T . Because the formal theory, say U , in which Gödel’s theorem and proof in Ammon [1993] are represented, is incomplete as well, the claim that Gödel’s theorem applies to all formal number theories T implies that the theorem also applies to U . But the applicability of Gödel’s theorem to U cannot be represented in U because U cannot refer to U itself, that is, to itself as a whole. This implies that there is no general formalization of the reference to all formal theories T to which Gödel’s theorem applies.\nRoughly speaking, Ap(p) is “true” but not provable in S. The undecidable formula Ap(p) in the incomplete formal system S does not contain a reference to S. If we add a formal symbol S for S to Ap(p) we obtain the observing formula Ap(p) of Ap(p) (see Definition 2 and Example 1). Ap(p) is a formalization of the proposition that Ap(p) is not provable in S. Theorem 2 states that the observing formula Ap(p) is provable in the observing [formal] system S. All observing formulas of formulas that are provable in S are provable in the observing system S. Additionally, the observing formula Ap(p) of Ap(p) is provable in S. Therefore, the observing system S is more powerful in the sense that it can prove more theorems than the observed system S.\nThe existence principle in Section 2, which is restricted to productive functions, is a special case of the general existence principle in Section 4 which applies to any Turing-computable function.\nRoughly speaking, the general existence principle is the core of Turing’s residue which is called initiative by Turing (see Section 1)."
    }, {
      "heading" : "5 Conclusion",
      "text" : "The physical existence principle states that the perception of the physical existence of any Turing program can serve as a physical causation for the application of Turing-computable functions to this Turing program. The logical existence principle abstracts the logical aspects from the physical existence principle. It is used in the proof of a theorem stating that a physical rule, which is an implementation of the existence principle, produces a sequence that cannot be computed by any Turing program. The logical existence principle can be regarded as a new principle of logic that was never before used in a mathematical proof. The existence principle overcomes the incompleteness of formal systems and the limits of Turing machines because it describes the perception of the physical existence of Turing programs as a whole. This allows a general reference and application of formal systems to themselves as a whole which cannot be achieved within formal systems themselves. The generality of Gödel’s theorem implies its applicability to formalizations of its proof. There is no general formal procedure for this applicability because formalizations of Gödel’s proof are incomplete as well, that is, these formalizations are not general because they cannot include the applicability of Gödel’s theorem and proof to themselves. The general existence principle describes this informal aspect of Gödel’s theorem and proof. A physical system that contains an implementation of the physical existence principle is called creative system. Creative systems can prove the observing formula of Gödel’s undecidable formula in an observing formal system which contains a copy of the incomplete formal system and a formal symbol referring to the incomplete formal system. Therefore, the observing system is more powerful in the sense that it can prove more theorems than the observed system.\nAcknowledgments. The author wishes to thank Andreas Keller for helpful\ncomments on earlier versions of this paper and many people for their interest, encouragement, and support in the course of many years."
    } ],
    "references" : [ {
      "title" : "The Automatic Development of Concepts and Methods",
      "author" : [ "K. Ammon" ],
      "venue" : "Doctoral Dissertation, University of Hamburg, Hamburg",
      "citeRegEx" : "Ammon. 1987",
      "shortCiteRegEx" : null,
      "year" : 1987
    }, {
      "title" : "San Mateo",
      "author" : [ "K. Ammon. The automatic acquisition of proof methods. In National Conference on Artificial Intelligence", "St. Paul" ],
      "venue" : "Calif.,",
      "citeRegEx" : "Ammon. 1988",
      "shortCiteRegEx" : null,
      "year" : 1988
    }, {
      "title" : "In 11th International Conference on Automated Deduction",
      "author" : [ "K. Ammon. Automatic proofs in mathemetical logic", "analyis" ],
      "venue" : "Saratoga Springs, pages 4–19, Berlin,",
      "citeRegEx" : "Ammon. 1992a",
      "shortCiteRegEx" : null,
      "year" : 1992
    }, {
      "title" : "In 11th International Conference on Automated Deduction",
      "author" : [ "K. Ammon. The SHUNYATA system" ],
      "venue" : "Saratoga Springs, pages 681–685, Berlin,",
      "citeRegEx" : "Ammon. 1992b",
      "shortCiteRegEx" : null,
      "year" : 1992
    }, {
      "title" : "An automatic proof of Gödel’s incompleteness theorem",
      "author" : [ "K. Ammon" ],
      "venue" : "Artificial Intelligence, 61(2):291–306",
      "citeRegEx" : "Ammon. 1993",
      "shortCiteRegEx" : null,
      "year" : 1993
    }, {
      "title" : "Creative Evolution",
      "author" : [ "H. Bergson" ],
      "venue" : "Camelot Press, New York",
      "citeRegEx" : "Bergson. 1911",
      "shortCiteRegEx" : null,
      "year" : 1911
    }, {
      "title" : "editor",
      "author" : [ "A. Church. An unsolvable problem of elementary number theory. In M. Davis" ],
      "venue" : "The Undecidable, pages 89–107. Raven Press, New York,",
      "citeRegEx" : "Church. 1965",
      "shortCiteRegEx" : null,
      "year" : 1965
    }, {
      "title" : "Computability and Unsolvability",
      "author" : [ "M. Davis" ],
      "venue" : "Dover, New York",
      "citeRegEx" : "Davis. 1982a",
      "shortCiteRegEx" : null,
      "year" : 1982
    }, {
      "title" : "Why Gödel didn’t have Church’s thesis",
      "author" : [ "M. Davis" ],
      "venue" : "Information and Control, 54:3–24",
      "citeRegEx" : "Davis. 1982b",
      "shortCiteRegEx" : null,
      "year" : 1982
    }, {
      "title" : "How subtle is Gödel’s theorem? More on Roger Penrose",
      "author" : [ "M. Davis" ],
      "venue" : "Behavioral and Brain Sciences, 16:611–612",
      "citeRegEx" : "Davis. 1993",
      "shortCiteRegEx" : null,
      "year" : 1993
    }, {
      "title" : "editor",
      "author" : [ "K. Gödel. On formally undecidable propositions of the Principia Mathematica", "related systems I. In M. Davis" ],
      "venue" : "The Undecidable, pages 4–38. Raven Press, New York,",
      "citeRegEx" : "Gödel. 1965",
      "shortCiteRegEx" : null,
      "year" : 1965
    }, {
      "title" : "Some remarks on the undecidability results",
      "author" : [ "K. Gödel" ],
      "venue" : "S. Feferman et al., editors, Collected Works: Publications 1938-1974, volume 2. Oxford University Press, New York",
      "citeRegEx" : "Gödel. 1990",
      "shortCiteRegEx" : null,
      "year" : 1990
    }, {
      "title" : "Introduction to Metamathematics",
      "author" : [ "S.C. Kleene" ],
      "venue" : "North-Holland, Amsterdam",
      "citeRegEx" : "Kleene. 1952",
      "shortCiteRegEx" : null,
      "year" : 1952
    }, {
      "title" : "editor",
      "author" : [ "S.C. Kleene. Recursive predicates", "quantifiers. In M. Davis" ],
      "venue" : "The Undecidable, pages 255–287. Raven Press, New York,",
      "citeRegEx" : "Kleene. 1965",
      "shortCiteRegEx" : null,
      "year" : 1965
    }, {
      "title" : "Minds",
      "author" : [ "J.R. Lucas" ],
      "venue" : "machines, and Gödel. Philosophy, 36:112–137",
      "citeRegEx" : "Lucas. 1961",
      "shortCiteRegEx" : null,
      "year" : 1961
    }, {
      "title" : "Autopoiesis and Cogntion: The Realization of the Living",
      "author" : [ "H.R. Maturana", "F.J. Varela" ],
      "venue" : "Reidel, Dordrecht, Holland",
      "citeRegEx" : "Maturana and Varela. 1980",
      "shortCiteRegEx" : null,
      "year" : 1980
    }, {
      "title" : "The Tree of Knowledge",
      "author" : [ "H.R. Maturana", "F.J. Varela" ],
      "venue" : "Shambala, Boston",
      "citeRegEx" : "Maturana and Varela. 1992",
      "shortCiteRegEx" : null,
      "year" : 1992
    }, {
      "title" : "Technical report",
      "author" : [ "J. McCarthy et al. Proposal for the Dartmouth summer research project on artificial intelligence" ],
      "venue" : "Dartmouth College,",
      "citeRegEx" : "McCarthy et al.. 1955",
      "shortCiteRegEx" : null,
      "year" : 1955
    }, {
      "title" : "Author’s response: the nonalgorithmic mind",
      "author" : [ "R. Penrose" ],
      "venue" : "Behavioral and Brain Science, 13(4):692–705",
      "citeRegEx" : "Penrose. 1990",
      "shortCiteRegEx" : null,
      "year" : 1990
    }, {
      "title" : "Absolutely unsolvable problems and relatively undecidable propositions - account of an anticipation",
      "author" : [ "E. Post" ],
      "venue" : "M. Davis, editor, The Undecidable, pages 338–433. Raven Press, New York",
      "citeRegEx" : "Post. 1965",
      "shortCiteRegEx" : null,
      "year" : 1965
    }, {
      "title" : "Theory of Recursive Functions and Effective Computability",
      "author" : [ "H. Rogers" ],
      "venue" : "The MIT Press, Cambridge",
      "citeRegEx" : "Rogers. 1987",
      "shortCiteRegEx" : null,
      "year" : 1987
    }, {
      "title" : "Artifical Intelligence: A Modern Approach",
      "author" : [ "S.J. Russell", "P. Norvig" ],
      "venue" : "Prentice Hall, Englewood Cliffs, New Jersey",
      "citeRegEx" : "Russell and Norvig. 1995",
      "shortCiteRegEx" : null,
      "year" : 1995
    }, {
      "title" : "Artifical Intelligence: A Modern Approach",
      "author" : [ "S.J. Russell", "P. Norvig" ],
      "venue" : "Third Edition. Prentice Hall, Upper Saddle River, New Jersey",
      "citeRegEx" : "Russell and Norvig. 2010",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Step by recursive step: Church’s analysis of effective calculability",
      "author" : [ "W. Sieg" ],
      "venue" : "The Bulletin of Symbolic Logic, 3(2):154–180,",
      "citeRegEx" : "Sieg. 1997",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "On computable numbers",
      "author" : [ "A.M. Turing" ],
      "venue" : "with an application to the Entscheidungsproblem. In Proceedings of the London Mathematical Society, volume 42 of series 2, pages 230–265",
      "citeRegEx" : "Turing. 1936",
      "shortCiteRegEx" : null,
      "year" : 1936
    }, {
      "title" : "Michie",
      "author" : [ "D A.M. Turing. Intelligent machinery. In B. Meltzer" ],
      "venue" : "editors,Machine Intelligence 5, pages 3–23. Edinburgh University Press, 1969. National Physical Laboratory, Report,",
      "citeRegEx" : "Turing. 1969",
      "shortCiteRegEx" : null,
      "year" : 1948
    } ],
    "referenceMentions" : [ ],
    "year" : 2016,
    "abstractText" : "A fundamental question is whether Turing machines can model all reasoning processes. We introduce an existence principle stating that the perception of the physical existence of any Turing program can serve as a physical causation for the application of any Turing-computable function to this Turing program. The existence principle overcomes the limitation of the outputs of Turing machines to lists, that is, recursively enumerable sets. The principle is illustrated by productive partial functions for productive sets such as the set of the Gödel numbers of the Turing-computable total functions. The existence principle and productive functions imply the existence of physical systems whose reasoning processes cannot be modeled by Turing machines. These systems are called creative. Creative systems can prove the undecidable formula in Gödel’s theorem in another formal system which is constructed at a later point in time. A hypothesis about creative systems, which is based on computer experiments, is",
    "creator" : "LaTeX with hyperref package"
  }
}