{
  "name" : "1502.02298.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Belief Revision, Minimal Change and Relaxation: A General Framework based on Satisfaction Systems, and Applications to Description Logics",
    "authors" : [ "Marc Aiguier", "Jamal Atif", "Isabelle Bloch", "Céline Hudelot" ],
    "emails" : [ "marc.aiguier@centralesupelec.fr", "celine.hudelot@centralesupelec.fr", "jamal.atif@dauphine.fr", "isabelle.bloch@telecom-paristech.fr" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n50 2.\n02 29\n8v 2\n[ cs\nBelief revision of knowledge bases represented by a set of sentences in a given logic has been extensively studied but for specific logics, mainly propositional, and also recently Horn and description logics. Here, we propose to generalize this operation from a modeltheoretic point of view, by defining revision in an abstract model theory known under the name of satisfaction systems. In this framework, we generalize to any satisfaction systems the characterization of the well known AGM postulates given by Katsuno and Mendelzon for propositional logic in terms of minimal change among interpretations. Moreover, we study how to define revision, satisfying the AGM postulates, from relaxation notions that have been first introduced in description logics to define dissimilarity measures between concepts, and the consequence of which is to relax the set of models of the old belief until it becomes consistent with the new pieces of knowledge. We show how the proposed general framework can be instantiated in different logics such as propositional, first-order, description and Horn logics. In particular for description logics, we introduce several concrete relaxation operators tailored for the description logic ALC and its fragments EL and ELU , discuss their properties and provide some illustrative examples.\nKey words: Abstract belief revision, Relaxation, AGM theory, satisfaction systems, description logics"
    }, {
      "heading" : "1 Introduction",
      "text" : "Belief change is an important field of knowledge representation. It is defined by three change operations, expansion, contraction and revision, that make an agent’s\nPreprint submitted to Artificial Intelligence 17 January 2017\nbelief evolve with newly acquired knowledge. Belief expansion consists in adding new knowledge without checking consistency, while both contraction and revision consist in consistently removing and adding new knowledge, respectively. When knowledge bases are logical theories, i.e. a set of sentences in a given logic, these changes are governed by a set of postulates proposed for the first time by Alchourròn, Gardenfors and Makinson [1], and since known as the AGM theory. Although defined in the abstract framework of logics given by Tarski [38] (so called Tarskian logics), postulates of the AGM theory make strong assumptions on the considered logics. Indeed, in [1] the considered logics have to be closed under the standard propositional connectives in {∧,∨,¬,⇒}, to be compact (i.e. property entailment depends on a finite set of axioms), and to satisfy the deduction theorem (i.e. entailment and implication are equivalent). While compactness is a standard property of logics, to be closed under the standard propositional connectives is more questionable. Indeed, many non-classical logics such as description logics, equational logic or Horn clause logic, widely used for various modern applications in computing science, do not satisfy such a constraint. Recently, in many works, belief change has been studied in such non-classical logics [12,17,33,34]. In this direction, we can cite Ribeiro & al.’s work in [34] that studies contraction at the abstract level of Tarskian logics, and the recent work in [40] on the extension of AGM contraction to arbitrary logics. The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41]. The reason is that revision can be abstractly defined in terms of expansion and retraction following the Levi identity, but this requires the use of negation, which rules out some non-classical logics [33].\nIn [22] some AGM postulates are interpreted in terms of minimal change, in the sense that the models of the revision should be as close as possible, according to some metric, to the models of the initial knowledge set. Recently, both for contraction and revision, generalizations of the AGM theory have been proposed in the framework of Tarskian Logics considering minimality criteria on removed formulas [33,34]. The aim was to study contraction and revision for a larger family of logics containing non-classical ones such as description logics and Horn logics. However, to the best of our knowledge, the generalization of AGM theory with minimality criteria on the set of models of knowledge bases has never been proposed. The reason is that semantics is not explicit in the abstract framework of logics defined by Tarski.\nWe propose here to generalize AGM revision but in an abstract model theory, satisfaction systems [18,25], which formalizes the intuitive notion of logical system, including syntax, semantics and the satisfaction relation. Then, we propose to generalize to any satisfaction system the approach developed in [22] for propositional logic and in [29] for description logics. In this abstract framework, we will also show how to define revision operators from the relaxation notion that has been introduced in description logics to define dissimilarity measures between concepts [14,15] and\nthe consequence of which is to relax the set of models of the old belief until it becomes consistent with the new pieces of knowledge. This notion of relaxation, defined in an abstract way through a set of properties, turns out to generalize several revision operators introduced in different contexts e.g. [9,24,28,20]. This is another key contribution of our work..\nWe provide examples of relaxations in propositional logics, first order logics, and Horn logic. The case of description logics (DLs) is more detailed, since DLs are now pervasive in many knowledge-based representation systems, such as ontological reasoning, semantic web, scene understanding, cognitive robotics, to mention a few. In all these domains, the expert knowledge is not fixed, but rather a flux evolving over time, hence requiring the definition of rational revision operators. Revision is then a cornerstone in ontology engineering life-cycle where the expert knowledge is prone to change and inconsistency. Due to this growing interest in DLs, several attempts to generalize the well-known AGM theory, making it compliant with the meta-logical flavor of these logics, have been introduced recently, as mentioned above. The first efforts concentrated on the adaptation of contraction postulates, but more recently, the adaptation of revision postulates and the introduction of new minimality criteria were also addressed [33], not necessarily related to the contraction operator, throwing out the need for negation. One can find in [28] an attempt to adapt the AGM revision postulates to DL in a model-theoretic way, following the seminal work of [22] that translated the AGM postulates in propositional logic semantics.\nTo summarize, our aim is to introduce a general framework for defining easily instantiable concrete revision operators for arbitrary logics. This goes beyond discussing the validity of the AGM theory for some non-classical logics such as description logics or Horn clauses logics which have been a focus of intensive research during the last years, as mentioned above. Indeed, by formulating the AGM theory in the framework of satisfaction systems, we show that one can push the envelop of the AGM theory to make it suitable to some non-classical logics (at the price of loosing or adapting some properties) and define revision operators that can be adapted in quite a straightforward manner to different logics, including nonclassical ones. Hence, our paper participates in the recent effort for generalizing the AGM theory to non-classical logics. In particular, we introduce a meta-framework that can, by its general and abstract flavor, reduce this effort or at least make it easier. Besides, we introduce a concrete way of defining revision operators in different logics including non-classical ones, and focus on the particular case of DL, which is of great current interest in semantic web related applications.\nThe paper is organized as follows. Section 2 reviews some concepts, notations and terminology about satisfaction systems which are used in this work. In Section 3, we adapt the AGM theory in the framework of satisfaction systems, and then give an abstract model-theoretic rewriting of the AGM postulates. We then show in Section 3.2 that any revision operator satisfying such postulates accomplishes an up-\ndate with minimal change to the set of models of knowledge bases. In Section 3.3, we introduce a general framework of relaxation-based revision operators and show that our revision operators lead to faithful assignments and then also satisfy the AGM postulates. In Section 3.4, we illustrate our abstract approach by providing revision operators in different logics, including classical logics (propositional and first order logics) and non-classical ones (Horn and description logics). The case of DL is further developed in Section 4, with several examples. Finally, Section 5 is dedicated to related works."
    }, {
      "heading" : "2 Satisfaction systems",
      "text" : "Satisfaction systems [25] (“rooms\" in the terminology of [18]) generalize Tarski’s classical “semantic definition of truth” [37] and Barwise’s “Translation Axiom” [4]. For the sake of generalization, sentences are simply required to form a set. All other contingencies such as inductive definition of sentences are not considered. Similarly, models are simply seen as elements of a class, i.e. no particular structure is imposed on them.\n2.1 Definition and examples\nDefinition 1 (Satisfaction system). A satisfaction system R = (Sen,Mod, |=) consists of\n• a set Sen of sentences, • a class Mod of models, and • a satisfaction relation |=⊆ (Mod× Sen).\nLet us note that the non-logical vocabulary, so-called signature, over which sentences and models are built, is not specified in Definition 1. Actually, it is left implicit. Hence, as we will see in the examples developed in the paper, a satisfaction system always depends on a signature. There is an extension of satisfaction systems that takes into account explicitly the notion of signatures, the theory of institutions [19]. The theory of institutions is a categorical model theory which has emerged in computing science studies of software specifications and semantics. Since their introduction, institutions have become a common tool in the area of formal specification mainly to abstractly study the preservation of properties through the structuring of specifications and programs represented by signature morphisms. In this paper, as all the results that we will study about revision will always be done for logical theories over a same signature, signature morphisms and their interpretation for model classes and sentence sets are not useful. This is why we consider the framework of satisfaction\nsystems in this paper. The advantage is to allow us to abstract from all underlying categorical concepts such as category, functor and other advanced notions such as adjunction, pushout, colimit, etc.\nExample 1. The following examples of satisfaction systems are of particular importance in computer science and in the remainder of this paper.\nPropositional Logic (PL) Given a set of propositional variables Σ, we can define the satisfaction system R = (Sen,Mod, |=) where Sen is the least set of sentences finitely built over propositional variables in Σ and Boolean connectives in {¬,∨}, Mod contains all the mappings ν : Σ → {0, 1} (0 and 1 are the usual truth values), and the satisfaction relation |= is the usual propositional satisfaction. Horn Logic (HCL) A Horn clause is a sentence of the form Γ ⇒ α where Γ is a finite conjunction of propositional variables and α is a propositional variable. The satisfaction system of Horn clause logic is then defined as for PL except that sentences are restricted to be conjunctions of Horn clauses. Many-sorted First Order Logic (FOL) Signatures are triplets (S, F, P ) where S is a set of sorts, and F and P are sets of function and predicate names respectively, both with arities in S∗ × S and S+ respectively (S+ is the set of all nonempty sequences of elements in S and S∗ = S+ ∪ {ǫ} where ǫ denotes the empty sequence). In the following, to indicate that a function name f ∈ F (respectively a predicate name p ∈ P ) has for arity (s1 . . . sn, s) (respectively s1 . . . sn), we will note f : s1 × . . .× sn → s (resp. p : s1 × . . .× sn). Given a signature Σ = (S, F, P ), we can define the satisfaction system R = (Sen,Mod, |=) where: • Sen is the least set of sentences built over atoms of the form p(t1, . . . , tn) where p : s1 × . . .× sn ∈ P and ti ∈ TF (X)si for every i, 1 ≤ i ≤ n (TF (X)s is the term algebra of sort s built over F with sorted variables in a given set X) by finitely applying Boolean connectives in {¬,∨} and the quantifier ∀.\n• Mod is the class of models M defined by a family (Ms)s∈S of sets (one for every s ∈ S), each one equipped with a function fM : Ms1 × . . .×Msn → Ms for every f : s1 × . . . × sn → s ∈ F and with an n-ary relation pM ⊆ Ms1 × . . .×Msn for every p : s1 × . . .× sn ∈ P . • Finally, the satisfaction relation |= is the usual first-order satisfaction. As for PL, we can consider the logic FHCL of first-order Horn Logic whose models are those of FOL and sentences are restricted to be conjunctions of universally quantified Horn sentences (i.e. sentences of the form Γ ⇒ α where Γ is a finite conjunction of atoms and α is an atom).\nDescription logic (DL) Signatures are triplets (NC , NR, I) where NC , NR and I are nonempty pairwise disjoint sets where elements in NC , NR and I are called concept names, role names and individuals, respectively. Given a signature (NC , NR, I), we can define the satisfaction systemR = (Sen,Mod, |= ) where:\n• Sen contains 1 all the sentences of the form C ⊑ D, x : C and (x, y) : r where x, y ∈ I , r ∈ NR and C is a concept inductively defined from NC ∪ {⊤} and binary and unary operators in {_ ⊓ _, _ ⊔ _} and in {_c, ∀r._, ∃r._}, respectively. • Mod is the class of models I defined by a set ∆I equipped for every concept name A ∈ NC with a set AI ⊆ ∆I , for every relation name r ∈ NR with a binary relation rI ⊆ ∆I × ∆I , and for every individual x ∈ I with a value xI ∈ ∆I . • The satisfaction relation |= is then defined as: · I |= C ⊑ D iff CI ⊆ DI , · I |= x : C iff xI ∈ CI , · I |= (x, y) : r iff (xI , yI) ∈ rI ,\nwhere CI is the evaluation of C in I inductively defined on the structure of C as follows:\n· if C = A with A ∈ NC , then CI = AI; · if C = ⊤ then CI = ∆I; · if C = C ′ ⊔ D′ (resp. C = C ′ ⊓ D′), then CI = C ′I ∪ D′I (resp. CI = C ′I ∩D′I); · if C = C ′c, then CI = ∆I \\ C ′I; · if C = ∀r.C ′, then CI = {x ∈ ∆I | ∀y ∈ ∆I , (x, y) ∈ rI implies y ∈ C ′I}; · if C = ∃r.C ′, then CI = {x ∈ ∆I | ∃y ∈ ∆I , (x, y) ∈ rI and y ∈ C ′I}.\n2.2 Knowledge base and theories\nLet us now consider a fixed but arbitrary satisfaction system R = (Sen,Mod, |=).\nNotation 1. Let T ⊆ Sen be a set of sentences.\n• Mod(T ) is the sub-class of Mod whose elements are models of T , i.e. for every M ∈ Mod(T ) and every ϕ ∈ T , M |= ϕ. When T is restricted to a formula ϕ (i.e. T = {ϕ}), we will denote Mod(ϕ), the class of model of {ϕ}, rather than Mod({ϕ}). • Cn(T ) = {ϕ ∈ Sen | ∀M ∈ Mod(T ), M |= ϕ} is the set of so-called semantic consequences of T . 2 • Let M ⊆ Mod. Let us note M∗ = {ϕ ∈ Sen | ∀M ∈ M,M |= ϕ}. Therefore, we have for every T ⊆ Sen, Cn(T ) = Mod(T )∗. When M is restricted to one\n1 The description logic defined here is better known under the acronym ALC. 2 Usually, in the framework of satisfaction systems and institutions, the set of semantic consequences of a theory T is noted T •. Here, we prefer the notation Cn(T ) because it will allow us to make a connection with the abstraction of logics as defined by Tarski [38] and widely used in works dealing with belief change such as revision, expansion or contraction.\nmodel M, M∗ will be equivalently noted M∗. • Let us note Triv = {M ∈ Mod | M∗ = Sen}.\nLet us note that for every T ⊆ Sen, Triv ⊆ Mod(T ).\nFrom the above notations, we obviously have:\nCn(T ) = Cn(T ′) ⇔ Mod(T ) = Mod(T ′). (1)\nThe two functions Mod(_) and _∗ form what is known as a Galois connection in that they satisfy the following properties: for all T, T ′ ⊆ Sen and M,M′ ⊆ Mod, we have (see [13])\n(1) T ⊆ T ′ =⇒ Mod(T ′) ⊆ Mod(T ) (2) M ⊆ M′ =⇒ M′∗ ⊆ M∗ (3) T ⊆ Mod(T )∗ (4) M ⊆ Mod(M∗)\nDefinition 2 (Knowledge base and theory). A knowledge base T is a set of sentences (i.e. T ⊆ Sen). A knowledge base T is said to be a theory if and only if T = Cn(T ). A theory T is finitely representable if there exists a finite set T ′ ⊆ Sen such that T = Cn(T ′).\nProposition 1. For every satisfaction system R, we have:\nInclusion ∀T ⊆ Sen, T ⊆ Cn(T ); Iteration ∀T ⊆ Sen, Cn(T ) = Cn(Cn(T )); Monotonicity ∀T, T ′ ⊆ Sen, T ⊆ T ′ =⇒ Cn(T ) ⊆ Cn(T ′).\nProof. Inclusion and iteration are obvious properties of the mapping Cn by definition (inclusion is Property 3 of the Galois Connection above). Suppose T ⊆ T ′. By the first property of the Galois connection above, we have that Mod(T ′) ⊆ Mod(T ) and Mod(T )∗ ⊆ Mod(T ′)∗ from Property 2, hence Cn(T ) ⊆ Cn(T ′).\nHence, satisfaction systems are Tarskian according to the definition of logics given by Tarski under which a logic is a pair (L, Cn) where L is a set of expressions (formulas) and Cn : P(L) → P(L) is a mapping that satisfies the inclusion, iteration and monotonicity properties [38]. Indeed, from any satisfaction system R we can define the following Tarskian logic (L, Cn) where L = Sen and Cn is the mapping that associates to every T ⊆ Sen, the set Cn(T ) of semantic consequences of T .\nClassically, the consistency of a theory T is defined as Mod(T ) 6= ∅. The problem of such a definition of consistency is that its significance depends on the actual\nlogic. Hence, this consistency is significant for FOL, while in FHCL it is a trivial property since each set of sentences is consistent because Mod(T ) always contains the trivial model. Here, for the consistency notion be more appropriate with our purpose to define revision for the largest family of logics, we propose a more general definition of consistency, the meaning of which is that there is at least a sentence which is not a semantic consequence.\nDefinition 3 (Consistency). T ⊆ Sen is consistent if Cn(T ) 6= Sen.\nProposition 2. For every T ⊆ Sen, T is consistent if and only if Mod(T )\\Triv 6= ∅.\nProof. Let us prove that Cn(T ) = Sen iff Mod(T )\\Triv = ∅. Let us first assume that Mod(T ) \\ Triv = ∅. Therefore, by definition of Cn(T ), this means that the only models that satisfy T are M such that M∗ = Sen (if they exist). Hence, we have Cn(T ) = Sen. Conversely, let us assume that Cn(T ) = Sen. This means that every model M such that M∗ 6= Sen does not belong to Mod(T ), and Mod(T ) \\ Triv = ∅.\nCorollary 1. For every T ⊆ Sen, T is inconsistent is equivalent to Mod(T ) = Triv.\n3 AGM postulates for revision in satisfaction systems\n3.1 AGM postulates\nAGM postulates for knowledge base revision in satisfaction systems are easily adaptable. We build upon the model-theoretic characterization introduced by Katsuno and Mendelzon (KM) [22] for propositional logic. Note, however, that in propositional logic, a belief base can be represented by a formula, and then KM postulates exploit this property. This is no more the case in our context, but we argue that the postulates are still appropriate. Given two knowledge bases T, T ′ ⊆ Sen, T ◦ T ′ denotes the revision of T by T ′, that is, T ◦ T ′ is obtained by adding consistently new knowledge T ′ to the old knowledge base T . Note that T ◦ T ′ cannot be defined as T ∪ T ′ because nothing ensures that T ∪ T ′ is consistent. The revision operator has then to change minimally T so that T ◦ T ′ is consistent. This is what the AGM postulates ensure.\n(G1) If T ′ is consistent, then so is T ◦ T ′. (G2) Mod(T ◦ T ′) ⊆ Mod(T ′). (G3) if T ∪ T ′ is consistent, then T ◦ T ′ = T ∪ T ′. (G4) if Cn(T ′1) = Cn(T ′ 2), then Mod(T ◦ T ′ 1) = Mod(T ◦ T ′ 2). (G5) Mod((T ◦ T ′) ∪ T ′′) ⊆ Mod(T ◦ (T ′ ∪ T ′′)).\n(G6) if (T ◦T ′)∪T ′′ is consistent, then Mod(T ◦(T ′∪T ′′)) ⊆ Mod((T ◦T ′)∪T ′′).\nIn the literature such as in [22,29], the following stronger version of Postulate (G4) can be found:\n(G’4) if Cn(T1) = Cn(T ′1) and Cn(T2) = Cn(T ′ 2), then\nMod(T1 ◦ T2) = Mod(T ′ 1 ◦ T ′ 2)\nRemark 1. This stronger version of Postulate (G4) states a complete independence of the syntactical forms of both the original knowledge base and the newly acquired knowledge. The problem with Postulate (G’4) is that it is almost never satisfied when we want to preserve the structure of knowledge bases and then apply revision operators over the formulas that compose knowledge bases. Indeed, let us consider in the logic PL the following knowledge bases T1 = {p, q} and T2 = {q ⇒ p, q} over the signature {p, q}. Obviously, we have that Mod(T1) = Mod(T2) = {ν : p 7→ 1, q 7→ 1}. Let us consider the knowledge base T ′ = {¬q}. We have now that T1 ∪ T\n′ (and then T2 ∪ T ′) is inconsistent. A way to retrieve the consistency is to replace in T1 and T2 the atomic formula q by ¬q. Hence, T1 ◦ T ′ = {p,¬q} and T2◦T\n′ = {q ⇒ p,¬q}. Then Mod(T1◦T ′) = {ν : p 7→ 1, q 7→ 0}, Mod(T2◦T ′) = {ν : p 7→ 1, q 7→ 0; ν ′ : p 7→ 0, q 7→ 0}, and Mod(T1 ◦ T ′) 6= Mod(T2 ◦ T ′). In [22], the authors bypass the problem by representing any knowledge base K (which is a theory in [22]) by a propositional formula ψ such that K = Cn(ψ). Hence, they apply their revision operator on ψ and not on K, and so they lose the structure of the knowledge base K.\nAnother remarkable point to note is that now Postulate (G4) in this weaker form can be derived from the other postulates.\nProposition 3. Postulates (G1)-(G3), (G5) and (G6) imply Postulate (G4).\nProof. Let us suppose that Cn(T ′1) = Cn(T ′ 2). Here, three cases have to be considered:\n(1) One of T ′1 and T ′ 2 is inconsistent (say T ′ 1 without loss of generality). Since\nCn(T ′1) = Cn(T ′ 2) by hypothesis, T ′ 2 is also inconsistent. By Postulate (G2), we then have that, for i = 1, 2, Mod(T ◦ T ′i ) ⊆ Mod(Ti), and Mod(Ti) = Triv (Corollary 1). Hence Mod(T◦T ′i ) ⊆ Triv, and Mod(T◦T ′ 1) = Mod(T◦\nT ′2) = Triv. (2) Both T ∪T ′1 and T ∪T ′ 1 are consistent. Since Cn(T ′ 1) = Cn(T ′ 2), we know that\nMod(T ′1) = Mod(T ′ 2) (Equation 1), and then Mod(T ∪ T ′ 1) = Mod(T ∪ T ′ 2). Therefore, by Postulate (G3), we have that Mod(T ◦ T ′1) = Mod(T ◦ T ′ 2).\n(3) T ′1 and T ′ 2 are consistent but T ∪ T ′ 1 or T ∪ T ′ 2 is not (say T ∪ T ′ 1). From\nCn(T ′1) = Cn(T ′ 2), we derive that T ∪ T ′ 2 is also inconsistent. By Postulate\n(G1), both T ◦ T ′1 and T ◦ T ′ 2 are consistent. Let M ∈ Mod(T ◦ T ′ 1). If M ∈ Triv, then obviously M ∈ Mod(T ◦ T ′2). Therefore, let us suppose that M 6∈ Triv. By Postulate (G2), M ∈ Mod(T ′1), and then M ∈ Mod(T ′ 2). Let M′ ∈ Mod(T ◦ T ′2) \\ Triv. Such a model exists as T ◦ T ′ 2 is consistent. By Postulate (G2) and the hypothesis that Cn(T ′1) = Cn(T ′ 2), {M,M ′}∗ contains both T ′1 and T ′ 2. Obviously, we have that (T ◦ T ′ 1) ∪ {M,M\n′}∗ and (T ◦ T ′2) ∪ {M,M\n′}∗ are consistent. Therefore, By Postulates (G5) and (G6), we have that Mod((T ◦ T ′1) ∪ {M,M ′}∗) = Mod((T ◦ (T ′1 ∪ {M,M ′}∗) = Mod(T ◦ {M,M′}∗) and Mod((T ◦ T ′2) ∪ {M,M ′}∗) = Mod((T ◦ (T ′2 ∪ {M,M′}∗) = Mod(T ◦{M,M′}∗). We can then derive that Mod((T ◦T ′1)∪ {M,M′}∗) = Mod((T ◦T ′2)∪{M,M\n′}∗), and conclude that M ∈ Mod(T ◦ T ′2). Similarly, by reversing the roles of T ′ 1 and T ′ 2, if M ∈ Mod(T ◦ T ′ 2), we can conclude that M ∈ Mod(T ◦ T ′1).\nIntuitively, any revision operator ◦ satisfying the six postulates above induces minimal change, that is the models of T ◦ T ′ are the models of T that are the closest to models of T ′, according to some distance for measuring how close are models. This is what will be shown in the next section by establishing a correspondence between AGM postulates and binary relations over models with minimality conditions.\n3.2 Faithful assignment and AGM postulates\nLet M ⊆ Mod. Let be a binary relation over M. We define ≺ as M ≺ M′ if and only if M M′ and M′ 6 M. We define Min(M, ) = {M ∈ M | ∀M′ ∈ M,M′ 6≺M}.\nDefinition 4 (Faithful assignment). An assignment is a mapping that assigns to each knowledge base T a binary relation T over Mod. We say that this assignment is faithful (FA) if the following two conditions are satisfied:\n(1) if M,M′ ∈ Mod(T ), M6≺TM ′. (2) for every M ∈ Mod(T ) and every M′ ∈ Mod \\Mod(T ), M ≺T M′.\nA binary relation T assigned to a knowledge base T by a faithful assignment will be also said faithful.\nRemark 2. The definition of FA differs from the one originally given in [22] on two points:\n(1) In [22], a third condition is stated:\n∀T, T ′ ⊆ Sen,Mod(T ) = Mod(T ′) ⇒ T= T ′ .\nAs for (G’4), this condition expresses a syntactical independence. (2) It is no longer required for T to be a pre-order. As shown below, the only\nimportant feature to have to make a correspondence between a FA and the fact that ◦ satisfies Postulates (G1)-(G6) is that there is a minimal model for T in Mod(T ′) as expressed by Theorem 1.\nTheorem 1. Let ◦ be a revision operator. ◦ satisfies AGM Postulates if and only if there exists a FA that maps each knowledge base T ⊆ Sen to a binary relation T such that for every knowledge base T ′ ⊆ Sen:\n• Mod(T ◦ T ′) \\ Triv = Min(Mod(T ′) \\ Triv, T ); • if T ′ is consistent, then Min(Mod(T ′) \\ Triv, T ) 6= ∅; • for every T ′′ ⊆ Sen, if (T ◦T ′)∪T ′′ is consistent, then Min(Mod(T ′)\\Triv, T\n) ∩Mod(T ′′) = Min(Mod(T ′ ∪ T ′′) \\ Triv, T ).\nNote that if T ′ is inconsistent, then so is T◦T ′, and we can set arbitrarily T◦T ′ = T ′, which corresponds to a cautious revision. The case where T is inconsistent is not considered in this paper, since in that case other operators could be more relevant than revision, in particular debugging methods (see e.g. [35] for debugging of terminologies, or [31] for base revision for ontology debugging, both in description logics.\nProof. (1) Let us suppose that ◦ satisfies AGM Postulates. For every knowledge base T , let us define the binary relation T⊆ Mod×Mod by: for all M,M′ ∈ Mod,\nM T M ′ iff\n\n \n \neither M ∈ Mod(T )\nor M ∈ Mod(T ◦ {M,M′}∗) and M′ 6∈Triv Let us first show that T satisfies the two conditions of FA.\n• The first condition easily follows from the definition of T . • To prove the second one, let us assume that M ∈ Mod(T ) and M′ 6∈ Mod(T ). Since M ∈ Mod(T ), we have M T M′. Here two cases have to be considered: (a) M ∈ Triv. In this case, we directly have by definition that M′ 6 T M. (b) M 6∈ Triv. Then T ∪ {M,M′}∗ is consistent since M ∈ Mod(T ) \\\nTriv and M ∈ Mod(M∗) ⊆ Mod({M,M′}∗). Then by Postulate (G3), we have that T ◦ {M,M′}∗ = T ∪ {M,M′}∗. Therefore, we have that M′ 6∈Mod(T ◦ {M,M′}∗), and M′ 6 T M.\nHence M ≺T M′ in both cases. Let us now prove the three supplementary conditions.\n• First, let us show that Mod(T ◦ T ′) = Min(Mod(T ′) \\ Triv, T ). If T ′\nis inconsistent, then by Proposition 2 Mod(T ′) \\ Triv = ∅, and by (G2) Mod(T ◦ T ′) ⊆ Mod(T ′) ⊆ Triv, hence Mod(T ◦ T ′) \\ Triv = ∅ = Min(Mod(T ′) \\ Triv, T ). Let us assume now that T ′ is consistent.\n· Let us first show that Mod(T◦T ′)\\Triv ⊆ Min(Mod(T ′)\\Triv, T ). Let M ∈ Mod(T◦T ′)\\Triv. Let us assume thatM 6∈ Min(Mod(T ′)\\ Triv, T ). By (G2), M ∈ Mod(T ′) \\ Triv. By hypothesis, there exists M′ ∈ Mod(T ′)\\Triv such that M′ ≺T M. Here, two cases have to be considered:\n(a) M′ ∈ Mod(T ). As M′ ∈ Mod(T ′) \\ Triv, then T ∪ T ′ is consistent, and then by (G3), T ◦ T ′ = T ∪ T ′. Thus, M ∈ Mod(T ), and then M T M′, which is a contradiction. (b) M′ 6∈ Mod(T ). By definition of T , this means that M′ ∈ Mod(T ◦{M,M′}∗). As M,M′ ∈ Mod(T ′), by Postulate (G2), (T ◦ T ′) ∪ {M,M′}∗ is consistent, and then by Postulates (G5) and (G6), we have that Mod(T ◦ {M,M′}∗) = Mod((T ◦ T ′)∪ {M,M′}∗). By the hypothesis that M′ ≺T M, we can deduce that M 6∈ Mod(T ◦ {M,M′}∗), whence by Postulate (G6) we have that M 6∈ Mod(T ◦ T ′) \\ Triv, which is a contradiction. Finally we can conclude that M ∈ Min(Mod(T ′) \\ Triv, T ), and then Mod(T ◦ T ′) \\ Triv ⊆ Min(Mod(T ′) \\ Triv, T ).\n· Let us now show that Min(Mod(T ′) \\ Triv, T ) ⊆ Mod(T ◦ T ′) \\ Triv. Let M ∈ Min(Mod(T ′) \\ Triv, T ). Let us assume that M 6∈ Mod(T ◦ T ′) \\ Triv. As T ′ is consistent, by Postulates (G1) and (G2), there exists M′ ∈ Mod(T ◦ T ′) such that M′∗ 6= Sen, and M′ ∈ Mod(T ′). Since T ′ ⊆ {M,M′}∗, we also have thatMod(T ′∪{M,M′}∗) = Mod({M,M′}∗). By Postulates (G5) and (G6), we can write Mod(T◦ T ′) ∩ Mod({M,M′}∗) = Mod(T ◦ {M,M′}∗), since (T ◦ T ′) ∪ {M,M′}∗ is consistent. Hence, M 6∈ Mod(T ◦{M,M′}∗), and then M′ ≺T M, which is a contradiction. We can conclude that M ∈ Mod(T ◦T ′)\\Triv, and then Min(Mod(T ′)\\Triv, T ) ⊆ Mod(T ◦ T ′) \\ Triv.\n• Secondly, let us show that Min(Mod(T ′)\\Triv, T ) 6= ∅ if T ′ is consistent. By Postulate (G1), we have that T ◦T ′ is consistent, and then Mod(T ◦T ′)\\ Triv 6= ∅. We can directly conclude by the previous point thatMin(Mod(T ′)\\ Triv, T ) 6= ∅. • Finally, let us show that for every T ′, T ′′ ⊆ Sen, Min(Mod(T ′) \\Triv, T )∩Mod(T ′′) = Min(Mod(T ′∪T ′′)\\Triv, T ) if (T ◦T ′)∪T ′′ is consistent. By (G5) and (G6), we have that Mod(T ◦ (T ′∪T ′′)) = Mod((T ◦T ′)∪T ′′). Therefore, by the first point, we can directly conclude that Min(Mod(T ′) \\ Triv, T ) ∩Mod(T\n′′) = Min(Mod(T ′ ∪ T ′′) \\ Triv, T ). (2) Let us now suppose that for a revision operation ◦ there exists a FA which\nmaps any knowledge base T ⊆ Sen to a binary relation T⊆ Mod × Mod satisfying the three conditions of Theorem 1. Let us prove that ◦ verifies the AGM Postulates. (G1) This postulate directly results from the fact thatMin(Mod(T ′)\\Triv, T\n) 6= ∅ when T ′ is consistent, hence Mod(T ◦ T ′) \\ Triv 6= ∅. (G2) Let M ∈ Mod(T ◦ T ′). If M ∈ Triv, then obviously M ∈ Mod(T ′).\nNow, if M /∈ Triv, then by definition, M ∈ Min(Mod(T ′) \\ Triv, T ).\nThis means that M ∈ Mod(T ′). (G3) Suppose that T ∪ T ′ is consistent (hence Mod(T ∪ T ′) \\ Triv 6= ∅).\n• Let us first prove that Mod(T ◦ T ′) ⊆ Mod(T ∪ T ′). Let M ∈ Mod(T ◦ T ′). Here two cases have to be considered:\n(a) M ∈ Triv. In this case, we obviously have that M ∈ Mod(T ∪ T ′). (b) M 6∈ Triv. By definition, M ∈ Min(Mod(T ′) \\ Triv, T ). Hence, we have that M ∈ Mod(T ′). Let us suppose now that M6∈Mod(T ). As T is consistent, Mod(T ) \\Triv 6= ∅ by Proposition 2. Therefore, there exists M′ ∈ Mod(T ) \\ Triv such that M′ ≺T M (from M /∈ Mod(T ) and the second property of FA), which is a contradiction. Hence M ∈ Mod(T ) and M ∈ Mod(T ∪ T ′). • Let us now prove that Mod(T ∪ T ′) ⊆ Mod(T ◦ T ′). Let M ∈ Mod(T ∪ T ′) such that M6∈Mod(T ◦ T ′). Therefore, M ∈ Mod(T ). By hypothesis, there exists M′ ∈ Mod(T ′) \\ Triv such that M′ ≺T M (since M /∈ Min(Mod(T ′) \\ Triv, T )), and then M′ 6∈Mod(T ) by the first condition of FA. However, by the second condition of FA, we have that M ≺T M′, which is a contradiction.\nFinally, we can conclude that Mod(T ◦ T ′) = Mod(T ∪ T ′). (G5) Let M ∈ Mod(T◦T ′)∩Mod(T ′′). Let us assume that M6∈Min(Mod(T ′∪\nT ′′)\\Triv, T ). This means that M ∈ Triv or there existsM′ ∈ Mod(T ′∪ T ′′) such that M′∗ 6= Sen and M′ ≺T M. In the first case, we obviously have that M ∈ Mod(T ◦ (T ′ ∪ T ′′)). In the second case, we then have that M′ ∈ Mod(T ′), and then M′ 6≺TM since M ∈ Min(Mod(T ′)\\Triv, T ), which is a contradiction. (G6) Let us suppose that (T ◦T ′)∪T ′′ is consistent. Let M ∈ Mod(T ◦(T ′∪ T ′′)). By hypothesis, either M ∈ Triv and in this case, obviously we have that M ∈ Mod((T ◦ T ′) ∪ T ′′), or M ∈ Min(Mod(T ′ ∪ T ′′) \\ Triv, T ) as Mod(T ◦ (T ′ ∪ T ′′))\\Triv = Min(Mod(T ′ ∪ T ′′) \\ Triv, T ). As (T ◦T ′)∪T ′′ is consistent, we have that Min(Mod(T ′∪T ′′)\\Triv, T ) = Min(Mod(T ′)\\Triv, T )∩Mod(T ′′) and then M ∈ Mod((T ◦T ′)∪T ′′).\nGiven a revision operator ◦ satisfying the AGM postulates, any FA satisfying the supplementary conditions of Theorem 1 will be called FA+. To a revision operator ◦ satisfying the AGM postulates, we can associate many FA+. An example of such a FA+ is the mapping f that associates to every T ⊆ Sen the binary relation T defined as follows:\nGiven T ′ ⊆ Sen, let us start by defining T ′ T ⊆ Mod(T ′)×Mod(T ′) as:\nM T ′ T M ′ ⇐⇒ M ∈ Mod(T ◦ T ′) and M′ 6∈Mod(T ◦ T ′).\nLet us then set f(T ) = T= ⋃ T ′ T ′ T (i.e. M T M ′ ⇔ ∃T ′,M T ′ T M ′).\nTheorem 2. If ◦ satisfies the AGM postulates, then the mapping f defined above is a FA+.\nProof. First, let us show that f is a FA.\n• Let M,M′ ∈ Mod(T ). Let us suppose that M ≺T M′. This means that there exists T ′ ⊆ Sen such that M,M′ ∈ Mod(T ′), M ∈ Mod(T ◦ T ′) and M′ 6∈ Mod(T ◦T ′). Hence we have that T∪T ′ is consistent, and then by Postulate (G3), T ◦T ′ = T ∪T ′. We then have that M′ ∈ Mod(T ◦T ′) which is a contradiction. • Let M ∈ Mod(T ) and let M′ ∈ Mod \\ Mod(T ). We have that M ∅T M ′,\nand then M T M′ by definition of T . Now, let us suppose that M′ T M. This means that there exists T ′ ⊆ Sen such that M,M′ ∈ Mod(T ′), M′ ∈ Mod(T ◦ T ′) and M 6∈ Mod(T ◦ T ′). But, as M ∈ Mod(T ), we have that T ∪ T ′ is consistent, and then by Postulate (G3), T ◦ T ′ = T ∪ T ′. Hence, we have that M ∈ Mod(T ◦ T ′) which is a contradiction.\nLet us show now the supplementary conditions of Theorem 1.\n• First, let us show that Mod(T ◦ T ′) \\ Triv = Min(Mod(T ′) \\ Triv, T ). The case where T ′ is inconsistent follows the same proof as in Theorem 1. Let us suppose that T ′ is consistent. Let M ∈ Mod(T ◦ T ′) \\ Triv. Let us suppose that M 6∈ Min(Mod(T ′) \\ Triv, T ). This means that there exists M′ ∈ Mod(T ′) \\ Triv such that M′ ≺T M. Therefore, there exists T ′′ ⊆ Sen such that M,M′ ∈ Mod(T ′′), M′ ∈ Mod(T ◦ T ′′) and M 6∈ Mod(T ◦ T ′′). Hence, both (T ◦T ′)∪T ′′ and (T ◦T ′′)∪T ′ are consistent, and then by Postulates (G5) and (G6), Mod((T ◦T ′)∪T ′′) = Mod((T ◦T ′′)∪T ′) = Mod(T ◦(T ′∪T ′′)). We can then derive that M ∈ Mod(T ◦ T ′′) which is a contradiction. Let M ∈ Min(Mod(T ′) \\ Triv, T ). Let us suppose that M 6∈ Mod(T ◦ T ′) \\ Triv. As T ′ is consistent, by Postulates (G1) and (G2), there exists M′ ∈ Mod(T ◦ T ′) \\ Triv. By definition of T ′\nT , we have that M ′ T\n′\nT M, and then M′ T M which is a contradiction.\n• The proof of the two other conditions corresponds to the one given in Theorem 1.\nActually, the set of FA+ associated with a revision operator satisfying the AGM postulates has a lattice structure. Let f1, f2 be two FA. Let us denote f1 ⊔ f2 (resp. f1 ⊓ f2) the mapping that assigns to each knowledge base T ⊆ Sen the binary relation T= 1T ∪ 2 T (resp. T= 1 T ∩ 2 T ) where fi(T ) = i T for i = 1, 2.\nProposition 4. If f1 and f2 are FA+ for a same revision operator ◦, then so are f1 ⊔ f2 and f1 ⊓ f2.\nProof. It is sufficient to show that 1T ∪ 2 T and 1 T ∩ 2 T satisfy Conditions (1) and (2) of Definition 4 plus all the conditions of Theorem 1. Let us first show that they are FA. Let T ⊆ Sen. Let M,M′ ∈ Mod(T ). By definition of FA, then we have either M6 iTM ′ and M′ 6 iTM or M i T M\n′ and M′ iT M for i = 1, 2. We then have four cases to consider, but for f1 ⊓ f2(T ) = T (resp. f1 ⊔ f2(T ) = T ), we always end up at either M6 TM′ and M′ 6 TM or M T M′ and M′ T M. Likewise, for every M ∈ Mod(T ) and every M′ ∈ Mod \\Mod(T ), we have that M ≺iT M\n′ for i = 1, 2. Therefore, it is obvious to conclude that M ≺T M′. Now, by the first supplementary condition for 1T and 2 T in Theorem 1, we have for every T ′ ⊆ Sen that Min(Mod(T ′)\\Triv, 1T ) = Min(Mod(T ′)\\Triv, 2T ) = Mod(T ◦T ′) \\Triv. Hence, we can write that Min(Mod(T ′) \\Triv, 1T ∪ 2 T ) = Min(Mod(T ′) \\ Triv, 1T ∩ 2 T ) = Min(Mod(T\n′) \\ Triv, iT ) for i = 1, 2. The three supplementary conditions are then straightforward, and this allows us to directly conclude that f1 ⊔ f2 and f1 ⊓ f2 are FA+.\nGiven a revision operator ◦, let us denote (FA+(◦),≤) the poset of FA+ associated with ◦ where ≤ is the partial order defined by:\nf≤g ⇐⇒ ∀T ⊆ Sen, f(T ) ⊆ g(T )\n(the fact that this relation actually defines a partial order is straightforward). It is easy to show that given f, g ∈ FA+(◦), f ⊔ g (respectively f ⊓ g) is the least upper bound (respectively greatest lower bound) of {f, g}. Hence, (FA+(◦),≤) is a lattice. This lattice is further complete. Indeed, given a subset S ⊆ FA+(◦), its least upper bound is the mapping ⊔S : T 7→ ⋃\nf∈S f(T ), and its greatest lower bound is the mapping ⊓S : T 7→ ⋂\nf∈S f(T ). By extending the proof of Proposition 4, it is easy to show that ⊔S and ⊓S are FA+.\n3.3 Relaxation and AGM postulates\nRelaxations have been introduced in [14,15] in the framework of description logics with the aim of defining dissimilarity between concepts. Here, we propose to generalize this notion in the framework of satisfaction systems.\nDefinition 5 (Relaxation). A relaxation is a mapping ρ : Sen → Sen satisfying:\nExtensivity ∀ϕ ∈ Sen,Mod(ϕ) ⊆ Mod(ρ(ϕ)). Exhaustivity ∃k ∈ N,Mod(ρk(ϕ)) = Mod, where ρ0 is the identity mapping, and\nfor all k > 0, ρk(ϕ) = ρ(ρk−1(ϕ)).\nLet us observe that relaxations exist if and only if the underlying satisfaction system (Sen,Mod, |=) has tautologies (i.e. formulas ϕ ∈ Sen such that Mod(ϕ) = Mod). Indeed, when the satisfaction system has tautologies, we can define the trivial relaxation ρ : ϕ 7→ ψ where ψ is any tautology. Conversely, all relaxations imply that the underlying satisfaction system has tautologies to satisfy the exhaustivity condition.\nThe interest of relaxations is that they give rise to revision operators which have demonstrated their usefulness in practice (see Sections 3.4 and 4).\nNotation 2. Let T ⊆ Sen be a knowledge base. Let K = {kϕ ∈ N | ϕ ∈ T}, and K′ = {k′ϕ ∈ N | ϕ ∈ T}. Let us note:\n• ρK(T ) = {ρkϕ(ϕ) | kϕ ∈ K, ϕ ∈ T}, • ∑ K = ∑\nkϕ∈K kϕ, • K ≤ K′ when for every ϕ ∈ T , kϕ ≤ k′ϕ, • K < K′ if K ≤ K′ and ∃ϕ ∈ T , kϕ < k′ϕ.\nIn this notation, kϕ is a number associated with each formula ϕ of the knowledge base, which represents intuitively by which amount ϕ is relaxed.\nDefinition 6 (Revision order). Let us define ⊑ the binary relation over P(Sen) as follows:\nT ′ ⊑ T ′′ if ∃T ′′′ ⊆ Sen,Mod(T ′′′) = Mod(T ′′) and T ′ ⊆ T ′′′.\nIntuitively, this means that T ′ is included in T ′′ up to an equivalent knowledge base. The binary relation ⊑ will allow us to define a coherence criterion in the definition of revision operators (see Condition 3 in Definition 7 just below).\nDefinition 7 (Revision based on relaxation). Let ρ be a relaxation. A revision operator over ρ is a mapping ◦ : P(Sen)× P(Sen) → P(Sen) satisfying for every T, T ′ ⊆ Sen:\nT ◦ T ′ =\n\n \n \nρK(T ) ∪ T ′ if T ′ is consistent\nT ′ otherwise\nfor some K = {kϕ ∈ N | ϕ ∈ T} such that:\n(1) if T ′ is consistent, then T ◦ T ′ is consistent; (2) for every K′ such that ρK ′ (T ) ∪ T ′ is consistent, ∑ K ≤ ∑\nK′ (minimality on the number of applications of the relaxation);\n(3) for every T ′′ ⊑ T ′, if T ◦ T ′′ = ρK ′ (T ) ∪ T ′′, then K′ ≤ K.\nIt is important to note that given a relaxation ρ, several revision operators can be defined. Without Condition 3 of Definition 7, we could accept revision operators ◦ that do not satisfy Postulates (G5) and (G6). Hence, Condition 3 allows us to exclude such operators. To illustrate this, let us consider in FOL the satisfaction\nsystem R = (Sen,Mod, |=) over the signature (S, F, P ) where S = {s}, F = ∅ and P = {=: s× s}. Let us consider T, T ′ ⊆ Sen such that:\nT =\n\n     \n     \n∃x.∃y.(¬x = y) ∧ ∀z(z = x ∨ z = y)\n∃x.∃y.∃z.(¬x = y ∧ ¬y = z ∧ ¬x = z)∧\n∀w(w = x ∨ w = y ∨ w = z)\n\n     \n     \nT ′ =\n\n     \n     \n∀x.x = x\n∀x.∀y.x = y ⇒ y = x\n∀x.∀y.∀z.x = y ∧ y = z ⇒ x = z\n\n     \n     \nObviously, T ′ is consistent. As T does not contain the axioms for equality, it is also consistent. Indeed, the model M with the carrier Ms = {0, 1, 2} and the binary relation =M⊆ Ms ×Ms defined by =M= {(0, 0), (1, 1), (2, 0)} satisfies T . But T ∪T ′ is not consistent. The reason is that when the meaning of = is the equality, the first axiom of T can only be satisfied by models with two values while the second axiom is satisfied by models with three values. A way to retrieve the consistency is to remove one of the two axioms. This can be modeled by the relaxation ρ that maps each formula to a tautology 3 . But in this case, we have then two options depending on whether we remove and change the first or the second axiom by a tautology, which give rise to two revision operators ◦1 and ◦2. In any cases, the first two conditions of Definition 7 are satisfied by both ◦1 and ◦2. Now, let us take T ′′ = {∃x.∃y.¬x = y} which is satisfied, when added to the axioms in T ′, by any model with at least two elements. Hence, (T ◦1 T ′) ∪ T ′′ and (T ◦2 T\n′)∪T ′′ are consistent. Without the third condition, nothing would prevent to define T ◦1 (T ′ ∪ T ′′) (respectively T ◦2 (T ′ ∪ T ′′)) by removing and change in T the second (respectively the first) axiom by a tautology which would be a counterexample to Postulates (G5) and (G6). Actually, as shown by the result below, this third condition of Definition 7 entails Postulates (G5) and (G6), and then, by Proposition 3, entails Postulate (G4). However in some situations Condition 3 may be considered as too strong, forcing to relax more than what would be needed to satisfy only Condition 2. This could be typically the case when Condition 2 could be obtained in two different ways, for instance for K′ = {0, 1, 0, 0...} or for K′′ = {1, 0, 0, 0...}. Then taking Cn(T ′) = Cn(T ′′), and revising T ◦ T ′ using K′ and T ◦ T ′′ using K′′ would not meet Condition 3. To satisfy it, relaxation should be done for instance with K = {1, 1, 0, 0...}. Therefore in concrete applications, we will have to find a compromise between Condition 3 and (G4)-(G6) at the price of potential larger relaxations on the one hand, and less relaxation but potentially the loss of (G4)-(G6) on\n3 We will see in Section 3.4 a less trivial but more interesting relaxation in FOL that consists in changing universal quantifiers into existential ones.\nthe other hand.\nNotation 3. In the context of Definition 7, let T, T ′ ⊆ Sen be two knowledge bases. If T ◦ T ′ = ρK(T ) ∪ T ′ with K = {kϕ ∈ N | ϕ ∈ T}, then let us note KT ′ T = K.\nTheorem 3. Any revision operator ◦ based on a relaxation (Definition 7) satisfies the AGM Postulates.\nProof. ◦ obviously satisfies Postulates (G1), (G2) and (G3). To prove (G5)-(G6), let us suppose T, T ′, T ′′ ⊆ Sen such that (T ◦ T ′) ∪ T ′′ is consistent (the case where (T ◦ T ′)∪ T ′′ is inconsistent is obvious). This means that ρK T ′ T (T )∪ T ′ ∪ T ′′ is consistent. Now, obviously we have that T ′ ⊑ T ′ ∪ T ′′. Hence, by the second and the third conditions of Definition 7, we necessarily have that T ◦ (T ′ ∪ T ′′) = ρK T ′ T (T ) ∪ T ′ ∪ T ′′, and then Mod((T ◦ T ′) ∪ T ′′) = Mod(T ◦ (T ′ ∪ T ′′)).\nIn the previous section, we showed that several FA+ can be associated with a given revision operator ◦ satisfying the AGM postulates. Here, we define a particular one, which is more specific to revision operators based on relaxation. Let ρ be a relaxation. Let fρ be the mapping that associates to every T ⊆ Sen the binary relation T defined as follows:\nGiven T ′ ⊆ Sen, let us start by defining T ′ T ⊆ Mod(T ′)×Mod(T ′) as : M T ′\nT M ′ ⇐⇒\n∀K′′≥ KT ′ T ,M ′ ∈ Mod(ρK ′′ (T )) ⇒ ∃K′≥ KT ′ T ,\n\n \n \nK′ < K′′ and\nM ∈ Mod(ρK ′ (T ))\nLet us then set T= ⋃ T ′ T ′ T (i.e. M T M ′ ⇔ ∃T ′,M T ′ T M ′). Let us note that T⊆ Mod ×Mod because ∅T⊆ T .\nIntuitively, it means that T has to be relaxed more to be satisfied by M′ than to be satisfied by M.\nTheorem 4. For any revision operator ◦ based on a relaxation ρ as defined in Definition 7, the mapping fρ is a FA+.\nProof. Let T ⊆ Sen. Let us first show that fρ(T ) = T is faithful.\n• Obviously, we have for every M,M′ ∈ Mod(T ) and every T ′ ⊆ Sen that both M6 T ′\nT M ′ and M′ 6 T\n′\nT M. Hence the same relations hold for T . • Let M ∈ Mod(T ) and let M′ ∈ Mod \\ Mod(T ). Obviously, we have that\nM ∅T M ′. Let T ′ ⊆ Sen such that M,M′ ∈ Mod(T ′) (the case where for all T ′ ⊆ SenM or M′ is not in Mod(T ′) implies that M and M′ are incomparable by T ′\nT , and then we directly have that M ′ 6 TM). Here two cases have to be\nconsidered:\n(1) M ∈ Triv. As M′ 6∈Mod(T ), then M′ 6∈Triv. Hence, there does not exist K′ < K such that M′ ∈ Mod(ρK ′ (T )). Otherwise, ρK ′\n(T ) ∪ T ′ would be consistent, which would contradict the hypothesis that T ◦ T ′ = ρK(T ) ∪ T ′. (2) M6∈Triv. We have that M ∈ Mod(T ∪ T ′) but M′ 6∈Mod(T ∪ T ′), and then M′ 6 T ′\nT M By definition of ◦. Hence, in both cases we can conclude that M′ 6 TM.\nLet us prove that Mod(T ◦ T ′) \\ Triv = Min(Mod(T ′) \\ Triv, T ). This will directly prove that Min(Mod(T ′) \\ Triv, T ) 6= ∅ when T ′ is consistent. Indeed, by definition, we have that T ◦ T ′ is consistent when T ′ is consistent, and then Min(Mod(T ′)\\Triv, T ) 6= ∅ if Mod(T ◦T ′)\\Triv = Min(Mod(T ′)\\Triv, T ). If T ′ is inconsistent, then so is T ◦ T ′ by definition. Hence, Mod(T ◦ T ′) \\ Triv = Min(Mod(T ′) \\ Triv, T ) = ∅. Let us now suppose that T ′ is consistent.\n• Let us show that Mod(T ◦ T ′) \\ Triv ⊆ Min(Mod(T ′) \\ Triv, T ). Let M ∈ Mod(T ◦T ′)\\Triv. Let M′ ∈ Mod(T ′)\\Triv. Two cases have to be considered: (1) M′ ∈ Mod(T ◦T ′). Obviously, we have both M6 T ′\nT M ′ and M′ 6 T\n′\nT M. Let us show that this is also true for every T ′′ ⊆ Sen such that M,M′ ∈ Mod(T ′′). Let us suppose that there exists T ′′ ⊆ Sen such that M′ T ′′\nT M. By hypothesis, we then have that (T ◦ T ′) ∪ T ′′ is consistent. Therefore, by Conditions 2 and 3 of Definition 7, we have that (T ◦ T ′) ∪ T ′′ = T ◦ (T ′ ∪ T ′′). Hence, we also have that T ◦ (T ′ ∪ T ′′) = ρK T ′\nT (T ) ∪ T ′ ∪ T ′′. Consequently, as T ′′ ⊑ T ′ ∪ T ′′, we have by Condition 3 of Definition 7 that KT ′′\nT ≤ K T ′ T . Therefore, as M′ T ′′\nT M, we can deduce that there exists K ′′ < KT\n′\nT such that M′ ∈ Mod(ρK ′′ (T )). We then have that ρK ′′\n(T )∪T ′ is consistent, and then by Condition 2 of Definition 7, ∑ KT ′\nT ≤ ∑ K′′, which is a contradiction. (2) M′ 6∈Mod(T ◦ T ′). By definition of T ′\nT , we have that M T ′ T M ′, and there-\nfore M T M′. Finally, we can conclude that M ∈ Min(Mod(T ′) \\ Triv, T ).\n• Let us now show that Min(Mod(T ′) \\ Triv, T ) ⊆ Mod(T ◦ T ′) \\ Triv. Let M ∈ Min(Mod(T ′) \\ Triv, T ). Let us suppose that M6∈Mod(T ◦ T ′) \\ Triv. As T ′ is consistent, then so is T◦T ′. Hence, there existsM′ ∈ Mod(T◦T ′)\\Triv. As M ∈ Mod(T ′) \\ Mod(T ◦ T ′), we have that M′ T ′\nT M, and then as M ∈ Min(Mod(T ′) \\ Triv, T ) we also have that M T M′. This means that there exists T ′′ ⊆ Sen such that M,M′ ∈ Mod(T ′′) and M T ′′\nT M ′. By\nhypothesis, we then have that (T◦T ′)∪T ′′ is consistent. Therefore, by Conditions 2 and 3 of Definition 7, we have that (T ◦ T ′) ∪ T ′′ = T ◦ (T ′ ∪ T ′′). Hence, we also have that T ◦ (T ′ ∪ T ′′) = ρK T ′\nT (T ) ∪ T ′ ∪ T ′′. Consequently, we have by Condition 3 of Definition 7 that KT ′′\nT ≤ K T ′ T . Hence, there exists K ′′ ≥ KT ′′ T such that K′′ < KT ′\nT and M ∈ Mod(ρ K′′(T )). We can then deduce that ρK ′′ (T )∪T ′ is consistent, and then by Condition 2 of Definition 7 we have that ∑ KT ′\nT ≤ ∑ K′′, which is a contradiction.\nFinally, to prove the last point, we follow the same steps as in the proof of Theorem 1.\n3.4 Applications\nIn this section, we illustrate our general approach by defining revision operators based on relaxations for the logics PL, HCL, and FOL. We further develop the case of DLs in Section 4, by defining several concrete relaxation operators for different fragments of the DL ALC.\n3.4.1 Revision in PL\nHere, drawing inspiration from Bloch & al.’s works in [7,8] on Morpho-Logics, we define relaxations based on dilations from mathematical morphology [6]. It is well established in PL that knowing a formula is equivalent to knowing the set of its models. Hence, we can identify any propositional formula ϕ with the set of its interpretations Mod(ϕ). To define relaxations in PL, we will apply set-theoretic morphological operations. First, let us recall basic definitions of dilation in mathematical morphology [6]. Let X and B be two subsets of Rn. The dilation of X by the structuring element B, denoted by DB(X), is defined as follows:\nDB(X) = {x ∈ R n | Bx ∩X 6= ∅}\nwhere Bx denotes the translation of B at x. More generally, dilations in any space can be defined in a similar way by considering the structuring element as a binary relationship between elements of this space.\nIn PL, this leads to the following dilation of a formula ϕ ∈ Sen:\nMod(DB(ϕ)) = {ν ∈ Mod(Σ) | Bν ∩Mod(ϕ) 6= ∅}\nwhere Bν contains all the models that satisfy some relationship with ν. The relationship standardly used is based on a discrete distance δ between models, and the most commonly used is the Hamming distance dH where dH(ν, ν ′) for two propositional models over a same signature is the number of propositional symbols that are instantiated differently in ν and ν ′. From any distance δ between models, a distance from models to a formula is derived as follows: d(ν, ϕ) = minν′|=ϕδ(ν, ν ′). In this case, we can rewrite the dilation of a formula as follows:\nMod(DB(ϕ)) = {ν ∈ Mod(Σ) | d(ν, ϕ) ≤ 1}\nThis consists in using the distance ball of radius 1 as structuring element. To ensure the exhaustivity condition to our relaxation, we need to add a condition on distances, the betweenness property [14].\nDefinition 8 (Betweenness property). Let δ be a discrete distance over a set S. δ has the betweenness property if for all x, y ∈ S and all k ∈ {0, 1, . . . , δ(x, y)}, there exists z ∈ S such that δ(x, z) = k and δ(z, y) = δ(x, y)− k.\nThe Hamming distance trivially satisfies the betweenness property. The interest for our purpose of this property is that it allows from any model to reach any other one, and then ensuring the exhaustivity property of relaxation 4 .\nProposition 5. The dilation DB is a relaxation when it is applied to formulas ϕ ∈ Sen for a finite signature, and it is based on a distance between models that satisfies the betweenness property.\nProof. It is extensive. Indeed, for every ϕ and for every model ν ∈ Mod(ϕ), we have that d(ν, ϕ) = 0, and then ϕ |= DB(ϕ). Exhaustivity results from the fact that the considered signature is a finite set and from the betweenness property.\n3.4.2 Revision in HCL\nMany works have focused on belief revision involving propositional Horn formulas (cf. [12] to have an overview on these works). Here, we propose to extend relaxations that we have defined in the framework of PL to deal with the Horn fragment of propositional theories. First, let us introduce some notions.\nDefinition 9 (Model intersection). Given a propositional signature Σ and two Σmodels ν, ν ′ : Σ → {0, 1}, we note ν ∩ ν ′ : Σ → {0, 1} the Σ-model defined by:\np 7→\n\n \n \n1 if ν(p) = ν ′(p) = 1\n0 otherwise\nGiven a set of Σ-models S, we note\ncl∩(S) = S ∪ {ν ∩ ν ′ | ν, ν ′ ∈ S}\ncl∩(S) is then the closure of S under intersection of positive atoms.\nIt is well-known that for any set S closed under intersection of positive atoms, there exists a Horn sentence ϕ that defines S (i.e. Mod(ϕ) = S). Given a distance δ between models, we then define a relaxation ρ as follows: for every Horn formula ϕ, ρ(ϕ) is any Horn formula ϕ′ such that Mod(ϕ′) = cl∩(Mod(DB(ϕ)) (by the previous property, we know that such a formula ϕ′ exists).\nProposition 6. With the same conditions as in Proposition 5, the mapping ρ is a relaxation.\n4 Hence, dilation of formulas could also be defined by using a distance ball of radius n as structuring element [7].\n3.4.3 Revision in FOL\nA trivial way to define a relaxation in FOL is to map any formula to a tautology. A less trivial and more interesting relaxation is to change universal quantifiers to existential ones. Indeed, given a formula ϕ of the form ∀x.ψ. If ϕ is not consistent with a given theory T , ∃x.ψ may be consistent with T (if it cannot be consistent for all values, it can be for some of them). In the following we suppose that given a signature, every formula ϕ ∈ Sen is a disjunction of formulas in prenex form (i.e. ϕ is of the form ∨\nj Q j 1x j 1 . . . Q j nj xjnj .ψj where each Q j i is in {∀, ∃}). Let us define\nthe relaxation ρ as follows, for a tautology τ :\n• ρ(τ) = τ ; • ρ(∃1x1 . . .∃nxn.ϕ) = τ ; • Let ϕ = Q1x1 . . . Qnxn.ψ be a formula such that the set Eϕ = {i, 1 ≤ i ≤ n |\nQi = ∀} 6= ∅. Then, ρ(Q1x1 . . . Qnxn.ϕ) = ∨ i∈Eϕ ϕi where ϕi = Q ′ 1x1 . . . Q ′ nxn.ψ such that for every j 6= i, 1 ≤ j ≤ n, Q′j = Qj and Q ′ i = ∃;\n• ρ( ∨ j Q j 1x j 1 . . . Q j nj xjnj .ψ) = ∨ j ρ(Q j 1x j 1 . . . Q j nj xjnj .ψ).\nProposition 7. ρ is a relaxation.\nProof. It is obviously extensive, and exhaustivity results from the fact that in a finite number of steps, we always reach the tautology τ ."
    }, {
      "heading" : "4 Relaxation of theories and associated revision operator in DL",
      "text" : "Our idea to define revision operators is to relax the set of models of the old belief until it becomes consistent with the new pieces of knowledge. This is illustrated in Figure 1 where theories are represented as sets of their models. Intermediate steps to define the revision operators are then the definition of formula and theory relaxations. The whole scheme of our framework is provided in Figure 2.\n4.1 Concept relaxation\nAs already explained in Section 3.3, relaxation has been introduced in [14,15]. It has been first defined over concepts, and then extended to formulas. In [14,15], concept relaxation is defined as follows:\nDefinition 10 (Concept relaxation). Given a signature (NC , NR, I), we note C the set of concepts over this signature. A concept relaxation ρ : C → C is a mapping that satisfies, for all C in C:\n(1) C ⊑ ρ(C) (2) ∃k ∈ N,⊤ ⊑ ρk(C)\nNote that the non-decreasingness property in the original definition of a concept relaxation in [15] is removed here, since it is not needed in our construction.\nA trivial concept relaxation is the operation ρ⊤ that maps every concept C to ⊤. Other non-trivial concrete concept relaxations such as the one that changes universal quantifiers to existential ones as in FOL will be detailed next.\n4.2 Formula relaxation and theory relaxation\nA formula relaxation ρF in DL is defined as in Definition 5. From a formula relaxation, we can define a theory relaxation ρK as in Notation 2.\nIn the satisfaction system DL, let ρ be a relaxation for DL. Then from ρ we define a revision operator as in Definition 7. According to Theorem 3, it satisfies the AGM postulates.\nAs mentioned above, Condition 3 in Definition 7 may be considered as too strong in many real world applications. This may be the case in particular in the context of ontological engineering, where one may want to change only one axiom (or a limited number of axioms) instead of the whole theory. We will come back to this point when we will introduce a first example to illustrate relaxation operators in the DL EL.\nIn the following, we introduce concrete relaxation operators suited to the syntax of the logic ALC, as defined in Section 2.1, and its fragments EL and ELU . ELconcept description constructors are existential restriction (∃), conjunction (⊓), ⊤ and ⊥, while ELU-concept constructors are those of EL enriched with disjunction (⊔).\n4.3 Abstract relaxation and retraction operators\nWe propose to define a formula relaxation in two ways (other definitions may also exist). For sentences of the form C ⊑ D, the first proposed approach consists in relaxing the set of models of D while the second one amounts to “retract” the set of models of C.\nFrom any concept relaxation ρ, we can define 1 relaxation on formulas We suppose that any signature (NC , NR, I) always contains in NR a relation name r⊤ the meaning of which is in any model O, rO⊤ = ∆ O ×∆O.\nDefinition 11 (Formula relaxation based on concept relaxation). Let ρ a concept relaxation as in Definition 10. A formula relaxation based on ρ, denoted rρF is defined as follows, for any two complex concepts C and D, any individuals a, b, and any role r:\nrρF (C ⊑ D) ≡ C ⊑ ρ(D), rρF (a : C) ≡ a : ρ(C),\nrρF (〈a, b〉 : r)) ≡ 〈a, b〉 : r⊤.\nProposition 8. rρF is a formula relaxation, i.e. extensive and exhaustive.\nProof. It directly follows from the extensivity and exhaustivity of ρ.\nAnother strategy for defining a formula relaxation consists in retracting the concept in the left hand side of a sentence of the form C ⊑ D. Before providing this definition we need to formalize this notion of retraction, which could be seen as an anti-relaxation.\nDefinition 12 (Concept retraction). A (concept) retraction is an operator κ : C → C that satisfies the following two properties for all C in C:\n(1) κ is anti-extensive, i.e. κ(C) ⊑ C, and (2) κ is exhaustive, i.e. ∀D ∈ C, ∃k ∈ N such that κk(C) ⊑ D.\nDefinition 13 (Formula relaxation based on concept retraction). A formula relaxation based on a concept retraction κ, denoted cρF , is defined as follows, for any\ntwo complex concepts C and D, any individuals a, b, and any role r:\ncρF (C ⊑ D) ≡ κ(C) ⊑ D, cρF (a : C) ≡ a : ⊤,\ncρF (〈a, b〉 : r)) ≡ 〈a, b〉 : r⊤.\nA similar construction can be found in [28] for sentences of the form (a : C).\nProposition 9. cρF is a formula relaxation.\nProof. Extensivity and exhaustivity follow directly from the properties of κ.\nFor coming up with revision operators, it remains to define concrete relaxation and retraction operators at the concept level, according to our general schema in Figure 2. Some examples of retraction and relaxation operators are given below for EL and ELU , respectively.\n4.4 Relaxation and retraction in EL\nEL-Concept Retractions. A trivial concept retraction is the operator κ⊥ that maps every concept to ⊥. This operator is particularly interesting for debugging ontologies expressed in EL [36]. Let us illustrate this operator through the following example adapted from [28] to restrict the language to EL.\nExample 2. Let T = {TWEETY ⊑ BIRD, BIRD ⊑ FLIES} and T ′ = {TWEETY ⊓ FLIES ⊑ ⊥}. Clearly T ∪ T ′ is inconsistent. The formula relaxation based on the retraction κ⊥ amounts to apply κ⊥ to the concept TWEETY resulting in the following new knowledge base {⊥ ⊑ BIRD, BIRD ⊑ FLIES} which is now consistent with T ′. An alternative solution is to retract the concept BIRD in BIRD ⊑ FLIES which results in the following knowledge base {TWEETY ⊑ BIRD,⊥ ⊑ FLIES} which is also consistent with T ′. The sets of minimal sum K1 and K2 in Condition 2 of Definition 7 are K1 = {1, 0}, (i.e. kϕ1 = 1, kϕ2 = 0, where ϕ1 = TWEETY ⊑ BIRD, ϕ2 = BIRD ⊑ FLIES) and K2 = {0, 1}. However, to ensure Condition 3 of the same definition, we must relax one more time the axioms in T leading to the following knowledge base {⊥ ⊑ BIRD,⊥ ⊑ FLIES}. The final revision then writes T ◦ T ′ = {⊥ ⊑ BIRD,⊥ ⊑ FLIES, TWEETY ⊓ FLIES ⊑ ⊥}. This revision satisfies the AGM postulates (G1-G6) but may appear too strong, and one may prefer one of the following solutions: T ◦1T ′ = {⊥ ⊑ BIRD, BIRD ⊑ FLIES, TWEETY⊓FLIES ⊑ ⊥} or T ◦2 T ′ = {TWEETY ⊑ BIRD,⊥ ⊑ FLIES, TWEETY ⊓ FLIES ⊑ ⊥} at the price of loosing (G4)-(G6).\nAlthough the results are rather intuitive, one should note that it is pretty hard to figure out what each DL researcher would like to have as a result in such an exam-\nple, and this enforces the interest of relying on an established theory such as AGM or its extension. In our work we propose operators enjoying a bunch of properties stemming from our adaptation of the AGM theory. Some of them can meet the requirement of a knowledge engineer, and some other may not completely, depending on the context, the ontology, etc.\nEL-Concept Relaxations. Dually, a trivial relaxation is the operator ρ⊤ that maps every concept to ⊤. Other non-trivial EL-concept description relaxations have been introduced in [14]. We summarize here some of these operators.\nEL concept descriptions can appropriately be represented as labeled trees, often called EL description trees [3]. An EL description tree is a tree whose nodes are labeled with sets of concept names and whose edges are labeled with role names. An EL concept description\nC ≡ P1 ⊓ · · · ⊓ Pn ⊓ ∃r1.C1 ⊓ · · · ⊓ ∃rm.Cm (2)\nwith Pi ∈ NC ∪ {⊤}, can be translated into a description tree by labeling the root node v0 with {P1, . . . , Pn}, creating an rj successor, and then proceeding inductively by expanding Cj for the rj-successor node for all j ∈ {1, . . . , m}.\nAn EL-concept description relaxation then amounts to apply simple tree operations. Two relaxations can hence be defined [14]: (i) ρdepth that reduces the role depth of each concept by 1, simply by pruning the description tree, and (ii) ρleaves that removes all leaves from a description tree.\n4.5 Relaxations in ELU\nThe relaxation defined above exploits the strong property that an EL concept description is isomorphic to a description tree. This is arguably not true for more expressive DLs. Let us try to go one step further in expressivity and consider the logic ELU . A relaxation operator as introduced in [14] requires a concept description to be in a special normal form, called normal form with grouping of existentials, defined recursively as follows.\nDefinition 14 (Normal form with grouping of existential restrictions). We say that an EL-concept D is written in normal form with grouping of existential restrictions if it is of the form\nD = l\nA∈ND\nA ⊓ l\nr∈NR\nDr, (3)\nwhere ND ⊆ NC is a set of concept names and the concepts Dr are of the form\nDr = l\nE∈CDr\n∃r.E, (4)\nwhere no subsumption relation holds between two distinct conjuncts and CDr is a set of complex EL-concepts that are themselves in normal form with grouping of existential restrictions.\nThe purpose of Dr terms is simply to group existential restrictions that share the same role name. For an ELU-concept C we say that C is in normal form if it is of the form (C ≡ C1 ⊔ C2 ⊔ · · · ⊔ Ck) and each of the Ci is an EL-concept in normal form with grouping of existential restrictions.\nDefinition 15 (Relaxation from normal form [14]). Given an ELU-concept description C we define an operator ρe recursively as follows.\n• For C = ⊤ we define ρe(C) = ⊤, • For C = Dr, where Dr is a group of existential restrictions as in Equation 4, we\nneed to distinguish two cases: · if Dr ≡ ∃r.⊤ we define ρe(Dr) = ⊤, and\n· ifDr 6≡ ∃r.⊤ then we define ρe(Dr) = ⊔\nS⊆CDr\n(\nd E/∈S ∃r.E ⊓ ∃r.ρe\n(\nd F∈S F\n))\n.\nNote that in the latter case ⊤ /∈ CDr since Dr is in normal form.\n• ForC = D as in Equation 3 we define ρe(D) = ⊔\nG∈CD\n(\nρe(G)⊓ d\nH∈CD\\{G} H\n)\n,\nwhere CD = ND ∪ {Dr | r ∈ NR}. • Finally for C = C1⊔C2⊔· · ·⊔Ck we set ρe(C) = ρe(C1)⊔ρe(C2)⊔· · ·⊔ρe(Ck).\nProposition 10. [14] ρe is a relaxation.\nLet us illustrate this operator with an example.\nExample 3. Suppose an agent believes that a person BOB is married to a female judge: T = {BOB ⊑ MALE⊓∃.MARRIEDTO . (FEMALE ⊓ JUDGE)}. Suppose now that due to some obscurantist law, it happens that females are not allowed to be judges. This new belief is captured as T ′ = {JUDGE ⊓ FEMALE ⊑ ⊥}. By applying ρe one can resolve the conflict between the two belief sets. To ease the reading, let us rewrite the concepts as follows: A ≡ MALE, B ≡ FEMALE, C ≡ JUDGE, m ≡ MARRIEDTO, D ≡ ∃MARRIEDTO . (FEMALE ⊓ JUDGE). Hence, from Definition 15 we have ρe(A ⊓D) ≡ (ρe(A) ⊓D) ⊔ (A ⊓ ρe(D)), with ρe(A) ≡ ⊤ and\nρe(D) ≡∃m.ρe(B ⊓ C) ⊔ (∃m.B ⊓ ∃m.ρe(C)) ⊔ (∃m.ρe(B) ⊓ ∃m.C)\n≡∃m.(B ⊔ C) ⊔ (∃m.B ⊓ ∃m.⊤) ⊔ (∃m.⊤ ⊓ ∃m.C)\n≡∃m.B ⊔ ∃m.C ⊔ ∃m.(B ⊔ C) ≡ ∃m.B ⊔ ∃m.C\nThen\nρe(A ⊓D) ≡ (ρe(A) ⊓D) ⊔ (A ⊓ ρe(D))\n≡(⊤ ⊓D) ⊔ (A ⊓ (∃m.B ⊔ ∃m.C))\n≡D ⊔ (A ⊓ (∃m.B ⊔ ∃m.C))\nThe new agent’s belief, up to a rewriting, becomes\n{BOB ⊑ ∃.MARRIEDTO . (FEMALE ⊓ JUDGE) ⊔ (MALE ⊓ (∃MARRIED.FEMALE ⊔ ∃MARRIED.JUDGE)) , JUDGE ⊓ FEMALE ⊑ ⊥}.\nOne can notice from this example that the relaxation ρe leads to a refined revision operator. Indeed, the resulting relaxed axiom in T emphasizes all the minimal possible changes (through the disjunction operator) on BOB’s condition. This is due to the fact that the relaxation operator ρe corresponds to dilating the set of models of a ball defined from an edit distance on the concept description tree of size one. For more details on the correspondence between this relaxation operator, the set of models and tree edit distances, one can refer to [14].\nAnother possibility for defining a relaxation in ELU is obtained by exploiting the disjunction constructor by augmenting a concept description with a set of exceptions.\nDefinition 16 (Relaxation from exceptions in ELU). Given a set of exceptions E = {E1, · · · , En}, we define a relaxation of degree k of an ELU-concept description C as follows: for a finite set Ek ⊆ E with |Ek| = k, C is relaxed by adding the sets Eij ∈ E k such that Eij ⊓ C ⊑ ⊥\nρkE(C) = C ⊔ Ei1 ⊔ · · · ⊔ Eik .\nProposition 11. ρkE is extensive.\nProof. Extensivity of this operator follows directly from the definition.\nHowever, exhaustivity is not necessarily satisfied unless the exception set includes the ⊤ concept or the disjunction of some or all of its elements entails the ⊤ concept.\nIf we consider again Example 2, a relaxation of the formula BIRD ⊑ FLIES using the operator ρkE over the concept FLIES with the exception set E = {TWEETY} results in the formula BIRD ⊑ FLIES ⊔ TWEETY. The new revised knowledge base, if Condition 3 in Definition 7 is not considered, is then {TWEETY ⊑ BIRD, BIRD ⊑ FLIES ⊔ TWEETY, TWEETY ⊓ FLIES ⊑ ⊥} which is consistent. This is obviously a more refined revision than the one obtained from the operator ρ⊥, but requires the logic to be equipped with the disjunction connective and the definition of a set of exceptions.\nAnother example involving this relaxation will be discussed in the ALC case (cf. Example 4).\n4.6 Relaxation and retraction in ALC\nWe consider here operators suited to ALC language. Of course, all the operators defined for EL and ELU remain valid.\nALC-Concept Retractions. A first possibility for defining retraction is to remove iteratively from an ALC-concept description one or a set of its subconcepts. A similar construction has been introduced in [28]. Interestingly enough, almost all the operators defined in [20,28] are relaxations.\nDefinition 17 (Retraction from exceptions inALC). Given a set of exceptions E = {E1, · · · , En} and let C be any ALC-concept description. We retract C by constraining it to the elements Eci such that Ei ⊑ C:\nκnE(C) = C ⊓ E c 1 ⊓ · · · ⊓ E c n.\nProposition 12. κnE is anti-extensive.\nProof. The proof follows from the definition.\nAs for its counterpart relaxation (ρkE ), exhaustivity of κ n E is not necessarily satisfied unless the exception set includes the ⊥ concept, or the conjunction of some or all of its elements entails the ⊥ concept.\nConsider again Example 2. We have κ1E(BIRD) = BIRD ⊓ TWEETY c. The resulting revised knowledge base, if Condition 3 in Definition 7 is not considered, is then {TWEETY ⊑ BIRD, BIRD ⊓ TWEETYc ⊑ FLIES, TWEETY ⊓ FLIES ⊑ ⊥} which is consistent.\nAnother possibility, suggested in [20] and related to operators defined in propositional logic as introduced in [7], consists in applying the retraction at the atomic level. This captures somehow Dalal’s idea of revision operators in propositional logic [10].\nDefinition 18. Let C be an ALC-concept description of the form Q1r1 · · ·Qmrm.D, where Qi is a quantifier and D is quantifier-free and in CNF form, i.e. D = E1 ⊓ E2 ⊓ · · ·En with Ei being disjunctions of possibly negated atomic concepts. Let us define, as in the propositional case [7], κp(D) = dn j=1( ⊔\ni 6=j Ei). Then κDalal(C) = Q1r1 · · ·Qmrm.κp(D).\nProposition 13. κnDalal is a retraction.\nProof. Exhaustivity and anti-extensivity follow from those of κp. Indeed the operator κp is exhaustive and anti-extensive, and if applied n times it reaches the ⊥\nconcept (see [7] for properties of this operator).\nThis idea can be generalized to consider any retraction defined in ELU .\nDefinition 19. Let C be an ALC-concept description of the form Q1r1 · · ·Qmrm.D, where Qi is a quantifier and D is a quantifier-free. Then we define κ∩(C) = Q1r1 · · ·Qmrm.κ n E(D).\nProposition 14. κn∩ is anti-extensive.\nProof. The properties of this operator follows from the ones of κnE(D). Hence, antiextensivity is verified but not necessarily exhaustivity.\nAnother possible ALC-concept description retraction is obtained by substituting the existential restriction by an universal one. This idea has been sketched in [20] for defining dilation operators (then by transforming ∀ into ∃), i.e. special relaxation operators enjoying additional properties [14]. We adapt it here to define retraction in DL syntax.\nDefinition 20. Let C be an ALC-concept description of the form Q1r1 · · ·Qnrn.D, where Qi is a quantifier, D is quantifier-free, then we define\nκq(C) = l {Q′1r1 · · ·Q ′ nrn.D | ∃j ≤ n s.t. Qj = ∃\nand Q′j = ∀, and for all i ≤ n s.t. i 6= j, Q ′ i = Qi}\nProposition 15. κq is anti-extensive.\nProof. The proof relies on the following general result:\n∀C, ∀r, ∀r.C ⊑ ∃r.C\nIndeed, for each interpretation I, if rIi 6= ∅, we have\nx ∈ (∀r.C)I ⇒ (∀y, (x, y) ∈ rI ⇒ y ∈ CI) ⇒ (∃y, (x, y) ∈ rIand y ∈ CI) ⇒ x ∈ (∃r.C)I .\nHence (∀r.C)I ⊆ (∃r.C)I for each I (if rIi = ∅ it is obvious), and ∀r.C ⊑ ∃r.C.\nIn a similar way, we can show, that for any C1, C2, r, and Q ∈ {∃, ∀}:\nC1 ⊑ C2 ⇒ Qr.C1 ⊑ Qr.C2.\nNow, let us consider any j such that Qj = ∃, and set C ′ = Qj+1rj+1...Qnrn.D. We have from the first result Q′jrj.C ′ ⊑ Qjrj .C ′. Applying the second result recursively on each Qi for i < j, we then have\nQ1r1...Qj−1rj−1Q ′ jrj .C ′ ⊑ Q1r1...Qj−1rj−1Qjrj.C ′.\nThe same relation holds for the conjunction over any j such that Qj = ∃, from which we conclude that ∀C, κq(C) ⊑ C, i.e. κq is anti-extensive.\nNote that for κq exhaustivity can be obtained by further removing recursively the remaining universal quantifiers and apply at the final step any retraction defined above on the concept D.\nALC-Concept Relaxations. Let us now introduce some relaxation operators suited to ALC language.\nDefinition 21. Let C be an ALC-concept description of the form Q1r1 · · ·Qmrm.D, where Qi is a quantifier and D is quantifier-free and in DNF form, i.e. D = E1 ⊔ E2 ⊔ · · ·En with Ei being a conjunction of possibly negated atomic concepts. Define, as in the propositional case [7], ρp(D) = ⊔n j=1( d i 6=j Ei), then ρnDalal(C) = Q1r1 · · ·Qmrm.ρ n p (D).\nAs for retraction, this idea can be generalized to consider any relaxation defined in ELU .\nDefinition 22. Let C be an ALC-concept description of the form Q1r1 · · ·Qnrn.D, where Qi is a quantifier andD is quantifier-free, then we define ρn∪(C) = Q1r1 · · ·Qnrn.ρ n E(D).\nLet us consider another example adapted from the literature to illustrate these operators [28].\nExample 4. Let us consider the following knowledge bases: T = {BOB ⊑ ∀HASCHILD .RICH, BOB ⊑ ∃HASCHILD .MARY, MARY ⊑ RICH} and T ′ = {BOB ⊑ HASCHILD .JOHN, JOHN ⊑ RICHc}. Relaxing the formula BOB ⊑ ∀HASCHILD .RICH by applying ρn∪ to the concept on the right hand side results in the following formula BOB ⊑ ∀HASCHILD .(RICH⊔ JOHN) which resolves the conflict between the two knowledge bases.\nA last possibility, dual to the retraction operator given in Definition 20, consists in transforming universal quantifiers to existential ones.\nDefinition 23. Let C be an ALC-concept description of the form Q1r1 · · ·Qnrn.D, where Qi is a quantifier and D is quantifier-free, then we define a relaxation as:\nρq(C) = ⊔ {Q′1r1 · · ·Q ′ nrn.D | ∃j ≤ n s.t. Qj = ∀ and Q′j = ∃, and for all i ≤ n s.t. i 6= j, Q ′ i = Qi}\nIf we consider again Example 4, relaxing the formula BOB ⊑ ∀HASCHILD .RICH by applying ρq to the concept on the right hand side results in the following formula\nBOB ⊑ ∃HASCHILD .RICH, which resolves the conflict between the two knowledge bases.\nProposition 16. The operators ρDalal, ρq are extensive and exhaustive. The operators ρ∪ is extensive but not exhaustive.\nProof. The properties of ρDalal and ρ∪ are directly derived from the definitions and from properties of ρp detailed in [7] and ρE . The proof of ρq being extensive and exhaustive can be found in [20]."
    }, {
      "heading" : "5 Related work",
      "text" : "Recently a first generalization of AGM revision has been proposed in the framework of Tarskian logics considering minimality criteria on removed formulas [33] following previous works of the same authors for contraction [34]. Representation results that make a correspondence between a large family of logics containing nonclassical logics such as DL and HCL and AGM postulates for revision with such minimality criteria have then been obtained. Here, the proposed generalization also gives similar representation theorems (cf. Theorem 1) but for a different minimality criterion. Indeed, we showed in Section 3.2 that revision operators satisfying Postulates (G1)-(G6) are precisely the ones that accomplish an update with minimal change to the set of models of knowledge bases, generalizing to any institution the approach developed in [22] for the logic PL and [29] for DL. However, our revision operator based on relaxation also has a minimality criterion on transformed formulas. Indeed, a simple consequence of Definition 7 is the property\n(Relevance) Let T, T ′ ⊆ Sen be two knowledge bases such that T ◦ T ′ = ρK(T ) ∪ T ′. Then, for every ϕ ∈ T such that kϕ 6= 0, ρK ′\n(T ) ∪ T ′ is inconsistent for K′ = K \\ {kϕ} ∪ {k′ϕ = 0}.\nThis property states that only formulas that contribute to inconsistencies with T ′ are allowed to be transformed. Our property (Relevance) is similar to the property with the same name in [33,34], but for contraction operators, and that states that only the formulas that somehow “contribute” to derive the formulas to abandon can be removed.\nSince the primary aim of this paper is to show that a more general framework, encompassing different logics, can be useful, it is out of the scope of this paper to provide an overview of all existing relaxation methods. However, some works deserve to be mentioned, since they are based on ideas that show some similarity with the relaxation notion proposed in our framework.\nThe relaxation idea originates from the work on Morpho-Logics, initially introduced in [7,8]. In this seminal work, revision operators (and explanatory relations) were defined through dilation and erosion operators. These operators share some similarities with relaxation and retraction as defined in this paper. Dilation is a suppreserving operator and erosion is inf-preserving, hence both are increasing. Some particular dilations and erosions are exhaustive and extensive while relaxation and retraction operators are defined to be exhaustive and extensive but not necessarily sup- and inf-preserving. Dilation has been further exploited for merging first-order theories in [20].\nIn [1], the notion of partial meet contraction is defined as the intersection of a non empty family of maximal subsets of the theory than do not imply the proposition to be eliminated. Revision is then defined from the Levi identity. The maximal subsets can also be selected according to some choice function. The authors also define a notion of partial meet revision, which can be seen as a special case of the relaxation operator introduced in this paper. In [21], the author also discusses choice functions and compares the postulates for partial meet revision to the AGM postulates. He also highlights the distinction between belief sets (which can be very large) and belief bases (which are not necessarily closed by Cn). More precisely, A is a belief base of a belief set K iff K = Cn(A). A permissive belief revision is defined in [9], based on the notion of weakening. The beliefs which are suppressed by classical revision methods are replaced by weaker forms, which keep the resulting belief set consistent. This notion of weakening is closed to the one of relaxation developed in this paper. In the last decade, several works have studied revision operators in description logics. While most of them concentrated on the adaptation of AGM theory, few works have addressed the definition of concrete operators [24,27,28,26]. For instance, in [24], based on the seminal work in [5], revision in DL is studied by defining strategies to manage inconsistencies and using the notion of knowledge integration (see also the work by Hansson). The authors propose a conjunctive maxiadjustment, for stratified knowledge bases and lexicographic entailment. In [27], weakening operators, that are in fact relaxation operators, are defined. Our work brings a principled formal flavor to these operators. In [26], revision of ontologies in DL is based on the notion of forgetting, which is also a way to manage inconsistencies. The authors propose a model based approach, inspired by Dalal’s revision in PL, and based on a distance between terminologies and on the difference set between two interpretation. The models of the revision T ◦ T ′ are then the interpretations I for which there exists an interpretation I ′ such that the cardinality of the difference set between I and I ′ is equal to the distance between T and T ′. In [23], updating Aboxes in DL is discussed, and some operators are introduced. The rationality of these operators is not discussed, hence the interest of a formal theory such as the AGM postulates. In [2] an original use of DL revision is introduced for the orchestration of processes. A closely related field is inconsistency handling in ontologies (e.g. [35,36]), with the main difference that the rationality of inconsistency repairing operators is not investigated, as suggested by the AGM theory.\nAs said before, some of our DL-based relaxation operators are closely related to the ones introduced in [28] for knowledge bases revision. Our relaxation-based revision framework, being abstract enough (i.e. defined through easily satisfied properties), encompasses these operators. Moreover, the revision operator defined in [28] considers only inconsistencies due to Abox assertions. Our operators are general in the sense that Abox assertions are handled as any formula of the language."
    }, {
      "heading" : "6 Conclusion",
      "text" : "The contribution of this paper is threefold. First, we provided a generalization of AGM postulates from a model-theoretic point of view, by defining this operator in an abstract model theory known under the name of satisfaction systems, so as they become applicable to a wide class of non-classical logics. In this framework, we then generalized to any satisfaction systems the characterization of the AGM postulates given by Katsuno and Mendelzon for propositional logic in terms of minimal change with respect to an ordering among interpretations. This work generalizes the previous ones in the area. It also suggests the theory behind satisfaction systems to be a principled framework for dealing with knowledge dynamics with the growing interest on non-classical logics such as DL. We do hope that bridges can thus be built, by working at the cross-road of different areas of theoretical computer sciences.\nSecondly, we proposed a general framework for defining revision operators based on the notion of relaxation. We demonstrated that such a relaxation-based framework for belief revision satisfies the AGM postulates. As a byproduct, we give a principled formal flavor to several operators defined in the literature (e.g. weakening operators defined in DL).\nThirdly, we introduced a bunch of concrete relaxations within the scope of description logics, discussed their properties and illustrated them through simple examples. It was out of the scope of this paper to discuss tools such as OWL. However, the proposed approach could be applied to SROIQ and implemented in OWL, by augmenting a relaxation with operations on complex constructors.\nFuture works will concern the study of the complexity of the introduced operators, the comparison of their induced ordering, and their generalization to more expressive DL as well as other non-classical logics such as first-order Horn logics or equational logics."
    } ],
    "references" : [ {
      "title" : "On the logic of theory change",
      "author" : [ "C. Alchourron", "P. Gardenfors", "D. Makinson" ],
      "venue" : "Journal of Symbolic Logic 50 (2) ",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 1985
    }, {
      "title" : "Constructive DL update and reasoning for modeling and executing the orchestration of heterogeneous processes",
      "author" : [ "S. Autexier", "D. Hutter" ],
      "venue" : "in: Description Logics",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Computing least common subsumers in description logics with existential restrictions",
      "author" : [ "F. Baader", "R. Küsters", "R. Molitor" ],
      "venue" : "in: International Joint Conference on Artificial Intelligence (IJCAI’99), Morgan-Kaufmann",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 1999
    }, {
      "title" : "Axioms for abstract model theory",
      "author" : [ "J. Barwise" ],
      "venue" : "Ann. Math. Logic 7 ",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 1974
    }, {
      "title" : "Weakening conflicting information for iterated revision and knowledge integration",
      "author" : [ "S. Benferhat", "S. Kaci", "D. Le Berre", "M.-A. Williams" ],
      "venue" : "Artificial Intelligence 153 (1) ",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Handbook of Spatial Logics (M",
      "author" : [ "I. Bloch", "H. Heijmans", "C. Ronse" ],
      "venue" : "Aiello, I. Pratt- Hartman and J. van Benthem, Eds), chap. Mathematical Morphology, Springer-Verlag",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Towards mathematical morpho-logics",
      "author" : [ "I. Bloch", "J. Lang" ],
      "venue" : "in: B. Bouchon-Meunier, J. Gutierrez-Rios, L. Magdalena, R. Yager (eds.), Technologies for Constructing Intelligent Systems, Springer-Verlag",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "A unified Treatment of Knowledge Dynamics",
      "author" : [ "I. Bloch", "R. Pino-Pérez", "C. Uzcategui" ],
      "venue" : "in: International Conference on Principles of Knowledge Representation and Reasoning (KR), AAAI Press",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Permissive belief revision",
      "author" : [ "M.R. Cravo", "J.P. Cachopo", "A.C. Cachopo", "J.P. Martins" ],
      "venue" : "in: Portuguese Conference on Artificial Intelligence, vol. LNAI 2258",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "Investigations into a Theory of Knowledge Base Revision: Preliminary Report",
      "author" : [ "M. Dalal" ],
      "venue" : "in: Association for the Advancement of Artificial Intelligence (AAAI’88)",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 1988
    }, {
      "title" : "Revising Horn theories",
      "author" : [ "J.-P. Delgrande", "P. Peppas" ],
      "venue" : "in: T. Walsh (ed.), 22nd International Joint Conference on Artificial Intelligence (IJCAI), IJCAI/AAAI",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Belief revision in Horn theories",
      "author" : [ "J.-P. Delgrande", "P. Peppas" ],
      "venue" : "Artificial Intelligence 218 ",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Institution-independent Model Theory",
      "author" : [ "R. Diaconescu" ],
      "venue" : "Universal Logic, Birkauser",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Concept dissimilarity on tree edit distance and morphological dilatations",
      "author" : [ "F. Distel", "J. Atif", "I. Bloch" ],
      "venue" : "in: European Conference on Artificial Intelligence (ECAI)",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Concept dissimilarity with triangle inequality",
      "author" : [ "F. Distel", "J. Atif", "I. Bloch" ],
      "venue" : "in: C. Baral, G. D. Giacomo, T. Eiter (eds.), Fourteenth International Conference on Principles of Knowledge Representation and Reasoning (KR), AAAI Press",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Inconsistencies",
      "author" : [ "G. Flouris", "Z. Huang", "J. Pan", "D. Plexousakis", "H. Wache" ],
      "venue" : "negations and changes in ontologies, in: 21st AAAI National Conference on Artificial Intelligence",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "On applying the AGM theory to DLs and OWL",
      "author" : [ "G. Flouris", "D. Plexousakis", "G. Antoniou" ],
      "venue" : "in: The Semantic Web–ISWC 2005, vol. LNCS 5341, Springer",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "A study in the foundations of programming methodology: Specifications",
      "author" : [ "J.-A. Goguen", "R.-M. Burstall" ],
      "venue" : "institutions, charters and parchments, in: D. P. . al. (ed.), Category Theory and Computer Programming, vol. 240 of Lecture Notes in Computer Science, Springer-Verlag",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 1985
    }, {
      "title" : "Institutions: Abstract model theory for specification and programming",
      "author" : [ "J.-A. Goguen", "R.-M. Burstall" ],
      "venue" : "Journal of the ACM 39 (1) ",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 1992
    }, {
      "title" : "Merging First-Order Knowledge using Dilation Operators",
      "author" : [ "N. Gorogiannis", "A. Hunter" ],
      "venue" : "in: Fifth International Symposium on Foundations of Information and Knowledge Systems, FoIKS’08, vol. LNCS 4932",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Knowledge-level analysis of belief base operations",
      "author" : [ "S.O. Hansson" ],
      "venue" : "Artificial Intelligence 82 (1) ",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 1996
    }, {
      "title" : "Propositional knowledge base revision and minimal change",
      "author" : [ "H. Katsuno", "A.-O. Mendelzon" ],
      "venue" : "Artificial Intelligence 52 ",
      "citeRegEx" : "22",
      "shortCiteRegEx" : null,
      "year" : 1991
    }, {
      "title" : "Updating description logic ABoxes",
      "author" : [ "H. Liu", "C. Lutz", "M. Milicic", "F. Wolter" ],
      "venue" : "in: KR",
      "citeRegEx" : "23",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Knowledge integration for description logics",
      "author" : [ "T. Meyer", "K. Lee", "R. Booth" ],
      "venue" : "in: Association for the Advancement of Artificial Intelligence (AAAI’05), vol. 5",
      "citeRegEx" : "24",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "What is a Logic Translation",
      "author" : [ "T. Mossakowski", "R. Diaconescu", "A. Tarlecki" ],
      "venue" : "Logica Universalis 3 (1) ",
      "citeRegEx" : "25",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "J",
      "author" : [ "G. Qi" ],
      "venue" : "Du, Model-based revision operators for terminologies in description logics., in: IJCAI",
      "citeRegEx" : "26",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "A revision-based approach to handling inconsistency in description logics",
      "author" : [ "G. Qi", "W. Liu", "D. Bell" ],
      "venue" : "Artificial Intelligence Review 26 (1-2) ",
      "citeRegEx" : "27",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Knowledge base revision in description logics",
      "author" : [ "G. Qi", "W. Liu", "D.-A. Bell" ],
      "venue" : "in: M. Fisher, W. V. der Hoek, B. Konev, A. Lisitsa (eds.), European Conference on Logics in Artificial Intelligence (JELIA), vol. LNAI 4160, Springer-Verlag",
      "citeRegEx" : "28",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "A survey of revision approaches in description logics",
      "author" : [ "G. Qi", "F. Yang" ],
      "venue" : "in: D. Calvanese, G. Lausen (eds.), Web Reasoning and Rule Systems (RR), Second International Conference, vol. 5341 of Lecture Notes in Computer Science, Springer-Verlag",
      "citeRegEx" : "29",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "AGM revision in description logics",
      "author" : [ "M.-M. Ribeiro", "R. Wassermann" ],
      "venue" : "in: First Workshop on Automated Reasoning about Context and Ontology Evolution (ARCOE)",
      "citeRegEx" : "30",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Base revision for ontology debugging",
      "author" : [ "M.M. Ribeiro", "R. Wassermann" ],
      "venue" : "Journal of Logic and Computation 19 (5) ",
      "citeRegEx" : "31",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "More about AGM revision in description logics",
      "author" : [ "M.-M. Ribeiro", "R. Wassermann" ],
      "venue" : "in: Second Workshop on Automated Reasoning about Context and Ontology Evolution (ARCOE)",
      "citeRegEx" : "32",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Minimal change in AGM for non-classical logics",
      "author" : [ "M.-M. Ribeiro", "R. Wassermann" ],
      "venue" : "in: C. Baral, G. D. Giacomo, T. Eiter (eds.), Fourteenth International Conference on Principles of Knowledge Representation and Reasoning (KR), AAAI Press",
      "citeRegEx" : "33",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Minimal change: Relevance and recovery revisited",
      "author" : [ "M.-M. Ribeiro", "R. Wassermann", "G. Flouris", "G. Antoniou" ],
      "venue" : "Artificial Intelligence 201 ",
      "citeRegEx" : "34",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Non-standard reasoning services for the debugging of description logic terminologies",
      "author" : [ "S. Schlobach", "R. Cornet" ],
      "venue" : "in: International Joint Conference on Artificial Intelligence (IJCAI’03), vol. 3",
      "citeRegEx" : "35",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "Debugging incoherent terminologies",
      "author" : [ "S. Schlobach", "Z. Huang", "R. Cornet", "F.V. Harmelen" ],
      "venue" : "Journal of Automated Reasoning 39 (3) ",
      "citeRegEx" : "36",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "The Semantic Conception of Truth",
      "author" : [ "A. Tarski" ],
      "venue" : "Philos. Phenomenological Research 4 ",
      "citeRegEx" : "37",
      "shortCiteRegEx" : null,
      "year" : 1944
    }, {
      "title" : "On  the Concept of Logical Consequence",
      "author" : [ "A.  Tarski" ],
      "venue" : "Logic, Semantics, Metamathematics ",
      "citeRegEx" : "38",
      "shortCiteRegEx" : null,
      "year" : 1956
    }, {
      "title" : "Revising general knowledge bases in description logics",
      "author" : [ "Z. Wang", "K. Wang", "R.-W. Topor" ],
      "venue" : "in: F. Lin, U. Sattler, M. Truszczynski (eds.), Twelfth International Conference on Principles of Knowledge Representation and Reasoning (KR), AAAI Press",
      "citeRegEx" : "39",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Extending AGM contraction to arbitrary logics",
      "author" : [ "Z. Zhuang", "Z. Wang", "K. Wang", "J. Delgrande" ],
      "venue" : "in: 24th International Joint Conference on Artificial Intelligence (IJCAI-15)",
      "citeRegEx" : "40",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Definability of Horn revision from Horn contraction",
      "author" : [ "Z.-Q. Zhuang", "M. Pagnucco", "Y. Zhang" ],
      "venue" : "in: 23rd International Joint Conference on Artificial Intelligence (IJCAI), IJCAI/AAAI",
      "citeRegEx" : "41",
      "shortCiteRegEx" : null,
      "year" : 2013
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "a set of sentences in a given logic, these changes are governed by a set of postulates proposed for the first time by Alchourròn, Gardenfors and Makinson [1], and since known as the AGM theory.",
      "startOffset" : 154,
      "endOffset" : 157
    }, {
      "referenceID" : 37,
      "context" : "Although defined in the abstract framework of logics given by Tarski [38] (so called Tarskian logics), postulates of the AGM theory make strong assumptions on the considered logics.",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 0,
      "context" : "Indeed, in [1] the considered logics have to be closed under the standard propositional connectives in {∧,∨,¬,⇒}, to be compact (i.",
      "startOffset" : 11,
      "endOffset" : 14
    }, {
      "referenceID" : 11,
      "context" : "Recently, in many works, belief change has been studied in such non-classical logics [12,17,33,34].",
      "startOffset" : 85,
      "endOffset" : 98
    }, {
      "referenceID" : 16,
      "context" : "Recently, in many works, belief change has been studied in such non-classical logics [12,17,33,34].",
      "startOffset" : 85,
      "endOffset" : 98
    }, {
      "referenceID" : 32,
      "context" : "Recently, in many works, belief change has been studied in such non-classical logics [12,17,33,34].",
      "startOffset" : 85,
      "endOffset" : 98
    }, {
      "referenceID" : 33,
      "context" : "Recently, in many works, belief change has been studied in such non-classical logics [12,17,33,34].",
      "startOffset" : 85,
      "endOffset" : 98
    }, {
      "referenceID" : 33,
      "context" : "’s work in [34] that studies contraction at the abstract level of Tarskian logics, and the recent work in [40] on the extension of AGM contraction to arbitrary logics.",
      "startOffset" : 11,
      "endOffset" : 15
    }, {
      "referenceID" : 39,
      "context" : "’s work in [34] that studies contraction at the abstract level of Tarskian logics, and the recent work in [40] on the extension of AGM contraction to arbitrary logics.",
      "startOffset" : 106,
      "endOffset" : 110
    }, {
      "referenceID" : 15,
      "context" : "The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41].",
      "startOffset" : 144,
      "endOffset" : 166
    }, {
      "referenceID" : 16,
      "context" : "The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41].",
      "startOffset" : 144,
      "endOffset" : 166
    }, {
      "referenceID" : 26,
      "context" : "The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41].",
      "startOffset" : 144,
      "endOffset" : 166
    }, {
      "referenceID" : 27,
      "context" : "The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41].",
      "startOffset" : 144,
      "endOffset" : 166
    }, {
      "referenceID" : 29,
      "context" : "The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41].",
      "startOffset" : 144,
      "endOffset" : 166
    }, {
      "referenceID" : 31,
      "context" : "The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41].",
      "startOffset" : 144,
      "endOffset" : 166
    }, {
      "referenceID" : 38,
      "context" : "The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41].",
      "startOffset" : 144,
      "endOffset" : 166
    }, {
      "referenceID" : 10,
      "context" : "The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41].",
      "startOffset" : 183,
      "endOffset" : 190
    }, {
      "referenceID" : 40,
      "context" : "The adaptation of AGM postulates for revision for non-classical logics has been studied but only for specific logics, mainly description logics [16,17,27,28,30,32,39] and Horn logics [11,41].",
      "startOffset" : 183,
      "endOffset" : 190
    }, {
      "referenceID" : 32,
      "context" : "The reason is that revision can be abstractly defined in terms of expansion and retraction following the Levi identity, but this requires the use of negation, which rules out some non-classical logics [33].",
      "startOffset" : 201,
      "endOffset" : 205
    }, {
      "referenceID" : 21,
      "context" : "In [22] some AGM postulates are interpreted in terms of minimal change, in the sense that the models of the revision should be as close as possible, according to some metric, to the models of the initial knowledge set.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 32,
      "context" : "Recently, both for contraction and revision, generalizations of the AGM theory have been proposed in the framework of Tarskian Logics considering minimality criteria on removed formulas [33,34].",
      "startOffset" : 186,
      "endOffset" : 193
    }, {
      "referenceID" : 33,
      "context" : "Recently, both for contraction and revision, generalizations of the AGM theory have been proposed in the framework of Tarskian Logics considering minimality criteria on removed formulas [33,34].",
      "startOffset" : 186,
      "endOffset" : 193
    }, {
      "referenceID" : 17,
      "context" : "We propose here to generalize AGM revision but in an abstract model theory, satisfaction systems [18,25], which formalizes the intuitive notion of logical system, including syntax, semantics and the satisfaction relation.",
      "startOffset" : 97,
      "endOffset" : 104
    }, {
      "referenceID" : 24,
      "context" : "We propose here to generalize AGM revision but in an abstract model theory, satisfaction systems [18,25], which formalizes the intuitive notion of logical system, including syntax, semantics and the satisfaction relation.",
      "startOffset" : 97,
      "endOffset" : 104
    }, {
      "referenceID" : 21,
      "context" : "Then, we propose to generalize to any satisfaction system the approach developed in [22] for propositional logic and in [29] for description logics.",
      "startOffset" : 84,
      "endOffset" : 88
    }, {
      "referenceID" : 28,
      "context" : "Then, we propose to generalize to any satisfaction system the approach developed in [22] for propositional logic and in [29] for description logics.",
      "startOffset" : 120,
      "endOffset" : 124
    }, {
      "referenceID" : 13,
      "context" : "In this abstract framework, we will also show how to define revision operators from the relaxation notion that has been introduced in description logics to define dissimilarity measures between concepts [14,15] and",
      "startOffset" : 203,
      "endOffset" : 210
    }, {
      "referenceID" : 14,
      "context" : "In this abstract framework, we will also show how to define revision operators from the relaxation notion that has been introduced in description logics to define dissimilarity measures between concepts [14,15] and",
      "startOffset" : 203,
      "endOffset" : 210
    }, {
      "referenceID" : 8,
      "context" : "[9,24,28,20].",
      "startOffset" : 0,
      "endOffset" : 12
    }, {
      "referenceID" : 23,
      "context" : "[9,24,28,20].",
      "startOffset" : 0,
      "endOffset" : 12
    }, {
      "referenceID" : 27,
      "context" : "[9,24,28,20].",
      "startOffset" : 0,
      "endOffset" : 12
    }, {
      "referenceID" : 19,
      "context" : "[9,24,28,20].",
      "startOffset" : 0,
      "endOffset" : 12
    }, {
      "referenceID" : 32,
      "context" : "The first efforts concentrated on the adaptation of contraction postulates, but more recently, the adaptation of revision postulates and the introduction of new minimality criteria were also addressed [33], not necessarily related to the contraction operator, throwing out the need for negation.",
      "startOffset" : 201,
      "endOffset" : 205
    }, {
      "referenceID" : 27,
      "context" : "One can find in [28] an attempt to adapt the AGM revision postulates to DL in a model-theoretic way, following the seminal work of [22] that translated the AGM postulates in propositional logic semantics.",
      "startOffset" : 16,
      "endOffset" : 20
    }, {
      "referenceID" : 21,
      "context" : "One can find in [28] an attempt to adapt the AGM revision postulates to DL in a model-theoretic way, following the seminal work of [22] that translated the AGM postulates in propositional logic semantics.",
      "startOffset" : 131,
      "endOffset" : 135
    }, {
      "referenceID" : 24,
      "context" : "Satisfaction systems [25] (“rooms\" in the terminology of [18]) generalize Tarski’s classical “semantic definition of truth” [37] and Barwise’s “Translation Axiom” [4].",
      "startOffset" : 21,
      "endOffset" : 25
    }, {
      "referenceID" : 17,
      "context" : "Satisfaction systems [25] (“rooms\" in the terminology of [18]) generalize Tarski’s classical “semantic definition of truth” [37] and Barwise’s “Translation Axiom” [4].",
      "startOffset" : 57,
      "endOffset" : 61
    }, {
      "referenceID" : 36,
      "context" : "Satisfaction systems [25] (“rooms\" in the terminology of [18]) generalize Tarski’s classical “semantic definition of truth” [37] and Barwise’s “Translation Axiom” [4].",
      "startOffset" : 124,
      "endOffset" : 128
    }, {
      "referenceID" : 3,
      "context" : "Satisfaction systems [25] (“rooms\" in the terminology of [18]) generalize Tarski’s classical “semantic definition of truth” [37] and Barwise’s “Translation Axiom” [4].",
      "startOffset" : 163,
      "endOffset" : 166
    }, {
      "referenceID" : 18,
      "context" : "There is an extension of satisfaction systems that takes into account explicitly the notion of signatures, the theory of institutions [19].",
      "startOffset" : 134,
      "endOffset" : 138
    }, {
      "referenceID" : 37,
      "context" : "Here, we prefer the notation Cn(T ) because it will allow us to make a connection with the abstraction of logics as defined by Tarski [38] and widely used in works dealing with belief change such as revision, expansion or contraction.",
      "startOffset" : 134,
      "endOffset" : 138
    }, {
      "referenceID" : 12,
      "context" : "The two functions Mod(_) and _ form what is known as a Galois connection in that they satisfy the following properties: for all T, T ′ ⊆ Sen and M,M ⊆ Mod, we have (see [13])",
      "startOffset" : 169,
      "endOffset" : 173
    }, {
      "referenceID" : 37,
      "context" : "Hence, satisfaction systems are Tarskian according to the definition of logics given by Tarski under which a logic is a pair (L, Cn) where L is a set of expressions (formulas) and Cn : P(L) → P(L) is a mapping that satisfies the inclusion, iteration and monotonicity properties [38].",
      "startOffset" : 278,
      "endOffset" : 282
    }, {
      "referenceID" : 21,
      "context" : "We build upon the model-theoretic characterization introduced by Katsuno and Mendelzon (KM) [22] for propositional logic.",
      "startOffset" : 92,
      "endOffset" : 96
    }, {
      "referenceID" : 21,
      "context" : "In the literature such as in [22,29], the following stronger version of Postulate (G4) can be found:",
      "startOffset" : 29,
      "endOffset" : 36
    }, {
      "referenceID" : 28,
      "context" : "In the literature such as in [22,29], the following stronger version of Postulate (G4) can be found:",
      "startOffset" : 29,
      "endOffset" : 36
    }, {
      "referenceID" : 21,
      "context" : "In [22], the authors bypass the problem by representing any knowledge base K (which is a theory in [22]) by a propositional formula ψ such that K = Cn(ψ).",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 21,
      "context" : "In [22], the authors bypass the problem by representing any knowledge base K (which is a theory in [22]) by a propositional formula ψ such that K = Cn(ψ).",
      "startOffset" : 99,
      "endOffset" : 103
    }, {
      "referenceID" : 21,
      "context" : "The definition of FA differs from the one originally given in [22] on two points:",
      "startOffset" : 62,
      "endOffset" : 66
    }, {
      "referenceID" : 21,
      "context" : "(1) In [22], a third condition is stated:",
      "startOffset" : 7,
      "endOffset" : 11
    }, {
      "referenceID" : 34,
      "context" : "[35] for debugging of terminologies, or [31] for base revision for ontology debugging, both in description logics.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 30,
      "context" : "[35] for debugging of terminologies, or [31] for base revision for ontology debugging, both in description logics.",
      "startOffset" : 40,
      "endOffset" : 44
    }, {
      "referenceID" : 13,
      "context" : "Relaxations have been introduced in [14,15] in the framework of description logics with the aim of defining dissimilarity between concepts.",
      "startOffset" : 36,
      "endOffset" : 43
    }, {
      "referenceID" : 14,
      "context" : "Relaxations have been introduced in [14,15] in the framework of description logics with the aim of defining dissimilarity between concepts.",
      "startOffset" : 36,
      "endOffset" : 43
    }, {
      "referenceID" : 6,
      "context" : "’s works in [7,8] on Morpho-Logics, we define relaxations based on dilations from mathematical morphology [6].",
      "startOffset" : 12,
      "endOffset" : 17
    }, {
      "referenceID" : 7,
      "context" : "’s works in [7,8] on Morpho-Logics, we define relaxations based on dilations from mathematical morphology [6].",
      "startOffset" : 12,
      "endOffset" : 17
    }, {
      "referenceID" : 5,
      "context" : "’s works in [7,8] on Morpho-Logics, we define relaxations based on dilations from mathematical morphology [6].",
      "startOffset" : 106,
      "endOffset" : 109
    }, {
      "referenceID" : 5,
      "context" : "First, let us recall basic definitions of dilation in mathematical morphology [6].",
      "startOffset" : 78,
      "endOffset" : 81
    }, {
      "referenceID" : 13,
      "context" : "To ensure the exhaustivity condition to our relaxation, we need to add a condition on distances, the betweenness property [14].",
      "startOffset" : 122,
      "endOffset" : 126
    }, {
      "referenceID" : 11,
      "context" : "[12] to have an overview on these works).",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 6,
      "context" : "4 Hence, dilation of formulas could also be defined by using a distance ball of radius n as structuring element [7].",
      "startOffset" : 112,
      "endOffset" : 115
    }, {
      "referenceID" : 13,
      "context" : "3, relaxation has been introduced in [14,15].",
      "startOffset" : 37,
      "endOffset" : 44
    }, {
      "referenceID" : 14,
      "context" : "3, relaxation has been introduced in [14,15].",
      "startOffset" : 37,
      "endOffset" : 44
    }, {
      "referenceID" : 13,
      "context" : "In [14,15], concept relaxation is defined as follows: Definition 10 (Concept relaxation).",
      "startOffset" : 3,
      "endOffset" : 10
    }, {
      "referenceID" : 14,
      "context" : "In [14,15], concept relaxation is defined as follows: Definition 10 (Concept relaxation).",
      "startOffset" : 3,
      "endOffset" : 10
    }, {
      "referenceID" : 14,
      "context" : "Note that the non-decreasingness property in the original definition of a concept relaxation in [15] is removed here, since it is not needed in our construction.",
      "startOffset" : 96,
      "endOffset" : 100
    }, {
      "referenceID" : 27,
      "context" : "A similar construction can be found in [28] for sentences of the form (a : C).",
      "startOffset" : 39,
      "endOffset" : 43
    }, {
      "referenceID" : 35,
      "context" : "This operator is particularly interesting for debugging ontologies expressed in EL [36].",
      "startOffset" : 83,
      "endOffset" : 87
    }, {
      "referenceID" : 27,
      "context" : "Let us illustrate this operator through the following example adapted from [28] to restrict the language to EL.",
      "startOffset" : 75,
      "endOffset" : 79
    }, {
      "referenceID" : 13,
      "context" : "Other non-trivial EL-concept description relaxations have been introduced in [14].",
      "startOffset" : 77,
      "endOffset" : 81
    }, {
      "referenceID" : 2,
      "context" : "EL concept descriptions can appropriately be represented as labeled trees, often called EL description trees [3].",
      "startOffset" : 109,
      "endOffset" : 112
    }, {
      "referenceID" : 13,
      "context" : "Two relaxations can hence be defined [14]: (i) ρdepth that reduces the role depth of each concept by 1, simply by pruning the description tree, and (ii) ρleaves that removes all leaves from a description tree.",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 13,
      "context" : "A relaxation operator as introduced in [14] requires a concept description to be in a special normal form, called normal form with grouping of existentials, defined recursively as follows.",
      "startOffset" : 39,
      "endOffset" : 43
    }, {
      "referenceID" : 13,
      "context" : "Definition 15 (Relaxation from normal form [14]).",
      "startOffset" : 43,
      "endOffset" : 47
    }, {
      "referenceID" : 13,
      "context" : "[14] ρe is a relaxation.",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 13,
      "context" : "For more details on the correspondence between this relaxation operator, the set of models and tree edit distances, one can refer to [14].",
      "startOffset" : 133,
      "endOffset" : 137
    }, {
      "referenceID" : 27,
      "context" : "A similar construction has been introduced in [28].",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 19,
      "context" : "Interestingly enough, almost all the operators defined in [20,28] are relaxations.",
      "startOffset" : 58,
      "endOffset" : 65
    }, {
      "referenceID" : 27,
      "context" : "Interestingly enough, almost all the operators defined in [20,28] are relaxations.",
      "startOffset" : 58,
      "endOffset" : 65
    }, {
      "referenceID" : 19,
      "context" : "Another possibility, suggested in [20] and related to operators defined in propositional logic as introduced in [7], consists in applying the retraction at the atomic level.",
      "startOffset" : 34,
      "endOffset" : 38
    }, {
      "referenceID" : 6,
      "context" : "Another possibility, suggested in [20] and related to operators defined in propositional logic as introduced in [7], consists in applying the retraction at the atomic level.",
      "startOffset" : 112,
      "endOffset" : 115
    }, {
      "referenceID" : 9,
      "context" : "This captures somehow Dalal’s idea of revision operators in propositional logic [10].",
      "startOffset" : 80,
      "endOffset" : 84
    }, {
      "referenceID" : 6,
      "context" : "Let us define, as in the propositional case [7], κp(D) = dn j=1( ⊔",
      "startOffset" : 44,
      "endOffset" : 47
    }, {
      "referenceID" : 6,
      "context" : "concept (see [7] for properties of this operator).",
      "startOffset" : 13,
      "endOffset" : 16
    }, {
      "referenceID" : 19,
      "context" : "This idea has been sketched in [20] for defining dilation operators (then by transforming ∀ into ∃), i.",
      "startOffset" : 31,
      "endOffset" : 35
    }, {
      "referenceID" : 13,
      "context" : "special relaxation operators enjoying additional properties [14].",
      "startOffset" : 60,
      "endOffset" : 64
    }, {
      "referenceID" : 6,
      "context" : "Define, as in the propositional case [7], ρp(D) = ⊔n j=1( d i 6=j Ei), then ρDalal(C) = Q1r1 · · ·Qmrm.",
      "startOffset" : 37,
      "endOffset" : 40
    }, {
      "referenceID" : 27,
      "context" : "Let us consider another example adapted from the literature to illustrate these operators [28].",
      "startOffset" : 90,
      "endOffset" : 94
    }, {
      "referenceID" : 6,
      "context" : "The properties of ρDalal and ρ∪ are directly derived from the definitions and from properties of ρp detailed in [7] and ρE .",
      "startOffset" : 112,
      "endOffset" : 115
    }, {
      "referenceID" : 19,
      "context" : "The proof of ρq being extensive and exhaustive can be found in [20].",
      "startOffset" : 63,
      "endOffset" : 67
    }, {
      "referenceID" : 32,
      "context" : "Recently a first generalization of AGM revision has been proposed in the framework of Tarskian logics considering minimality criteria on removed formulas [33] following previous works of the same authors for contraction [34].",
      "startOffset" : 154,
      "endOffset" : 158
    }, {
      "referenceID" : 33,
      "context" : "Recently a first generalization of AGM revision has been proposed in the framework of Tarskian logics considering minimality criteria on removed formulas [33] following previous works of the same authors for contraction [34].",
      "startOffset" : 220,
      "endOffset" : 224
    }, {
      "referenceID" : 21,
      "context" : "2 that revision operators satisfying Postulates (G1)-(G6) are precisely the ones that accomplish an update with minimal change to the set of models of knowledge bases, generalizing to any institution the approach developed in [22] for the logic PL and [29] for DL.",
      "startOffset" : 226,
      "endOffset" : 230
    }, {
      "referenceID" : 28,
      "context" : "2 that revision operators satisfying Postulates (G1)-(G6) are precisely the ones that accomplish an update with minimal change to the set of models of knowledge bases, generalizing to any institution the approach developed in [22] for the logic PL and [29] for DL.",
      "startOffset" : 252,
      "endOffset" : 256
    }, {
      "referenceID" : 32,
      "context" : "Our property (Relevance) is similar to the property with the same name in [33,34], but for contraction operators, and that states that only the formulas that somehow “contribute” to derive the formulas to abandon can be removed.",
      "startOffset" : 74,
      "endOffset" : 81
    }, {
      "referenceID" : 33,
      "context" : "Our property (Relevance) is similar to the property with the same name in [33,34], but for contraction operators, and that states that only the formulas that somehow “contribute” to derive the formulas to abandon can be removed.",
      "startOffset" : 74,
      "endOffset" : 81
    }, {
      "referenceID" : 6,
      "context" : "The relaxation idea originates from the work on Morpho-Logics, initially introduced in [7,8].",
      "startOffset" : 87,
      "endOffset" : 92
    }, {
      "referenceID" : 7,
      "context" : "The relaxation idea originates from the work on Morpho-Logics, initially introduced in [7,8].",
      "startOffset" : 87,
      "endOffset" : 92
    }, {
      "referenceID" : 19,
      "context" : "Dilation has been further exploited for merging first-order theories in [20].",
      "startOffset" : 72,
      "endOffset" : 76
    }, {
      "referenceID" : 0,
      "context" : "In [1], the notion of partial meet contraction is defined as the intersection of a non empty family of maximal subsets of the theory than do not imply the proposition to be eliminated.",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 20,
      "context" : "In [21], the author also discusses choice functions and compares the postulates for partial meet revision to the AGM postulates.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 8,
      "context" : "A permissive belief revision is defined in [9], based on the notion of weakening.",
      "startOffset" : 43,
      "endOffset" : 46
    }, {
      "referenceID" : 23,
      "context" : "While most of them concentrated on the adaptation of AGM theory, few works have addressed the definition of concrete operators [24,27,28,26].",
      "startOffset" : 127,
      "endOffset" : 140
    }, {
      "referenceID" : 26,
      "context" : "While most of them concentrated on the adaptation of AGM theory, few works have addressed the definition of concrete operators [24,27,28,26].",
      "startOffset" : 127,
      "endOffset" : 140
    }, {
      "referenceID" : 27,
      "context" : "While most of them concentrated on the adaptation of AGM theory, few works have addressed the definition of concrete operators [24,27,28,26].",
      "startOffset" : 127,
      "endOffset" : 140
    }, {
      "referenceID" : 25,
      "context" : "While most of them concentrated on the adaptation of AGM theory, few works have addressed the definition of concrete operators [24,27,28,26].",
      "startOffset" : 127,
      "endOffset" : 140
    }, {
      "referenceID" : 23,
      "context" : "For instance, in [24], based on the seminal work in [5], revision in DL is studied by defining strategies to manage inconsistencies and using the notion of knowledge integration (see also the work by Hansson).",
      "startOffset" : 17,
      "endOffset" : 21
    }, {
      "referenceID" : 4,
      "context" : "For instance, in [24], based on the seminal work in [5], revision in DL is studied by defining strategies to manage inconsistencies and using the notion of knowledge integration (see also the work by Hansson).",
      "startOffset" : 52,
      "endOffset" : 55
    }, {
      "referenceID" : 26,
      "context" : "In [27], weakening operators, that are in fact relaxation operators, are defined.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 25,
      "context" : "In [26], revision of ontologies in DL is based on the notion of forgetting, which is also a way to manage inconsistencies.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 22,
      "context" : "In [23], updating Aboxes in DL is discussed, and some operators are introduced.",
      "startOffset" : 3,
      "endOffset" : 7
    }, {
      "referenceID" : 1,
      "context" : "In [2] an original use of DL revision is introduced for the orchestration of processes.",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 34,
      "context" : "[35,36]), with the main difference that the rationality of inconsistency repairing operators is not investigated, as suggested by the AGM theory.",
      "startOffset" : 0,
      "endOffset" : 7
    }, {
      "referenceID" : 35,
      "context" : "[35,36]), with the main difference that the rationality of inconsistency repairing operators is not investigated, as suggested by the AGM theory.",
      "startOffset" : 0,
      "endOffset" : 7
    }, {
      "referenceID" : 27,
      "context" : "As said before, some of our DL-based relaxation operators are closely related to the ones introduced in [28] for knowledge bases revision.",
      "startOffset" : 104,
      "endOffset" : 108
    }, {
      "referenceID" : 27,
      "context" : "Moreover, the revision operator defined in [28] considers only inconsistencies due to Abox assertions.",
      "startOffset" : 43,
      "endOffset" : 47
    } ],
    "year" : 2017,
    "abstractText" : "Belief revision of knowledge bases represented by a set of sentences in a given logic has been extensively studied but for specific logics, mainly propositional, and also recently Horn and description logics. Here, we propose to generalize this operation from a modeltheoretic point of view, by defining revision in an abstract model theory known under the name of satisfaction systems. In this framework, we generalize to any satisfaction systems the characterization of the well known AGM postulates given by Katsuno and Mendelzon for propositional logic in terms of minimal change among interpretations. Moreover, we study how to define revision, satisfying the AGM postulates, from relaxation notions that have been first introduced in description logics to define dissimilarity measures between concepts, and the consequence of which is to relax the set of models of the old belief until it becomes consistent with the new pieces of knowledge. We show how the proposed general framework can be instantiated in different logics such as propositional, first-order, description and Horn logics. In particular for description logics, we introduce several concrete relaxation operators tailored for the description logic ALC and its fragments EL and ELU , discuss their properties and provide some illustrative examples.",
    "creator" : "LaTeX with hyperref package"
  }
}