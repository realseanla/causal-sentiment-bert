{
  "name" : "1509.06589.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Graph Kernels exploiting Weisfeiler-Lehman Graph Isomorphism Test Extensions",
    "authors" : [ "Giovanni Da San Martino", "Nicolò Navarin", "Alessandro Sperduti" ],
    "emails" : [ "dasan@math.unipd.it", "nnavarin@math.unipd.it", "sperduti@math.unipd.it" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "In many real world learning problems, input data are naturally represented as graphs [18][20]. A typical approach for solving machine learning tasks on structured data is to project the input data onto a vectorial feature space and then perform learning on such space. Ideally, a good projection should ensure nonisomorphic data to be represented by different vectors in feature space, i.e. to be injective. When high dimensional data, such as graphs, is involved, specific challenges arise, especially from the computational point of view.\nKernel methods are considered to be among the most successful machine learning techniques for structured data. They replace the explicit projection in feature space with the evaluation of a symmetric semidefinite positive similarity function, called the kernel function. A major advantage of kernel methods is that very large, possibly infinite, feature spaces can be utilized by the learning algorithm with a computational burden dependent on the complexity of the kernel function and not on the size of the feature space. Unfortunately, any kernel function for graphs, whose correspondent feature space projection is injective, is as hard to compute as deciding whether two graphs are isomorphic [8], which is believed to be a NP-Hard problem.\nAs a consequence, in order to have computationally tractable kernel functions for graph data, a certain amount of information loss is inevitable. Most kernel functions for graphs associate specific types of substructures to features. The evaluation of the kernel function is then related to the number of common substructures between two input graphs. Such substructures include walks [11] [12] [16], paths [1] [9], specific types of subgraphs [3] [15] and tree structures [5]. Such kernels, with the exception of the ones in [5] and [9], are computationally too demanding to be used with large datasets and are effective when the correspondent features are relevant for the current task. Recently, the Fast Subtree\nar X\niv :1\n50 9.\n06 58\n9v 1\n[ cs\n.L G\n] 2\n2 Se\np 20\nKernel has been proposed [14]. It has linear complexity (in the number of edges) and its features are subtree patterns of the input graphs. The kernel computes a rough approximation of the one-dimensional Weisfeiler-Lehman isomorphism test [19], with the explicit goal of being fast to compute.\nIn this paper we present two kernel functions for graphs inspired by extensions of the Weisfeiler-Lehman isomorphism test. We define kernels whose feature space is much larger than the Fast Subtree Kernel with a modest increase in computational complexity."
    }, {
      "heading" : "2 Weisfeiler-Lehman Isomorphism Test and Extensions",
      "text" : "Some notation is first introduced. A graph is a triplet G = (V,E,L), where V is the set of nodes and |V | its cardinality, E the set of edges and L() a function returning the label of a node. A graph is undirected if (vi, vj) ∈ E ⇔ (vj , vi) ∈ E, otherwise it is directed. A path of length n−1 in a graph is a sequence of distinct nodes v1, . . . , vn such that (vi, vi + 1) ∈ E for 1 ≤ i < n ; if v1 = vn the path is a cycle. The distance d(vi, vj) between the nodes vi, vj is the length of any shortest path connecting them.\nWe can now describe the Weisfeiler-Lehman isomorphism test and a few extensions [2] [6], which are all based on a relabelling process of the nodes of a graph G = (V,E,L). We introduce two functions which, instantiated, determine the isomorphism test: π(G, v), where v ∈ V , and h() with the constraint that the codomain of π(G, v) must coincide with the domain of h(). The role of π(G, v) is to extract specific information from G: for example in the onedimensional WL (1-dim WL) test π(G, v) extracts the set of neighboring nodes of v: π(G, v) = {u|u ∈ V, d(u, v) = 1}. The function h() associates a unique numerical value (colour in the mathematical jargon) to each π(G, v) and h(π(G, v)) will be used as novel label for v. In order for h() to be well defined, a canonical representation for elements in its domain has to be defined, which practically boils down to defining a partial ordering between π(G, v) elements. For example, in the 1-dim WL test the elements of π(G, v) are sorted alphabetically according to their labels.\nThe algorithm for computing the isomorphism test proceeds by iteratively relabelling G nodes by means of a family of functions Liπ():\nLiπ(v) = h(π(Gi−1, v)), (1)\nwhere G0 = (V,E,L) and Gi = (V,E,Liπ) for i > 0. The functions Liπ(v) are constructed for all i ≤ i∗, where i∗ is the lowest index for which, ∀v ∈ V , Li ∗ π (v) = Li ∗+1 π (v). Note that i∗ ≤ |V | for the 1-dim WL test [13]. By applying the relabelling in eq. (1) to graphs G and G′, we obtain two multisets of node labels: {Li∗π (v)|v ∈ V } and {Lj ∗\nπ (v′)|v′ ∈ V ′}. If such multisets are different, then the two graphs are not isomorphic. On the contrary, if the two multisets are identical, there is not enough information to tell whether the two graphs are isomorphic.\nExtensions to the 1-dim WL test have been proposed to increase the discriminative power of the test. Their idea is to enrich the type of information used in the relabelling phase [6], [13]. The extension proposed by Miyazaki [13] considers the colour of the nodes up to distance K: π(G, v) = {(l, u)|u ∈ V, d(v, u) = l ≤ K}; π(G, v) elements, i.e. the tuples (l, u), are ordered according to the relation (l, u) < (l′, u′) ⇔ l < l′∨ (l = l′ ∧ Lπ(u) < Lπ(u′)), where Lπ() is a generic labelling function. In the extension of Oliveira et al. [6], h() is defined on paths, which are ordered according to the sequence of labels of the nodes in the path. Specifically, π(G, v) extracts, for each u ∈ V , the shortest path between v, u having lower h() value: let s(v, u) be the set of shortest paths connecting u and v, π(G, v) = ∪u∈V arg minp∈s(v,u) h(p)."
    }, {
      "heading" : "3 Weisfeiler-Lehman kernel framework",
      "text" : "Let us consider a function πr(G, v) depending on a parameter r, with 1 ≤ r ≤ K. Given a graph G = (V,E,L), the application of eq. (1), for a fixed r value at the i-th iteration, yields the graph Gir = G(V,E,Liπr ), which differs from the original graph only in the labelling function. Definition 1. Let k() be any kernel for graphs that we will refer to as the base kernel. Then the Extended Weisfeiler-Lehman kernel with h iterations, depth K and base kernel k() is defined as:\nWLKh (G,G′) = K∑ r=1 h∑ i=0 k(Gir, G ′i r ). (2)\nSince the functions in eq. (1) are well defined and the Extended WeisfeilerLehman kernel of eq. (2) is a finite sum of positive semidefinite functions, it is also positive semidefinite.\nLet us now present the main contribution of the paper, i.e. two novel kernels which are instances of eq. (2). For both kernels the function π(G, v) returns the following Directed Acyclic Graph (DAG) rooted at v: Dr(v) = (Vr, Er, L) where Vr = {u ∈ V |d(v, u) ≤ r} and Er consists in all edges of G that appear in any of the shortest path connecting v and any u ∈ Vr (see Fig. 1-b for an example). In order to have a canonical representation for the DAG Dr(v), the ordering for DAG nodes described in [5] is used. The function h() assigns a unique numerical value to each DAG, and it can be implemented efficiently as presented in [4]. Let the maximum number of nodes of each DAG Dr(v) be |Dr|. Then it can be shown that |Dr| is O(ρr) [5], where ρ is the maximum node outdegree. Computing all the indices Liπr () for a graph G has worst-case time complexity O(|Dr||V | log |Dr||V |) (see [5] for details). Assuming ρ constant (a condition that usually holds in real-world datasets) the worst-case time complexity reduces to O(|V | log |V |).\nIn the first proposed kernel, that we will refer to as WLNS−DDK , the base kernel is defined as\nk(Gir, G ′i r ) = ∑ v∈V ∑ v′∈V ′ δ(Liπr (v), L i πr (v ′)), (3)\nwhere δ is the Kronecker’s delta function. Note that computing the kernel is equivalent to performing a hard match between the DAGs encoded by Liπr (v) and Liπr (v ′). If we order the list of indices {Liπr (v)|v ∈ V } and {L i πr (v\n′)|v′ ∈ V ′}, then eq. (3) can be computed in O(|V | log |V |) time.\nThe second kernel we propose, referred to as WLDDK , differs from the first one only in the base kernel k(). Let T (v) be the function that, first computes the DAG πr(G, v) and then returns the tree resulting from the breadth-first visit of the DAG starting from v (see Fig. 1-c for an example). Finally, k() can be defined as any kernel for trees applied to T (v) and T (v′), for example the subtree kernel (ST) [17]:\nk(v, v′) = ∑ v∈V ∑ v′∈V ′ kST (T (v), T (v′)). (4)\nThe ST kernel counts the number of matching proper subtrees of T (v) and T (v′), where a proper subtree of a tree T rooted at u is the subtree composed by u and all of its descendants (in Fig. 1-d are listed the set of proper subtrees of the tree in Fig. 1-c). The complexity of kST (T, T ′) is O(n logn) where n = min(|T |, |T ′|). Assuming ρ constant, O(|T (v)|) = O(|Dr(v)|). By using the algorithm described in [5], the complexity of computing eq. (4) is O(|V | log |V |).\nThere are a number of kernels in literature that are instances of eq. (2). The Fast Subtree Kernel (FS) counts the number of identical subtree patterns of depth h [14]. It can be obtained from eq. (2) by setting: i) K = 1; ii) π(G, v) = {u|u ∈ V, d(v, u) = 1} and then ordering π(G, v) elements alphabetically according to their labels; iii) the base kernel k() is the one in eq. (3). The ODD-STh, described in [5], is an instance of the WLDDK of eq.(4) and it is obtained setting h = 0 in eq. (2)."
    }, {
      "heading" : "4 Experimental results",
      "text" : "In this section, we compare the two kernels presented in Section 3 against other state-of-the-art kernels on five real-world datasets.\nWe considered the Fast Subtree kernel [14], the ODD-STh kernel [5] (described in section 3) and the NSPDK kernel [3] , that computes the exact matches between pairs of subgraphs with controlled size and distance. For the assessment of the performance of the proposed kernels, we considered five real-world\ndatasets: CAS1, CPDB [10], AIDS [20], NCI1 [18] and GDD [7]. All the datasets represent binary classification problems. The first four datasets involve chemical compounds, represented as graphs where the nodes represent the atoms (labelled according to the atom type) and the edges the bonds between them. In chemical compounds, there are no self-loops. GDD is a dataset of proteins, where each protein is represented by a graph, in which the nodes are amino acids and two nodes are connected by an edge if they are less than 6◦ Angstroms apart. CAS and NCI1 are the largest datasets, with 4337 and 4110 examples, respectively. For more information about the datasets, please refer to [5].\nAll the kernels have been employed together with a Support Vector Machine. The C parameter of the SVM has been selected in the set {0.01, 0.1, 1, 10, 100}. For all the experiments, the values of the parameters of the ODD-STh kernel have been restricted to: h = {1, 2, . . . , 8} λ = {0.1, 0.2, . . . , 2.0} (λ is a parameter of KST ); for the Fast Subtree Kernel we optimized the only parameter of the kernel h = {1, 2, . . . , 10} ; for the NSPDK kernel we optimized the parameters r = {1, 2, . . . , 8} and d = {1, 2, . . . , 8}. Concerning the two kernels presented in this article, their parameters are K = {1, 2, 3, 4} , h = {0, 1, 2, . . . , 8} and λ = {0.1, 0.2, . . . , 2.0}. The parameters range has been selected in such a way that the computational time needed for the calculation of the kernel matrices is roughly comparable, i.e. at most one hour on a modern PC. For parameter selection we adopt a technique commonly referred to as nested K-fold cross validation following [14]. All the experiments have been repeated 10 times and the average results (with standard deviation) are reported.\nTable 1 summarizes the average accuracy results of the proposed kernels and the state-of-the-art ones on the considered datasets. The mean accuracy is reported with the standard deviation. Between brackets, the ranking of the\n1 http://www.cheminformatics.org/datasets/bursi\nspecific kernel on the dataset is reported. In the rightmost column, the average ranking value on all the datasets for each kernel is reported. When considering single datasets, there is no dataset where NSPDK or FS kernels rank first. On all the considered datasets, either WLNS−DDK or WLDDK outperforms the other kernels. If we look at the average ranking, the situation is clearer. The best average ranking of the competing kernels is the one of NSPDK, with a value of 3.2. The WLNS−DDK has an average ranking of 2. WLDDK performs slightly better, with an average ranking value of 1.8. These results clearly show that, on the considered datasets, theWL kernel family performs better than the other kernels present in literature.\nFigure 2 reports the computational time, in seconds, needed from the WLNS−DDK kernel and the competing ones to compute the Gram matrix for the NCI1 dataset. The computation time required by WLDDK is very similar and thus omitted."
    }, {
      "heading" : "5 Conclusions and future work",
      "text" : "This paper proposed a new framework for the definition of graph kernels based on a generalization of the 1-dimensional WL test. The framework can be instantiated with any kernel for graphs as a base kernel. In particular, we analyzed two instances inspired by the Decompositional DAGs graph kernels [5]. The two kernels show state-of-the-art predictive performance on five real-world datasets, with a computational burden that, on such datasets, grows only linearly with re-\nspect to the kernel parameters. As a future work, we will explore other members of the framework.\nAcknowledgments. This work was supported by the University of Padova under the strategic project BIOINFOGEN."
    } ],
    "references" : [ {
      "title" : "Shortest-Path Kernels on Graphs",
      "author" : [ "K.M. Borgwardt", "H.-P. Kriegel" ],
      "venue" : "ICDM, pages 74–81,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "An optimal lower bound on the number of variables for graph identification",
      "author" : [ "J.-Y. Cai", "M. Furer", "N. Immerman" ],
      "venue" : "Combinatorica, 12(4):389–410, Dec.",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 1992
    }, {
      "title" : "Fast neighborhood subgraph pairwise distance kernel",
      "author" : [ "F. Costa", "K. De Grave" ],
      "venue" : "In ICML,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Martino, N",
      "author" : [ "G. Da Sa" ],
      "venue" : "Navarin, and A. Sperduti. A memory efficient graph kernel. In The 2012 International Joint Conference on Neural Networks (IJCNN). Ieee, June",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Martino, N",
      "author" : [ "G. Da Sa" ],
      "venue" : "Navarin, and A. Sperduti. A Tree-Based Kernel for Graphs. SDM, pages 975–986,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "A new refinement procedure for graph isomorphism algorithms",
      "author" : [ "M. de Oliveira Oliveira", "F. Greve" ],
      "venue" : "Electronic Notes in Discrete Mathematics,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2005
    }, {
      "title" : "Distinguishing Enzyme Structures from Non-enzymes Without Alignments",
      "author" : [ "P.D. Dobson", "A.J. Doig" ],
      "venue" : "Journal of Molecular Biology, 330(4):771–783,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "On Graph Kernels : Hardness Results and Efficient Alternatives",
      "author" : [ "T. Gartner", "P. Flach", "S. Wrobel" ],
      "venue" : "Lecture notes in computer science, pages 129–143,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "Efficient Path Kernels for Reaction Function Prediction",
      "author" : [ "M. Heinonen", "N. Välimäki", "V. Mäkinen", "J. Rousu" ],
      "venue" : "Bioinformatics Models, Methods and Algorithms,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Data mining and machine learning techniques for the identification of mutagenicity inducing substructures and structure activity relationships of noncongeneric compounds",
      "author" : [ "C. Helma", "T. Cramer", "S. Kramer", "L. De Raedt" ],
      "venue" : "Journal of chemical information and computer sciences, 44(4):1402–11,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Marginalized kernels between labeled graphs",
      "author" : [ "H. Kashima", "K. Tsuda", "A. Inokuchi" ],
      "venue" : "In ICML, pages 321–328. AAAI Press,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "Graph kernels based on tree patterns for molecules",
      "author" : [ "P. Mahé", "J.-P. Vert" ],
      "venue" : "Machine Learning, 75(1):3–35, Oct.",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "The complexity of McKay’s canonical labeling algorithm",
      "author" : [ "T. Miyazaki" ],
      "venue" : "Groups and Computation II,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "Fast subtree kernels on graphs",
      "author" : [ "N. Shervashidze", "K. Borgwardt" ],
      "venue" : "In NIPS, pages 1660–1668,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Efficient graphlet kernels for large graph comparison",
      "author" : [ "N. Shervashidze", "K. Mehlhorn", "T.H. Petri", "S.V.N. Vishwanathan", "K. Borgwardt" ],
      "venue" : "In AISTATS, volume 5, pages 488–495,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Fast Computation of Graph Kernels",
      "author" : [ "S.V.N. Vishwanathan", "K.M. Borgwardt", "N.N. Schraudolph" ],
      "venue" : "In NIPS, pages 1449–1456,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Fast Kernels for String and Tree Matching",
      "author" : [ "S.V.N. Vishwanathan", "A.J. Smola" ],
      "venue" : "In S. Becker, S. Thrun, and K. Obermayer, editors, NIPS, pages 569–576. MIT Press,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "Comparison of descriptor spaces for chemical compound retrieval and classification",
      "author" : [ "N. Wale", "I. Watson", "G. Karypis" ],
      "venue" : "Knowledge and Information Systems, 14(3):347–375,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "On construction and identification of graphs",
      "author" : [ "B. Weisfeiler" ],
      "venue" : "Lecture Notes in Mathematics,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 1976
    }, {
      "title" : "New soluble-formazan assay for HIV-1 cytopathic effects: application to high-flux screening of synthetic and natural products for AIDS-antiviral activity",
      "author" : [ "O.S. Weislow", "R. Kiser", "D.L. Fine", "J. Bader", "R.H. Shoemaker", "M.R. Boyd" ],
      "venue" : "Journal of the National Cancer Institute, 81(8):577–586,",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 1989
    } ],
    "referenceMentions" : [ {
      "referenceID" : 17,
      "context" : "In many real world learning problems, input data are naturally represented as graphs [18][20].",
      "startOffset" : 85,
      "endOffset" : 89
    }, {
      "referenceID" : 19,
      "context" : "In many real world learning problems, input data are naturally represented as graphs [18][20].",
      "startOffset" : 89,
      "endOffset" : 93
    }, {
      "referenceID" : 7,
      "context" : "Unfortunately, any kernel function for graphs, whose correspondent feature space projection is injective, is as hard to compute as deciding whether two graphs are isomorphic [8], which is believed to be a NP-Hard problem.",
      "startOffset" : 174,
      "endOffset" : 177
    }, {
      "referenceID" : 10,
      "context" : "Such substructures include walks [11] [12] [16], paths [1] [9], specific types of subgraphs [3] [15] and tree structures [5].",
      "startOffset" : 33,
      "endOffset" : 37
    }, {
      "referenceID" : 11,
      "context" : "Such substructures include walks [11] [12] [16], paths [1] [9], specific types of subgraphs [3] [15] and tree structures [5].",
      "startOffset" : 38,
      "endOffset" : 42
    }, {
      "referenceID" : 15,
      "context" : "Such substructures include walks [11] [12] [16], paths [1] [9], specific types of subgraphs [3] [15] and tree structures [5].",
      "startOffset" : 43,
      "endOffset" : 47
    }, {
      "referenceID" : 0,
      "context" : "Such substructures include walks [11] [12] [16], paths [1] [9], specific types of subgraphs [3] [15] and tree structures [5].",
      "startOffset" : 55,
      "endOffset" : 58
    }, {
      "referenceID" : 8,
      "context" : "Such substructures include walks [11] [12] [16], paths [1] [9], specific types of subgraphs [3] [15] and tree structures [5].",
      "startOffset" : 59,
      "endOffset" : 62
    }, {
      "referenceID" : 2,
      "context" : "Such substructures include walks [11] [12] [16], paths [1] [9], specific types of subgraphs [3] [15] and tree structures [5].",
      "startOffset" : 92,
      "endOffset" : 95
    }, {
      "referenceID" : 14,
      "context" : "Such substructures include walks [11] [12] [16], paths [1] [9], specific types of subgraphs [3] [15] and tree structures [5].",
      "startOffset" : 96,
      "endOffset" : 100
    }, {
      "referenceID" : 4,
      "context" : "Such substructures include walks [11] [12] [16], paths [1] [9], specific types of subgraphs [3] [15] and tree structures [5].",
      "startOffset" : 121,
      "endOffset" : 124
    }, {
      "referenceID" : 4,
      "context" : "Such kernels, with the exception of the ones in [5] and [9], are computationally too demanding to be used with large datasets and are effective when the correspondent features are relevant for the current task.",
      "startOffset" : 48,
      "endOffset" : 51
    }, {
      "referenceID" : 8,
      "context" : "Such kernels, with the exception of the ones in [5] and [9], are computationally too demanding to be used with large datasets and are effective when the correspondent features are relevant for the current task.",
      "startOffset" : 56,
      "endOffset" : 59
    }, {
      "referenceID" : 13,
      "context" : "Kernel has been proposed [14].",
      "startOffset" : 25,
      "endOffset" : 29
    }, {
      "referenceID" : 18,
      "context" : "The kernel computes a rough approximation of the one-dimensional Weisfeiler-Lehman isomorphism test [19], with the explicit goal of being fast to compute.",
      "startOffset" : 100,
      "endOffset" : 104
    }, {
      "referenceID" : 1,
      "context" : "We can now describe the Weisfeiler-Lehman isomorphism test and a few extensions [2] [6], which are all based on a relabelling process of the nodes of a graph G = (V,E,L).",
      "startOffset" : 80,
      "endOffset" : 83
    }, {
      "referenceID" : 5,
      "context" : "We can now describe the Weisfeiler-Lehman isomorphism test and a few extensions [2] [6], which are all based on a relabelling process of the nodes of a graph G = (V,E,L).",
      "startOffset" : 84,
      "endOffset" : 87
    }, {
      "referenceID" : 12,
      "context" : "Note that i∗ ≤ |V | for the 1-dim WL test [13].",
      "startOffset" : 42,
      "endOffset" : 46
    }, {
      "referenceID" : 5,
      "context" : "Their idea is to enrich the type of information used in the relabelling phase [6], [13].",
      "startOffset" : 78,
      "endOffset" : 81
    }, {
      "referenceID" : 12,
      "context" : "Their idea is to enrich the type of information used in the relabelling phase [6], [13].",
      "startOffset" : 83,
      "endOffset" : 87
    }, {
      "referenceID" : 12,
      "context" : "The extension proposed by Miyazaki [13] considers the colour of the nodes up to distance K: π(G, v) = {(l, u)|u ∈ V, d(v, u) = l ≤ K}; π(G, v) elements, i.",
      "startOffset" : 35,
      "endOffset" : 39
    }, {
      "referenceID" : 5,
      "context" : "[6], h() is defined on paths, which are ordered according to the sequence of labels of the nodes in the path.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 4,
      "context" : "In order to have a canonical representation for the DAG Dr(v), the ordering for DAG nodes described in [5] is used.",
      "startOffset" : 103,
      "endOffset" : 106
    }, {
      "referenceID" : 3,
      "context" : "The function h() assigns a unique numerical value to each DAG, and it can be implemented efficiently as presented in [4].",
      "startOffset" : 117,
      "endOffset" : 120
    }, {
      "referenceID" : 4,
      "context" : "Then it can be shown that |Dr| is O(ρ) [5], where ρ is the maximum node outdegree.",
      "startOffset" : 39,
      "endOffset" : 42
    }, {
      "referenceID" : 4,
      "context" : "Computing all the indices Liπr () for a graph G has worst-case time complexity O(|Dr||V | log |Dr||V |) (see [5] for details).",
      "startOffset" : 109,
      "endOffset" : 112
    }, {
      "referenceID" : 16,
      "context" : "Finally, k() can be defined as any kernel for trees applied to T (v) and T (v′), for example the subtree kernel (ST) [17]:",
      "startOffset" : 117,
      "endOffset" : 121
    }, {
      "referenceID" : 4,
      "context" : "By using the algorithm described in [5], the complexity of computing eq.",
      "startOffset" : 36,
      "endOffset" : 39
    }, {
      "referenceID" : 13,
      "context" : "The Fast Subtree Kernel (FS) counts the number of identical subtree patterns of depth h [14].",
      "startOffset" : 88,
      "endOffset" : 92
    }, {
      "referenceID" : 4,
      "context" : "The ODD-STh, described in [5], is an instance of the WLDDK of eq.",
      "startOffset" : 26,
      "endOffset" : 29
    }, {
      "referenceID" : 13,
      "context" : "We considered the Fast Subtree kernel [14], the ODD-STh kernel [5] (described in section 3) and the NSPDK kernel [3] , that computes the exact matches between pairs of subgraphs with controlled size and distance.",
      "startOffset" : 38,
      "endOffset" : 42
    }, {
      "referenceID" : 4,
      "context" : "We considered the Fast Subtree kernel [14], the ODD-STh kernel [5] (described in section 3) and the NSPDK kernel [3] , that computes the exact matches between pairs of subgraphs with controlled size and distance.",
      "startOffset" : 63,
      "endOffset" : 66
    }, {
      "referenceID" : 2,
      "context" : "We considered the Fast Subtree kernel [14], the ODD-STh kernel [5] (described in section 3) and the NSPDK kernel [3] , that computes the exact matches between pairs of subgraphs with controlled size and distance.",
      "startOffset" : 113,
      "endOffset" : 116
    }, {
      "referenceID" : 9,
      "context" : "datasets: CAS1, CPDB [10], AIDS [20], NCI1 [18] and GDD [7].",
      "startOffset" : 21,
      "endOffset" : 25
    }, {
      "referenceID" : 19,
      "context" : "datasets: CAS1, CPDB [10], AIDS [20], NCI1 [18] and GDD [7].",
      "startOffset" : 32,
      "endOffset" : 36
    }, {
      "referenceID" : 17,
      "context" : "datasets: CAS1, CPDB [10], AIDS [20], NCI1 [18] and GDD [7].",
      "startOffset" : 43,
      "endOffset" : 47
    }, {
      "referenceID" : 6,
      "context" : "datasets: CAS1, CPDB [10], AIDS [20], NCI1 [18] and GDD [7].",
      "startOffset" : 56,
      "endOffset" : 59
    }, {
      "referenceID" : 4,
      "context" : "For more information about the datasets, please refer to [5].",
      "startOffset" : 57,
      "endOffset" : 60
    }, {
      "referenceID" : 13,
      "context" : "For parameter selection we adopt a technique commonly referred to as nested K-fold cross validation following [14].",
      "startOffset" : 110,
      "endOffset" : 114
    }, {
      "referenceID" : 4,
      "context" : "In particular, we analyzed two instances inspired by the Decompositional DAGs graph kernels [5].",
      "startOffset" : 92,
      "endOffset" : 95
    } ],
    "year" : 2015,
    "abstractText" : "In this paper we present a novel graph kernel framework inspired the by the Weisfeiler-Lehman (WL) isomorphism tests. Any WL test comprises a relabelling phase of the nodes based on test-specific information extracted from the graph, for example the set of neighbours of a node. We defined a novel relabelling and derived two kernels of the framework from it. The novel kernels are very fast to compute and achieve state-of-the-art results on five real-world datasets.",
    "creator" : "LaTeX with hyperref package"
  }
}