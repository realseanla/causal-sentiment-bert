{
  "name" : "1611.04175.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Recognizing and Eliciting Weakly Single Crossing Profiles on Trees",
    "authors" : [ "Palash Dey" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "The domain of single crossing preference profiles is a widely studied domain in social choice theory. It has been generalized to the domain of single crossing preference profiles with respect to trees which inherits many desirable properties from the single crossing domain, for example, transitivity of majority relation, existence of polynomial time algorithms for finding winners of Kemeny voting rule, etc. In this paper, we consider a further generalization of the domain of single crossing preference profiles on trees to the domain consisting of all preference profiles which can be extended to single crossing preference profiles with respect to some tree by adding more preference orderings to it. We call this domain the weakly single crossing domain on trees. It is known that most of the desirable properties of the single crossing domain on trees continue to hold for the weakly single crossing domain on trees. In this paper, we prove several interesting structural properties of the weakly single crossing domain on trees and exploit them to design efficient algorithms for recognizing and eliciting weakly single crossing preference profiles on trees. In particular, we begin with showing that, for every weakly single crossing preference profile P on trees, there exists a unique inclusion-minimal set of preference orderings Q whose inclusion in P makes the resulting profile P = P ⊎Q single crossing with respect to some tree. We call the profile P the closure of P. Using this uniqueness of closure property of weakly single crossing preference profiles on trees and the known recognition algorithm of single crossing preference profiles on trees due to Clearwater et al. [CPS15], we design a polynomial time algorithm for recognizing weakly single crossing profiles on trees. We then move on to develop a polynomial time algorithm with low query complexity for eliciting weakly single crossing preference profiles on trees even when we do not know any tree with respect to which the closure of the input preference profile is single crossing and the preferences can be queried only sequentially; moreover, the sequential order of the input preference profile is also unknown. We complement the performance of our preference elicitation algorithm by proving that our algorithm makes an optimal number of queries up to constant factors when the number of preference orderings in the input preference profile is large compared to the number of candidates, even if the\ninput preference profile is known to be single crossing with respect to some given tree and the preference orderings can be accessed randomly."
    }, {
      "heading" : "1 Introduction",
      "text" : "Aggregating preferences of a set of agents is a common problem in multiagent systems. In a typical setting, we have a set of m candidates, a set of n voters each of whom possesses a preference which is a linear order (reflexive, anti-symmetric, and transitive relations) over the set of candidates, and we would like to aggregate these preferences into one preference which intuitively “reflects” the preference of all the voters. However, it is well-known that the pairwise majority relation of a set of preferences may often be intransitive due to existence of Condorcet cycles – a set of candidates {ci : i ∈ [ℓ]} where ci is preferred over ci (mod ℓ)+1 by a majority of the voters for every i ∈ [ℓ] (see Moulin [Mou91]). Consecutively, a substantial amount of research effort has been devoted to finding interesting restrictions on the preferences of the voters which ensure transitivity of the majority relation (see Merlin and Gaertner [MG04] for a survey).\nAmong the most widely used domains in social choice theory are the single peaked and single crossing domains. Introduced by Black [Bla48], the single peaked domain not only satisfies transitivity of majority relation but also captures the essence of many election scenarios including political elections [HM97]. Intuitively, a profile, which is a tuple of preferences of all the voters, is called single peaked if the candidates can be arranged in a linear order (often called societal axis or harmonious order) and every voter can be placed somewhere in that linear order so that she prefers candidates “closer” to her than candidates “far” from her. The notion of single peakedness has subsequently been generalized further, often at the cost of the transitivity property of majority relation. For example, the popular single peaked domain on trees [Dem82] only guarantees existence of a Condorcet winner (for an odd number of voters) and the notion of single peaked width [CGS12] does not even guarantee existence of a Condorcet winner. A Condorcet winner is a candidate who is preferred over every other candidate by a majority of the voters.\nMirrlees [Mir71] proposed the single crossing domain where voters (instead of candidates as in the case of single peaked domain) can be arranged in a linear order so that, for every two candidates x and y, all the voters who prefer x over y appear consecutively. Other than guaranteeing transitivity property of the majority relation, the single crossing domain has found wide applications in economics [DS74], specially in redistributive income taxation [Rob77, MR81], trade union bargaining [BC84], etc. The notion of single crossingness has further been generalized with respect to median graphs while maintaining the transitivity of the majority relation [Dem12]. A graph is called a median graph if, for every three nodes, there exists a unique node which is present in the shortest paths between all three pairs of nodes. Trees, hypercubes, etc. are important examples of median graphs. In recent times, Kung applied single-crossingness on trees to the study of networks [Kun15].\nAll the domains discussed above also enjoy other desirable properties. Existence of strategy-proof voting rules, polynomial time tractability of the problem of finding the winner for important voting rules like Kemeny [Kem59, Lev75, BBHH15], Dodgson [Dod76, BNM+58], Chamberlin-Courant [BSU13, SYFE13, CPS15], etc. are prominent examples of such properties. Domain restrictions in the presence of incomplete votes (where votes may be partial orders instead of complete orders) has also received significant research attention in recent times. Lackner [Lac14] showed that determining whether a set of incomplete votes is single peaked is a NP-complete problem. Elkind et al. [EFLO15a] performed similar exercise for the single crossing domain and showed that although the problem of finding whether a set of incomplete votes is single crossing is NP-complete in general, it admits polynomial time algorithms for top orders and for various other practically appealing cases. Elkind and Lackner [EL15] extended the notions of single peakedness and single crossingness to approval votes and showed that various computational problems that are hard in the approval voting setting become polynomial time tractable. In a approval voting scenario, every vote simply approves a subset of candidates instead of specifying a complete ranking of the candidates. Closeness of a profile to various domains also forms an active body of current research. The work of Erdelyi et al. [ELP13] and Bredereck et al. [BCW16] showed that the problem of finding the distance of a profile from the single peaked and single crossing domains are often NP-hard and occasionally polynomial time solvable under various natural notions of distance. Elkind and Lackner [EL14] provided approximation and fixed parameter tractable algorithms for the problems of finding the minimum number of votes/candidates that need to be deleted so that the resulting profile belongs to some specific domain – their algorithms work for any domain which can be characterized by forbidden configurations and thus, in particular, for both the single peaked and single crossing domains. Faliszewski et al. [FHH14] studied various manipulation, control, and bribery problems in nearly single peaked domain and showed many interesting results; for example, they proved that some control problems suddenly become NP-hard even in the presence of only one maverick whereas many other manipulation problems continue to be polynomial time solvable with a reasonable number of mavericks. We refer the reader to the recent survey article by Elkind et al. [ELP16] and references therein for a more complete picture of recent research activity in preference restrictions in computational social choice theory."
    }, {
      "heading" : "1.1 Motivation and Related Work",
      "text" : "A property that is usually true for all popular domains is what we call “downward monotonicity” – if a profile belongs to a domain D, then so is any subset of the profile (votes). To the best of our knowledge, the only important exception to this is the single crossing domain on trees [CPS14]. Interestingly, the sub-profiles of a single crossing profile on trees continue to exhibit desirable properties like transitivity of majority relation, polynomial time recognition algorithm [CPS15], existence of polynomial time algorithms for Kemeny and Dodgson voting rules, etc. This makes the study of the sub-profiles of single\ncrossing profiles on trees important. We call the domain consisting of all profiles which are sub-profiles of some single crossing profile on trees, weakly single crossing domain on trees. We remark that the domain of top monotonic profiles also does not satisfy similar notion of downward monotonicity with respect to candidates – deleting candidates from a top monotonic profile may destroy top monotonicity property. However, the votes are much more general there than simply being complete rankings and are allowed to be any complete, reflexive, and transitive (not necessarily anti-symmetric) binary relations. We refer the interested readers to the work of Barbera and Moreno [BM11] for an elaborate exposition to top monotonic profiles. We also remark that the idea of defining a domain as a set of profiles that are obtained by deleting some votes from another profile of a different domain has been used by Elkind et al. [EFS14] to characterize profiles that are simultaneously single peaked and single crossing.\nOne of the first questions to ask for any domain is whether there exists an efficient recognition algorithm – given a profile P, does there exist a polynomial time algorithm to decide whether P belongs to the domain? Indeed, there exist efficient recognition algorithms for many popular domains, for example, single peaked [Tri89], single crossing [BCW13, CPS15], and so on [Kno10, EFLO15b, EF14]. This motivates us to pursue a similar question for the weakly single crossing domain on trees – does there exist a polynomial time recognition algorithm for the weakly single crossing domain on trees?\nAnother fundamental problem in social choice theory is preference elicitation – elicit the preferences of a set of agents by asking them (hopefully a small number of) comparison queries. Indeed, in many applications of social choice theory, for example, metasearch engines [DKNS01], spam detection [CSS99], computational biology [JSA08], the number of candidates is huge and thus, simply asking the agents to reveal their preferences is impractical. Conitzer [Con09] showed that, for the domain of single peaked profiles, we can elicit the preferences of a set of agents by asking a small number of comparison queries. Recently, a similar study has been carried out for the single peaked domain on trees [DM16a] and single crossing domain [DM16b]. This motivates us to study preference elicitation for the weakly single crossing domain on trees."
    }, {
      "heading" : "1.2 Our Contribution",
      "text" : "Our specific contributions in this work are as follows.\n⊲ Given a weakly single crossing profile P on trees, we show that there exists an inclusion-minimal profile P which contains P and is itself single crossing with respect to some tree [Theorem 1]. We call P the single crossing tree closure of P.\n⊲ We extend the polynomial time recognition algorithm of Clearwater et al. [CPS15]\nfor single crossing profiles on trees to a polynomial time recognition algorithm for weakly single crossing profiles on trees. Moreover, for any weakly single crossing profile P on trees, our recognition algorithm also outputs a tree T on the single crossing tree closure P of P with respect to which P is single crossing [Corollary 1].\n⊲ We present a polynomial time algorithm with query complexity O(mn + min{m2, n}m logm) for eliciting weakly single crossing profiles on trees, even if we do not a priori know any tree with respect to which the single crossing tree closure of\nthe input profile is single crossing and we are only allowed to access the preferences in an arbitrary (unknown) sequential order [Theorem 3 and Corollary 2]. We wish mention that the query complexity of our preference elicitation algorithm matches (up to constant factors) with the query complexity of preference elicitation algorithm for single crossing profiles due to Dey and Misra [DM16b].\n⊲ We complement the query complexity of our preference elicitation algorithm by\nshowing that any preference elicitation algorithm for single crossing profiles on trees has query complexity Ω(mn + m logm), even if the input profile is single crossing with respect to a known tree and we are allowed to query preferences randomly and interleave the queries to different preferences arbitrarily [Theorem 4]."
    }, {
      "heading" : "2 Preliminaries",
      "text" : "For a positive integer ℓ, we denote the set {1, . . . , ℓ} by [ℓ]. For a set X and an integer k, we denote the set of all possible subsets of X of size k by Pk(X ).\nLet V = {vi : i ∈ [n]} be a set of n voters and C = {cj : j ∈ [m]} be a set of m candidates. If not mentioned otherwise, we denote the set of candidates, the set of voters, the number of candidates, and the number of voters by C, V, m, and n respectively. Every voter vi has a preference ≻i which is a complete order over the set C of candidates. We say voter vi prefers a candidate x ∈ C over another candidate y ∈ C if x ≻i y. We denote the set of all preferences over C by L(C). The n-tuple (≻i)i∈[n] ∈ L(C) n of the preferences of all the voters is called a profile. For a subset M ⊆ [n], we call (≻i)i∈M a sub-profile of (≻i)i∈[n]. We often view a profile P as a multi-set consisting of the preferences in P to avoid use of cumbersome notations. The view of a profile we are considering will be clear from the context. Given a preference ≻ L(C) and a positive integer ℓ, we denote the profile consisting of ℓ copies of the preference ≻ by ≻ℓ. A domain is a set of profiles. The single crossing domain is defined as follows.\nDefinition 1 (Single Crossing Domain). A profile P = (≻i)i∈[n] of n preferences over a set C of candidates is called a single crossing profile if there exists a permutation σ of [n] such that, for every two distinct candidates x, y ∈ C, whenever we have x ≻σ(i) y and x ≻σ(j) y for two integers i and j with 1 6 σ(i) < σ(j) 6 n, we have x ≻σ(k) y for every σ(i) 6 k 6 σ(j).\nDemange significantly generalizes the single crossing domain to the single crossing domain on median graphs in [Dem12]. A graph G = (V, E) is called a median graph if, for every three nodes u, v, w ∈ V, there exists a unique vertex m(u, v, w), called the median of the nodes u, v, and w, which is present in the shortest paths between each pair of u, v, and w. Trees and hypercubes are important examples of median graphs. In this work, we will be concerned with trees only. A tree is a connected acyclic graph. A star is a tree where\nthere is a central node with whom every other node is connected by an edge. We refer to [Die97] for common terminologies of trees. Given a tree T and a node u ∈ T , we denote the tree rooted at u by T [u]. The single crossing domain on trees is defined as follows.\nDefinition 2 (Single Crossing Domain on Trees). Let T be a tree with the set of voters as the set of nodes of T . A profile P is called single crossing with respect to a tree T if every sub-profile along every path of T is single crossing.\nLet a profile P be single crossing with respect to a tree T . We call T a single crossing tree of P. We denote the preference associated with a voter (which is a node in T ) u ∈ T by ≻u. We denote a voter in T associated with a preference ≻∈ P by u≻. An equivalent condition for a profile to be single crossing with respect to a tree T is that, for every pair of candidates x, y ∈ C, there exists at most one edge in the cut (Vx≻y,V \\Vy≻x), where Vx≻y is the set of voters who prefer x over y [CPS15]. We now generalize the single crossing domain on trees to the weakly single crossing domain on trees as follows.\nDefinition 3 (Weakly Single Crossing Domain on Trees). The weakly single crossing domain on trees is the set of all profiles P such that there exists a profile P ′ which contains P and is itself single crossing with respect to a tree T ."
    }, {
      "heading" : "2.1 Problem Formulation",
      "text" : "We study the following problem for recognizing weakly single crossing profiles on trees.\nProblem Definition 1 (WEAKLY SINGLE CROSSING TREE RECOGNITION). Given a profile P, does P belong to the weakly single crossing domain on trees?\nSuppose we have a profile P with n voters and m candidates. Let us define a function QUERY(x ≻ℓ y) for a voter ℓ and two different candidates x and y to be TRUE if the voter ℓ prefers the candidate x over the candidate y and FALSE otherwise. We now define the preference elicitation problem.\nProblem Definition 2 (PREFERENCE ELICITATION). Given an oracle access to QUERY(·) for a profile P, find P.\nFor two distinct candidates x, y ∈ C and a voter ℓ, we say a PREFERENCE ELICITATION algorithm A compares candidates x and y for the voter ℓ, if A makes a call to either QUERY(x ≻ℓ y) or QUERY(y ≻ℓ x). We define the number of queries made by the algorithm A, called the query complexity of A, to be the number of distinct tuples (ℓ, x, y) ∈ V ×C×C with x 6= y such that the algorithm A compares the candidates x and y for the voter ℓ. Notice that, even if the algorithm A makes multiple calls to QUERY (·) with same tuple (ℓ, x, y), we count it only once in the query complexity of A. This is without loss of generality since we can always implement a “wrapper” around the oracle which memorizes all the calls made to the oracle so far and whenever it receives a duplicate call, it replies from its memory without “actually” making a call to the oracle.\nThe following observation is immediate from standard sorting algorithms like merge\nsort.\nObservation 1. There is a PREFERENCE ELICITATION algorithm for eliciting one preference with query complexity O(m logm).\nModel of Input for PREFERENCE ELICITATION There are two prominent models for accessing the preferences in the literature (see [DM16b]). In the random access model, we are allowed to query any preference at any point of time. Moreover, we are also allowed to interleave the queries to different voters. In the sequential access model, voters are arriving in a sequential manner one after another to the system. Once a voter ℓ arrives, we can query her preference as many times as we like and then we “release” the voter ℓ from the system to grab the next voter in the queue. Once the voter ℓ is released, its preference can never be queried again."
    }, {
      "heading" : "3 Recognizing Weakly Single Crossing Profiles on Trees",
      "text" : "In this section, we present our polynomial time algorithm for the WEAKLY SINGLE CROSSING TREE RECOGNITION problem. We begin with bounding the number of distinct preferences in a profile which is single crossing with respect to some tree. We remark that the exact same bound of Lemma 1 is known for the single crossing profiles [DM16b].\nLemma 1. Let a profile P of distinct preferences be single crossing with respect to a tree T . Then |P| 6 ( m\n2\n)\n+ 1.\nProof. Let e = (u, v) ∈ T be any edge of T = (V, E). Since the preferences in P are all distinct, the set De = {{x, y} ∈ P2(C) :≻u and ≻v order x and y differently} of pairs of candidates that are ordered differently by the voters u and v is nonempty. Since the profile P is single crossing with respect to T , for any two distinct edges e1, e2 ∈ T , we have De1 ∩ De2 = ∅. We also have ∪e∈T De ⊆ P2(C). Now we bound |P| as follows.\n|P| = |E|+ 1 6\n(\nm\n2\n)\n+ 1\nThe following result which is immediate from the proof of Lemma 3.7 in [CPS15],\nsimplifies lot of our proofs.\nLemma 2. Let P = (≻ℓii )i∈[n], ℓi > 0, ∀i ∈ [n], be a profile with ≻i 6=≻j , ∀i 6= j and P ′ = (≻i)i∈[n] be the profile resulting from P after removing all the duplicate preferences. Then P is single crossing with respect to some tree if and only if P ′ is single crossing with respect to some (other) tree. Therefore, P is a weakly single crossing profile on trees if and only if P ′ is a weakly single crossing profile on trees. Moreover, given the tree with respect to which the profile P is single crossing, we can construct another tree with respect to which P ′ is single crossing in polynomial amount of time and vice versa.\nWe next define the majority relation of a set of preferences which helps us formulate an important property of single crossing domain with respect to trees. We call that property the triad majority property. This property will in turn help us in defining and finding what we call the single crossing tree closure of a weakly single crossing profile on trees. The notion of a single crossing tree closure plays a central role in our recognition and elicitation algorithms.\nDefinition 4 (Majority Relation). Given a profile of n preferences (≻i)i∈[n] ∈ L(C) n, we call the relation ≻= Maj((≻i)i∈[n]) = {x ≻ y : x, y ∈ C, |{i ∈ [n] : x ≻i y}| > n/2} the majority relation of the profile (≻i)i∈[n]. If the majority relation Maj(P) of a profile P turns out to be a linear order, we say that a majority order of P exists and we call Maj(P) the majority order of P.\nProperty 1 (Triad Majority Property). A profile P is said to satisfy the triad majority property if, for every three preferences (not necessarily distinct) ≻i∈ P, i ∈ [3], the majority relation Maj((≻i)i∈[3]) of (≻i)i∈[3] is a linear order and Maj((≻i)i∈[3]) ∈ P.\nWe now show that every single crossing profile on trees, satisfies the triad majority\nproperty.\nLemma 3. Let P be a single crossing profile with respect to a tree T . Then P satisfies the triad majority property.\nProof. For any three preferences ≻i, i ∈ [3], let the nodes associated with ≻i∈ P, i ∈ [3], in T be u≻i ∈ T , i ∈ [3]. Let u be the unique node in T that lies in the shortest paths u≻1 to u≻2, u≻2 to u≻3, and u≻3 to u≻1 in T . We claim that Maj(≻1,≻2,≻3) =≻u, where ≻u is the preference associated with the node u. Suppose not, then there exist two candidates x, y ∈ C such that x ≻u y, y ≻i x, and y ≻j x for i, j ∈ [3], i 6= j. But then the sub-profile of P along the path between u≻i, u≻j is not single crossing. This contradicts our assumption that P is single crossing with respect to the tree T .\nWe now define the notion of triad majority closure of a profile which will be used\ncrucially in our algorithm for WEAKLY SINGLE CROSSING TREE RECOGNITION.\nDefinition 5 (Triad Majority Closure). Let P ′ be a profile that satisfies the triad majority property and P be a sub-profile of P ′. Then the triad majority closure of P is defined to be the inclusion-wise minimal profile P that satisfies the triad majority property and contains P.\nThe following result shows that a triad majority closure of a sub-profile of a profile that satisfies the triad majority property, is unique thereby establishing the well-definedness of Definition 5.\nProposition 1. Let P ′ be a profile that satisfies the triad majority property and P be a subprofile of P ′. Let P be the triad majority closure of P and M(P) be the set of profiles which contain P and satisfy the triad majority property. Then P = ∩P ′∈M(P)P ′. Hence, the triad majority closure of P exists and it is unique.\nProof. Follows from the fact that, for two profiles P1,P2 that satisfy the triad majority property and contain P, the profile P1 ∩ P2 also satisfies the triad majority property and contains P.\nSimilar to the triad majority closure, we next define the single crossing tree closure.\nDefinition 6 (Single Crossing Tree Closure). Let P be a weakly single crossing profile on trees. The single crossing tree closure of P is defined to be the inclusion-wise minimal profile P which is single crossing with respect to some tree.\nThe following result shows that, for every weakly single crossing profile P on trees, the single crossing tree closure P of P exists and is unique, thereby establishing welldefinedness of Definition 6. Moreover, P turns out to be the triad majority closure of P.\nTheorem 1. Let P be a weakly single crossing profile on trees. Then the triad majority closure P of P is also single crossing with respect to some tree. Therefore, the single crossing tree closure of P exists, it is unique, and equals to its triad majority closure P . Moreover, the single crossing tree closure of P can be computed in polynomial time.\nProof. We can assume, without loss of generality, that the preferences in P are all distinct due to Lemma 2. Let R be a profile of distinct preferences that is single crossing with respect to a tree T and P be a sub-profile ofR – such anR exists since P is a weakly single crossing profile on trees. Let us consider the subgraph T ′ = ∪≻,≻′∈Ppu≻,u≻′ of T , where, for two nodes u, v ∈ T , pu,v denotes the unique path between u and v in T . We observe that T ′ is actually a subtree of T since it is a connected subgraph of the tree T . We also observe that, for every leaf node l of T ′, the preference ≻l corresponding to l always belongs to P. We iteratively apply the following transformation on T ′ as long as we can: if there exists a node u in T ′ of degree two such that the preference ≻u associated with u does not belong to P, then we “bypass” u, that is, we remove u from T ′ along with the two edges incident on u and add an edge between the two neighbors of u. Let us call the tree T ′′ which results from T ′ after making all the transformations iteratively as long as we can. We claim that the triad majority closure P of P is exactly the set Q of preferences associated with the nodes of the tree T ′′. We first observe that Q satisfies the triad majority property since Q is single crossing with respect to the tree T ′′ [see Lemma 3]. Now to show that Q is the triad majority closure of P, it is enough to show that every preference ≻∈ Q \\ P is the majority order of some three preferences in P. Let ≻∈ Q \\ P and u ∈ T ′′ be the node in T ′′ whose corresponding preference is ≻. We observe that the degree of u in T ′′ is at least 3, since otherwise the transformation would have deleted u. So the degree of u in T ′′ is at least 3. We make T ′′ rooted at u and call it T ′′[u]. Let ui, i ∈ [3], be any three children of u in T ′′. Let the subtrees of the rooted tree T ′′[u] rooted at ui, i ∈ [3], be Ti, i ∈ [3]. We observe that there must exists a node vi in Ti such that the preference ≻i attached to vi belongs to P for every i ∈ [3]. We claim that ≻ is the majority order of (≻i)i∈[3]. Indeed, otherwise we may assume (by renaming) that there exists two candidates x, y ∈ C such that x ≻1 y, x ≻u y, y ≻2 x, y ≻3 x. However, this violates single crossing property on the\npath between v2 and v3. Hence ≻ is the majority order of (≻i)i∈[3]. This proves the claim. Hence, Q is the triad majority closure of P. Also Q is single crossing with respect to the tree T ′′. Hence, by Lemma 3, Q is the single crossing tree closure of P.\nWe consider the algorithm A which iteratively adds Maj(≻,≻′,≻′′) to Q (which is initialized to empty set) for all three (not necessarily distinct) preferences ≻,≻′,≻′′∈ P and outputs Q. The algorithm A runs in polynomial amount of time. The correctness of A follows from the first part of the result.\nThe following result on recognizing single crossing profiles on trees is due to [CPS15].\nTheorem 2. (Theorem 4.2 in [CPS15]) Given a profile P, there is a polynomial time algorithm for checking whether there exists a tree T with respect to which P is single crossing. Moreover, if a single crossing tree exists, then the algorithm also outputs a tree T ′ with respect to which P is single crossing.\nTheorem 1 and 2 give us a polynomial time algorithm for the WEAKLY SINGLE CROSSING\nTREE RECOGNITION problem.\nCorollary 1. The WEAKLY SINGLE CROSSING TREE RECOGNITION problem is in P.\nProof. We can assume, without loss of generality, that the preferences in P are all distinct due to Lemma 2. Our algorithm A first constructs the triad majority closure P of P using the algorithm in Theorem 1. Our algorithm now checks whether P is single crossing with respect to some tree using Theorem 2. If the algorithm in Theorem 2 outputs YES, then A also outputs YES and the tree returned by the algorithm in Theorem 2; otherwise A outputs NO. The correctness of the algorithm follows from Theorem 1 and the correctness of the algorithm in Theorem 2. The polynomial running time ofA follows from polynomial running time of the algorithms in Theorem 1 and 2."
    }, {
      "heading" : "4 Preference Elicitation for Weakly Single Crossing Pro-",
      "text" : "files on Trees\nIn this section, we present a polynomial time low query complexity algorithm for eliciting weakly single crossing profiles on trees. We begin with bounding the degree of any node in a single crossing tree for a profile consisting of distinct preferences. We use this to bound the query complexity of our elicitation algorithm.\nLemma 4. Let a profile P of distinct preferences be single crossing with respect to a tree T . Then the degree of every node in T is at most m− 1.\nProof. Consider any node v in T and let the preference ≻v associated with the node v be c1 ≻ c2 ≻ · · · ≻ cm. Let the neighbors of the node v in T be ui, i ∈ [ℓ], and the preferences associated with them be ≻ui , i ∈ [ℓ], respectively. We need to show that ℓ 6 m − 1. We first observe that, for every i ∈ [m − 1], there exists at most one child uj, j ∈ [ℓ], of the\nnode v such that the preference ≻uj associated with the node uj has ci+1 ≻uj ci. Indeed, otherwise let us assume that there exist two children uj and uj′, j, j\n′ ∈ [ℓ], j 6= j′, of the node v such that the preferences ≻uj and ≻uj′ associated with them both have ci+1 ≻uj ci and ci+1 ≻uj′ ci. Then the sub-profile along the path uj, v, uj′ is not single crossing which contradicts our assumption that P is single crossing with respect to the tree T . Hence, for every i ∈ [m − 1], there exists at most one child uj, j ∈ [ℓ], of the node v such that the preference ≻uj associated with the node uj has ci+1 ≻uj ci. We also observe that, for every j ∈ [ℓ], there exists an i ∈ [m − 1] such that ci+1 ≻uj ci since otherwise we have ≻v=≻uj which contradicts our assumption that the preferences of the profile P are all distinct. Hence, we have ℓ 6 m − 1 since otherwise we will have i ∈ [m − 1] and j, j′ ∈ [ℓ], j 6= j′, such that we have both ci+1 ≻uj ci and ci+1 ≻uj′ ci due to pigeon hole argument which leads to a contradiction as argued above.\nWe remark that the assumption that the profile in Lemma 4 consists of distinct preferences is crucial since a profile where all the preferences are the same is single crossing with respect to every tree. We show next a structural result about trees. We will use it crucially for bounding query complexity of our elicitation algorithm.\nLemma 5. Let T be a tree of size at least 3. Then there exists a node r in T of degree at least 2 such that the following holds: make the tree T rooted at r; let the neighbors of r be u1, . . . , uℓ; let the rooted subtrees of T [r] rooted at ui, i ∈ [ℓ], be respectively Ti, i ∈ [ℓ], and |T1| > |T2| > · · · > |Tℓ|; then |T1| 6 3|T |/4.\nProof. Let u1 be any arbitrary node in T . If u1 satisfies the properties of the lemma, then we are done. Otherwise, let u2 be the neighbor of u1 such that, if we remove the edge (u1, u2), then the connected component containing u2 has more than 3|T |/4 nodes. Let the removal of the edge (u1, u2) creates two connected component V1 and W1 such that u1 ∈ V1. If u2 satisfies the properties of the lemma, then we are done. Otherwise, we repeat the above process defining u3 and V2. We observe that V1 ( V2. We continue this process until we get a node that satisfies the properties of the lemma. The process has to terminate because otherwise we have an infinite chain V1 ( V2 ( V3 ( · · · ⊆ T . This cannot happen since all the inclusions in the chain above are proper however Vi ⊆ T for every i. Hence, the process always terminates with a node satisfying the properties of the lemma.\nGiven a profile P of distinct preferences, a tree T with respect to which P is single crossing, and a preference ≻∈ L(C), we now present an algorithm for finding whether ≻ belongs to T using O(m) calls to QUERY (·). This algorithm is a crucial component in our PREFERENCE ELICITATION algorithm.\nLemma 6. Given a profile P of distinct preferences, a tree T with respect to which P is single crossing, and an oracle access to a preference ≻∈ L(C), there exists a polynomial time algorithm for finding whether ≻ belongs to T using O(m) calls to QUERY (·).\nAlgorithm 1 for searching preference in a single crossing tree\nInput: A profile P = (≻i)i∈[n] of distinct preferences, a tree T with respect to which P is single crossing, and a preference ≻∈ L(C) Output: YES if ≻ belongs to P and NO otherwise 1: while |T | > 3 do 2: r ← a node in T as in Lemma 5. ui, i ∈ [ℓ], ℓ > 2, be the neighbors of r. Let\nTi, i ∈ [ℓ], be the subtrees of T [r] rooted at ui, i ∈ [ℓ], respectively such that |T1| > |T2| > · · · > |Tℓ|.\n3: for i = 1 to ℓ do 4: Let xi, yi ∈ C such that xi ≻r yi and yi ≻ui xi 5: if QUERY (xi ≻ yi)=TRUE then 6: T ← T \\ Ti 7: else 8: T ← Ti and exit for loop 9: end if\n10: end for 11: end while 12: if ≻ belongs to T then ⊲ Can be done in O(m) queries. 13: return YES 14: else 15: return NO 16: end if\nProof. We present our algorithm in Algorithm 1. Let r be a node as in Lemma 5. We consider the tree T rooted at r which we denote by T [r]. Let the children of r in T [r] be u1, . . . , uℓ, for some 2 6 ℓ 6 m − 1 (the upper bound of m − 1 follows from Lemma 4), the rooted subtrees of T [r] rooted at ui, i ∈ [ℓ], be Ti, i ∈ [ℓ], |T1| > |T2| > · · · > |Tℓ|, and |T1| 6 3|T |/4. Since the profile P consists of distinct preferences, for every i ∈ [ℓ], there exist two candidates xi, yi ∈ C such that xi ≻r yi and yi ≻ui xi. Let ≻ be the preference which we have to search in T ; we can access ≻ only through the QUERY (·) function. We query the oracle for xi versus yi in ≻ . If xi ≻ yi, then ≻ cannot belong to the subtree Ti and thus we remove Ti from T as done in line 6 of Algorithm 1. On the other hand, if yi ≻ xi, then ≻ cannot belong to T \\Ti and thus we remove T \\Ti from T as is done in line 8 of Algorithm 1. Hence, after each iteration of the while loop, ≻ can only belong to T and every iteration decreases the size of T ; moreover, ≻ can only belong to T . Hence, the algorithm terminates and is correct. We now turn our attention to the query complexity of Algorithm 1. For a tree T with n nodes where every preference is over m candidates, let T (n,m) be the query complexity of the while loop from line 1 to line 11 in Algorithm 1. Let us consider an iteration of the while loop at line 1. Let k be the number of times the for loop at line 3 iterates. If k = 1, then the algorithm makes only one query in the current iteration of the while loop in Algorithm 1 and the number of nodes in the new tree T is upper bounded by 3/4-th time the number of nodes in the previous T (by the choice of r).\nAlgorithm 2 for eliciting a profile which is single crossing with respect to some unknown tree Input: π be the order in which voters arrive Output: Profile of all the voters\n1: R,Q ← ∅ 2: ⊲ Q stores all the votes seen so far without duplicate. R stores the profile. 3: for i ← 1 to n do 4: ⊲ Elicit preference of the ith voter in ith iteration of this for loop. 5: T be the tree with respect to which the single crossing tree closure Q of Q is single\ncrossing\n6: ⊲ Using Theorem 1 7: if ≻π(i)=≻ for some ≻∈ Q then 8: ⊲ Can be done using O(m) queries by Lemma 6 9: R[π(i)] ←≻\n10: else 11: R[π(i)] ← Elicit using Observation 1 12: Q ← Q∪ {R[π(i)]} 13: end if 14: end for\nFor k > 2, we observe that the number of nodes in the new tree T is upper bounded by 1/k-th times the number of nodes in the previous T – this is because the for loop at line 3 iterates according to a nonincreasing order of subtrees. Hence, we have the following recurrence relation.\nT (n,m) 6 max{T (3n/4, m) + 1, max k={2,...,m} {T (n/k) + k}}\nT (2, m) = T (1, m) = O(m)\nWe know from Lemma 1 that n 6 ( m\n2\n) +1. By solving the above recurrence with the ( m\n2\n)\n+1 upper bound on n and the fact that line 12 to 16 can be executed with O(m) queries (see [DM16b]), we get that the query complexity of Algorithm 1 is O(m).\nWe first present a PREFERENCE ELICITATION algorithm for single crossing profiles on trees when we are given a sequential access to the preference (the sequential order is a priori not known) and we do not know any tree with respect to which the input profile is single crossing.\nTheorem 3. Suppose a profile P is single crossing with respect to some unknown tree T . Suppose we have only sequential access to the preferences whose ordering is also not known a priori. Then there is a PREFERENCE ELICITATION algorithm for the single crossing profiles on trees with query complexity O(mn +min{m2, n}m logm).\nProof. We present our PREFERENCE ELICITATION algorithm in Algorithm 2. We maintain an array R of length n to store the preferences of all the n voters and a set Q to store all the distinct preferences seen so far. Let π be the order in which the voters are accessed. To elicit the preference of voter π(i), we first construct, in polynomial time, a tree T with respect to which the single crossing tree closure Q of Q is single crossing using Theorem 1. Next we find whether the preference of the voter π(i) already present in T ; this can be done in polynomial time with making O(m) calls to QUERY(·) using Lemma 6. If the preference ≻π(i) of the voter π(i) is present in T , we have elicited≻π(i) usingO(m) queries. Otherwise, we elicit ≻π(i) using O(m logm) queries by Observation 1. However, since the number of distinct preferences in any profile which is single crossing with respect to some tree is at most ( m\n2\n) + 1 due to Lemma 1, we use Observation 1 at most ( m\n2\n)\n+ 1 times. Hence, the query complexity of Algorithm 2 is O(mn +min{m2, n}m logm).\nOur algorithm in Theorem 3 can readily be seen to work for weakly single crossing\nprofiles on trees too. Hence, we have the following corollary.\nCorollary 2. There exists a polynomial time PREFERENCE ELICITATION algorithm for the weakly single crossing profiles on trees with query complexity O(mn +min{m2, n}m logm).\nWe prove next that the query complexity upper bound in Theorem 3 is optimal up to constant factors for a large number of voters (more specifically, when n = Ω(m2 logm)), even if a tree T is known with respect to which the input profile P is single crossing and random access to preferences are allowed.\nTheorem 4. Let a profile P be single crossing with respect to a tree T . Let T be known except for the preferences associated with the nodes of T . Then any PREFERENCE ELICITATION algorithm has query complexity Ω(m logm+mn) even if we are allowed to query preferences randomly and interleave the queries to different preferences arbitrarily.\nProof. The Ω(m logm) bound follows from the sorting lower bound and the fact that any profile consisting of only one preference P ∈ L(C) is single crossing. Let T be a star with one central node and n− 1 leaf nodes attached to the central node with an edge. Suppose we have an even number of candidates, that is, C = {c1, . . . , cm} for some even integer m. Consider the ordering Q = c1 ≻ c2 ≻ · · · ≻ cm and the pairing of the candidates {c1, c2}, {c3, c4}, . . . , {cm−1, cm}. The oracle answers all the query requests consistently according to the ordering Q. We claim that any PREFERENCE ELICITATION algorithm A must compare ci and ci+1 for every voter corresponding to every leaf node of T and for every odd integer i ∈ [m]. Indeed, otherwise, there exist a voter κ corresponding to a leaf node of T and an odd integer i ∈ [m] such that the algorithm A does not compare ci and ci+1. Suppose the algorithm outputs a profile P ′. The oracle fixes the preference of every voter except κ to be Q. If the voter κ in P ′ prefers ci over ci+1 in P ′, then the oracle fixes the preference ≻κ to be c1 ≻ c2 ≻ · · · ≻ ci−1 ≻ ci+1 ≻ ci ≻ ci+2 ≻ · · · ≻ cm; otherwise the oracle fixes ≻κ to be Q. The algorithm fails to correctly output the preference of the voter κ in both the cases. Also the final profile with the oracle is single crossing with respect to the tree T . Hence, A must compare ci and ci+1 for every voter corresponding to every leaf node of T and for every odd integer i ∈ [m] and thus has query complexity Ω(mn).\nHence, the query complexity of PREFERENCE ELICITATION for the weakly single crossing profiles on trees, does not depend substantially on how the preferences are accessed and whether we know a single crossing tree of the single crossing closure of the input profile. This is in sharp contrast to the corresponding results for single crossing domain where the query complexity for PREFERENCE ELICITATION improves substantially if we know a single crossing ordering and we have a random access to the preferences than if we only have sequential access to preferences [DM16b]."
    }, {
      "heading" : "5 Conclusion and Future Work",
      "text" : "We have shown that, for every weakly single crossing profile on trees, there always exists a unique inclusion-minimal single crossing profile on trees containing it. We exploit this uniqueness property along with the known polynomial time recognition algorithm for single crossing profiles on trees to design a polynomial time recognition algorithm for weakly single crossing profiles on trees. We have also shown that the query complexity for preference elicitation for weakly single crossing profiles on trees is small – the query complexity bounds are similar to the corresponding bounds for single peaked [Con09] and single crossing profiles [DM16b]. Moreover, we have proved that our preference elicitation algorithm makes an optimal number of queries up to constant factors for a large number of voters. Hence, our results in this paper, along with the fact that the weakly single crossing domain on trees inherits most of the desirable properties from the single crossing domain on trees, shows that the weakly single crossing domain on trees is an important generalization of the single crossing domain on trees. An immediate future work is to extend our recognition and elicitation algorithms to the more general median graphs. Characterizing weakly single crossing profiles in trees in terms of forbidden structures is another important direction of research.\nAcknowledgement:\nPalash Dey gratefully acknowledges all the useful discussions with Neeldhara Misra during the course of the work. Palash Dey also thanks Satyanath Bhat for proposing the terminology “weakly single crossing profiles on trees” and providing useful inputs to make some of the proofs clearer. Palash Dey also wishes to gratefully acknowledge support from Google India for providing him with a special fellowship for carrying out his doctoral work."
    } ],
    "references" : [ {
      "title" : "Bypassing combinatorial protections: Polynomial-time algorithms for singlepeaked electorates",
      "author" : [ "Felix Brandt", "Markus Brill", "Edith Hemaspaandra", "Lane A Hemaspaandra" ],
      "venue" : "J. Artif. Intell. Res.,",
      "citeRegEx" : "Brandt et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Brandt et al\\.",
      "year" : 2015
    }, {
      "title" : "Labor union objectives and collective bargaining",
      "author" : [ "Douglas H Blair", "David L Crawford" ],
      "venue" : "Q. J. Econ.,",
      "citeRegEx" : "Blair and Crawford.,? \\Q1984\\E",
      "shortCiteRegEx" : "Blair and Crawford.",
      "year" : 1984
    }, {
      "title" : "A characterization of the single-crossing domain",
      "author" : [ "Robert Bredereck", "Jiehua Chen", "Gerhard J Woeginger" ],
      "venue" : "Soc. Choice Welf.,",
      "citeRegEx" : "Bredereck et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Bredereck et al\\.",
      "year" : 2013
    }, {
      "title" : "Are there any nicely structured preference profiles",
      "author" : [ "Robert Bredereck", "Jiehua Chen", "Gerhard J. Woeginger" ],
      "venue" : "nearby? Math. Soc. Sci.,",
      "citeRegEx" : "Bredereck et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Bredereck et al\\.",
      "year" : 2016
    }, {
      "title" : "On the rationale of group decision-making",
      "author" : [ "Duncan Black" ],
      "venue" : "J. Polit. Econ.,",
      "citeRegEx" : "Black.,? \\Q1948\\E",
      "shortCiteRegEx" : "Black.",
      "year" : 1948
    }, {
      "title" : "Top monotonicity: A common root for single peakedness, single crossing and the median voter",
      "author" : [ "Salvador Barberà", "Bernardo Moreno" ],
      "venue" : "result. GEB,",
      "citeRegEx" : "Barberà and Moreno.,? \\Q2011\\E",
      "shortCiteRegEx" : "Barberà and Moreno.",
      "year" : 2011
    }, {
      "title" : "The theory of committees and elections",
      "author" : [ "Duncan Black", "Robert Albert Newing", "Iain McLean", "Alistair McMillan", "Burt L Monroe" ],
      "venue" : null,
      "citeRegEx" : "Black et al\\.,? \\Q1958\\E",
      "shortCiteRegEx" : "Black et al\\.",
      "year" : 1958
    }, {
      "title" : "On the computation of fully proportional representation",
      "author" : [ "Nadja Betzler", "Arkadii Slinko", "Johannes Uhlmann" ],
      "venue" : "J. Artif. Intell. Res.,",
      "citeRegEx" : "Betzler et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Betzler et al\\.",
      "year" : 2013
    }, {
      "title" : "Bounded single-peaked width and proportional representation",
      "author" : [ "Denis Cornaz", "Lucie Galand", "Olivier Spanjaard" ],
      "venue" : "In Proc. Twentieth European Conference on Artificial Intelligence (ECAI),",
      "citeRegEx" : "Cornaz et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Cornaz et al\\.",
      "year" : 2012
    }, {
      "title" : "Eliciting single-peaked preferences using comparison queries",
      "author" : [ "Vincent Conitzer" ],
      "venue" : "J. Artif. Intell. Res.,",
      "citeRegEx" : "Conitzer.,? \\Q2009\\E",
      "shortCiteRegEx" : "Conitzer.",
      "year" : 2009
    }, {
      "title" : "The single-crossing property on a tree",
      "author" : [ "Adam Clearwater", "Clemens Puppe", "Arkadii Slinko" ],
      "venue" : "arXiv preprint arXiv:1410.2272,",
      "citeRegEx" : "Clearwater et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Clearwater et al\\.",
      "year" : 2014
    }, {
      "title" : "Generalizing the singlecrossing property on lines and trees to intermediate preferences on median graphs",
      "author" : [ "Adam Clearwater", "Clemens Puppe", "Arkadii Slinko" ],
      "venue" : "In Proc. 24th International Conference on Artificial Intelligence,",
      "citeRegEx" : "Clearwater et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Clearwater et al\\.",
      "year" : 2015
    }, {
      "title" : "Learning to order things",
      "author" : [ "William W. Cohen", "Robert E. Schapire", "Yoram Singer" ],
      "venue" : "J. Artif. Int. Res.,",
      "citeRegEx" : "Cohen et al\\.,? \\Q1999\\E",
      "shortCiteRegEx" : "Cohen et al\\.",
      "year" : 1999
    }, {
      "title" : "Single-peaked orders on a tree",
      "author" : [ "Gabrielle Demange" ],
      "venue" : "Math. Soc. Sci,",
      "citeRegEx" : "Demange.,? \\Q1982\\E",
      "shortCiteRegEx" : "Demange.",
      "year" : 1982
    }, {
      "title" : "Majority relation and median representative ordering",
      "author" : [ "Gabrielle Demange" ],
      "venue" : "SERIEs, 3(1-2):95–109,",
      "citeRegEx" : "Demange.,? \\Q2012\\E",
      "shortCiteRegEx" : "Demange.",
      "year" : 2012
    }, {
      "title" : "Graph theory. Graduate texts in mathematics",
      "author" : [ "Reinhard Diestel" ],
      "venue" : "Trad. de : Graphentheorie, paru en 1996 chez Springer",
      "citeRegEx" : "Diestel.,? \\Q1997\\E",
      "shortCiteRegEx" : "Diestel.",
      "year" : 1997
    }, {
      "title" : "Rank aggregation methods for the web",
      "author" : [ "Cynthia Dwork", "Ravi Kumar", "Moni Naor", "D. Sivakumar" ],
      "venue" : "In Proc. 10th International Conference on World Wide Web,",
      "citeRegEx" : "Dwork et al\\.,? \\Q2001\\E",
      "shortCiteRegEx" : "Dwork et al\\.",
      "year" : 2001
    }, {
      "title" : "Elicitation for preferences single peaked on trees",
      "author" : [ "Palash Dey", "Neeldhara Misra" ],
      "venue" : "In Proc. Twenty-Fifth International Joint Conference on Artificial Intelligence,",
      "citeRegEx" : "Dey and Misra.,? \\Q2016\\E",
      "shortCiteRegEx" : "Dey and Misra.",
      "year" : 2016
    }, {
      "title" : "Preference elicitation for single crossing domain",
      "author" : [ "Palash Dey", "Neeldhara Misra" ],
      "venue" : "In Proc. Twenty-Fifth International Joint Conference on Artificial Intelligence,",
      "citeRegEx" : "Dey and Misra.,? \\Q2016\\E",
      "shortCiteRegEx" : "Dey and Misra.",
      "year" : 2016
    }, {
      "title" : "Increases in risk and in risk aversion",
      "author" : [ "Peter A Diamond", "Joseph E Stiglitz" ],
      "venue" : "J. Econ. Theory,",
      "citeRegEx" : "Diamond and Stiglitz.,? \\Q1974\\E",
      "shortCiteRegEx" : "Diamond and Stiglitz.",
      "year" : 1974
    }, {
      "title" : "Recognizing 1-euclidean preferences: An alternative approach",
      "author" : [ "Edith Elkind", "Piotr Faliszewski" ],
      "venue" : "In Algorithmic Game Theory - 7th International Symposium, SAGT 2014,",
      "citeRegEx" : "Elkind and Faliszewski.,? \\Q2014\\E",
      "shortCiteRegEx" : "Elkind and Faliszewski.",
      "year" : 2014
    }, {
      "title" : "The complexity of recognizing incomplete single-crossing preferences",
      "author" : [ "Edith Elkind", "Piotr Faliszewski", "Martin Lackner", "Svetlana Obraztsova" ],
      "venue" : "In Proc. Twenty-Ninth AAAI Conference on Artificial Intelligence, January",
      "citeRegEx" : "Elkind et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Elkind et al\\.",
      "year" : 2015
    }, {
      "title" : "The complexity of recognizing incomplete single-crossing preferences",
      "author" : [ "Edith Elkind", "Piotr Faliszewski", "Martin Lackner", "Svetlana Obraztsova" ],
      "venue" : "In Proc. Twenty-Ninth AAAI Conference on Artificial Intelligence, January",
      "citeRegEx" : "Elkind et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Elkind et al\\.",
      "year" : 2015
    }, {
      "title" : "A characterization of the single-peaked single-crossing domain",
      "author" : [ "Edith Elkind", "Piotr Faliszewski", "Piotr Skowron" ],
      "venue" : "In Proc. Twenty-Eighth AAAI Conference on Artificial Intelligence, July",
      "citeRegEx" : "Elkind et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Elkind et al\\.",
      "year" : 2014
    }, {
      "title" : "On detecting nearly structured preference profiles",
      "author" : [ "Edith Elkind", "Martin Lackner" ],
      "venue" : "In Proc. Twenty-Eighth AAAI Conference on Artificial Intelligence, July",
      "citeRegEx" : "Elkind and Lackner.,? \\Q2014\\E",
      "shortCiteRegEx" : "Elkind and Lackner.",
      "year" : 2014
    }, {
      "title" : "Structure in dichotomous preferences",
      "author" : [ "Edith Elkind", "Martin Lackner" ],
      "venue" : "In Proc. Twenty-Fourth International Joint Conference on Artificial Intelligence,",
      "citeRegEx" : "Elkind and Lackner.,? \\Q2015\\E",
      "shortCiteRegEx" : "Elkind and Lackner.",
      "year" : 2015
    }, {
      "title" : "Computational aspects of nearly single-peaked electorates",
      "author" : [ "Gábor Erdélyi", "Martin Lackner", "Andreas Pfandler" ],
      "venue" : "In Proc. Twenty-Seventh AAAI Conference on Artificial Intelligence, July",
      "citeRegEx" : "Erdélyi et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Erdélyi et al\\.",
      "year" : 2013
    }, {
      "title" : "Preference restrictions in computational social choice: Recent progress",
      "author" : [ "Edith Elkind", "Martin Lackner", "Dominik Peters" ],
      "venue" : "In Proc. Twenty-Fifth International Joint Conference on Artificial Intelligence,",
      "citeRegEx" : "Elkind et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Elkind et al\\.",
      "year" : 2016
    }, {
      "title" : "The complexity of manipulative attacks in nearly single-peaked electorates",
      "author" : [ "Piotr Faliszewski", "Edith Hemaspaandra", "Lane A. Hemaspaandra" ],
      "venue" : "Artif. Intell.,",
      "citeRegEx" : "Faliszewski et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Faliszewski et al\\.",
      "year" : 2014
    }, {
      "title" : "Analytical politics",
      "author" : [ "Mel vin J Hinich", "Michael C Munger" ],
      "venue" : null,
      "citeRegEx" : "Hinich and Munger.,? \\Q1997\\E",
      "shortCiteRegEx" : "Hinich and Munger.",
      "year" : 1997
    }, {
      "title" : "Consensus genetic maps as median orders from inconsistent sources",
      "author" : [ "Benjamin G. Jackson", "Patrick S. Schnable", "Srinivas Aluru" ],
      "venue" : "IEEE/ACM Trans. Comput. Biology Bioinform.,",
      "citeRegEx" : "Jackson et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Jackson et al\\.",
      "year" : 2008
    }, {
      "title" : "Recognizing one-dimensional euclidean preference profiles",
      "author" : [ "Vicki Knoblauch" ],
      "venue" : "J. Math. Econ.,",
      "citeRegEx" : "Knoblauch.,? \\Q2010\\E",
      "shortCiteRegEx" : "Knoblauch.",
      "year" : 2010
    }, {
      "title" : "Incomplete preferences in single-peaked electorates",
      "author" : [ "Martin Lackner" ],
      "venue" : "In Proc. Twenty-Eighth AAAI Conference on Artificial Intelligence (AAAI),",
      "citeRegEx" : "Lackner.,? \\Q2014\\E",
      "shortCiteRegEx" : "Lackner.",
      "year" : 2014
    }, {
      "title" : "Fair and reasonable election systems",
      "author" : [ "Arthur Levenglick" ],
      "venue" : "Behavioral Science,",
      "citeRegEx" : "Levenglick.,? \\Q1975\\E",
      "shortCiteRegEx" : "Levenglick.",
      "year" : 1975
    }, {
      "title" : "Domain conditions in social choice theory",
      "author" : [ "Vincent Merlin", "Wulf Gaertner" ],
      "venue" : null,
      "citeRegEx" : "Merlin and Gaertner.,? \\Q2004\\E",
      "shortCiteRegEx" : "Merlin and Gaertner.",
      "year" : 2004
    }, {
      "title" : "Axioms of cooperative decision making",
      "author" : [ "Hervi Moulin" ],
      "venue" : null,
      "citeRegEx" : "Moulin.,? \\Q1991\\E",
      "shortCiteRegEx" : "Moulin.",
      "year" : 1991
    }, {
      "title" : "A rational theory of the size of government",
      "author" : [ "Allan H Meltzer", "Scott F Richard" ],
      "venue" : "J. Polit. Econ.,",
      "citeRegEx" : "Meltzer and Richard.,? \\Q1981\\E",
      "shortCiteRegEx" : "Meltzer and Richard.",
      "year" : 1981
    }, {
      "title" : "Voting over income tax schedules",
      "author" : [ "Kevin WS Roberts" ],
      "venue" : "J Public Econ,",
      "citeRegEx" : "Roberts.,? \\Q1977\\E",
      "shortCiteRegEx" : "Roberts.",
      "year" : 1977
    }, {
      "title" : "The complexity of fully proportional representation for single-crossing electorates",
      "author" : [ "Piotr Skowron", "Lan Yu", "Piotr Faliszewski", "Edith Elkind" ],
      "venue" : "In International Symposium on Algorithmic Game Theory,",
      "citeRegEx" : "Skowron et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Skowron et al\\.",
      "year" : 2013
    }, {
      "title" : "Recognizing single-peaked preferences on a tree",
      "author" : [ "Michael A Trick" ],
      "venue" : "Math. Soc. Sci,",
      "citeRegEx" : "Trick.,? \\Q1989\\E",
      "shortCiteRegEx" : "Trick.",
      "year" : 1989
    } ],
    "referenceMentions" : [ ],
    "year" : 2017,
    "abstractText" : "The domain of single crossing preference profiles is a widely studied domain in social choice theory. It has been generalized to the domain of single crossing preference profiles with respect to trees which inherits many desirable properties from the single crossing domain, for example, transitivity of majority relation, existence of polynomial time algorithms for finding winners of Kemeny voting rule, etc. In this paper, we consider a further generalization of the domain of single crossing preference profiles on trees to the domain consisting of all preference profiles which can be extended to single crossing preference profiles with respect to some tree by adding more preference orderings to it. We call this domain the weakly single crossing domain on trees. It is known that most of the desirable properties of the single crossing domain on trees continue to hold for the weakly single crossing domain on trees. In this paper, we prove several interesting structural properties of the weakly single crossing domain on trees and exploit them to design efficient algorithms for recognizing and eliciting weakly single crossing preference profiles on trees. In particular, we begin with showing that, for every weakly single crossing preference profile P on trees, there exists a unique inclusion-minimal set of preference orderings Q whose inclusion in P makes the resulting profile P = P ⊎Q single crossing with respect to some tree. We call the profile P the closure of P. Using this uniqueness of closure property of weakly single crossing preference profiles on trees and the known recognition algorithm of single crossing preference profiles on trees due to Clearwater et al. [CPS15], we design a polynomial time algorithm for recognizing weakly single crossing profiles on trees. We then move on to develop a polynomial time algorithm with low query complexity for eliciting weakly single crossing preference profiles on trees even when we do not know any tree with respect to which the closure of the input preference profile is single crossing and the preferences can be queried only sequentially; moreover, the sequential order of the input preference profile is also unknown. We complement the performance of our preference elicitation algorithm by proving that our algorithm makes an optimal number of queries up to constant factors when the number of preference orderings in the input preference profile is large compared to the number of candidates, even if the",
    "creator" : "LaTeX with hyperref package"
  }
}