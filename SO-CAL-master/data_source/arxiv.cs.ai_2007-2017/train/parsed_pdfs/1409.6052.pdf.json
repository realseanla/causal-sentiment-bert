{
  "name" : "1409.6052.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Oblivious Bounds on the Probability of Boolean Functions",
    "authors" : [ "WOLFGANG GATTERBAUER", "DAN SUCIU" ],
    "emails" : [ "gatt@cmu.edu;" ],
    "sections" : [ {
      "heading" : null,
      "text" : "1 Oblivious Bounds on the Probability of Boolean Functions\nWOLFGANG GATTERBAUER, Carnegie Mellon University DAN SUCIU, University of Washington\nThis paper develops upper and lower bounds for the probability of Boolean functions by treating multiple occurrences of variables as independent and assigning them new individual probabilities. We call this approach dissociation and give an exact characterization of optimal oblivious bounds, i.e. when the new probabilities are chosen independent of the probabilities of all other variables. Our motivation comes from the weighted model counting problem (or, equivalently, the problem of computing the probability of a Boolean function), which is #P-hard in general. By performing several dissociations, one can transform a Boolean formula whose probability is difficult to compute, into one whose probability is easy to compute, and which is guaranteed to provide an upper or lower bound on the probability of the original formula by choosing appropriate probabilities for the dissociated variables. Our new bounds shed light on the connection between previous relaxation-based and model-based approximations and unify them as concrete choices in a larger design space. We also show how our theory allows a standard relational database management system (DBMS) to both upper and lower bound hard probabilistic queries in guaranteed polynomial time.\nCategories and Subject Descriptors: G.3 [Probability and Statistics]; H.2.m [Database Management]: Miscellaneous; I.1.1 [Symbolic and algebraic manipulation]: Expressions and Their Representation\nGeneral Terms: Algorithms, Theory\nAdditional Key Words and Phrases: Probabilistic databases, Weighted model counting, Boolean expressions, Oblivious approximations, Relaxation"
    }, {
      "heading" : "1. INTRODUCTION",
      "text" : "Query evaluation on probabilistic databases is based on weighted model counting for positive Boolean expressions. Since model counting is #P-hard in general, today’s probabilistic database systems evaluate queries using one of the following three approaches: (1) incomplete approaches identify tractable cases (e.g., read-once formulas) either at the query-level [Dalvi and Suciu 2007; Dalvi et al. 2010] or the datalevel [Olteanu and Huang 2008; Sen et al. 2010]; (2) exact approaches apply exact probabilistic inference, such as repeated application of Shannon expansion [Olteanu et al. 2009] or tree-width based decompositions [Jha et al. 2010]; and (3) approximate approaches either apply general purpose sampling methods [Jampani et al. 2008; Kennedy and Koch 2010; Re et al. 2007] or approximate the number of models of the Boolean lineage expression [Olteanu et al. 2010; Fink and Olteanu 2011].\nThis paper provides a new algebraic framework for approximating the probability of positive Boolean expressions. While our method was motivated by query evaluation on probabilistic databases, it is more general and applies to all problems that rely on weighted model counting, e.g., general probabilistic inference in graphical mod-\nAuthors’ addresses: W. Gatterbauer (corresponding author), Tepper School of Business, Carnegie Mellon University; email: gatt@cmu.edu; D. Suciu, Computer Science and Engineering Department, University of Washington, Seattle. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies show this notice on the first page or initial screen of a display along with the full citation. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works requires prior specific permission and/or a fee. Permissions may be requested from Publications Dept., ACM, Inc., 2 Penn Plaza, Suite 701, New York, NY 10121-0701 USA, fax +1 (212) 869-0481, or permissions@acm.org. c© YYYY ACM 0362-5915/YYYY/01-ART1 $10.00 DOI 10.1145/0000000.0000000 http://doi.acm.org/10.1145/0000000.0000000\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nar X\niv :1\n40 9.\n60 52\nv1 [\ncs .A\nI] 2\n1 Se\np 20\n14\nels [Chavira and Darwiche 2008].1 An important aspect of our method is that it is not model-based in the traditional sense. Instead, it enlarges the original variable space by treating multiple occurrences of variables as independent and assigning them new individual probabilities. We call this approach dissociation2 and explain where existing relaxation-based and model-based approximations fit into this larger space of approximations. We characterize probability assignments that lead to guaranteed upper or lower bounds on the original expression and identify the best possible oblivious bounds, i.e. after looking at only a limited scope of the expression. We prove that for every model-based bound there is always a dissociation-based bound that is as good or better. And we illustrate how a standard relational DBMS can both upper and lower bound hard probabilistic conjunctive queries without self-joins with appropriate SQL queries that use dissociation in a query-centric way.\nWe briefly discuss our results: We want to compute the probability P[ϕ] of a Boolean expression ϕ when each of its Boolean variables xi is set independently to true with some given probability pi = P[xi]. Computing P[ϕ] is known to be #P-hard in general [Valiant 1979] and remains hard to even approximate [Roth 1996]. Our approach is to approximate P[ϕ] with P[ϕ′] that is easier to compute. The new formula ϕ′ is derived from ϕ through a sequence of dissociation steps, where each step replaces d distinct occurrences of some variable x in ϕ with d fresh variables x′1, x′2, . . . x′d. Thus,\n1Note that weighted model counting is essentially the same problem as computing the probability P[ϕ] of a Boolean expression ϕ. Each truth assignment of the Boolean variables corresponds to one model whose weight is the probability of this truth assignment. Weighted model counting then asks for the sum of the weights of all satisfying assignments. 2Dissociation is the breaking of an existing association between related, but not necessarily identical items.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nafter applying dissociation repeatedly, we transform ϕ into another expression ϕ′ and approximate P[ϕ] with P[ϕ′]. The question that we address in this paper is: how should we set the probabilities of the dissociated variables x′i in order to ensure that P[ϕ′] is a good approximation of P[ϕ]? In particular, we seek conditions under which ϕ′ is guaranteed to be either an upper bound P[ϕ′] ≥ P[ϕ] or a lower bound P[ϕ′] ≤ P[ϕ].\nOur main result can be summarized as follows: Suppose that x occurs positively in ϕ. Dissociate x into two variables x′1 and x′2 such that the dissociated formula is ϕ′ = ϕ′1 ∧ ϕ′2, where x′1 occurs only in ϕ′1 and x′2 occurs only in ϕ′2; in other words, ϕ ≡ ϕ′1[x′1/x] ∧ ϕ′2[x′2/x] (we will later define this as “conjunctive dissociation”). Let p = P[x], p′1 = P[x′1], p′2 = P[x′2] be their probabilities. Then (1) P[ϕ′] ≥ P[ϕ] iff p′1 · p′2 ≥ p, and (2) P[ϕ′] ≤ P[ϕ] iff p′1 ≤ p and p′2 ≤ p. In particular, the best upper bounds are obtained by choosing any p′1, p′2 that satisfy p′1 · p′2 = p, and the best lower bound is obtained by setting p′1 = p′2 = p. The “only if” direction holds assuming ϕ′ satisfies certain mild conditions (e.g., it should not be redundant), and under the assumption that p′1, p′2 are chosen obliviously, i.e. they are functions only of p = P[x] and independent of the probabilities of all other variables. This restriction to oblivious probabilities guarantees the computation of the probabilities p′1, p′2 to be very simple.3 Our result extends immediately to the case when the variable x is dissociated into several variables x′1, x ′ 2, . . . , x ′ d, and also extends (with appropriate changes) to the case when the expressions containing the dissociated variables are separated by ∨ rather than ∧ (Fig.1). Example 1.1 (2CNF Dissociation). For a simple illustration of our main result, consider a Positive-Partite-2CNF expression with |E| clauses ϕ = ∧\n(i,j)∈E (xi ∨ yj) (1)\nfor which calculating its probability is already #P-hard [Provan and Ball 1983]. If we dissociate all occurrences of all m variables xi, then the expression becomes:\nϕ′ = ∧\n(i,j)∈E (x′i,j ∨ yj) (2)\nwhich is equivalent to ∧ j ( yj ∨ ∧ i,j x ′ i,j ) . This is a read-once expression whose probability can always be computed in PTIME [Gurvich 1977]. Our main result implies the following: Let pi = P[xi], i ∈ [m] be the probabilities of the original variables and denote p′i,j = P[x′i,j ] the probabilities of the fresh variables. Then (1) if ∀i ∈ [m] : p′i,j1 · p′i,j2 · · · p′i,jdi = pi, then ϕ\n′ is an upper bound (P[ϕ′] ≥ P[ϕ]); (2) if ∀i ∈ [m] : p′i,j1 = p′i,j2 = . . . = p′i,jdi = pi, then ϕ\n′ is a lower bound (P[ϕ′] ≤ P[ϕ]). Furthermore, these are the best possible oblivious bounds, i.e. where p′i,j depends only on pi = P[xi] and is chosen independently of other variables in ϕ.\nWe now explain how dissociation generalizes two other approximation methods in the literature (Fig.1 gives a high-level summary and Sect.5 the formal details).\nRelaxation & Compensation. This is a framework by Choi and Darwiche [2009; 2010] for approximate probabilistic inference in graphical models. The approach performs exact inference in an approximate model that is obtained by relaxing equiv-\n3 Our usage of the term oblivious is inspired by the notion of oblivious routing algorithms [Valiant 1982] which use only local information and which can therefore be implemented very efficiently. Similarly, our oblivious framework forces p′1, p ′ 2 to be computed only as a function of p, without access to the rest of ϕ. One can always find values p′1, p ′ 2 for which P[ϕ] = P[ϕ′]. However, to find those value in general, one has to first compute q = P[ϕ], then find appropriate values p′1, p′2 for which the equality P[ϕ′] = q holds. This is not practical, since our goal is to compute q in the first place.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nalence constraints in the original model, i.e. by removing edges. The framework allows one to improve the resulting approximations by compensating for the relaxed constraints. In the particular case of a conjunctive Boolean formula ϕ = ϕ1 ∧ ϕ2, relaxation refers to substituting any variable x that occurs in both ϕ1 and ϕ2 with two fresh variables x′1 in ϕ1 and x′2 in ϕ2. Compensation refers to then setting their probabilities p′1 = P[x′1] and p′2 = P[x′2] to p′1 = p and p′2 = P[x|ϕ1]. This new probability assignment is justified by the fact that, if x is the only variable shared by ϕ1 and ϕ2, then compensation ensures that P[ϕ′] = P[ϕ] (we will show this claim in Prop. 5.1). In general, however, ϕ1, ϕ2 have more than one variable in common, and in this case we have P[ϕ′] 6= P[ϕ] for the same compensation. Thus in general, compensation is applied as a heuristics. Furthermore, it is then not known whether compensation provides an upper or lower bound.\nIndeed, let p′1 = p, p′2 = P[x|ϕ1] be the probabilities set by the compensation method. Recall that our condition for P[ϕ′] to be an upper bound is p′1 · p′2 ≥ p, but we have p′1 · p′2 = p · P[x|ϕ1] ≤ p. Thus, the compensation method does not satisfy our oblivious upper bound condition. Similarly, because of p′1 = p and p′2 ≥ p, these values fail to satisfy our oblivious lower bound condition. Thus, relaxation is neither a guaranteed upper bound, nor a guaranteed lower bound. In fact, relaxation is not oblivious at all (since p′2 is computed from the probabilities of all variables, not just P[x]). This enables it to be an exact approximation in the special case of a single shared variable, but fails to guarantee any bounds, in general.\nModel-based approximations. Another technique for approximation described by Fink and Olteanu [2011] is to replace ϕ with another expression whose set of models is either a subset or superset of those of ϕ. Equivalently, the upper bound is a formula ϕU such that ϕ ⇒ ϕU , and the lower bound is ϕL such that ϕL ⇒ ϕ. We show in this paper, that if ϕ is a positive Boolean formula, then all upper and lower modelbased bounds can be obtained by repeated dissociation: the model-based upper bound is obtained by repeatedly setting probabilities of dissociated variables to 1, and the model-based lower bound by setting the probabilities to 0. While the thus generated model-based upper bounds for conjunctive expressions correspond to optimal oblivious dissociation bounds, the model-based lower bounds for conjunctive expressions are not optimal and can always be improved by dissociation.\nIndeed, consider first the upper bound for conjunctions: the implication ϕ ⇒ ϕU holds iff there exists a formula ϕ1 such that ϕ ≡ ϕ1∧ϕU .4 Pick a variable x, denote p = P[x] its probability, dissociate it into x′1 in ϕ1 and x′2 in ϕU , and set their probabilities as p′1 = 1 and p′2 = p. Thus, ϕU remains unchanged (except for the renaming of x to x′2), while in ϕ1 we have set x1 = 1. By repeating this process, we eventually transform ϕ1 into true (Recall that our formula is monotone). Thus, model-based upper bounds are obtained by repeated dissociation and setting p′1 = 1 and p′2 = p at each step. Our results show that this is only one of many oblivious upper bounds as any choices with p′1p ′ 2 ≥ p lead to an oblivious upper bound for conjunctive dissociations.\nConsider now the lower bound: the implication ϕL ⇒ ϕ is equivalent to ϕL ≡ ϕ ∧ ϕ2. Then there is a sequence of finitely many conjunctive dissociation steps, which transforms ϕ into ϕ ∧ ϕ2 and thus into ϕL. At each step, a variable x is dissociated into x′1 and x′2, and their probabilities are set to p′1 = p and p′2 = 0, respectively.5 According to our result, this choice is not optimal: instead one obtains a tighter bound by also setting p′2 = p, which no longer corresponds to a model-based lower bound.\n4Fink and Olteanu [2011] describe their approach for approximating DNF expressions only. However, the idea of model-based bounds applies equally well to arbitrary Boolean expressions, including those in CNF. 5The details here are more involved and are given in detail in Sect.5.2.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nThus, model-based lower bounds for conjunctive expressions are not optimal and can always be improved by using dissociation.\nOur dual result states the following for the case when the two formulas are connected with disjunction ∨ instead of conjunction ∧: (1) the dissociation is an upper bound iff p′1 ≥ p and p′2 ≥ p, and (2) it is a lower bound iff (1 − p′1)(1 − p′2) ≥ 1 − p. We see that model-based approximation gives an optimal lower bound for disjunctions, because (1− p′1)(1− p′2) = 1 · (1− p) = 1− p, however non-optimal upper bounds. Example 7.2 illustrates this asymmetry and the possible improvement through dissociation with a detailed simulation-based example.\nBounds for hard probabilistic queries. Query evaluation on probabilistic databases reduces to the problem of computing the probability of its lineage expression which is a a monotone, k-partite Boolean DNF where k is fixed by the number of joins in the query. Computing the probability of the lineage is known to be #P-hard for some queries [Dalvi and Suciu 2007], hence we are interested in approximating these probabilities by computing dissociated Boolean expressions for the lineage. We have previously shown in [Gatterbauer et al. 2010] that every query plan for a query corresponds to one possible dissociation for its lineage expression. The results in this paper show how to best set the probabilities for the dissociated expressions in order to obtain both upper bounds and lower bounds. We further show that all the computation can be pushed inside a standard relational database engine with the help of SQL queries that use User-Defined-Aggregates and views that replace the probabilities of input tuples with their optimal symmetric lower bounds. We illustrate this approach in Sect.6 and validate it on TPC-H data in Sect.7.5.\nMain contributions. (1) We introduce an algebraic framework for approximating the probability of Boolean functions by treating multiple occurrences of variables as independent and assigning them new individual probabilities. We call this approach dissociation; (2) we determine the optimal upper and lower bounds for conjunctive and disjunctive dissociations under the assumption of oblivious value assignments; (3) we show how existing relaxation-based and model-based approximations fit into the larger design space of dissociations, and show that for every model-based bound there is at least one dissociation-based bound which is as good or tighter; (4) we apply our general framework to both upper and lower bound hard probabilistic conjunctive queries without self-joins in guaranteed PTIME by translating the query into a sequence of standard SQL queries; and (5) we illustrate and evaluate with several detailed examples the application of this technique. Note that this paper does not address the algorithmic complexities in determining alternative dissociations, in general.\nOutline. Section 2 starts with some notational background, and Sect. 3 formally defines dissociation. Section 4 contains our main results on optimal oblivious bounds. Section 5 formalizes the connection between relaxation, model-based bounds and dissociation, and shows how both previous approaches can be unified under the framework of dissociation. Section 6 applies our framework to derive upper and lower bounds for hard probabilistic queries with standard relational database management systems. Section 7 gives detailed illustrations on the application of dissociation and oblivious bounds. Finally, Sect.8 relates to previous work before Sect.9 concludes."
    }, {
      "heading" : "2. GENERAL NOTATIONS AND CONVENTIONS",
      "text" : "We use [m] as short notation for {1, . . . ,m}, use the bar sign for the complement of an event or probability (e.g., x̄ = ¬x, and p̄ = 1− p), and use a bold notation for sets (e.g., s ⊆ [m]) or vectors (e.g., x = 〈x1, . . . , xm〉) alike. We assume a set x of independent Boolean random variables, and assign to each variable xi a primitive event which is true with probability pi = P[xi]. We do not formally distinguish between the variable xi and the event xi that it is true. By default, all primitive events are assumed to be\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nindependent (e.g., P[x1 ∧ x2] = p1p2). We are interested in bounding the probability P[f ] of a Boolean function f , i.e. the probability that the function is true if each of the variables is independently true or false with given probabilities. When no confusion arises, we blur the distinction between a Boolean expression ϕ and the Boolean function fϕ it represents (cf. [Crama and Hammer 2011, Sect. 1.2]) and write P[ϕ] instead of P[fϕ]. We also use the words formula and expression interchangeably. We write f(x) to indicate that x is the set of primitive events appearing in the function f , and f [x1/x] to indicate that x1 is substituted for x in f . We often omit the operator ∧ and denote conjunction by mere juxtaposition instead."
    }, {
      "heading" : "3. DISSOCIATION OF BOOLEAN FUNCTIONS AND EXPRESSIONS",
      "text" : "We define here dissociation formally. Let f(x,y) and f ′(x′,y) be two Boolean functions, where x,x′,y are three disjoint sets of variables. Denote |x| = m, |x′| = m′, and |y| = n. We restrict f and f ′ to be positive in x and x′, respectively [Crama and Hammer 2011, Def. 1.24].\nDefinition 3.1 (Dissociation). We call a function f ′ a dissociation of f if there exists a substitution θ : x′ → x s.t. f ′[θ] = f .\nExample 3.2 (CNF Dissociation). Consider two functions f and f ′ given by CNF expressions\nf = (x1 ∨ y1)(x1 ∨ y2)(x2 ∨ y1)(x2 ∨ y3) f ′ = (x′1,1 ∨ y1)(x′1,2 ∨ y2)(x′2 ∨ y1)(x′2 ∨ y3)\nThen f ′ is a dissociation of f as f ′[θ] = f for the substitution θ = {(x′1,1, x1), (x′1,2, x1), (x′2, x2)}. Figure 2 shows the CNF expressions’ primal graphs.6\nIn practice, to find a dissociation for a function f(x,y), one proceeds like this: Choose any expression ϕ(x,y) for f and thus f = fϕ. Replace the ki distinct occurrences of variables xi in ϕ with di fresh variables x′i,1, x′i,2, . . . , x′i,di , with di ≤ ki. The resulting expression ϕ′ represents a function f ′ that is a dissociation of f . Notice that we may obtain different dissociations by deciding for which occurrences of xi to use distinct fresh variables, and for which occurrences to use the same variable. We may further obtain more dissociations by starting with different, equivalent expressions ϕ for the function f . In fact, we may construct infinitely many dissociations this way. We also note that every dissociation of f can be obtained through the process outlined here. Indeed, let f ′(x′,y) be a dissociation of f(x,y) according to Definition 3.1, and let θ be the substitution for which f ′[θ] = f . Then, if ϕ′ is any expression representing f ′, the expression ϕ = ϕ′[θ] represents f . We can thus apply the described dissociation process to a certain expression ϕ and obtain f ′.\n6The primal graph of a CNF (DNF) has one node for each variable and one edge for each pair of variables that co-occur in some clause (conjunct). This concept originates in constraint satisfaction and it is also varyingly called co-occurrence graph or variable interaction graph [Crama and Hammer 2011].\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nExample 3.3 (Alternative Dissociations). Consider the two expressions: ϕ = (x ∨ y1)(x ∨ y2)(x ∨ y3)(y4 ∨ y5) ψ = xy4 ∨ xy5 ∨ y1y2y3y4 ∨ y1y2y3y5\nBoth are equivalent (ϕ ≡ ψ) and thus represent the same Boolean function (fϕ = fψ). Yet each leads to a quite different dissociation in the variable x:\nϕ′ = (x′1 ∨ y1)(x′2 ∨ y2)(x′3 ∨ y3)(y4 ∨ y5) ψ′ = x′1y4 ∨ x′2y5 ∨ y1y2y3y4 ∨ y1y2y3y5\nHere, ϕ′ and ψ′ represent different functions (fϕ′ 6= fψ′) and are both dissociations of f for the substitutions θ1 = {(x′1, x), (x′2, x), (x′3, x)} and θ2 = {(x′1, x), (x′2, x)}, respectively.\nExample 3.4 (More alternative Dissociations). Consider the AND-function f(x, y) = xy. It can be represented by the expressions xxy, or xxxy, etc., leading to the dissociations x′1x′2y, or x′1x′2x′3y, etc. For even more dissociations, represent f using the expression (x ∨ x)y ∨ xy, which can dissociate to (x′1 ∨ x′2)y ∨ x′3y, or (x′1 ∨ x′2)y ∨ x′1y, etc. Note that several occurrences of a variable can be replaced by the same new variables in the dissociated expression."
    }, {
      "heading" : "4. OBLIVIOUS BOUNDS FOR DISSOCIATED EVENT EXPRESSIONS",
      "text" : "Throughout this section, we fix two Boolean functions f(x,y) and f ′(x′,y) such that f ′ is a dissociation of f . We are given the probabilities p = P[x] and q = P[y]. Our goal is to find probabilities p′ = P[x′] of the dissociated variables so that P[f ′] is an upper or lower bound for P[f ]. We first define oblivious bounds (Sect. 4.1), then characterize them, in general, through valuations (Sect.4.2) and, in particular, for conjunctive and disjunctive dissociations (Sect. 4.3), then derive optimal bounds (Sect. 4.4), and end with illustrated examples for CNF and DNF dissociations (Sect.4.5)."
    }, {
      "heading" : "4.1. Definition of Oblivious Bounds",
      "text" : "We use the subscript notation Pp,q[f ] and Pp′,q[f ′] to emphasize that the probability space is defined by the probabilities p = 〈p1, p2, . . .〉, q = 〈q1, q2, . . .〉, and p′ = 〈p′1, p′2, . . .〉, respectively. Given p and q, our goal is thus to find p′ such that Pp′,q[f ′] ≥ Pp,q[f ] or Pp′,q[f ′] ≤ Pp,q[f ].\nDefinition 4.1 (Oblivious Bounds). Let f ′ be a dissociation of f and p = P[x]. We call p′ an oblivious upper bound for p and dissociation f ′ of f iff ∀q : Pp′,q[f ′] ≥ Pp,q[f ]. Similarly, p′ is an oblivious lower bound iff ∀q : Pp′,q[f ′] ≤ Pp,q[f ].\nIn other words, p′ is an oblivious upper bound if the probability of the dissociated function f ′ is bigger than that of f for every choice of q. Put differently, the probabilities of x′ depend only on the probabilities of x and not on those of y.\nAn immediate upper bound is given by p′ = 1, since f is monotone and f ′[1/x′] = f [1/x]. Similarly, p = 0 is a naı̈ve lower bound. This proves that the set of upper and lower bounds is never empty. Our next goal is to characterize all oblivious bounds and to then find optimal ones."
    }, {
      "heading" : "4.2. Characterization of Oblivious Bounds through Valuations",
      "text" : "We will give a necessary and sufficient characterization of oblivious bounds, but first we need to introduce some notations. If f(x,y) is a Boolean function, let ν : y → {0, 1} be a truth assignment or valuation for y. We use ν for the vector 〈ν(y1), . . . , ν(yn)〉, and denote with f [ν] the Boolean function obtained after applying the substitution ν. Note that f [ν] depends on variables x only. Furthermore, let g be n Boolean functions,\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nover variables z. We denote with gν the Boolean function gν = ∧ j g ν j , where gνj = ḡj if ν(yj) = 0 and gνj = gj if ν(yj) = 1.\nExample 4.2 (Valuation Notation). Assume g = 〈g1, g2〉 with g1 = z1z2 and g2 = z1z3, and ν = 〈0, 1〉. Then gν = ¬(z1z2)∧z1z3 = z1z̄2z3. Figure 3 illustrates our notation for this simple example with the help of Karnaugh maps. We encourage the reader to take a moment and carefully study the correspondences between g, ν, and gν .\nThen, any function f(x,y) admits the following expansion by the y-variables:\nf(x,y) = ∨\nν\n( f [ν] ∧ yν ) (3)\nNote that any two expressions in the expansion above are logically contradictory, a property called determinism by Darwiche and Marquis [2002], and that it can be seen as the result of applying Shannon’s expansion to all variables of y.\nExample 4.3 (Valuation Notation continued). Consider the function f = (x∨y1)(x∨ y2). For the example valuation ν = 〈0, 1〉, we have f [ν] = (x∨0)(x∨1) = x and yν = ȳ1y2. Equation 3 gives us an alternative way to write f as disjunction over all 22 valuations of y as f = x(ȳ1ȳ2) ∨ x(y1ȳ2) ∨ x(ȳ1y2) ∨ y1y2.\nThe following proposition is a necessary and sufficient condition for oblivious upper and lower bounds, based on valuations.\nPROPOSITION 4.4 (OBLIVIOUS BOUNDS AND VALUATIONS). Fix two Boolean functions f(x,y), f ′(x′,y) s.t. f ′ is a dissociation of f , and let p and p′ denote the probabilities of the variables x and x′, respectively. Then p′ is an oblivious upper bound iff Pp′ [f ′[ν]] ≥ Pp[f [ν]] for every valuation ν for y. The proposition holds similarly for oblivious lower bounds.\nPROOF. Remember that any two events in Eq. 3 are disjoint. The total probability theorem thus allows us to sum over the probabilities of all conjuncts:\nPp,q[f(x,y)] = ∑\nν\n( Pp[f [ν]] · Pq[yν ] )\nPp′,q[f ′(x,y)] = ∑\nν\n( Pp′ [f ′[ν]] · Pq[yν ] )\nThe “if” direction follows immediately. For the “only if” direction, assume that p′ is an oblivious upper bound. By definition, Pp′,q[f ′] ≥ Pp,q[f ] for every q. Fix any valuation ν : y → {0, 1}, and define the following probabilities q: qi = 0 when ν(yi) = 0, and qi = 1 when ν(yi) = 1. It is easy to see that Pp,q[f ] = Pp[f [ν]], and similarly, Pp′,q[f ′] = Pp′ [f ′[ν]], which proves Pp′ [f ′[ν]] ≥ Pp[f [ν]].\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nA consequence of choosing p′ obliviously is that it remains a bound even if we allow the variables y to be arbitrarily correlated. More precisely:\nCOROLLARY 4.5 (OBLIVIOUS BOUNDS AND CORRELATIONS). Let f ′(x′,y) be a dissociation of f(x,y), let p′ be an oblivious upper bound for p, and let g = 〈g1, . . . , g|y|〉 be Boolean functions in some variables z with probabilities r = P[z]. Then: Pp′,r[f ′ ( x′,g(z) ) ] ≥ Pp,r[f ( x,g(z) ) ]. The result for oblivious lower bounds is similar.\nThe intuition is that, by substituting the variables y with functions g in f(x,y), we make y correlated. The corollary thus says that an oblivious upper bound remains an upper bound even if the variables y are correlated. This follows from folklore that any correlation between the variables y can be captured by general Boolean functions g. For completeness, we include the proof in Appendix B.\nPROOF OF COROLLARY 4.5. We derive the probabilities of f and f ′ from Eq.3:\nPp,r[f(x,g)] = ∑\nν\n( Pp[f [ν]] · Pr[gν ] )\nPp′,r[f ′(x,g)] = ∑\nν\n( Pp′ [f ′[ν]] · Pr[gν ] )\nThe proof follows now immediately from Prop. 4.4."
    }, {
      "heading" : "4.3. Oblivious Bounds for Unary Conjunctive and Disjunctive Dissociations",
      "text" : "A dissociation f ′(x′,y) of f(x,y) is called unary if |x| = 1, in which case we write the function as f(x,y). We next focus on unary dissociations, and establish a necessary and sufficient condition for probabilities to be oblivious upper or lower bounds for the important classes of conjunctive and disjunctive dissociations. The criterion also extends as a sufficient condition to non-unary dissociations, since these can be obtained as a sequence of unary dissociations.7\nDefinition 4.6 (Conjunctive and Disjunctive Dissociation). Let f ′(x′,y) be a Boolean function in variables x′,y. We say that the variables x′ are conjunctive in f ′ if f ′(x′,y) = ∧ j∈[d] fj(x ′ j ,y), d = |x′|. We say that a dissociation f ′(x′,y) of f(x,y) is conjunctive if x′ are conjunctive in f ′. Similarly, we say that x′ are disjunctive in f ′ if f ′(x′,y) = ∨ j∈[d] fj(x ′ j ,y), and a dissociation is disjunctive if x′ is disjunctive in f ′.\nThus in a conjunctive dissociation, each dissociated variable x′j occurs in exactly one Boolean function fj and these functions are combined by ∧ to obtain f ′. In practice, we start with f written as a conjunction, then replace x with a fresh variable in each conjunct:\nf(x,y) = ∧ fj(x,y)\nf ′(x′,y) = ∧ fj(x ′ j ,y)\nDisjunctive dissociations are similar. Note that if x′ is conjunctive in f ′(x′,y), then for any substitution ν : y→ {0, 1}, f ′[ν]\nis either 0, 1, or a conjunction of variables in x′: f ′[ν] = ∧ j∈s x ′ j , for some set s ⊆ [d],\nwhere d = |x′|. Similarly, if x′ is disjunctive, then f ′[ν] is 0, 1, or ∨j∈s x′j .8\n7Necessity does not always extend to non-unary dissociations. The reason is that an oblivious dissociation for x may set the probability of a fresh variable by examining all variables x, while a in sequence of oblivious dissociations each new probability P[x′i,j ] may depend only on the variable xi currently being dissociated. 8 Note that for s = ∅: f ′[ν] = ∧j∈s x′j = 1 and f ′[ν] = ∨ j∈s x ′ j = 0.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nWe need one more definition before we state the main result in our paper.\nDefinition 4.7 (Cover). Let x′ be conjunctive in f ′(x′,y). We say that f ′ covers the set s ⊆ [d] if there exists a substitution ν s.t. f ′[ν] = ∧j∈s x′j . Similarly, if x′ is disjunctive, then we say that f ′ covers s if there exists ν s.t. f ′[ν] = ∨ j∈s x ′ j .\nTHEOREM 4.8 (OBLIVIOUS BOUNDS). Let f ′(x′,y) be a conjunctive dissociation of f(x,y), and let p = P[x], p′ = P[x′] be probabilities of x and x′, respectively. Then:\n(1) If p′j ≤ p for all j, then p′ is an oblivious lower bound for p, i.e. ∀q : Pp′,q[f ′] ≤ Pp,q[f ]. Conversely, if p′ is an oblivious lower bound for p and f ′ covers all singleton sets {j} with j ∈ [d], then p′j ≤ p for all j.\n(2) If ∏ j p ′ j ≥ p, then p′ is an oblivious upper bound for p, i.e. ∀q : Pp′,q[f ′] ≥ Pp,q[f ].\nConversely, if p′ is an oblivious upper bound for p and f ′ covers the set [d], then∏ j p ′ j ≥ p.\nSimilarly, the dual result holds for disjunctive dissociations f ′(x′,y) of f(x,y): (3) If p′j ≥ p for all j, then p′ is an oblivious upper bound for p. Conversely, if p′ is\nan oblivious upper bound for p and f ′ covers all singleton sets {j}, j ∈ [d], then p′j ≥ p.\n(4) If ∏ j(1− p′j) ≥ 1− p, then p′ is an oblivious lower bound for p. Conversely, if p′ is\nan oblivious lower bound for p and f ′ covers the set [d], then ∏ j(1− p′j) ≥ 1− p.\nPROOF. We make repeated use of Prop. 4.4. We give here the proof for conjunctive dissociations only; the proof for disjunctive dissociations is dual and similar.\n(1) We need to check Pp′ [f ′[ν]] ≤ Pp[f [ν]] for every ν. Since the dissociation is unary, f [ν] can be only 0, 1, or x, while f ′[ν] is 0, 1, or ∧ j∈s x ′ j for some set s ⊆ [d].\nCase 1: f [ν] = 0. We will show that f ′[ν] = 0, which implies Pp′ [f ′[ν]] = Pp[f [ν]] = 0. Recall that, by definition, f ′(x′,y) becomes f(x,y) if we substitute x for all variables x′j . Therefore, f ′[ν][x/x′1, . . . , x/x′d] = 0, which implies f ′[ν] = 0 because f ′ is monotone in the variables x′. Case 2: f [ν] = 1. Then Pp′ [f ′[ν]] ≤ Pp[f [ν]] holds trivially. Case 3: f [ν] = x. Then Pp[f [ν]] = p, while Pp′ [f ′[ν]] = ∏ j∈s p ′ j . We prove that\ns 6= ∅: this implies our claim, because ∏j∈s p′j ≤ p′j ≤ p, for any choice of j ∈ s. Suppose otherwise, that s = ∅, hence f ′[ν] = 1. Substituting all variables x′ with x transforms f ′ to f . This implies f [ν] = 1, which contradicts f [ν] = x.\nFor the converse, assume that p′ is an oblivious lower bound. Since f ′ covers {j}, there exists a substitution ν s.t. f ′[ν] = x′j , and therefore f [ν] = x. By Prop. 4.4 we have p′j = Pp′ [f ′[ν]] ≤ Pp[f [ν]] = p, proving the claim.\n(2) Here we need to check Pp′ [f ′[ν]] ≥ Pp[f [ν]] for every ν. The cases when f [ν] is either 0 or 1 are similar to the cases above, so we only consider the case when f [ν] = x. Then f ′[ν] = ∧ j∈s x ′ j and Pp′ [f ′[ν]] = ∏ j∈s p ′ j ≥ ∏ j pj ≥ p = Pp[f [ν]].\nFor the converse, assume p′ is an oblivious upper bound, and let ν be the substitution for which f ′[ν] = ∧ j x ′ j (which exists since f ′ is covers [d]). Then\nPp′ [f ′[ν]] ≥ Pp[f [ν]] implies p ≤ ∏ j pj ."
    }, {
      "heading" : "4.4. Optimal Oblivious Bounds for Unary Conjunctive and Disjunctive Dissociations",
      "text" : "We are naturally interested in the “best possible” oblivious bounds. Call a dissociation f ′ non-degenerate if it covers all singleton sets {j}, j ∈ [d] and the complete set [d]. Theorem 4.8 then implies:\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nCOROLLARY 4.9 (OPTIMAL OBLIVIOUS BOUNDS). If f ′ is a conjunctive dissociation of f and f ′ is non-degenerate, then the optimal oblivious lower bound is p′1 = p′2 = . . . = p, while the optimal oblivious upper bounds are obtained whenever p′1p′2 · · · = p. Similarly, if f ′ is a disjunctive dissociation of f and f ′ is non-degenerate, then the optimal oblivious upper bound is p′1 = p′2 = . . . = p, while the optimal oblivious lower bounds are obtained whenever (1− p′1) · (1− p′2) · · · = 1− p.\nNotice that while optimal lower bounds for conjunctive dissociations and optimal upper bounds for disjunctive dissociations are uniquely defined with p′j = p, there are infinitely many optimal bounds for the other directions (see Fig.1). Let us call bounds symmetric if all dissociated variable have the same probability. Then optimal symmetric upper bounds for conjunctive dissociations are p′j = d √ p, and optimal symmetric\nlower bounds for disjunctive dissociations p′j = 1− d √\n1− p. We give two examples of degenerate dissociations. First, the dissociation f ′ = (x′1y1 ∨ y3) ∧ (x′2y2 ∨ y3) does not cover either {1} nor {2}: no matter how we substitute y1, y2, y3, we can never transform f ′ to x′1. For example, f ′[1/y1, 0/y2, 0/y3] = 0 and f ′[1/y1, 0/y2, 1/y3] = 1. But f ′ does cover the set {1, 2} because f ′[1/y1, 1/y2, 0/y3] = x1x2. Second, the dissociation f ′ = (x′1 y1∨y2)∧ (x′2 y2∨y1) covers both {1} and {2}, but does not cover the entire set {1, 2}. In these cases the oblivious upper or lower bounds in Theorem 4.8 still hold, but are not necessarily optimal.\nHowever, most cases of practical interest result in dissociations that are nondegenerate, in which case the bounds in Theorem 4.8 are tight. We explain this here. Consider the original function, pre-dissociation, written in a conjunctive form:\nf(x,y) =g0 ∧ ∧\nj∈[d] (x ∨ gj) = g0 ∧\n∧\nj∈[d] fj (4)\nwhere each gj is a Boolean function in the variables y, and where we denoted fj = x∨gj . For example, if f is a CNF expression, then each fj is a clause containing x, and g0 is the conjunction of all clauses that do not contain x. Alternatively, we may start with a CNF expression, and group the clauses containing x in equivalence classes, such that each fj represents one equivalence class. For example, starting with four clauses, we group into two functions f = [(x∨y1)(x∨y2)]∧ [(x∨y3)(x∨y4)] = (x∨y1y2)∧(x∨y3y4) = f1∧f2. Our only assumption about Eq.4 is that it is non-redundant, meaning that none of the expressions g0 or fj may be dropped. Then we prove:\nPROPOSITION 4.10 (NON-DEGENERATE DISSOCIATION). Suppose the function f in Eq. 4 is non-redundant. Define f ′ = g0 ∧ ∧ j(x ′ j ∨ gj). Then f ′ covers every single-\nton set {j}. Moreover, if the implication g0 ⇒ ∨ j gj does not hold, then f\n′ also covers the set [d]. Hence f ′ is non-degenerate. A similar result holds for disjunctive dissociations if the dual implication g0 ⇐ ∧ j gj does not hold.\nPROOF. We give here the proof for conjunctive dissociations only; the proof for disjunctive dissociations follows from duality. We first prove that f ′ covers any singleton set {j}, for j ∈ [d]. We claim that the following logical implication does not hold:\ng0 ∧ ∧\ni 6=j gi ⇒ gj (5)\nIndeed, suppose the implication holds for some j. Then the following implication also holds: g0 ∧ ∧ i 6=j(x ∨ gi) ⇒ (x ∨ gj), since for x = 0 it is the implication above, while for x = 1 it is a tautology. Therefore, the function fj is redundant in Eq. 4, which contradicts our assumption. Hence, the implication Eq. 5 does not hold. Let ν be any\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nassignment that causes Eq. 5 to fail: thus, for all j ∈ {0, . . . , d}, j 6= i, gi[ν] = 1 and gj [ν] = 0. Therefore f ′[ν] = xj , proving that it covers {j}.\nNext, assume that g0 ⇒ ∨ j gj does not hold. We prove that f\n′ covers [d]. Let ν be any substitution that causes the implication to fail: g0[ν] = 1 and gj [ν] = 0 for j ∈ [d]. Then f ′[ν] = ∧ j∈[d] x ′ j ."
    }, {
      "heading" : "4.5. Illustrated Examples for Optimal Oblivious Bounds",
      "text" : "We next give two examples that illustrate optimal oblivious bounds for conjunctive and disjunctive dissociations in some detail.\nExample 4.11 (CNF Dissociation). Consider the function fc given by an CNF expression and its dissociation f ′c:\nfc = (x ∨ y1)(x ∨ y2)(x ∨ y3)y4 f ′c = (x ′ 1 ∨ y1)(x′2 ∨ y2)(x′3 ∨ y3)y4\nThere are 24 = 16 valuations for y = 〈y1, y2, y3, y4〉. Probabilities p′ = 〈p′1, p′2, p′3〉 are thus an oblivious upper bound exactly if they satisfy the 16 inequalities given under “CNF dissociation” in Fig. 4a. For valuations with ν4 = 0 (and thus fc[ν] = 0) or all\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nνj = 1 (and thus f ′c[ν] = 1) the inequalities trivially hold. For the remaining 7 nontrivial inequalities, p′1p′2p′3 ≥ p implies all others. Figure 4b shows the partial order between the non-trivial valuations, with x′1x′2x′3 implying all others. Since fc and f ′c are positive in x and x′, respectively, it follows that optimal oblivious upper bounds are given by p′1p′2p′3 = p, e.g., by setting p′i = 3 √ p for symmetric bounds.\nOblivious lower bounds are given by the 16 inequalities after inverting the inequality sign. Here we see that the three inequalities p′j ≤ p together imply the others. Hence, oblivious lower bounds are those that satisfy all three inequalities. The only optimal oblivious upper bounds are then given by p′j = p.\nExample 4.12 (DNF Dissociation). Consider the function fd given by an DNF expression and its dissociation f ′d:\nfd = xy1 ∨ xy2 ∨ xy3 ∨ y4 f ′d = x ′ 1y1 ∨ x′2y2 ∨ x′3y3 ∨ y4\nAn oblivious upper bound p′ = 〈p′1, p′2, p′3〉 must thus satisfy the 16 inequalities9 given under “DNF dissociation” in Fig. 4a. For valuations with ν4 = 1 (and thus f ′d[ν] = 1) or νj = 0 (and thus fd[ν] = 0) the inequalities trivially hold. For the remaining inequalities we see that the elements of set {x′1, x′2, x′3} together imply all others, and that x′1 ∨ x′2 ∨ x′3 is implied by all others (Fig. 4c shows the partial order between the non-trivial valuations). Thus, an oblivious upper bound must satisfy p′j ≥ p, and the optimal one is given by p′j = p. Analogously, an oblivious lower bound must satisfy p̄′1p̄ ′ 2p̄ ′ 3 ≥ p̄. Optimal ones are given for p̄′1p̄′2p̄′3 = p̄, e.g., by setting p′j = 1− 3 √ p̄."
    }, {
      "heading" : "5. RELAXATION AND MODEL-BASED BOUNDS AS DISSOCIATION",
      "text" : "This section formalizes the connection between relaxation, model-based bounds and dissociation that was outlined in the introduction. In other words, we show how both previous approaches can be unified under the framework of dissociation."
    }, {
      "heading" : "5.1. Relaxation & Compensation",
      "text" : "The following proposition shows relaxation & compensation as conjunctive dissociation and was brought to our attention by Choi and Darwiche [2011].\nPROPOSITION 5.1 (COMPENSATION AND CONJUNCTIVE DISSOCIATION). Let f1, f2 be two monotone Boolean functions which share only one single variable x. Let f be their conjunction, and f ′ be the dissociation of f on x, i.e.\nf = f1 ∧ f2 f ′ = f1[x ′ 1/x] ∧ f2[x′2/x]\nThen P[f ] = P[f ′] for P[x′1] = P[x] and P[x′2] = P[x|f1].\nPROOF OF PROP. 5.1. First, note that P[f ] = P[f1]P[f2|f1]. On the other hand, P[f ′] = P[f ′1]P[f ′2] as f ′1 and f ′2 are independent after dissociating on the only shared variable x. We also have P[f1] = P[f ′1] since P[x] = P[x′1]. It remains to be shown that\n9Remember that the probability of a disjunction of two independent events is P[x′1∨x′2] = 1− p̄′1p̄′2.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nP[f ′2] = P[f2|f1]. Indeed: P[f ′2] = P[x′2 · f ′2[1/x′2] ∨ x̄′2 · f ′2[0/x′2]]\n= P[x′2] · P[f ′2[1/x′2]] + P[x̄′2] · P[f ′2[0/x′2]] = P[x|f1] · P[f2[1/x]] + P[x̄|f1] · P[f2[0/x]] = P[x|f1] · P[f2[1/x]|f1] + P[x̄|f1] · P[f2[0/x]|f1] = P[f2|f1]\nwhich proves the claim.\nNote that compensation is not oblivious, since the probability p′2 depends on the other variables occurring in ϕ1. Further note that, in general, ϕ1, ϕ2 have more than one variable in common, and in this case we have P[ϕ′] 6= P[ϕ] for the same compensation. Thus in general, compensation is applied as a heuristics, and it is then not known whether it provides an upper or lower bound.\nThe dual result for disjunctions holds by replacing f1 with its negation f̄1 in P[x′2] = P[x|f̄1]. This result is not immediately obvious from the previous one and has, to our best knowledge, not been stated or applied anywhere before.\nPROPOSITION 5.2 (“DISJUNCTIVE COMPENSATION”). Let f1, f2 be two monotone Boolean functions which share only one single variable x. Let f be their disjunction, and f ′ be the dissociation of f on x, i.e. f = f1 ∨ f2, and f ′ = f1[x′1/x] ∨ f2[x′2/x]. Then P[f ] = P[f ′] for P[x′1] = P[x] and P[x′2] = P[x|f̄1].\nPROOF OF PROP. 5.2. Let g = f̄ , g1 = f̄1, and g2 = f̄2. Then f = f1 ∨ f2 is equivalent to g = g1 ∧ g2. From Prop. 5.1, we know that P[g] = P[g′], and thus P[f ] = P[f ′], for P[x′1] = P[x] and P[x′2] = P[x|g1] = P[x|f̄1]."
    }, {
      "heading" : "5.2. Model-based Approximation",
      "text" : "The following proposition shows that all model-based bounds can be derived by repeated dissociation. However, not all dissociation-bounds can be explained as models since dissociation is in its essence an algebraic and not a model-based technique (dissociation creates more variables and thus changes the probability space). Therefore, dissociation can improve any existing model-based approximation approach. Example 7.2 will illustrate this with a detailed simulation-based example.\nPROPOSITION 5.3 (MODEL-BASED BOUNDS AS DISSOCIATIONS). Let f , fU be two monotone Boolean functions over the same set of variables, and for which the logical implication f ⇒ fU holds. Then: (a) there exists a sequence of optimal conjunctive dissociations that transform f to fU , and (b) there exists a sequence of non-optimal disjunctive dissociations that transform f to fU . The dual result holds for the logical implication fL ⇒ f : (c) there exists a sequence of optimal disjunctive dissociations that transform f to fL, and (d) there exists a sequence of non-optimal conjunctive dissociations that transform f to fL.\nPROOF OF PROP. 5.3. We focus here on the implication f ⇒ fU . The proposition for the results fL ⇒ f then follows from duality.\n(a) The implication f ⇒ fU holds iff there exists a positive function f2 such that f = fU ∧ f2. Pick a set of variables x s.t. f2[1/x] = 1, and dissociate f on x into f ′ = fU [x′1/x] ∧ f2[x′2/x]. By setting the probabilities of the dissociated variables to p′1 = p and p′2 = 1, the bounds become optimal (p′1p′2 = p). Further more, fU remains unchanged (except for the renaming of x to x′1), whereas f2 becomes true. Hence, we get f ′ = fU . Thus, all model-based upper bounds can be obtained by conjunctive dissociation and choosing optimal oblivious bounds at each dissociation step.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\n(b) The implication f ⇒ fU also holds iff there exists a positive function fd such that fU = f ∨ fd. Let m be the positive minterm or elementary conjunction involving all variables of f . The function fd can be then written as DNF fd = c1 ∨ c2 ∨ . . . , with products ci ⊆ m. Since f is monotone, we know m⇒ f , and thus also mfd ⇒ f . We can therefore write f = f ∨mfd or as\nf = f ∨mc1 ∨mc2 ∨ . . . Let xi be the set of all variables in m that do not occur in ci and denote with mi the conjunction of xi. Then then each mci can instead be written as mici and thus:\nf = f ∨m1c1 ∨m2c2 ∨ . . . WLOG, we now separate one particular conjunct mici and dissociate on the set xi\nf ′ = f ∨m1c1 ∨m2c2 ∨ . . .︸ ︷︷ ︸ f1 [x′1/xi] ∨mici︸︷︷︸ f2 [x′2/xi]\nBy setting the probabilities of the dissociated variables to the non-optimal upper bounds p′1 = p and p′2 = 1, f1 remains unchanged (except for the renaming of xi to x′1), whereas f2 becomes ci. Hence, we get f ′ = f ∨ m1c1 ∨ m2c2 ∨ · · · ∨ ci. We can now repeat the same process for all conjuncts mci and receive after a finite number of dissociation steps\nf ′′ = f ∨ (c1 ∨ c2 ∨ . . . ) = f ∨ fd Hence f ′′ = fU . Thus, all model-based upper bounds can be obtained by disjunctive dissociation and choosing non-optimal bounds at each dissociation step."
    }, {
      "heading" : "6. QUERY-CENTRIC DISSOCIATION BOUNDS FOR PROBABILISTIC QUERIES",
      "text" : "Our previous work [Gatterbauer et al. 2010] has shown how to upper bound the probability of conjunctive queries without self-joins by issuing a sequence of SQL statements over a standard relational DBMS. This section illustrates such dissociationbased upper bounds and also complements them with new lower bounds. We use the Boolean query Q :−R(X), S(X,Y ), T (Y ), for which the probability computation problem is known to be #P-hard, over the following database instance D:\nR A x1 1 x2 2\nS A B z1 1 1 z2 2 1 z3 2 2\nT B y1 1 y2 2\nThus, relation S has three tuples (1, 1), (2, 1), (2, 2), and both R and T have two tuples (1) and (2). Each tuple is annotated with a Boolean variable x1, x2, z1, . . . , y2, which represents the independent event that the corresponding tuple is present in the database. The lineage expression ϕ is then the DNF that states which tuples need to be present in order for the Boolean query Q to be true:\nϕ = x1z1y1 ∨ x2z2y1 ∨ x2z3y2 Calculating P[ϕ] for a general database instance is #P-hard. However, if we treat each occurrence of a variable xi in ϕ as different (in other words, we dissociate ϕ eagerly on all tuples xi from table R), then we get a read-once expression\nϕ′ = x1z1y1 ∨ x′2,1z2y1 ∨ x′2,2z3y2 = (x′1z1 ∨ x′2,1z2)y1 ∨ x′2,2z3y2\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nWriting pi, qi, ri for the probabilities of variables xi, yi, zi, respectively, we can calculate\nP[ϕ′] = (( (p′1 · r1)⊗ (p′2,1 · r2) ) · q1 ) ⊗ (p′2,2 · r3 · q2)\nwhere “·” stands for multiplication and “⊗” for independent-or.10 We know from Theorem 4.8 (3) that P[ϕ′] is an upper bound to P[ϕ] by assigning the original probabilities to the dissociated variables. Furthermore, we have shown in [Gatterbauer et al. 2010] that P[ϕ] can be calculated with a probabilistic query plan\nPR = π p ∅ 1 p Y [ πpY 1 p X [ R(X), S(X,Y ) ] , T (Y ) ]\nwhere the probabilistic join operator 1p [ . . . ]\n(in prefix notation) and the probabilistic project operator with duplicate elimination πp compute the probability assuming that their inputs are independent [Fuhr and Rölleke 1997]. Thus, when the join operator joins two tuples with probabilities p1 and p2, respectively, the output has probability p1p2. When the independent project operator eliminates k duplicate records with probabilities p1, . . . , pk, respectively, the output has probability 1− p̄1 · · · p̄k. This connection between read-once formulas and query plans was first observed by Olteanu and Huang [2008]. We write here PR to emphasize that this plan dissociates tuples in table R.11 Figure 5a shows the corresponding SQL query assuming that each of the input tables has one additional attribute P for the probability of a tuple. The query deploys a userdefined aggregate (UDA) IOR that calculates the independent-or for the probabilities of the tuples grouped together, i.e. IOR(p1, p2, . . . , pn) = 1 − p̄1p̄2 · · · p̄n. Appendix C states the UDA definition for PostgreSQL.\nWe also know from Theorem 4.8 (4) that P[ϕ′] is a lower bound to P[ϕ] by assigning new probabilities 1 − 2√1− p2 to x′2,1 and x′2,2 (or more generally, any probabilities p′2,1 and p′2,2 with p̄′2,1 · p̄′2,2 ≥ p̄2). Because of the connection between the read-once expression ϕ′ and the query plan PR, we can calculate the lower bound by using the same SQL query from Fig. 5a after exchanging the table R with a view VR (Fig. 5b); VR is basically a copy of R that replaces the probability pi of a tuple xi appearing in ϕ with 1 − di√1− pi where di is the number of times that xi appears in the lineage of Q. The view joins tables R, S and T , groups the original input tuples xi from R, and assigns each xi the new probability 1− di √ 1− pi calculated as 1-power(1-T.P,1e0/count(*)).\n10The independent-or combines two probabilities as if calculating the disjunction between two independent events. It is defined as p1 ⊗ p2 := 1− p̄1p̄2. 11Note we use the notation PR for both the probabilistic query plan and the corresponding SQL query.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nAlternatively to ϕ′, if we treat each occurrence of a variable yj in ϕ as different (in other words, we dissociate ϕ eagerly on all tuples yj from table T ), then we get another read-once expression\nϕ′′ = x1z1y ′ 1,1 ∨ x2z2y′1,2 ∨ x2z3y2\n= x1z1y ′ 1,1 ∨ x2(z2y′1,2 ∨ z3y2)\nP[ϕ′′] is an upper bound to P[ϕ] by assigning the original probabilities to the dissociated variables. In turn, P[ϕ′′] can be calculated with another probabilistic query plan that dissociates all tuples from table T instead of R:\nPT = π p ∅ 1 p X [ R(X), πpX 1 p Y [ S(X,Y ), T (Y ) ]]\nSimilarly to before, P[ϕ′′] is a lower bound to P[ϕ] by assigning new probabilities 1 − 2 √\n1− q1 to y′1,1 and y′1,2. And we can calculate this lower bound with the same query PT after exchanging T with a view VT that replaces the probability qj of a tuple yj with 1− dj √ 1− qj where dj is the number of times that yj appears in the lineage of Q.\nNote that both query plans will calculate upper and lower bounds to query Q over any database instance D. In fact, all possible query plans give upper bounds to the true query probability. And as we have illustrated here, by replacing the input tables with appropriate views, we can use the same query plans to derive lower bounds. We refer the reader to [Gatterbauer et al. 2010] where we develop the theory of the partial dissociation order among all possible query plans and give a sound and complete algorithm that returns a set of query plans which are guaranteed to give the tightest bounds possible in a query-centric way for any conjunctive query without self-joins. For our example hard query Q, plans PR and PT are the best possible plans. We further refer to [Gatterbauer and Suciu 2013] for more details and an extensive discussion on how to speed up the resulting multi-query evaluation.\nAlso note that these upper and lower bounds can be derived with the help of any standard relational database, even cloud-based databases which commonly do not allow users to define their own UDAs.12 To our best knowledge, this is the first technique that can upper and lower bound hard probabilistic queries without any modifications to the database engine nor performing any calculations outside the database."
    }, {
      "heading" : "7. ILLUSTRATIONS OF OBLIVIOUS BOUNDS",
      "text" : "In this section, we study the quality of oblivious bounds across varying scenarios: We study the bounds as function of correlation between non-dissociated variables (Sect. 7.1), compare dissociation-based with model-based approximations (Sect. 7.2), illustrate a fundamental asymmetry between optimal upper and lower bounds (Sect. 7.3), show that increasing the number of simultaneous dissociations does not necessarily worsen the bounds (Sect. 7.4), and apply our framework to approximate hard probabilistic queries over TPC-H data with a standard relational database management system (Sect.7.5)."
    }, {
      "heading" : "7.1. Oblivious Bounds as Function of Correlation between Variables",
      "text" : "Example 7.1 (Oblivious Bounds and Correlations). Here we dissociate the DNF ϕd = xA ∨ xB and the analogous CNF ϕc = (x ∨ A)(x ∨ B) on x and study the er-\n12The UDA IOR can be expressed with standard SQL aggregates, e.g., “IOR(Q3.P)” can be evaluated with “1-exp(sum(log(case Q3.P when 1 then 1E-307 else 1-Q3.P end)))” on Microsoft SQL Azure.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nror of the optimal oblivious bounds as function of the correlation between A and B.13 Clearly, the bounds also depend on the probabilities of the variables x, A, and B. Let p = P[x] and assume A and B have the same probability q = P[A] = P[B]. We set p′ = P[x′1] = P[x′2] according to the optimal symmetric bounds from Corollary 4.9.\nIn a few steps, one can calculate the probabilities as\nP[ϕd] = 2pq − pP[AB] P[ϕ′d] = 2p′q − p′\n2P[AB] P[ϕc] = p+ (1− p)P[AB] P[ϕ′c] = 2p′q + p′ 2 (1− 2q) + (1− p′2)P[AB]\nResults: Figure 6 shows the probabilities of the expressions P[ϕ] (full lines) and those of their dissociations P[ϕ′] (border of shaded areas) for various values of p, q and as function of the correlation ρ(A,B).14 For example, Fig.6d shows the case for DNF when P[x] is p = 0.8 and A,B have the same probability q of either 0.8, 0.5, or 0.2. When A,B\n13Note that this simplified example also illustrates the more general case ψd = xA ∨ xB ∨ C when C is independent of A and B, and thus P[ψd] = P[ϕd](1− P[C]) + P[C]. As a consequence, the graphs in Fig.6 for P[C] 6= 0 would be vertically compressed and the bounds tighter in absolute terms. 14The correlation ρ(A,B) between Boolean events A and B is defined as ρ(A,B) = cov(A,B)√\nvar(A)var(B) with\ncovariance cov(A,B) = P[AB] − P[A]P[B] and variance var(A) = P[A] − (P[A])2 [Feller 1968]. Notice that\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nare not correlated at all (ρ = 0), then the upper bound is a better approximation when q is small, and the lower bound is a better approximation when q is large. On the other hand, if A,B are not correlated, then there is no need to dissociate the two instances of x as one can then compute P[(x∨A)(x∨B)] simply as p+p̄P[A]P[B]. The more interesting case is when A,B are positively correlated (P[AB] ≥ P[A]P[B], e.g., positive Boolean functions of other independent variables z, such as the provenance for probabilistic conjunctive queries). The right of the vertical dashed line of Fig. 6d shows that, in this case, dissociation offers very good upper and lower bounds, especially when the formula has a low probability. The graph also shows the effect of dissociation when A,B are negatively correlated (left of dashed line). Notice that the correlation cannot always be −1 (e.g., two events, each with probability > 0.5, can never be disjunct). The graphs also illustrate why these bounds are obliviously optimal, i.e. without knowledge of A,B: for every choice of p, there are some A,B for which the upper or lower bound becomes tight."
    }, {
      "heading" : "7.2. Oblivious Bounds versus Model-based Approximations",
      "text" : "Example 7.2 (Disjunctive Dissociation and Models). This example compares the approximation of our dissociation-based approach with the model-based approach by Fink and Olteanu [2011] and illustrates how dissociation-based bounds are tighter, in general, than model-based approximations. For this purpose, we consider again the hard Boolean query Q :−R(X), Sd(X,Y ), T (Y ) over the database D from Sect. 6. We now only assume that the table S is deterministic, as indicated by the superscript d in Sd. The query-equivalent lineage formula is then\nϕ = x1y1 ∨ x2y1 ∨ x2y2 for which Fig.7a shows the bipartite primal graph. We use this instance as its primal graph forms a P4, which is the simplest 2-partite lineage that is not read-once.15 In order to compare the approximation quality, we need to limit ourselves to an example which is tractable enough so we can generate the whole probability space. In practice, we allow each variable to have any of 11 discrete probabilities D = {0, 0.1, 0.2, . . . , 1} and consider all 114 = 14641 possible probability assignments ν : 〈p1, p2, q1, q2〉 → D4 with p = P[x] and q = P[y]. For each ν, we calculate both the absolute error δ∗ = P[ϕ∗]− P[ϕ] and the relative error ε∗ = δ ∗\nP[ϕ] , where P[ϕ ∗] stands for any of the approximations,\nand the exact probability P[ϕ] is calculated by the Shannon expansion on y1 as ϕ ≡ y1(x1 ∨ x2) ∨ ¬y1(x2y2) and thus Pp,q[ϕ] = (1− (1− p1)(1− p2))q1 + (1− q1)p2q2.\nModels: We use the model-based approach by Fink and Olteanu [2011] to approximate ϕ with lowest upper bound (LUB) formulas ϕUi and greatest lower bound (GLB) formulas ϕLi, for which ϕLi ⇒ ϕ and ϕ ⇒ ϕUi, and neither of the upper (lower) bounds implies another upper (lower) bound. Among all models considered, we focus on only read-once formulas. Given the lineage ϕ, the 4 LUBs are ϕU1 = x1y1 ∨ x2, ϕU2 = y1 ∨ x2y2, ϕU3 = (x1 ∨ x2)y1 ∨ y2, and ϕU4 = x1 ∨ x2(y1 ∨ y2). The 3 GLBs are ϕL1 = (x1 ∨ x2)y1, ϕL2 = x1(y1 ∨ y2), and ϕL3 = x1y1 ∨ x2y2. For each ν, we choose mini(P[ϕUi]) and maxi(P[ϕLi]) as the best upper and lower model-based bounds, respectively.\nρ(A,B) = P[AB]−q2 q−q2 and, hence: P[AB] = ρ(A,B)·(q−q\n2)+q2. Further, P[AB] = 0 (i.e. disjointness between A and B) is not possible for q > 0.5, and from P[A ∨B] ≤ 1, one can derive P[AB] ≥ 2q − 1. In turn, ρ = −1 is not possible for q < 0.5, and it must hold P[AB] ≥ 0. From both together, one can derive the condition ρmin(q) = max(− q1−q ,− 1+q2−2q q−q2 ) which gives the minimum possible value for ρ, and which marks the left starting point of the graphs in Fig.6 as function of q. 15 A path Pn is a graph with vertices {x1, . . . , xn} and edges {x1x2, x2x3, . . . , xn1xn}.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nDissociation: Analogously, we consider the possible dissociations into read-once formulas. For our given ϕ, those are ϕ′1 = (x1∨x′2,1)y1∨x′2,2y2 and ϕ′2 = x1y′1,1∨x2(y′1,2∨y2), with Fig. 7b and Fig. 7c illustrating the dissociated read-once primal graphs.16 From Corollary 4.9, we know that Pp′,q[ϕ′1] ≥ Pp,q[ϕ] for the only optimal oblivious upper bounds p′2,1 = p′2,2 = p2 and Pp′,q[ϕ′1] ≤ Pp,q[ϕ] for any p′2 with p̄′2,1p̄′2,2 = p̄2. In particular, we choose 3 alternative optimal oblivious lower bounds p′2 ∈ {〈p2, 0〉, 〈1 −√\n1− p2, 1 − √\n1− p2〉, 〈0, p2〉} (see Fig. 7d). Analogously Pp,q′ [ϕ′2] ≥ Pp,q[ϕ] for q′1,1 = q′1,2 = q1 and Pp,q′ [ϕ′2] ≤ Pp,q[ϕ] for q′1 ∈ {〈q1, 0〉, 〈1 − √ 1− q1, 1 − √ 1− q1〉, 〈0, q1〉}. For each ν, we choose the minimum among the 2 upper bounds and the maximum among the 6 lower bounds as the best upper and lower dissociation-based bounds, respectively.\nResults: Figures 7e-g show that dissociation-based bounds are always better or equal to model-based bounds. The reason is that all model-based bounds are a special case of oblivious dissociation bounds. Furthermore, dissociation gives far better upper bounds, but only slighter better lower bounds. The reason is illustrated in Fig. 7d: the single dissociation-based upper bound p′ = 〈p, p〉 always dominates the two model-based upper bounds, whereas the two model-based lower bounds are special cases of infinitely many optimal oblivious lower dissociation-based bounds. As extreme case, it is therefore possible for a model-based lower bound to coincide with the best among all optimal\n16Note that we consider here dissociation on both x- and y-variables, thus do not treat them as distinct.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\noblivious lower dissociation bounds. For our example, we evaluate three oblivious lower bounds, two of which coincide with models."
    }, {
      "heading" : "7.3. Conjunctive versus Disjunctive Dissociation",
      "text" : "Example 7.3 (Disjunctive and Conjunctive Dissociation). This example illustrates an interesting asymmetry: optimal upper bounds for disjunctive dissociations and optimal lower bounds for conjunctive dissociations are not only unique but also better, on average, than optimal upper bounds for conjunctive dissociations and optimal lower bounds for disjunctive dissociations, respectively (see Figure 1). We show this by comparing the approximation of a function by either dissociating a conjunctive or a disjunctive expression for the same function.\nWe re-use the setup from Example 7.2 where we had a function expressed by a disjunctive expression ϕ. Our DNF ϕ can be written as CNF ψ = (x1 ∨x2)(y1 ∨x2)(y1 ∨ y2) with fϕ = fψ17, and two conjunctive dissociations ψ′1 = (x1 ∨ x′2,1)(y1 ∨ x′2,2)(y1 ∨ y2) and ψ′2 = (x1 ∨ x2)(y′1,1 ∨ x2)(y′1,2 ∨ y2) (Figures 8a-c shows the primal graphs). Again from Corollary 4.9, we know that Pp′,q[ϕ′1] ≤ Pp,q[ϕ] for the only optimal oblivious lower bounds p′2,1 = p′2,2 = p2 and Pp′,q[ϕ′1] ≥ Pp,q[ϕ] for any p′2 with p′2,1p ′ 2,2 = p2. In particular, we choose 3 alternative optimal oblivious lower bounds\np′2 ∈ {〈p2, 1〉, 〈 √ p2, √ p2〉, 〈1, p2〉} (see Fig. 7d). Analogously Pp,q′ [ϕ′2] ≤ Pp,q[ϕ] for\n17Notice that this transformation from DNF to CNF is hard, in general. We not do not focus on algorithmic aspects in this paper, but rather show the potential of this new approach.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nq′1,1 = q ′ 1,2 = q1 and Pp,q′ [ϕ′2] ≥ Pp,q[ϕ] for q′1 ∈ {〈q1, 1〉, 〈 √ q1, √ q1〉, 〈1, q1〉}. For each ν, we choose the maximum among the 2 lower bounds and the minimum among the 6 upper bounds as the best upper and lower conjunctive dissociation-based bounds, respectively. We then compare with the approximations from the DNF ϕ in Example 7.2.\nResults: Figures 8e-g show that optimal disjunctive upper bounds are, in general but not consistently, better than optimal conjunctive upper bounds for the same function (≈ 83.5% of those data points with different approximations are better for conjunctive dissociations). The dual result holds for lower bounds. This duality can be best seen in the correspondences of absolute errors between upper and lower bounds."
    }, {
      "heading" : "7.4. Multiple Dissociations at Once",
      "text" : "Here we investigate the influence of the primal graph and number of dissociations on the tightness of the bounds. Both examples correspond to the lineage of the standard unsafe query Q :−R(X), S(X,Y ), T (Y ) over two different database instances.\nExample 7.4 (Path Pn as Primal Graph). This example considers a DNF expression whose primal graph forms a Pn, i.e. a path of length n (see Fig.9a). Note that this is a generalization of the path P4 from Example 7.2 and corresponds to the lineage of the same unsafe query over larger database instance with 2n− 1 tuples:\nϕn = x1y1 ∨ x1y2 ∨ x2y2 ∨ . . . ∨ xn−1yn ∨ xnyn ϕ′n = x ′ 1,1y1 ∨ x′1,2y2 ∨ x′2,1y2 ∨ . . . ∨ x′n−1,2yn ∨ x′nyn\nExact: In the following, we assume the probabilities of all variables to be p and use the notation pn := P[ϕn] and p∗n := P[ϕ∗n], where ϕ∗n corresponds to the formula ϕn without the last conjunct xnyn. We can then express pn as function of p∗n, pn−1 and p∗n−1 by recursive application of Shannon’s expansion to xn and yn:\npn = P[xn] ( P[yn] + P[ȳn]pn−1 ) + P[x̄n]p∗n p∗n = P[yn] ( P[xn−1] + P[x̄n−1]p∗n−1 ) + P[ȳn]pn−1\nWe thus get the linear recurrence system\npn = A1pn−1 +B1p ∗ n−1 + C1 p∗n = A2pn−1 +B2p ∗ n−1 + C2\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nwith A1 = p̄, B1 = pp̄2, C1 = p2(2− p), A2 = p̄, B2 = pp̄, and C2 = p2. With a few manipulations, this recurrence system can be transformed into a linear non-homogenous recurrence relation of second order pn = Apn−1 +Bpn−2 +C where A = A1 +B2 = p̄(1+p), B = A2B1 − A1B2 = −p2p̄2, and C = B1C2 + C1(1 − B2) = p2(pp̄2 + (2 − p)(1 − pp̄)). Thus we can recursively calculate P[ϕn] for any probability assignment p starting with initial values p1 = p2 and p2 = 3p2 − 2p3.\nDissociation: Figure 9b shows the primal graph for the dissociation ϕ′n. Variables x1 to xn−1 are dissociated into two variables with same probability p′, whereas xn into one with original probability p. In other words, with increasing n, there are more variables dissociated into two fresh ones each. The probability P[ϕ′n] is then equal to the probability that at least one variable xi is connected to one variable yj :\nP[ϕ′n] = 1− (1− pp′) ( 1− p(1− p̄′2) )n−2( 1− p(1− p̄p̄′) )\nWe set p′ = p for upper bounds, and p′ = 1−√1− p for lower bounds. Results: Figures 9c-d shows the interesting result that the disjunctive upper bounds become tight for increasing size of the primal graph, and thus increasing number of dissociations. This can be best seen in Fig.9d for which p is chosen as to keep P[ϕ] = 0.5 constant for varying n and we have limn→∞ P[ϕ′n] = P[ϕn] = 0.5 for upper bounds. In contrast, the disjunctive lower bounds become weaker but still have a limit value limn→∞ P[ϕ′n] ≈ 0.2929 (derived numerically).\nExample 7.5 (Complete bipartite graph Kn,n as Primal Graph). This example considers a DNF whose primal graph forms a complete bipartite graph of size n, i.e. each variable xi is appearing in one clause with each variable yj (see Fig. 10a). Note that this example corresponds to lineage for the standard unsafe query over a database instance with O(n2) tuples:\nϕn = ∨\n(i,j)∈ [n]2 xiyj\nϕ′n = ∨\nj∈[n]\n( yj ∨ i∈[n] x′i,j )\nExact: We again assume that all variables have the same probability p = P[xi] = P[yi]. P[ϕn] is then equal to the probability that there is at least one tuple xi and at\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nleast one tuple yi:\nP[ϕn] = ( 1− (1− p)n )2 (6) Dissociation: Figure 10b shows the primal graph for the dissociation ϕ′n. Each variable xi is dissociated into n fresh variables with same probability p′, i.e. there are n2 fresh variables in total. The probability P[ϕ′n] is then equal to the probability that at least one variable yi is connected to one variables xi,j :\nP[ϕ′n] = 1− ( 1− p ( 1− (1− p′)n ))n\nWe will again choose p as to keep r := P[ϕn] constant with increasing n, and then calculate P[ϕ′n] as function of r. From Eq.6, we get p = 1− n √ 1−√r and then set p′ = p\nfor upper bounds, and p′ = 1− n√1− p for lower bounds as each dissociated variable is replaced by n fresh variables. It can then be shown that P[ϕ′n] for the upper bound is monotonically increasing for n and bounded below 1 with the limit value:\nlim n→∞\nP[ϕ′n] = 1− (1− √ r) √ r\nResults: Figure 10d keeps P[ϕ] = 0.5 constant (by decreasing p for increasing n) and shows the interesting result that the optimal upper bound is itself upper bounded and reaches a limit value, although there are more variables dissociated, and each variable is dissociated into more fresh ones. This limit value is 0.5803 for r = 0.5. However, lower bounds are not useful in this case."
    }, {
      "heading" : "7.5. Dissociation with a Standard Relational Database Management System",
      "text" : "Example 7.6 (TPC-H). Here we apply the theory of dissociation to bound hard probabilistic queries with the help of PostgreSQL 9.2, an open-source relational DMBS.18 We use the TPC-H DBGEN data generator19 to generate a 1GB database. We then add a column P to each table, and assign to each tuple either the probability p = 0.1, or p = 0.5, or a random probability from the set {0.01, 0.02, . . . , 0.5} (“p = rand 0.5”). Choosing tuple probabilities p ≤ 0.5 helps us avoid floating-point errors for queries with very large lineages whose query answer probabilities would otherwise be too close to 1.20 Our experiments use the following parameterized query (Fig.11):\nQ(a) :−S(s, a),PS (s, u), P (u, n), s ≤ $1, n like $2 Relations S, PS and P represent tables Supplier, PartSupp and Part, respectively. Variable a stands for attribute nationkey (“answer tuple”), s for suppkey, u for partkey (“unit”),\n18http://www.postgresql.org/download/ 19http://www.tpc.org/tpch/ 20Compare Fig. 13b and Fig. 13e to observe the impact of the choice of input tuple probabilities p on the probabilities of query answers for the same query.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nand n for name. The probabilistic version of this query asks which nations (as determined by the attribute nationkey) are most likely to have suppliers with suppkey ≤ $1 that supply parts with a name like $2 when all tuples in Supplier, PartSupp, and Part are probabilistic. Parameters $1 and $2 allow us to reduce the number of tuples that can participate from tables Supplier and Part, respectively, and to thus study the effects of the lineage size on the predicted dissociation bounds and running times. By default, tables Supplier, Partsupp and Part have 10k, 800k and 200k tuples, respectively, and there are 25 different numeric attributes for nationkey. For parameter $1, we choose a value ∈ {500, 1000, . . . , 10000} which selects the respective number of tuples from table Supplier. For parameter $2, we choose a value ∈ {’%’, ’%red%’, ’%red%green%’ } which selects 200k, 11k or 251 tuples in table Part, respectively.\nTranslation into SQL: Note that the lineage for each individual query answer corresponds to the lineage for the Boolean query Q from Sect. 6, which we know is hard, in general. We thus bound the probabilities of the query answers by evaluating four different queries that correspond to the query-centric dissociation bounds from Sect.6: dissociating either table Supplier or table Part, and calculating either upper and lower bounds. To get the final upper (lower) bounds, we take the minimum (maximum) of the two upper (lower) bounds for each answer tuple. The two query plans are as follows:\nPS(a) = π p a 1 p u [ πpa,u 1 p s [ S(s, a),PS (s, u), s ≤ $1 ] , P (u, n), n like $2 ]\nPP (a) = π p a 1 p s [ S(s, a), πps 1 p u [ PS (s, u), s ≤ $1, P (u, n), n like $2 ]]\nNotice one technical detail for determining the lower bounds with plan PP : Any tuple t from table Part may appear a different number of times in the lineages for different query answers.21 Thus, for every answer a that has t in its lineage, we need to create a distinct copy of t in the view VP , with a probability that depends only on the number of times that t appears in the lineage for a.22 Thus, the view definition for VR needs to include the attribute nationkey (Fig.12a) and PP needs to be adapted as follows (Fig.12b):\nP ∗P (a) = π p a 1 p s [ S(s, a), πps,a 1 p u [ PS (s, u), s ≤ $1,VP(u, a) ]]\n21Lower bounds by dissociating Supplier are easier since the table includes the query answer attribute nationkey. As consequence, any tuple from Supplier may appear in the lineage of one query answer only. 22We could actually use the total number of times the tuple appears in all lineages and still get lower bounds. However, the resulting lower bounds would be weaker and not obliviously optimal.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nIn order to speed up the resulting multi-query evaluation, we apply a deterministic semi-join reduction on the input tables and then reuse intermediate query results across all four subsequent queries. Since query optimization is not the focus of this paper, we do not show these techniques in Fig. 12 and instead refer to [Gatterbauer and Suciu 2013] for a detailed discussion of techniques to speed up query dissociation. In addition, the exact SQL statements that allow the interested reader to repeat our experiments with PostgreSQL are available on the LaPushDB project page.23\n23http://LaPushDB.com/\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nGround truth: To compare our bounds against ground truth, we construct the lineage DNF for each query answer and use DeMorgan to write it as “dual lineage CNF” without exponential increase in size. For example, the DNF ϕ = x1x3 ∨ x1x2 can be written as CNF ϕ̄ = (x̄1 ∨ x̄3) ∧ (x̄1 ∨ x̄2) with P[ϕ̄] = 1 − P[ϕ]. The problem of evaluating a probabilistic CNF can further be translated into the problem of computing the partition function of a propositional Markov random field, for which the AI community has developed sophisticated solvers. For our experiments, we use a tool called SampleSearch [Gogate and Domingos 2010; Gogate and Dechter 2011]24.\nQuality Results: Figure 13 shows the top 10 query answers, as predicted by the upper dissociation bounds for varying query parameters $1 and $2, as well as varying tuple probabilities p. The crosses show the ground truth probabilities as determined by SampleSearch. The red intervals shows the interval between upper and lower dissociation bounds. Recall that the final dissociation interval is the intersection between the interval from dissociation on Supplier (left of the red interval) and on Part (right of the red interval). The graphs suggest that the upper dissociation bounds are very close to the actual probabilities, which is reminiscent of Sect. 7.4 having shown that upper bounds for DNF dissociations are commonly closer to the true probabilities than lower bounds. For Fig.13f, we have no ground truth as the lineage for the top tuple (11) has size 32899 (i.e. the corresponding DNF has 32899 clauses), which is too big for exact probabilistic inference. However, extrapolating from Fig. 13d and Fig. 13e to Fig. 13f, we speculate that upper dissociation bounds give good approximations here as well.\nThe different interval sizes (i.e. quality of the bounds) arise from different numbers of dissociated tuples in the respective lineages. We illustrate with 4 cases (Fig.13g):\n(A) If there is a plan that does not dissociate any tuple, then both upper and lower bounds coincide. This scenario is also called data-safe [Jha et al. 2010]. For example, the lineage for answer (2) in Fig. 13c has 40 unique tuples from table Part, out of which 3 (7.5%) are dissociated into 2 fresh ones with PP . However, all of the 43 tuples from table Supplier that appear in the lineage appear only once. Therefore, PS dissociates no tuple when calculating the answer probability for (2), and as a result gives us the exact value. (B) The lineage for the top-ranked answer (6) in Fig.13a has 42 unique tuples from table Part, out of which 5 (≈ 11.9%) are dissociated into 2 fresh ones with PP . In contrast, the lineage has 53 unique tuples from table Supplier, out of which only 4 (≈ 7.5%) are dissociated into 2 fresh ones with PS . Intuitively, PS should give us therefore tighter bounds, which is confirmed by the results. (C) The lineage for the top-ranked answer (11) in Fig.13b and Fig.13e (both figures show results for the same query, but for different tuple probabilities p = 0.1 or p = rand 0.5) has 1830 unique tuples from table Part, out of which ≈ 5.8% are dissociated into 2 or 3 fresh ones with PP . In contrast, the lineage has only 434 unique tuples from table Supplier, out of which ≈ 95.6% are dissociated into into 2 to 11 fresh variables. Thus, PP gives far tighter bounds in this case. (D) The lineage for the same answer (11) in Fig. 13f has 32899 unique tuples from table Part, out of which ≈ 6.3% are dissociated into 2-4 fresh ones with PP . In contrast, the lineage has only 438 unique tuples from table Supplier, out of which all are dissociated into 80 fresh ones with PS (this is an artifact of the TPC-H random database generator). Thus, the bounds for PS are very poor.\nImportantly, relevance ranking of the answer tuples by upper dissociation bounds approximates the ranking by query reliability very well. For example, for the case of p = 0.1 and $2=’%red%’ (Fig. 13d and Fig. 13e), the ranking given by the minimum upper bounds was identical to the ranking given by the ground truth for all parameter\n24http://www.hlt.utdallas.edu/~vgogate/SampleSearch.html\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nchoices $1 ∈ {500, 1000, . . . , 10000}. Figure 13c shows an example of an incorrect rankings (for parameters $1=10000, $2=’%red%green%’, p = 0.5): Here tuples 6 and 21 are flipped as compared to their actual probabilities 0.99775 and 0.99777, respectively.\nTiming Results: Figure 14 compares the times for evaluating the deterministic query (Fig.11a) with the times for calculating the dissociation bounds for changing parameters $1 and $2. As experimental platform, we use PostgreSQL 9.2 on a 2.5 Ghz Intel Core i5 with 16G of main memory. We run each query 5 times and take the average execution time. Figure 14d also shows the size of the total lineage of a query (which is the same as the number of query results for the deterministic query without projection) and the times needed by SampleSearch to evaluate the ground truth, if possible.25 Since table Supplier contains exactly 10k tuples with suppkey ∈ {1, . . . , 10000}, any choice of $1≥10000 has no effect on the query. We show separate graphs for the time needed to calculate the upper bounds only (which our theory and experiments suggest give better absolute approximations) and the time for both upper and lower bounds (lower bounds are more expensive due to the required manipulation of the input tuples). We also show the times for retrieving the lineage with a lineage query. Any probabilistic approach that evaluates the probabilities outside of the database engine needs to issue this query to retrieve the DNF for each answer. The time needed for the lineage query thus serves as minimum benchmark for any probabilistic approximation.\nOur timing results show that, for small lineages (< 10000), calculating upper and lower bounds can be achieved in a time that is only a small multiple (< 4) of the time needed for an equivalent deterministic query. For large lineages (> 10000), calculating the bounds scales linearly with the size of the lineage (Fig. 14c), whereas determin-\n25The reported times are for evaluating all answer DNFs without the overhead for the lineage query.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nistic query evaluation can scale in sublinear time (recall that the cardinality of the answer set is maximal 25 across all queries since the database contains only 25 different values for the answer attribute nationkey). Importantly, scalability for dissociation is independent of the tractability of the data instance, e.g. maximum treewidth of the lineage for any query answer. In contrast, SampleSearch quickly takes too long for increasing lineage. For example, SampleSearch needs 108 sec for calculating the ground truth for Fig. 13e (The maximum lineage size among all 25 query answers is 1941 in this scenario). Upper dissociation bounds can be calculated in only 3 sec and give the same ranking (and almost the same probabilities).\nKey take-aways: Overall, our quality and timing experiments suggest that dissociation bounds (in particular, the upper bounds) can provide a good approximation of the actual probabilities and provide a ranking of the query answers that is often identical to the ranking for their actual probabilities. These bounds can be calculated with guaranteed polynomial scalability in the size of the data. In particular for queries with small lineage sizes (< 10000), calculating the bounds took only a small multiple (< 4) of the time needed to evaluate standard deterministic queries."
    }, {
      "heading" : "8. RELATED WORK AND DISCUSSION",
      "text" : "Dissociation is related to a number of recent approaches in the graphical models and constraint satisfaction literature which approximate an intractable problem with a tractable relaxed version after treating multiple occurrences of variables or nodes as independent or ignoring some equivalence constraints: Choi et al. [2007] approximate inference in Bayesian networks by “node splitting,” i.e. removing some dependencies from the original model. Ramı́rez and Geffner [2007] treat the problem of obtaining a minimum cost satisfying assignment of a CNF formula by “variable renaming,” i.e. replacing a variable that appears in many clauses by many fresh new variables that appear in few. Pipatsrisawat and Darwiche [2007] provide lower bounds for MaxSAT by “variable splitting,” i.e. compiling a relaxation of the original CNF. Andersen et al. [2007] improve the relaxation for constraint satisfaction problems by “refinement through node splitting,” i.e. making explicit some interactions between variables. Choi and Darwiche [2009] relax the maximum a posteriori (MAP) problem in probabilistic graphical models by dropping equivalence constraints and partially compensating for the relaxation. Our work provides a general framework for approximating the probability of Boolean functions with both upper and lower bounds. These bounds shed light on the connection between previous relaxation-based and model-based approximations and unify them as concrete choices in a larger design space. We thus refer to all of the above approaches as instances of dissociation-based approximations.\nAnother line of work that is varyingly called “discretization,” “bucketing,” “binning,” or “quantization” proposes relaxations by merging or partitioning states or nodes (instead of splitting them), and to then perform simplified calculations over those partitions: Dechter and Rish [2003] approximate a function with high arity by a collection of smaller-arity functions with a parameterized scheme called “mini-buckets.” As example, the sum ∑ i f(xi) · g(xi) for non-negative functions f and g can be upper bounded\nby the summation (maxi f(xi)) · ∑ i g(xi), i.e. all different values of f(xi) are replaced by the single maximum value maxi f(xi), which simplifies the calculations. Similarly, the sum can be lower bounded by (mini f(xi)) · ∑ i g(xi). St-Aubin et al. [2000] use Algebraic Decision Diagrams (ADDs) and reduce the sizes of the intermediate value functions generated by replacing the values at the terminals of the ADD with ranges of values. Bergman et al. [2011],[2013] construct relaxations of Multivalued Decision Diagrams (MDDs) by merging vertices when the size of the partially constructed MDD grows too large. Gogate and Domingos [2011] compress potentials computed during the execution of variable elimination by “quantizing” them, i.e. replacing a number\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\nof distinct values in range of the potential by a single value. Since all of the above approaches reduce the number of distinct values in the range of a function, we collectively refer to them as quantization-based approximations. A more detailed literature overview in this space is given by Gogate and Domingos [2013].\nNote that dissociation-based approaches (that split nodes) and quantization-based approaches (that merge nodes) are not inverse operations, but are rather two complementary approaches that may be combined to yield improved methods. The inverse of dissociation is what we refer to as assimilation:26 Consider the Boolean formula ϕ = x1y1 ∨ x1y2 ∨ x2y2 which is a dissociation of the much simpler formula ϕ∗ = x(y1 ∨ y2). Hence, we know from dissociation that P[ϕ∗] ≤ P[ϕ] for p ≤ min(p1, p2) and that P[ϕ∗] ≥ P[ϕ] for p ≥ 1− p̄1p̄2. Note that for quantization, we can always choose max(p1, p2) or min(p1, p2) to get a guaranteed upper or lower bound. In contrast, for assimilation, we may have to choose a different value to get a guaranteed bound. Also, for the case p1 = p2, assimilation will generally still be an approximation, whereas quantization would be exact. Thus, these are two different approaches.\nExisting approaches for query processing over probabilistic databases that are both general and tractable are either: (1) simulation-based approaches that adapt general purpose sampling methods [Jampani et al. 2008; Kennedy and Koch 2010; Re et al. 2007]; or (2) model-based approaches that approximate the original number of models with guaranteed lower or upper bounds [Olteanu et al. 2010; Fink and Olteanu 2011]. We have show in this paper that, for every model-based bound, there exists a dissociation bound that is at least as good or better.\nOur work on dissociation originated while generalizing propagation-based ranking methods from graphs [Detwiler et al. 2009] to hypergraphs and conjunctive queries. In [Gatterbauer et al. 2010], we applied dissociation in a query-centric way to upper bound hard probabilistic queries, and showed the connection between propagation on graphs and dissociation on hypergraphs (see [Gatterbauer and Suciu 2013] for all details). In this paper, we provide the theoretical underpinnings of these results in a generalized framework with both upper and lower bounds. A previous version of this paper was made available as [Gatterbauer and Suciu 2011]."
    }, {
      "heading" : "9. OUTLOOK",
      "text" : "We introduced dissociation as a new algebraic technique for approximating the probability of Boolean functions. We applied this technique to derive obliviously optimal upper and lower bounds for conjunctive and disjunctive dissociations and proved that dissociation always gives equally good or better approximations than models. We did not address the algorithmic complexities of exploring the space of alternative dissociations, but rather see our technique as a basic building block for new algorithmic approaches. Such future approaches can apply dissociation at two conceptual levels: (1) at the query-level, i.e. at query time and before analyzing the data, or (2) at the data-level, i.e. while analyzing the data.\nThe advantage of query-centric approaches is that they can run in guaranteed polynomial time,27 yet at the cost of no general approximation guarantees.28 Here, we envision that the query-centric, first-order logic-based view of operating on data by the\n26We prefer the word “assimilation” as inverse of dissociation over of the more natural choice of “association” as it implies correctly that two items are actually merged and not merely associated. 27Recall from our experiments (Fig. 14c) that query-centric dissociation scales linearly in the size of the lineage, independent of intricacies in the data, such as the treewidth of the lineage. 28However, also recall from our experiments (Fig.13) that query-centric approaches may work well in practice. Notice here the similarity to loopy belief propagation [Frey and MacKay 1997], which is applied widely and successfully, despite lacking general performance guarantees.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY.\ndatabase community can also influence neighboring communities, in particular those working on lifted inference (see e.g. [Van den Broeck et al. 2011]).\nThe advantage of data-centric approaches is that exact solutions can be arbitrarily approximated, yet at the cost of no guaranteed runtime [Roth 1996]. Here, we envision a range of new approaches (that may combine dissociation with quantization) to compile an existing intractable formula into a tractable target language, e.g., read-once formulas or formulas with bounded treewidth. For example, one can imagine an approximation scheme that adds repeated dissociation to Shannon expansion in order to avoid the intermediate state explosion."
    }, {
      "heading" : "ACKNOWLEDGMENTS",
      "text" : "We would like to thank Arthur Choi and Adnan Darwiche for helpful discussions on Relaxation & Compensation, and for bringing Prop. 5.1 to our attention [Choi and Darwiche 2011]. We would also like to thank Vibhav Gogate for helpful discussions on quantization and guidance for using his tool SampleSearch, Alexandra Meliou for suggesting the name “dissociation,” and the reviewers for their careful reading of this manuscript and their detailed feedback. This work was partially supported by NSF grants IIS-0915054 and IIS-1115188. More information about this research, including the PostgreSQL statements to repeat the experiments on TPC-H data, can be found on the project page: http://LaPushDB.com/."
    }, {
      "heading" : "A. NOMENCLATURE",
      "text" : "x, y, z independent Boolean random variables ϕ,ψ Boolean formulas, probabilistic event expressions f, g, fϕ Boolean function, represented by an expression ϕ P[x],P[ϕ] probability of an event or expression pi, qj , rk probabilities pi = P[xi], qj = P[yj ], rk = P[zk] x,g,p sets {x1, . . . , xk} or vectors 〈x1, . . . , xk〉 of variables, functions or probabilities Pp,q[f ] probability of function f(x,y) for p = P[x], q = P[y] x̄, ϕ̄, p̄ complements ¬x,¬ϕ, 1− p f ′, ϕ′ dissociation of a function f or expression ϕ θ substitution θ : x′ → x; defines a dissociation f ′ of f if f ′[θ] = f f [x′/x] substitution of x′ for x in f m,m′, n m = |x|, m′ = |x′|, n = |y| di number of new variables that xi is dissociated into ν valuation or truth assignment ν : y→ {0, 1} with yi = νi f [ν], ϕ[ν] function f or expression ϕ with valuation ν substituted for y gν gν = ∧ j g ν j , where gνj = ḡj if νj =0 and gνj = gj if νj =1"
    }, {
      "heading" : "B. REPRESENTING COMPLEX EVENTS (DISCUSSION OF COROLLARY 4.5)",
      "text" : "It is known from Poole’s independent choice logic [Poole 1993] that arbitrary correlations between events can be composed from disjoint-independent events only. A disjoint-independent event is represented by a non-Boolean independent random variable y which takes either of k values v = 〈v1, . . . , vk〉 with respective probabilities q = 〈q1, . . . , qk〉 and ∑ i qi = 1. Poole writes such a “disjoint declaration” as y([v1 :q1, . . . , vk :qk]). In turn, any k disjoint events can be represented starting from k − 1 independent Boolean variables z = 〈z1, . . . , zk−1〉 and probabilities P[z] = 〈q1, q2q̄1 , q3 q̄1q̄2\n, . . . , qk−1q̄1...q̄k−2 〉, by assigning the disjoint-independent event variable y its value vi whenever event Ai is true, with Ai defined as:\n(y = v1) ≡ A1 :− z1 (y = v2) ≡ A2 :− z̄1z2\n... (y = vk−1) ≡ Ak1 :− z1 . . . z̄k−2zk−1\n(y = vk) ≡ Ak :− z̄1 . . . z̄k−2z̄k−1 . For example, a disjoint-independent event y(v1 : 15 , v2 : 1 2 , v3 : 1 5 , v4 : 1 10 ) can be represented with three independent Boolean variables z = (z1, z2, z3) and P[z] = (15 , 5 8 , 2 3 ).\nIt follows that arbitrary correlations between events can be modeled starting from independent Boolean random variables alone. For example, two complex events A and B with P[A] = P[B] = q and varying correlation (see Sect. 7.1) can be represented as composed events A :− z1z2 ∨ z3 ∨ z4 and B :− z̄1z2 ∨ z3 ∨ z5 over the primitive events z with varying probabilities P[z]. Events A and B become identical for P[z] = (0, 0, q, 0, 0), independent for P[z] = (0, 0, 0, q, q), and disjoint for P[z] = (0.5, q, 0, 0, 0) with q ≤ 0.5.\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY."
    }, {
      "heading" : "C. USER-DEFINED AGGREGATE IOR (SEC. 6 AND SEC. 7.5)",
      "text" : "Here we show the User-defined Aggregate (UDA) IOR in PostgreSQL:\ncreate or replace function ior sfunc(float, float) returns float as ’select $1 * (1.0 - $2)’ language SQL;\ncreate or replace function ior finalfunc(float) returns float as ’select 1.0 - $1’ language SQL;\ncreate aggregate ior (float)( sfunc = ior sfunc, stype = float, finalfunc = ior finalfunc, initcond = ’1.0’);\nACM Transactions on Database Systems, Vol. V, No. N, Article 1, Publication date: January YYYY."
    } ],
    "references" : [ {
      "title" : "A constraint store based on multivalued decision diagrams",
      "author" : [ "H.R. ANDERSEN", "T. HADZIC", "J.N. HOOKER", "P. TIEDEMANN" ],
      "venue" : "Proceedings of the 13th International Conference on Principles and Practice of Constraint Programming (CP’07). 118–132.",
      "citeRegEx" : "ANDERSEN et al\\.,? 2007",
      "shortCiteRegEx" : "ANDERSEN et al\\.",
      "year" : 2007
    }, {
      "title" : "Optimization bounds from binary decision diagrams",
      "author" : [ "D. BERGMAN", "A.A. CIRE", "VAN HOEVE", "W.-J.", "J.N. HOOKER" ],
      "venue" : "INFORMS Journal on Computing. (to appear).",
      "citeRegEx" : "BERGMAN et al\\.,? 2013",
      "shortCiteRegEx" : "BERGMAN et al\\.",
      "year" : 2013
    }, {
      "title" : "Manipulating MDD relaxations for combinatorial optimization",
      "author" : [ "D. BERGMAN", "W.J. VAN HOEVE", "J.N. HOOKER" ],
      "venue" : "8th International Conference on Integration of AI and OR Techniques in Constraint Programming for Combinatorial Optimization Problems (CPAIOR’11). 20–35.",
      "citeRegEx" : "BERGMAN et al\\.,? 2011",
      "shortCiteRegEx" : "BERGMAN et al\\.",
      "year" : 2011
    }, {
      "title" : "On probabilistic inference by weighted model counting",
      "author" : [ "M. CHAVIRA", "A. DARWICHE" ],
      "venue" : "Artif. Intell. 172, 6-7, 772–799.",
      "citeRegEx" : "CHAVIRA and DARWICHE,? 2008",
      "shortCiteRegEx" : "CHAVIRA and DARWICHE",
      "year" : 2008
    }, {
      "title" : "Node splitting: A scheme for generating upper bounds in Bayesian networks",
      "author" : [ "A. CHOI", "M. CHAVIRA", "A. DARWICHE" ],
      "venue" : "Proceedings of the 23rd Conference in Uncertainty in Artificial Intelligence (UAI’07). 57–66.",
      "citeRegEx" : "CHOI et al\\.,? 2007",
      "shortCiteRegEx" : "CHOI et al\\.",
      "year" : 2007
    }, {
      "title" : "Relax then compensate: On max-product belief propagation and more",
      "author" : [ "A. CHOI", "A. DARWICHE" ],
      "venue" : "Proceedings of the 23rd Annual Conference on Neural Information Processing Systems (NIPS’09). 351–359. (Alternative title: Approximating MAP by Compensating for Structural Relaxations).",
      "citeRegEx" : "CHOI and DARWICHE,? 2009",
      "shortCiteRegEx" : "CHOI and DARWICHE",
      "year" : 2009
    }, {
      "title" : "Relax, compensate and then recover",
      "author" : [ "A. CHOI", "A. DARWICHE" ],
      "venue" : "Proceedings of New Frontiers in Artificial Intelligence Workshops (JSAI-isAI’10). 167–180.",
      "citeRegEx" : "CHOI and DARWICHE,? 2010",
      "shortCiteRegEx" : "CHOI and DARWICHE",
      "year" : 2010
    }, {
      "title" : "Boolean Functions: Theory, Algorithms, and Applications",
      "author" : [ "Y. CRAMA", "P.L. HAMMER" ],
      "venue" : "Cambridge University Press.",
      "citeRegEx" : "CRAMA and HAMMER,? 2011",
      "shortCiteRegEx" : "CRAMA and HAMMER",
      "year" : 2011
    }, {
      "title" : "Computing query probability with incidence algebras",
      "author" : [ "N.N. DALVI", "K. SCHNAITTER", "D. SUCIU" ],
      "venue" : "Proceedings of the 29th Symposium on Principles of Database Systems (PODS’10). 203–214.",
      "citeRegEx" : "DALVI et al\\.,? 2010",
      "shortCiteRegEx" : "DALVI et al\\.",
      "year" : 2010
    }, {
      "title" : "Efficient query evaluation on probabilistic databases",
      "author" : [ "N.N. DALVI", "D. SUCIU" ],
      "venue" : "VLDB J. 16, 4, 523–544.",
      "citeRegEx" : "DALVI and SUCIU,? 2007",
      "shortCiteRegEx" : "DALVI and SUCIU",
      "year" : 2007
    }, {
      "title" : "A knowledge compilation map",
      "author" : [ "A. DARWICHE", "P. MARQUIS" ],
      "venue" : "J. Artif. Int. Res. 17, 1, 229–264.",
      "citeRegEx" : "DARWICHE and MARQUIS,? 2002",
      "shortCiteRegEx" : "DARWICHE and MARQUIS",
      "year" : 2002
    }, {
      "title" : "Mini-buckets: A general scheme for bounded inference",
      "author" : [ "R. DECHTER", "I. RISH" ],
      "venue" : "J. ACM 50, 2, 107–153.",
      "citeRegEx" : "DECHTER and RISH,? 2003",
      "shortCiteRegEx" : "DECHTER and RISH",
      "year" : 2003
    }, {
      "title" : "Integrating and ranking uncertain scientific data",
      "author" : [ "L. DETWILER", "W. GATTERBAUER", "B. LOUIE", "D. SUCIU", "P. TARCZY-HORNOCH" ],
      "venue" : "Proceedings of the 25th International Conference on Data Engineering (ICDE’09). 1235–1238.",
      "citeRegEx" : "DETWILER et al\\.,? 2009",
      "shortCiteRegEx" : "DETWILER et al\\.",
      "year" : 2009
    }, {
      "title" : "An introduction to probability theory and its applications 3d ed Ed",
      "author" : [ "W. FELLER" ],
      "venue" : "Wiley, New York.",
      "citeRegEx" : "FELLER,? 1968",
      "shortCiteRegEx" : "FELLER",
      "year" : 1968
    }, {
      "title" : "On the optimal approximation of queries using tractable propositional languages",
      "author" : [ "R. FINK", "D. OLTEANU" ],
      "venue" : "Proceedings 14th International Conference on Database Theory (ICDT’11). 174–185.",
      "citeRegEx" : "FINK and OLTEANU,? 2011",
      "shortCiteRegEx" : "FINK and OLTEANU",
      "year" : 2011
    }, {
      "title" : "A revolution: Belief propagation in graphs with cycles",
      "author" : [ "B.J. FREY", "D.J.C. MACKAY" ],
      "venue" : "NIPS.",
      "citeRegEx" : "FREY and MACKAY,? 1997",
      "shortCiteRegEx" : "FREY and MACKAY",
      "year" : 1997
    }, {
      "title" : "A probabilistic relational algebra for the integration of information retrieval and database systems",
      "author" : [ "N. FUHR", "T. RÖLLEKE" ],
      "venue" : "ACM Trans. Inf. Syst. 15, 1, 32–66.",
      "citeRegEx" : "FUHR and RÖLLEKE,? 1997",
      "shortCiteRegEx" : "FUHR and RÖLLEKE",
      "year" : 1997
    }, {
      "title" : "Dissociation and propagation for efficient query evaluation over probabilistic databases",
      "author" : [ "W. GATTERBAUER", "A.K. JHA", "D. SUCIU" ],
      "venue" : "Proceedings of the 4th International VLDB workshop on Management of Uncertain Data (MUD’10). 83–97.",
      "citeRegEx" : "GATTERBAUER et al\\.,? 2010",
      "shortCiteRegEx" : "GATTERBAUER et al\\.",
      "year" : 2010
    }, {
      "title" : "Optimal upper and lower bounds for Boolean expressions by dissociation",
      "author" : [ "W. GATTERBAUER", "D. SUCIU" ],
      "venue" : "arXiv:1105.2813 [cs.AI].",
      "citeRegEx" : "GATTERBAUER and SUCIU,? 2011",
      "shortCiteRegEx" : "GATTERBAUER and SUCIU",
      "year" : 2011
    }, {
      "title" : "Dissociation and propagation for efficient query evaluation over probabilistic databases",
      "author" : [ "W. GATTERBAUER", "D. SUCIU" ],
      "venue" : "arXiv:1310.6257 [cs.DB].",
      "citeRegEx" : "GATTERBAUER and SUCIU,? 2013",
      "shortCiteRegEx" : "GATTERBAUER and SUCIU",
      "year" : 2013
    }, {
      "title" : "SampleSearch: Importance sampling in presence of determinism",
      "author" : [ "V. GOGATE", "R. DECHTER" ],
      "venue" : "Artificial Intelligence 175, 2, 694–729.",
      "citeRegEx" : "GOGATE and DECHTER,? 2011",
      "shortCiteRegEx" : "GOGATE and DECHTER",
      "year" : 2011
    }, {
      "title" : "Formula-based probabilistic inference",
      "author" : [ "V. GOGATE", "P. DOMINGOS" ],
      "venue" : "Proceedings of the 26th Conference in Uncertainty in Artificial Intelligence (UAI’10). 210–219.",
      "citeRegEx" : "GOGATE and DOMINGOS,? 2010",
      "shortCiteRegEx" : "GOGATE and DOMINGOS",
      "year" : 2010
    }, {
      "title" : "Approximation by quantization",
      "author" : [ "V. GOGATE", "P. DOMINGOS" ],
      "venue" : "Proceedings of the 27th Conference in Uncertainty in Artificial Intelligence (UAI’11). 247–255.",
      "citeRegEx" : "GOGATE and DOMINGOS,? 2011",
      "shortCiteRegEx" : "GOGATE and DOMINGOS",
      "year" : 2011
    }, {
      "title" : "Approximation by quantization",
      "author" : [ "V. GOGATE", "P. DOMINGOS" ],
      "venue" : "Proceedings of the 29th Conference in Uncertainty in Artificial Intelligence (UAI’13). 252–261.",
      "citeRegEx" : "GOGATE and DOMINGOS,? 2013",
      "shortCiteRegEx" : "GOGATE and DOMINGOS",
      "year" : 2013
    }, {
      "title" : "Repetition-free Boolean functions",
      "author" : [ "V. GURVICH" ],
      "venue" : "Uspekhi Mat. Nauk 32, 183–184. (in Russian).",
      "citeRegEx" : "GURVICH,? 1977",
      "shortCiteRegEx" : "GURVICH",
      "year" : 1977
    }, {
      "title" : "MCDB: a Monte Carlo approach to managing uncertain data",
      "author" : [ "R. JAMPANI", "F. XU", "M. WU", "L.L. PEREZ", "C.M. JERMAINE", "P.J. HAAS" ],
      "venue" : "Proceedings International Conference on Management of Data (SIGMOD’08). 687–700.",
      "citeRegEx" : "JAMPANI et al\\.,? 2008",
      "shortCiteRegEx" : "JAMPANI et al\\.",
      "year" : 2008
    }, {
      "title" : "Bridging the gap between intensional and extensional query evaluation in probabilistic databases",
      "author" : [ "A. JHA", "D. OLTEANU", "D. SUCIU" ],
      "venue" : "Proceedings of the 13th International Conference on Extending Database Technology (EDBT’10). 323–334.",
      "citeRegEx" : "JHA et al\\.,? 2010",
      "shortCiteRegEx" : "JHA et al\\.",
      "year" : 2010
    }, {
      "title" : "Pip: A database system for great and small expectations",
      "author" : [ "O. KENNEDY", "C. KOCH" ],
      "venue" : "Proceedings of the 26th International Conference on Data Engineering (ICDE’10). 157–168.",
      "citeRegEx" : "KENNEDY and KOCH,? 2010",
      "shortCiteRegEx" : "KENNEDY and KOCH",
      "year" : 2010
    }, {
      "title" : "Using OBDDs for efficient query evaluation on probabilistic databases",
      "author" : [ "D. OLTEANU", "J. HUANG" ],
      "venue" : "Proceedings of the 4th International Conference on Scalable Uncertainty Management (SUM’08). 326– 340.",
      "citeRegEx" : "OLTEANU and HUANG,? 2008",
      "shortCiteRegEx" : "OLTEANU and HUANG",
      "year" : 2008
    }, {
      "title" : "Sprout: Lazy vs",
      "author" : [ "D. OLTEANU", "J. HUANG", "C. KOCH" ],
      "venue" : "eager query plans for tuple-independent probabilistic databases. In Proceedings of the 25th International Conference on Data Engineering (ICDE’09). 640–651.",
      "citeRegEx" : "OLTEANU et al\\.,? 2009",
      "shortCiteRegEx" : "OLTEANU et al\\.",
      "year" : 2009
    }, {
      "title" : "Approximate confidence computation in probabilistic databases",
      "author" : [ "D. OLTEANU", "J. HUANG", "C. KOCH" ],
      "venue" : "Proceedings of the 26th International Conference on Data Engineering (ICDE’10). 145– 156.",
      "citeRegEx" : "OLTEANU et al\\.,? 2010",
      "shortCiteRegEx" : "OLTEANU et al\\.",
      "year" : 2010
    }, {
      "title" : "Clone: Solving weighted max-sat in a reduced search space",
      "author" : [ "K. PIPATSRISAWAT", "A. DARWICHE" ],
      "venue" : "Proceedings of the 20th Australian Joint Conference on Artificial Intelligence (AUS-AI’07). 223–233.",
      "citeRegEx" : "PIPATSRISAWAT and DARWICHE,? 2007",
      "shortCiteRegEx" : "PIPATSRISAWAT and DARWICHE",
      "year" : 2007
    }, {
      "title" : "Probabilistic horn abduction and Bayesian networks",
      "author" : [ "D. POOLE" ],
      "venue" : "Artif. Intell. 64, 1, 81–129.",
      "citeRegEx" : "POOLE,? 1993",
      "shortCiteRegEx" : "POOLE",
      "year" : 1993
    }, {
      "title" : "The complexity of counting cuts and of computing the probability that a graph is connected",
      "author" : [ "J.S. PROVAN", "M.O. BALL" ],
      "venue" : "SIAM J. Comput. 12, 4, 777–788.",
      "citeRegEx" : "PROVAN and BALL,? 1983",
      "shortCiteRegEx" : "PROVAN and BALL",
      "year" : 1983
    }, {
      "title" : "Structural relaxations by variable renaming and their compilation for solving mincostsat",
      "author" : [ "M. RAMÍREZ", "H. GEFFNER" ],
      "venue" : "Proceedings of the 13th International Conference on Principles and Practice of Constraint Programming (CP’07). 605–619.",
      "citeRegEx" : "RAMÍREZ and GEFFNER,? 2007",
      "shortCiteRegEx" : "RAMÍREZ and GEFFNER",
      "year" : 2007
    }, {
      "title" : "Efficient top-k query evaluation on probabilistic data",
      "author" : [ "C. RE", "N.N. DALVI", "D. SUCIU" ],
      "venue" : "Proceedings of the 23rd International Conference on Data Engineering (ICDE’07). 886–895.",
      "citeRegEx" : "RE et al\\.,? 2007",
      "shortCiteRegEx" : "RE et al\\.",
      "year" : 2007
    }, {
      "title" : "On the hardness of approximate reasoning",
      "author" : [ "D. ROTH" ],
      "venue" : "Artif. Intell. 82, 1-2, 273–302.",
      "citeRegEx" : "ROTH,? 1996",
      "shortCiteRegEx" : "ROTH",
      "year" : 1996
    }, {
      "title" : "Read-once functions and query evaluation in probabilistic databases",
      "author" : [ "P. SEN", "A. DESHPANDE", "L. GETOOR" ],
      "venue" : "Proceedings of the VLDB Endowment 3, 1, 1068–1079.",
      "citeRegEx" : "SEN et al\\.,? 2010",
      "shortCiteRegEx" : "SEN et al\\.",
      "year" : 2010
    }, {
      "title" : "APRICODD: Approximate policy construction using decision diagrams",
      "author" : [ "R. ST-AUBIN", "J. HOEY", "C. BOUTILIER" ],
      "venue" : "Advances in Neural Information Processing Systems 13 (NIPS’00). 1089–1095.",
      "citeRegEx" : "ST.AUBIN et al\\.,? 2000",
      "shortCiteRegEx" : "ST.AUBIN et al\\.",
      "year" : 2000
    }, {
      "title" : "A scheme for fast parallel communication",
      "author" : [ "L. VALIANT" ],
      "venue" : "SIAM Journal on Computing 11, 2, 350–361.",
      "citeRegEx" : "VALIANT,? 1982",
      "shortCiteRegEx" : "VALIANT",
      "year" : 1982
    }, {
      "title" : "The complexity of computing the permanent",
      "author" : [ "L.G. VALIANT" ],
      "venue" : "Theor. Comput. Sci. 8, 189–201.",
      "citeRegEx" : "VALIANT,? 1979",
      "shortCiteRegEx" : "VALIANT",
      "year" : 1979
    }, {
      "title" : "Lifted probabilistic inference by first-order knowledge compilation",
      "author" : [ "G. VAN DEN BROECK", "N. TAGHIPOUR", "W. MEERT", "J. DAVIS", "L.D. RAEDT" ],
      "venue" : "Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI’11). 2178–2185.",
      "citeRegEx" : "BROECK et al\\.,? 2011",
      "shortCiteRegEx" : "BROECK et al\\.",
      "year" : 2011
    }, {
      "title" : "COMPLEX EVENTS (DISCUSSION OF COROLLARY 4.5) It is known from Poole’s independent choice logic [Poole 1993] that arbitrary correlations between events can be composed from disjoint-independent events only. A disjoint-independent event is represented by a non-Boolean independent random vari",
      "author" : [ "B. REPRESENTING" ],
      "venue" : null,
      "citeRegEx" : "REPRESENTING,? \\Q1993\\E",
      "shortCiteRegEx" : "REPRESENTING",
      "year" : 1993
    } ],
    "referenceMentions" : [ {
      "referenceID" : 9,
      "context" : ", read-once formulas) either at the query-level [Dalvi and Suciu 2007; Dalvi et al. 2010] or the datalevel [Olteanu and Huang 2008; Sen et al.",
      "startOffset" : 48,
      "endOffset" : 89
    }, {
      "referenceID" : 8,
      "context" : ", read-once formulas) either at the query-level [Dalvi and Suciu 2007; Dalvi et al. 2010] or the datalevel [Olteanu and Huang 2008; Sen et al.",
      "startOffset" : 48,
      "endOffset" : 89
    }, {
      "referenceID" : 28,
      "context" : "2010] or the datalevel [Olteanu and Huang 2008; Sen et al. 2010]; (2) exact approaches apply exact probabilistic inference, such as repeated application of Shannon expansion [Olteanu et al.",
      "startOffset" : 23,
      "endOffset" : 64
    }, {
      "referenceID" : 37,
      "context" : "2010] or the datalevel [Olteanu and Huang 2008; Sen et al. 2010]; (2) exact approaches apply exact probabilistic inference, such as repeated application of Shannon expansion [Olteanu et al.",
      "startOffset" : 23,
      "endOffset" : 64
    }, {
      "referenceID" : 29,
      "context" : "2010]; (2) exact approaches apply exact probabilistic inference, such as repeated application of Shannon expansion [Olteanu et al. 2009] or tree-width based decompositions [Jha et al.",
      "startOffset" : 115,
      "endOffset" : 136
    }, {
      "referenceID" : 26,
      "context" : "2009] or tree-width based decompositions [Jha et al. 2010]; and (3) approximate approaches either apply general purpose sampling methods [Jampani et al.",
      "startOffset" : 41,
      "endOffset" : 58
    }, {
      "referenceID" : 25,
      "context" : "2010]; and (3) approximate approaches either apply general purpose sampling methods [Jampani et al. 2008; Kennedy and Koch 2010; Re et al. 2007] or approximate the number of models of the Boolean lineage expression [Olteanu et al.",
      "startOffset" : 84,
      "endOffset" : 144
    }, {
      "referenceID" : 27,
      "context" : "2010]; and (3) approximate approaches either apply general purpose sampling methods [Jampani et al. 2008; Kennedy and Koch 2010; Re et al. 2007] or approximate the number of models of the Boolean lineage expression [Olteanu et al.",
      "startOffset" : 84,
      "endOffset" : 144
    }, {
      "referenceID" : 35,
      "context" : "2010]; and (3) approximate approaches either apply general purpose sampling methods [Jampani et al. 2008; Kennedy and Koch 2010; Re et al. 2007] or approximate the number of models of the Boolean lineage expression [Olteanu et al.",
      "startOffset" : 84,
      "endOffset" : 144
    }, {
      "referenceID" : 30,
      "context" : "2007] or approximate the number of models of the Boolean lineage expression [Olteanu et al. 2010; Fink and Olteanu 2011].",
      "startOffset" : 76,
      "endOffset" : 120
    }, {
      "referenceID" : 14,
      "context" : "2007] or approximate the number of models of the Boolean lineage expression [Olteanu et al. 2010; Fink and Olteanu 2011].",
      "startOffset" : 76,
      "endOffset" : 120
    }, {
      "referenceID" : 3,
      "context" : "els [Chavira and Darwiche 2008].",
      "startOffset" : 4,
      "endOffset" : 31
    }, {
      "referenceID" : 40,
      "context" : "Computing P[φ] is known to be #P-hard in general [Valiant 1979] and remains hard to even approximate [Roth 1996].",
      "startOffset" : 49,
      "endOffset" : 63
    }, {
      "referenceID" : 36,
      "context" : "Computing P[φ] is known to be #P-hard in general [Valiant 1979] and remains hard to even approximate [Roth 1996].",
      "startOffset" : 101,
      "endOffset" : 112
    }, {
      "referenceID" : 33,
      "context" : "for which calculating its probability is already #P-hard [Provan and Ball 1983].",
      "startOffset" : 57,
      "endOffset" : 79
    }, {
      "referenceID" : 24,
      "context" : "This is a read-once expression whose probability can always be computed in PTIME [Gurvich 1977].",
      "startOffset" : 81,
      "endOffset" : 95
    }, {
      "referenceID" : 39,
      "context" : "3 Our usage of the term oblivious is inspired by the notion of oblivious routing algorithms [Valiant 1982] which use only local information and which can therefore be implemented very efficiently.",
      "startOffset" : 92,
      "endOffset" : 106
    }, {
      "referenceID" : 14,
      "context" : "Another technique for approximation described by Fink and Olteanu [2011] is to replace φ with another expression whose set of models is either a subset or superset of those of φ.",
      "startOffset" : 49,
      "endOffset" : 73
    }, {
      "referenceID" : 14,
      "context" : "4Fink and Olteanu [2011] describe their approach for approximating DNF expressions only.",
      "startOffset" : 1,
      "endOffset" : 25
    }, {
      "referenceID" : 9,
      "context" : "Computing the probability of the lineage is known to be #P-hard for some queries [Dalvi and Suciu 2007], hence we are interested in approximating these probabilities by computing dissociated Boolean expressions for the lineage.",
      "startOffset" : 81,
      "endOffset" : 103
    }, {
      "referenceID" : 17,
      "context" : "We have previously shown in [Gatterbauer et al. 2010] that every query plan for a query corresponds to one possible dissociation for its lineage expression.",
      "startOffset" : 28,
      "endOffset" : 53
    }, {
      "referenceID" : 7,
      "context" : "This concept originates in constraint satisfaction and it is also varyingly called co-occurrence graph or variable interaction graph [Crama and Hammer 2011].",
      "startOffset" : 133,
      "endOffset" : 156
    }, {
      "referenceID" : 10,
      "context" : "Note that any two expressions in the expansion above are logically contradictory, a property called determinism by Darwiche and Marquis [2002], and that it can be seen as the result of applying Shannon’s expansion to all variables of y.",
      "startOffset" : 115,
      "endOffset" : 143
    }, {
      "referenceID" : 5,
      "context" : "Relaxation & Compensation The following proposition shows relaxation & compensation as conjunctive dissociation and was brought to our attention by Choi and Darwiche [2011].",
      "startOffset" : 148,
      "endOffset" : 173
    }, {
      "referenceID" : 17,
      "context" : "QUERY-CENTRIC DISSOCIATION BOUNDS FOR PROBABILISTIC QUERIES Our previous work [Gatterbauer et al. 2010] has shown how to upper bound the probability of conjunctive queries without self-joins by issuing a sequence of SQL statements over a standard relational DBMS.",
      "startOffset" : 78,
      "endOffset" : 103
    }, {
      "referenceID" : 17,
      "context" : "Furthermore, we have shown in [Gatterbauer et al. 2010] that P[φ] can be calculated with a probabilistic query plan",
      "startOffset" : 30,
      "endOffset" : 55
    }, {
      "referenceID" : 28,
      "context" : "This connection between read-once formulas and query plans was first observed by Olteanu and Huang [2008]. We write here PR to emphasize that this plan dissociates tuples in table R.",
      "startOffset" : 81,
      "endOffset" : 106
    }, {
      "referenceID" : 17,
      "context" : "We refer the reader to [Gatterbauer et al. 2010] where we develop the theory of the partial dissociation order among all possible query plans and give a sound and complete algorithm that returns a set of query plans which are guaranteed to give the tightest bounds possible in a query-centric way for any conjunctive query without self-joins.",
      "startOffset" : 23,
      "endOffset" : 48
    }, {
      "referenceID" : 19,
      "context" : "We further refer to [Gatterbauer and Suciu 2013] for more details and an extensive discussion on how to speed up the resulting multi-query evaluation.",
      "startOffset" : 20,
      "endOffset" : 48
    }, {
      "referenceID" : 13,
      "context" : "covariance cov(A,B) = P[AB] − P[A]P[B] and variance var(A) = P[A] − (P[A])2 [Feller 1968].",
      "startOffset" : 76,
      "endOffset" : 89
    }, {
      "referenceID" : 14,
      "context" : "This example compares the approximation of our dissociation-based approach with the model-based approach by Fink and Olteanu [2011] and illustrates how dissociation-based bounds are tighter, in general, than model-based approximations.",
      "startOffset" : 108,
      "endOffset" : 132
    }, {
      "referenceID" : 14,
      "context" : "Models: We use the model-based approach by Fink and Olteanu [2011] to approximate φ with lowest upper bound (LUB) formulas φUi and greatest lower bound (GLB) formulas φLi, for which φLi ⇒ φ and φ ⇒ φUi, and neither of the upper (lower) bounds implies another upper (lower) bound.",
      "startOffset" : 43,
      "endOffset" : 67
    }, {
      "referenceID" : 19,
      "context" : "12 and instead refer to [Gatterbauer and Suciu 2013] for a detailed discussion of techniques to speed up query dissociation.",
      "startOffset" : 24,
      "endOffset" : 52
    }, {
      "referenceID" : 21,
      "context" : "For our experiments, we use a tool called SampleSearch [Gogate and Domingos 2010; Gogate and Dechter 2011]24.",
      "startOffset" : 55,
      "endOffset" : 106
    }, {
      "referenceID" : 20,
      "context" : "For our experiments, we use a tool called SampleSearch [Gogate and Domingos 2010; Gogate and Dechter 2011]24.",
      "startOffset" : 55,
      "endOffset" : 106
    }, {
      "referenceID" : 26,
      "context" : "This scenario is also called data-safe [Jha et al. 2010].",
      "startOffset" : 39,
      "endOffset" : 56
    }, {
      "referenceID" : 1,
      "context" : "RELATED WORK AND DISCUSSION Dissociation is related to a number of recent approaches in the graphical models and constraint satisfaction literature which approximate an intractable problem with a tractable relaxed version after treating multiple occurrences of variables or nodes as independent or ignoring some equivalence constraints: Choi et al. [2007] approximate inference in Bayesian networks by “node splitting,” i.",
      "startOffset" : 337,
      "endOffset" : 356
    }, {
      "referenceID" : 1,
      "context" : "RELATED WORK AND DISCUSSION Dissociation is related to a number of recent approaches in the graphical models and constraint satisfaction literature which approximate an intractable problem with a tractable relaxed version after treating multiple occurrences of variables or nodes as independent or ignoring some equivalence constraints: Choi et al. [2007] approximate inference in Bayesian networks by “node splitting,” i.e. removing some dependencies from the original model. Ramı́rez and Geffner [2007] treat the problem of obtaining a minimum cost satisfying assignment of a CNF formula by “variable renaming,” i.",
      "startOffset" : 337,
      "endOffset" : 505
    }, {
      "referenceID" : 1,
      "context" : "RELATED WORK AND DISCUSSION Dissociation is related to a number of recent approaches in the graphical models and constraint satisfaction literature which approximate an intractable problem with a tractable relaxed version after treating multiple occurrences of variables or nodes as independent or ignoring some equivalence constraints: Choi et al. [2007] approximate inference in Bayesian networks by “node splitting,” i.e. removing some dependencies from the original model. Ramı́rez and Geffner [2007] treat the problem of obtaining a minimum cost satisfying assignment of a CNF formula by “variable renaming,” i.e. replacing a variable that appears in many clauses by many fresh new variables that appear in few. Pipatsrisawat and Darwiche [2007] provide lower bounds for MaxSAT by “variable splitting,” i.",
      "startOffset" : 337,
      "endOffset" : 751
    }, {
      "referenceID" : 0,
      "context" : "Andersen et al. [2007] improve the relaxation for constraint satisfaction problems by “refinement through node splitting,” i.",
      "startOffset" : 0,
      "endOffset" : 23
    }, {
      "referenceID" : 0,
      "context" : "Andersen et al. [2007] improve the relaxation for constraint satisfaction problems by “refinement through node splitting,” i.e. making explicit some interactions between variables. Choi and Darwiche [2009] relax the maximum a posteriori (MAP) problem in probabilistic graphical models by dropping equivalence constraints and partially compensating for the relaxation.",
      "startOffset" : 0,
      "endOffset" : 206
    }, {
      "referenceID" : 0,
      "context" : "Andersen et al. [2007] improve the relaxation for constraint satisfaction problems by “refinement through node splitting,” i.e. making explicit some interactions between variables. Choi and Darwiche [2009] relax the maximum a posteriori (MAP) problem in probabilistic graphical models by dropping equivalence constraints and partially compensating for the relaxation. Our work provides a general framework for approximating the probability of Boolean functions with both upper and lower bounds. These bounds shed light on the connection between previous relaxation-based and model-based approximations and unify them as concrete choices in a larger design space. We thus refer to all of the above approaches as instances of dissociation-based approximations. Another line of work that is varyingly called “discretization,” “bucketing,” “binning,” or “quantization” proposes relaxations by merging or partitioning states or nodes (instead of splitting them), and to then perform simplified calculations over those partitions: Dechter and Rish [2003] approximate a function with high arity by a collection of smaller-arity functions with a parameterized scheme called “mini-buckets.",
      "startOffset" : 0,
      "endOffset" : 1049
    }, {
      "referenceID" : 0,
      "context" : "Andersen et al. [2007] improve the relaxation for constraint satisfaction problems by “refinement through node splitting,” i.e. making explicit some interactions between variables. Choi and Darwiche [2009] relax the maximum a posteriori (MAP) problem in probabilistic graphical models by dropping equivalence constraints and partially compensating for the relaxation. Our work provides a general framework for approximating the probability of Boolean functions with both upper and lower bounds. These bounds shed light on the connection between previous relaxation-based and model-based approximations and unify them as concrete choices in a larger design space. We thus refer to all of the above approaches as instances of dissociation-based approximations. Another line of work that is varyingly called “discretization,” “bucketing,” “binning,” or “quantization” proposes relaxations by merging or partitioning states or nodes (instead of splitting them), and to then perform simplified calculations over those partitions: Dechter and Rish [2003] approximate a function with high arity by a collection of smaller-arity functions with a parameterized scheme called “mini-buckets.” As example, the sum ∑ i f(xi) · g(xi) for non-negative functions f and g can be upper bounded by the summation (maxi f(xi)) · ∑ i g(xi), i.e. all different values of f(xi) are replaced by the single maximum value maxi f(xi), which simplifies the calculations. Similarly, the sum can be lower bounded by (mini f(xi)) · ∑ i g(xi). St-Aubin et al. [2000] use Algebraic Decision Diagrams (ADDs) and reduce the sizes of the intermediate value functions generated by replacing the values at the terminals of the ADD with ranges of values.",
      "startOffset" : 0,
      "endOffset" : 1534
    }, {
      "referenceID" : 0,
      "context" : "Andersen et al. [2007] improve the relaxation for constraint satisfaction problems by “refinement through node splitting,” i.e. making explicit some interactions between variables. Choi and Darwiche [2009] relax the maximum a posteriori (MAP) problem in probabilistic graphical models by dropping equivalence constraints and partially compensating for the relaxation. Our work provides a general framework for approximating the probability of Boolean functions with both upper and lower bounds. These bounds shed light on the connection between previous relaxation-based and model-based approximations and unify them as concrete choices in a larger design space. We thus refer to all of the above approaches as instances of dissociation-based approximations. Another line of work that is varyingly called “discretization,” “bucketing,” “binning,” or “quantization” proposes relaxations by merging or partitioning states or nodes (instead of splitting them), and to then perform simplified calculations over those partitions: Dechter and Rish [2003] approximate a function with high arity by a collection of smaller-arity functions with a parameterized scheme called “mini-buckets.” As example, the sum ∑ i f(xi) · g(xi) for non-negative functions f and g can be upper bounded by the summation (maxi f(xi)) · ∑ i g(xi), i.e. all different values of f(xi) are replaced by the single maximum value maxi f(xi), which simplifies the calculations. Similarly, the sum can be lower bounded by (mini f(xi)) · ∑ i g(xi). St-Aubin et al. [2000] use Algebraic Decision Diagrams (ADDs) and reduce the sizes of the intermediate value functions generated by replacing the values at the terminals of the ADD with ranges of values. Bergman et al. [2011],[2013] construct relaxations of Multivalued Decision Diagrams (MDDs) by merging vertices when the size of the partially constructed MDD grows too large.",
      "startOffset" : 0,
      "endOffset" : 1737
    }, {
      "referenceID" : 0,
      "context" : "Andersen et al. [2007] improve the relaxation for constraint satisfaction problems by “refinement through node splitting,” i.e. making explicit some interactions between variables. Choi and Darwiche [2009] relax the maximum a posteriori (MAP) problem in probabilistic graphical models by dropping equivalence constraints and partially compensating for the relaxation. Our work provides a general framework for approximating the probability of Boolean functions with both upper and lower bounds. These bounds shed light on the connection between previous relaxation-based and model-based approximations and unify them as concrete choices in a larger design space. We thus refer to all of the above approaches as instances of dissociation-based approximations. Another line of work that is varyingly called “discretization,” “bucketing,” “binning,” or “quantization” proposes relaxations by merging or partitioning states or nodes (instead of splitting them), and to then perform simplified calculations over those partitions: Dechter and Rish [2003] approximate a function with high arity by a collection of smaller-arity functions with a parameterized scheme called “mini-buckets.” As example, the sum ∑ i f(xi) · g(xi) for non-negative functions f and g can be upper bounded by the summation (maxi f(xi)) · ∑ i g(xi), i.e. all different values of f(xi) are replaced by the single maximum value maxi f(xi), which simplifies the calculations. Similarly, the sum can be lower bounded by (mini f(xi)) · ∑ i g(xi). St-Aubin et al. [2000] use Algebraic Decision Diagrams (ADDs) and reduce the sizes of the intermediate value functions generated by replacing the values at the terminals of the ADD with ranges of values. Bergman et al. [2011],[2013] construct relaxations of Multivalued Decision Diagrams (MDDs) by merging vertices when the size of the partially constructed MDD grows too large.",
      "startOffset" : 0,
      "endOffset" : 1744
    }, {
      "referenceID" : 0,
      "context" : "Andersen et al. [2007] improve the relaxation for constraint satisfaction problems by “refinement through node splitting,” i.e. making explicit some interactions between variables. Choi and Darwiche [2009] relax the maximum a posteriori (MAP) problem in probabilistic graphical models by dropping equivalence constraints and partially compensating for the relaxation. Our work provides a general framework for approximating the probability of Boolean functions with both upper and lower bounds. These bounds shed light on the connection between previous relaxation-based and model-based approximations and unify them as concrete choices in a larger design space. We thus refer to all of the above approaches as instances of dissociation-based approximations. Another line of work that is varyingly called “discretization,” “bucketing,” “binning,” or “quantization” proposes relaxations by merging or partitioning states or nodes (instead of splitting them), and to then perform simplified calculations over those partitions: Dechter and Rish [2003] approximate a function with high arity by a collection of smaller-arity functions with a parameterized scheme called “mini-buckets.” As example, the sum ∑ i f(xi) · g(xi) for non-negative functions f and g can be upper bounded by the summation (maxi f(xi)) · ∑ i g(xi), i.e. all different values of f(xi) are replaced by the single maximum value maxi f(xi), which simplifies the calculations. Similarly, the sum can be lower bounded by (mini f(xi)) · ∑ i g(xi). St-Aubin et al. [2000] use Algebraic Decision Diagrams (ADDs) and reduce the sizes of the intermediate value functions generated by replacing the values at the terminals of the ADD with ranges of values. Bergman et al. [2011],[2013] construct relaxations of Multivalued Decision Diagrams (MDDs) by merging vertices when the size of the partially constructed MDD grows too large. Gogate and Domingos [2011] compress potentials computed during the execution of variable elimination by “quantizing” them, i.",
      "startOffset" : 0,
      "endOffset" : 1917
    }, {
      "referenceID" : 25,
      "context" : "Existing approaches for query processing over probabilistic databases that are both general and tractable are either: (1) simulation-based approaches that adapt general purpose sampling methods [Jampani et al. 2008; Kennedy and Koch 2010; Re et al. 2007]; or (2) model-based approaches that approximate the original number of models with guaranteed lower or upper bounds [Olteanu et al.",
      "startOffset" : 194,
      "endOffset" : 254
    }, {
      "referenceID" : 27,
      "context" : "Existing approaches for query processing over probabilistic databases that are both general and tractable are either: (1) simulation-based approaches that adapt general purpose sampling methods [Jampani et al. 2008; Kennedy and Koch 2010; Re et al. 2007]; or (2) model-based approaches that approximate the original number of models with guaranteed lower or upper bounds [Olteanu et al.",
      "startOffset" : 194,
      "endOffset" : 254
    }, {
      "referenceID" : 35,
      "context" : "Existing approaches for query processing over probabilistic databases that are both general and tractable are either: (1) simulation-based approaches that adapt general purpose sampling methods [Jampani et al. 2008; Kennedy and Koch 2010; Re et al. 2007]; or (2) model-based approaches that approximate the original number of models with guaranteed lower or upper bounds [Olteanu et al.",
      "startOffset" : 194,
      "endOffset" : 254
    }, {
      "referenceID" : 30,
      "context" : "2007]; or (2) model-based approaches that approximate the original number of models with guaranteed lower or upper bounds [Olteanu et al. 2010; Fink and Olteanu 2011].",
      "startOffset" : 122,
      "endOffset" : 166
    }, {
      "referenceID" : 14,
      "context" : "2007]; or (2) model-based approaches that approximate the original number of models with guaranteed lower or upper bounds [Olteanu et al. 2010; Fink and Olteanu 2011].",
      "startOffset" : 122,
      "endOffset" : 166
    }, {
      "referenceID" : 12,
      "context" : "Our work on dissociation originated while generalizing propagation-based ranking methods from graphs [Detwiler et al. 2009] to hypergraphs and conjunctive queries.",
      "startOffset" : 101,
      "endOffset" : 123
    }, {
      "referenceID" : 17,
      "context" : "In [Gatterbauer et al. 2010], we applied dissociation in a query-centric way to upper bound hard probabilistic queries, and showed the connection between propagation on graphs and dissociation on hypergraphs (see [Gatterbauer and Suciu 2013] for all details).",
      "startOffset" : 3,
      "endOffset" : 28
    }, {
      "referenceID" : 19,
      "context" : "2010], we applied dissociation in a query-centric way to upper bound hard probabilistic queries, and showed the connection between propagation on graphs and dissociation on hypergraphs (see [Gatterbauer and Suciu 2013] for all details).",
      "startOffset" : 190,
      "endOffset" : 218
    }, {
      "referenceID" : 18,
      "context" : "A previous version of this paper was made available as [Gatterbauer and Suciu 2011].",
      "startOffset" : 55,
      "endOffset" : 83
    }, {
      "referenceID" : 16,
      "context" : "A more detailed literature overview in this space is given by Gogate and Domingos [2013]. Note that dissociation-based approaches (that split nodes) and quantization-based approaches (that merge nodes) are not inverse operations, but are rather two complementary approaches that may be combined to yield improved methods.",
      "startOffset" : 62,
      "endOffset" : 89
    }, {
      "referenceID" : 15,
      "context" : "Notice here the similarity to loopy belief propagation [Frey and MacKay 1997], which is applied widely and successfully, despite lacking general performance guarantees.",
      "startOffset" : 55,
      "endOffset" : 77
    }, {
      "referenceID" : 36,
      "context" : "The advantage of data-centric approaches is that exact solutions can be arbitrarily approximated, yet at the cost of no guaranteed runtime [Roth 1996].",
      "startOffset" : 139,
      "endOffset" : 150
    } ],
    "year" : 2015,
    "abstractText" : "This paper develops upper and lower bounds for the probability of Boolean functions by treating multiple occurrences of variables as independent and assigning them new individual probabilities. We call this approach dissociation and give an exact characterization of optimal oblivious bounds, i.e. when the new probabilities are chosen independent of the probabilities of all other variables. Our motivation comes from the weighted model counting problem (or, equivalently, the problem of computing the probability of a Boolean function), which is #P-hard in general. By performing several dissociations, one can transform a Boolean formula whose probability is difficult to compute, into one whose probability is easy to compute, and which is guaranteed to provide an upper or lower bound on the probability of the original formula by choosing appropriate probabilities for the dissociated variables. Our new bounds shed light on the connection between previous relaxation-based and model-based approximations and unify them as concrete choices in a larger design space. We also show how our theory allows a standard relational database management system (DBMS) to both upper and lower bound hard probabilistic queries in guaranteed polynomial time.",
    "creator" : "LaTeX with hyperref package"
  }
}