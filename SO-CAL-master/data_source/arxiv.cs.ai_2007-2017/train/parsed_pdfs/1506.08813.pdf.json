{
  "name" : "1506.08813.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Argumentation Semantics for Prioritised Default Logic",
    "authors" : [ "Anthony P. Young", "Sanjay Modgil", "Odinaldo Rodrigues" ],
    "emails" : [ "anthony.p.young@kcl.ac.uk" ],
    "sections" : [ {
      "heading" : null,
      "text" : "Contents"
    }, {
      "heading" : "1 Introduction 2",
      "text" : ""
    }, {
      "heading" : "2 Background 4",
      "text" : "2.1 Dung’s Abstract Argumentation Theory . . . . . . . . . . . . . . 4 2.2 The ASPIC+ Framework . . . . . . . . . . . . . . . . . . . . . . . 4\n2.2.1 Construction of Arguments and Knowledge Bases . . . . . 5 2.2.2 Properties of Arguments . . . . . . . . . . . . . . . . . . . 6 2.2.3 Attacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 2.2.4 Preferences and Defeats . . . . . . . . . . . . . . . . . . . 7 2.2.5 Applying Dung’s Semantics . . . . . . . . . . . . . . . . . 9 2.2.6 Conditions for Normative Rationality . . . . . . . . . . . 9\n2.3 Prioritised Default Logic . . . . . . . . . . . . . . . . . . . . . . . 9 2.3.1 First Order Logic . . . . . . . . . . . . . . . . . . . . . . . 9 2.3.2 Normal Defaults . . . . . . . . . . . . . . . . . . . . . . . 9 2.3.3 Prioritised Default Theories and Extensions . . . . . . . . 10\n∗Corresponding author: Peter Young, Department of Informatics, King’s College London, anthony.p.young@kcl.ac.uk\nar X\niv :1\n50 6.\n08 81\n3v 2\n[ cs\n.A I]\n1 J\n3 The Corrected ASPIC+ Preferences 11 3.1 Overview of the Problem . . . . . . . . . . . . . . . . . . . . . . . 11 3.2 The Elitist Set Comparison Relation is not Reasonable Inducing 11 3.3 The Strict Elitist Set Comparison is Reasonable Inducing . . . . 13 3.4 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n4 From ASPIC+ to Prioritised Default Logic 16 4.1 The Instantiation . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 4.2 Preferences and Defeats . . . . . . . . . . . . . . . . . . . . . . . 17\n4.2.1 Failure of all ASPIC+ Preferences . . . . . . . . . . . . . 17 4.2.2 The Disjoint Elitist Order . . . . . . . . . . . . . . . . . . 18 4.2.3 Mimicking Prioritised Default Logic . . . . . . . . . . . . 20\n4.3 Correspondence of Inferences . . . . . . . . . . . . . . . . . . . . 23 4.3.1 Uniqueness of Stable Extensions . . . . . . . . . . . . . . 23 4.3.2 A Helpful Distinction in Prioritised Default Logic . . . . . 25 4.3.3 The Representation Theorem . . . . . . . . . . . . . . . . 26 4.4 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30"
    }, {
      "heading" : "5 On the Normative Rationality of this Instantiation 31",
      "text" : "5.1 Rational Instantiations of ASPIC+ . . . . . . . . . . . . . . . . . 31 5.2 Well-Definedness of this Instantiation . . . . . . . . . . . . . . . 31 5.3 Reasonableness of the Argument Preference . . . . . . . . . . . . 32\n5.3.1 Strict Extensions . . . . . . . . . . . . . . . . . . . . . . . 32 5.3.2 Reasonableness Defined . . . . . . . . . . . . . . . . . . . 33 5.3.3 Is the Structure Preference Order Reasonable? . . . . . . 34\n5.4 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36"
    }, {
      "heading" : "6 Discussion and Conclusion 36",
      "text" : ""
    }, {
      "heading" : "A Properties of the Disjoint Elitist Order 38",
      "text" : ""
    }, {
      "heading" : "B Characterising Non-Blocked Defaults 44",
      "text" : ""
    }, {
      "heading" : "1 Introduction",
      "text" : "Dung’s argumentation theory [7] has become established as a general framework for non-monotonic reasoning (NMR). Given a set of well-formed formulae (wffs) ∆ in some non-monotonic logic (NML), the arguments and attacks defined by ∆ instantiate a Dung argumentation framework. Additionally, a preference relation over the defined arguments can be used to determine which attacks succeed as defeats. The justified arguments are then evaluated under various Dung semantics, and the claims of the sceptically justified arguments1 identify the inferences from the underlying ∆.\n1i.e. the arguments contained in all extensions under some semantics.\nMore formally, given an argumentation framework AF and a wff θ, the argumentation-defined inference relation |∼AF over ∆ is ∆ |∼AF θ iff θ is the conclusion of a sceptically justified argument in AF . Indeed, a correspondence has been shown between |∼AF over ∆, and the instantiating logic’s non-monotonic inference relation defined directly over ∆. For example, Reiter’s default logic (DL) [7], logic programming [7], defeasible logic [9] and Brewka’s preferred subtheories [12] have all been been endowed with argumentation semantics. This in turn allows the application of argument game proof theories [11] to the process of inference, and the generalisation of these dialectical proof theories to distributed NMR amongst computational agents, whereby agents can engage in argumentation-based dialogues, submitting arguments and counter-arguments from their own non-monotonic knowledge bases [1,10,14]. Furthermore, argumentative characterisations of NMR make use of principles familiar in everyday reasoning and debate, thus rendering transparent the reasons for accepting a conclusion and allowing for human participation and inspection of the inference process.\nOne well-studied NML that has not yet been endowed with argumentation semantics is Brewka’s prioritised default logic (PDL) [3]. PDL is important because it upgrades DL [16] with priorities over defaults2. PDL has also been used to represent the (possibly conflicting) beliefs, obligations, intentions and desires (BOID) of agents, and model how these different categories of mental attitudes override each other in order to generate goals and actions that attain those goals [5].\nIn this note, we endow PDL with argumentation semantics and prove a correspondence between PDL inference and the inference relation defined by the argumentation semantics. We achieve this by appropriately instantiating the ASPIC+ framework for structured argumentation [12, 13]. ASPIC+ identifies conditions under which logics and preference relations instantiating Dung’s frameworks satisfy the rationality postulates of [6]. In Section 2, we review ASPIC+ and PDL. In Section 3, we identify an error in the proof of [12, page 376, Proposition 21], which forces us to slightly modify our choice of argument preference relations in Section 2.2. In Section 4, we define a PDL instantiation of ASPIC+. This will involve studying preference relations thus far not considered by ASPIC+. We then present a representation theorem proving that inferences defined by the argumentation semantics correspond exactly to inferences in PDL. In Section 5, we discuss to what extent is this ASPIC+ instantiation normatively rational. Finally, in Section 6, we conclude with future work and some remarks about our approach.\nIn Appendix A, we prove some properties of a non-ASPIC+ argument preference relation, that is relevant to the PDL instantiation. In Appendix B, we prove an intermediate result necessary for the proof of the representation theorem.\n2So that, for example, one can account for recent information taking priority over information in the distant past, or that more specific information should take priority over more general information."
    }, {
      "heading" : "2 Background",
      "text" : "In the remainder of this paper we make use of the following notation: N is the set of natural numbers, with N+ := N− {0}. For a set X its power set is P(X), the set of its finite subsets is Pfin(X), so X ⊆fin Y iff X is a finite subset of Y , therefore X ∈ Pfin(Y )⇔ X ⊆fin Y . Undefined quantities are denoted by ∗, for example 1/0 = ∗ in the real numbers. If 〈P, ≤〉 is a preset (preordered set) then the strict version of the preorder is a < b⇔ [a ≤ b, b 6≤ a], which is easily shown to be a strict partial order. For two sets A, B their symmetric difference is A B := (A−B) ∪ (B −A)."
    }, {
      "heading" : "2.1 Dung’s Abstract Argumentation Theory",
      "text" : "We now recap the important definitions of [7]. A (Dung) argumentation framework is a directed graph 〈A, C〉, where A is the set of arguments and C ⊆ A2 is the conflict relation over A. For arguments A, B ∈ A we write C(A, B)⇔ (A, B) ∈ C ⇔ A conflicts with B, i.e. A is used as a counterargument against B. Note that C can denote either an attack relation defined by a set of instantiating formulae, or the defeat relation defined by determining which attacks succeed as defeats.\nIn what follows let S ⊆ A be a set of arguments and A, B ∈ A. S conflicts with B iff (∃A ∈ S) C(A, B). S is conflict-free (cf) iff C∩S2 = ∅. S defends A iff (∀B ∈ A) [C(B, A)⇒ S conflicts with B]. Let Def(S) := {A ∈ A S defends A}. Then, S is an admissible set iff S is cf and S ⊆ Def(S). An admissible set S is:\n• a complete extension iff Def(S) ⊆ S;\n• a preferred extension iff S is a ⊆-maximal complete extension;\n• the grounded extension iff S is the ⊆-least complete extension;\n• a stable extension iff S is complete and conflicts with all arguments in A− S.\nS := {complete, preferred, grounded, stable} is the set of Dung semantics. An argument A ∈ A is sceptically justified under the semantics s ∈ S iff A belongs to all s extensions.\n2.2 The ASPIC+ Framework\nDung’s framework provides an intuitive calculus of opposition for determining the justified arguments based on conflict alone. However, it abstracts from the internal logical structure of arguments, the nature of defeats and how they are determined by preferences, and consideration of the conclusions of the arguments. However, these features are referenced when studying whether any given logical instantiation of a framework yields complete extensions that satisfy the rationality postulates of [6]. ASPIC+ [12, 13] provides a structured account of abstract argumentation, allowing one to reference the above features, while at\nthe same time accommodating a wide range of instantiating logics and preference relations. ASPIC+ then identifies conditions under which the instantiation (given arguments, attacks and preferences) results in complete extensions that satisfy the rationality postulates of [6]; such instantiations are normatively rational."
    }, {
      "heading" : "2.2.1 Construction of Arguments and Knowledge Bases",
      "text" : "An (ASPIC+) argumentation system is 〈L, −, Rs, Rd, n〉 where L is a logical language, − : L → P(L) is the contrary function θ 7→ θ that identifies when one wff in L conflicts with another. Let θ1, . . . , θm, φ ∈ L be wffs for m ∈ N, Rs is the set of strict inference rules of the form (θ1, . . . , θm → φ), denoting that if θ1, . . . , θm are true then φ is true no matter what, and Rd is the set of defeasible inference rules of the form (θ1, . . . , θm ⇒ φ), denoting that if θ1, . . . , θm are true then φ is true, unless there are good reasons not to accept φ. Finally n : Rd → L is a partial function that assigns a name to some of the defeasible rules.\nFor each rule r ∈ Rs ∪Rd we define two functions:\n1. The antecedent map is\nAnte : R → Pfin(L) r := (θ1, · · · , θm → /⇒ φ) 7→ Ante(r) := {θ1, · · · , θm} . (2.1)\nNote that Ante returns a finite set of formulae.\n2. The consequent map is\nCons : R → L r := (θ1, · · · , θm → /⇒ φ) 7→ Cons(r) := φ . (2.2)\nThe names of the rules are unique, i.e. if Ante(r) = Ante(r′) and Cons(r) = Cons(r′), then r = r′. By equality we mean syntactic equality with respect to the instantiating logic, e.g. if L is propositional logic, ¬(θ → φ) 6= (θ∧¬φ). Two rules r, r′ are equal iff Ante(r) = Ante(r′) (syntactically) and Cons(r) = Cons(r′) (syntactically).\nAn (ASPIC+) knowledge base is a set K := Kn ∪ Kp ⊆ L where Kn is the set of axioms and Kp is the set of ordinary premises. Intuitively, the knowledge base consists of the premises used in constructing arguments. Note that K does not have to be a finite set. Given an argumentation system and knowledge base, an (ASPIC+) argument is defined inductively:\n1. (Base) [θ] is a singleton (ASPIC+) argument with θ ∈ K, conclusion Conc([θ]) := θ, premise set {θ} ⊆ K and top rule TopRule([θ]) := ∗.\n2. (Inductive, strict) Let 1 ≤ i ≤ n be an index. For each such i let Ai be an ASPIC+ argument with conclusion Conc(Ai) and premise set Prem(Ai). If r := (Conc(A1), . . . , Conc(An)→ φ) ∈ Rs, then B := [A1, . . . , An → φ] is also an ASPIC+ argument with conclusion Conc(B) = φ, premise set Prem(B) := ⋃n i=1 Prem(Ai) ⊆ K and TopRule(B) = r ∈ Rs.\n3. (Inductive, defeasible) Let 1 ≤ i ≤ n be an index. For each such i let Ai be an ASPIC+ argument with conclusion Conc(Ai) and premise set Prem(Ai). If r′ := (Conc(A1), . . . , Conc(An)⇒ φ) ∈ Rd, then C := [A1, . . . , An ⇒ φ] is also an ASPIC+ argument with conclusion Conc(C) = φ, premise set Prem(C) := ⋃n i=1 Prem(Ai) ⊆ K and TopRule(C) = r′ ∈ Rd.\nLet A be the (unique) set of all arguments constructed in this way. It is clear that arguments are finite objects."
    }, {
      "heading" : "2.2.2 Properties of Arguments",
      "text" : "A subargument B of A is (informally) an argument where Prem(B) ⊆ Prem(A) and Conc(B) appears as an intermediate conclusion of A attained by the application of the exact same rules3. Given an argument A, its set of subarguments is Sub(A) ⊆ A and its set of proper subarguments is Sub(A)− {A} ⊆ A. We will also write A ⊆arg B ⇔ A ∈ Sub(B), and A ⊂arg B ⇔ A ∈ Sub(B)− {B}. It is easy to show that ⊆arg is a preorder and ⊂arg is a strict partial order on A. Informally, two arguments are equal iff they are constructed identically in the above manner4. Further, a set S ⊆ A is subargment closed iff (∀A ∈ S)Sub(A) ⊆ S.\nAn argument A ∈ A is firm iff Prem(A) ⊆ Kn, i.e. all of its premises are axioms. Further, DR(A) ⊆ Rd is the set of defeasible rules applied in constructing A. An argument A is strict iff DR(A) = ∅, else A is defeasible.\nWe define the conclusion map\nConc : A → L A 7→ Conc(A) , (2.3)\nwhich takes an argument and returns its conclusion5. We can generalise this to sets of arguments as follows:\nConc′ : P (A)→ P (L) S 7→ Conc′(S) := ⋃ A∈S Conc(A) . (2.4)\nWe will abuse notation and not distinguish between Conc′ and Conc if there is no danger of ambiguity. Similarly, one can also define Prem : A → Pfin (L), DR : A → Pfin (Rd), TopRule : A → R from how arguments are constructed, and generalise their domains from single arguments A to sets of arguments P (A). Further, we define, for all A ∈ A, Premn(A) := Prem(A) ∩ Kn, Premp(A) := Prem(A) ∩ Kp, SR(A) ⊆ Rs is the set of strict rules applied in constructing A.\nNotice in the cases of Prem and DR, the codomains are appropriate powersets and not finite powersets, this is because for arbitrary sets of arguments, even\n3One can formally define subarguments via how arguments are constructed as described in the previous section.\n4More formally, argument equality can be defined inductively given how arguments are constructed. This will make ⊆arg into a partial order.\n5Do not confuse Conc : A → L with Cons : R→ L (Equation 2.2, page 5).\nthough each argument is mapped to its finite set of premises or defeasible rules, the set of arguments can be infinite and the union of infinitely many finite sets does not have to be finite."
    }, {
      "heading" : "2.2.3 Attacks",
      "text" : "An argument A attacks another argument B, denoted as A ⇀ B, iff at least one of the following hold, where:6\n1. A is said to undermine attack B on the subargument B′ = [φ] iff\n[∃φ ∈ Premp(B)] Conc(A) ∈ φ ,\ni.e. A conflicts with some ordinary premise of B.\n2. There is some B′ ⊆arg B such that for all i = 1, . . . , n,\n[B′′i ⊆arg B, B′ = [B′′1 , . . . , B′′n ⇒ φ]]\nand Conc(A) ∈ φ. A is then said to rebut attack B on the subargument B′.\n3. There is some B′ ⊆arg B such that r := TopRule(B′) ∈ Rd and Conc(A) ∈ n(r). A is then said to undercut attack B on the subargument B′ (by arguing against the application of the defeasible rule r in B).\nWe then abuse notation to define the attack relation as ⇀ ⊆ A2 such that (A, B) ∈⇀⇔ A ⇀ B. A set of arguments S ⊆ A is attack-conflict-free (attack-cf) iff S2 ∩ ⇀ = ∅. By transitivity of ⊆arg, for all A, B, C ∈ A, if A ⇀ B and B ⊆arg C, then A ⇀ C."
    }, {
      "heading" : "2.2.4 Preferences and Defeats",
      "text" : "A preference relation over arguments is then used to determine which attacks succeed as defeats. We denote the preference -⊆ A2 (not necessarily a preorder for now) such that A - B ⇔ A is not more preferred than B. The strict version is A ≺ B ⇔ [A - B, B 6- A], and equivalence is A ≈ B ⇔ [A - B, B - A]. We define a defeat as\nA ↪→ B ⇔ (∃B′ ⊆arg B) [A ⇀ B′, A 6≺ B′] . (2.5)\nThat is to say, A defeats B (on B′) iff A attacks B on the subargument B′, and B′ is not strictly preferred to A. Notice the comparison is made at the subargument B′ instead of the whole argument B. We then abuse notation to define the defeat relation as ↪→⊆ A2 such that (A, B) ∈ ↪→⇔ A ↪→ B. By transitivity of ⊆arg, for all A, B, C ∈ A, if A ↪→ B and B ⊆arg C, then A ↪→ C. A set of arguments S ⊆ A is defeat-conflict-free (defeat-cf) iff S2∩ ↪→= ∅.\n6See [13, Section 2] for a further discussion of why attacks are distinguished in this way.\nWhat is the difference between attack-cf and defeat-cf? Clearly, attack-cf implies defeat-cf but the converse is not true. [12] argues that attack-cf should be the correct notion of conflict-freeness to use when invoking Dung semantics, because the presence of attacks denote disagreement between two arguments, and ideally an agent should not accept two arguments that disagree with each other. However, one can also argue that defeat-cf is the correct notion of conflictfreeness to use (e.g. [15]), because an agent can accept two arguments that attack each other, knowing also that the attack does not succeed due to the preference relation. In the upcoming sections, we will prove the stronger result of attack-cf whenever it is possible to, and defeat-cf follows.\nIn ASPIC+, preferences over arguments are calculated from the argument structure through comparing the fallible information (ordinary premises and defeasible rules) they contain. More formally, Kp and Rd are endowed with preorders ≤′ and ≤′′ respectively7. This preorder is then lifted to a set-comparison order E between the (finite) sets of premises or defeasible rules of the arguments, and then finally to -, following the method in [12, Section 5].\nWe now recap this lifting of the preorder <′′ from Rd to Pfin (Rd). We omit comparing premises because in our instantiation we only compare defeasible rules as there are no ordinary premises (Section 4, page 16).\nMore formally, ASPIC+ considers two ordering principles called democratic and elitist [12, Section 5]8, such that for A, B ∈ A and DR(A) ⊆ Rd, we define A - B to be\nDR(A) EEli DR(B) (2.6)\nor DR(A) EDem DR(B) , (2.7)\nwhere, for9 Γ, Γ′ ⊆fin Rd,\nΓ EEli Γ ′ ⇔ [Γ = Γ′ or Γ /Eli Γ′] , (2.8)\nΓ /Eli Γ ′ ⇔ (∃x ∈ Γ) (∀y ∈ Γ′) x <′′ y , (2.9) Γ EDem Γ ′ ⇔ [Γ = Γ′ or Γ /Dem Γ′] , and (2.10)\nΓ /Dem Γ ′ ⇔ (∀x ∈ Γ) (∃y ∈ Γ′) x <′′ y , (2.11)\nIt is easy to show that - in both cases is a preorder on A. We define equivalence of arguments as follows:\nA ≈ B ⇔ DR(A) = DR(B) . (2.12)\nNote that Equations 2.8 and 2.9 are not exactly the same as [12, page 375, Definition 19]. We will explain this in Section 3 (page 11).\nIn summary, when comparing two arguments A, B ∈ A, A - B iff [A ≈ B (Equation 2.12) or A ≺ B]. In the latter case, A ≺ B ⇔ DR(A) /Eli DR(B), or A ≺ B ⇔ DR(A) /Dem DR(B), depending on which ordering principle is being used.\n7Where the bigger item is more preferred. 8See [13, Section 3.5] for a further discussion of both these ordering principles. 9It suffices to consider finite sets as arguments are finite.\nGiven the preference relation - between arguments, we call the structure 〈A, ⇀, -〉 an ASPIC+ SAF (structured argumentation framework), or attack graph. Its corresponding defeat graph is 〈A, ↪→〉, where ↪→ is defined in terms of ⇀ and - as in Equation 2.5."
    }, {
      "heading" : "2.2.5 Applying Dung’s Semantics",
      "text" : "Given 〈A, ↪→〉 one can then evaluate the extensions under Dung’s semantics (Section 2.1, page 4), and thus identify the argumentation defined inferences as the conclusions of the sceptically justified arguments as follows. Let AS be an argumentation system. The argumentation-defined inference relation |∼AS is K |∼AS θ iff θ = Conc(A) where A ∈ A is a sceptically justified argument."
    }, {
      "heading" : "2.2.6 Conditions for Normative Rationality",
      "text" : "Instantiations of ASPIC+ should satisfy some properties to ensure it is normatively rational [6]. Let E ⊆ A be a complete extension. Informally, subargument closure states that if an argument is in E , then all its subarguments are in E . Closure under strict rules states that if the conclusions of arguments in E strictly entail some φ, then E contains an argument concluding φ. Finally, consistency states that Conc(E) := ⋃ A∈E Conc(A) is a consistent with respect to the instantiating logic. Collectively these are the (Caminada-Amgoud) rationality postulates.\nASPIC+ then identifies sufficient conditions for an instantiation to satisfy these rationality postulates. These are that the instantiation is well-defined and that the argument preference ordering - is reasonable. We will say more about these conditions in Section 5 (page 31), where we discuss whether the ASPIC+ characterisation of PDL satisfies the rationality postulates."
    }, {
      "heading" : "2.3 Prioritised Default Logic",
      "text" : ""
    }, {
      "heading" : "2.3.1 First Order Logic",
      "text" : "In this section we recap PDL [3]. We work in full first order logic (FOL) where the set of first-order formulae is FL and the set of closed first order formulae10 is SL ⊆ FL, with the usual quantifiers and connectives. Given S ⊆ FL, the deductive closure (of S) is Th(S), and given θ ∈ FL, the addition operator + : P(FL)×FL is defined as S + θ := Th(S ∪ {θ})."
    }, {
      "heading" : "2.3.2 Normal Defaults",
      "text" : "A normal default is an expression θ:φφ where θ, φ ∈ FL and read “if θ is the case and φ is consistent with what we know, then φ is the case”11. In this case we call θ the antecedent and φ the consequent. A normal default θ:φφ is closed iff θ, φ ∈ SL. We will assume all defaults are closed and normal unless stated\n10i.e. first order formulae without free variables 11There are other possible interpretations of normal defaults, see Example 1.\notherwise. Given S ⊆ SL, a default is active (in S) iff [θ ∈ S, φ /∈ S, ¬φ /∈ S]. Intuitively, the first requirement says we need to know the antecedent before applying the default, the second requirement is that the consequent must add new information, and the third requirement ensures that what we infer is consistent with what we know."
    }, {
      "heading" : "2.3.3 Prioritised Default Theories and Extensions",
      "text" : "A finite prioritised default theory (PDT) is a structure 〈D, W, ≺〉, whereW ⊆ SL is not necessarily a finite set and 〈D, ≺〉 is a finite strict poset (partially ordered set) of defaults, where d′ ≺ d⇔ d is more12 prioritised than d′. Intuitively, W are the known facts and D the defaults that nonmonotonically extend W . We will consider finite PDTs unless otherwise specified.\nA PDT’s inferences are defined by its extensions. Formally, let ≺+⊇≺ be a linearisation13 of ≺. An extension (with respect to ≺+) is a set E := ⋃ i∈NEi ⊆ SL built inductively as:\nE0 := Th(W ) and (2.13)\nEi+1 :=\n{ Ei + φ , condition 1\nEi , else (2.14)\nwhere “condition 1” iff “φ is the consequent of the ≺+-greatest default d active in Ei”. Intuitively, one first generates all classical consequences from the facts W , and then iteratively adds the nonmonotonic consequences from the most prioritised default to the least. Notice if W is inconsistent then E0 = E = FL. We will assume W is consistent unless stated otherwise.\nIt can be shown that the ascending chain Ei ⊆ Ei+1 stabilises at some finite i ∈ N and that E is consistent provided that W is consistent. E does not have to be unique because there may be more than one distinct linearisation ≺+ of ≺. We say the PDT 〈D, W, ≺〉 sceptically infers θ ∈ SL iff θ ∈ E for all extensions E.\nHenceforth, we will refer to a PDT 〈D, W, ≺〉 where ≺ is a strict total order as a linearised PDT (LPDT). If ≺ is already total then there is only one way to apply the defaults in D (Equation 2.14), hence the extension is unique and all inferences are sceptical. In what follows, we will use ≺+ to emphasise that the order is total.\nOne application of PDL is in modelling how an agent reasons with her beliefs, obligations, intentions and desires (BOID).\nExample 1. Suppose a research assistant Alice (a) is considering whether she should teach undergraduates. We can model her mental attitudes as a BOID agent’s PDT [5] as follows. Define the predicates R(x) ⇔ “x is a research assistant”, A(x) ⇔ “x is an academic”, and T (x) ⇔ “x is teaching\n12 We have defined the order dually to [3] so as to comply with orderings over the ASPIC+\ndefeasible inference rules. 13i.e. ≺+ is a strict total order and hence 〈 D, ≺+ 〉 is a strict toset (totally ordered set).\n(undergraduates)”. Alice is a research assistant, so W = {R(a)}. She believes that research assistants are academics, so her set of beliefs Bel has the default R(a):A(a) A(a) . She does not want to teach and would rather focus on her research, so her set of desires Des include R(a):¬T (a)¬T (a) . However, she is obliged to teach, so her set of obligations Obl include A(a):T (a)T (a) . The set of defaults is D = Bel∪Des∪Obl, and we assume no other defaults are relevant for this example.\nIn [5], the relative prioritisations of categories of mental attitudes define different agent types. For example, if Alice is a realistic selfish agent, the priority (abuse of notation) is Obl ≺+ Des ≺+ Bel, and therefore the extension is Th ({R(a), A(a), ¬T (a)}). She thus generates the goal ¬T (a), i.e. she does not teach. However, if she is a realistic social agent, the priority (abuse of notation) is Des ≺+ Obl ≺+ Bel, and therefore she teaches, as T (a) is in the extension.\n3 The Corrected ASPIC+ Preferences"
    }, {
      "heading" : "3.1 Overview of the Problem",
      "text" : "In this section, we show that the elitist set comparison relation [12, page 375, Definition 19] is not reasonable inducing and hence cannot guarantee normative rationality. This is because there is an error in the proof of [12, page 376, Proposition 21]. One should use Prakken’s original strict elitist set comparison relation instead [15], which does result in normatively rational ASPIC+ instantiations. This is why Equation 2.9 (page 8) is not the same as the original ASPIC+ elitist set comparison relation."
    }, {
      "heading" : "3.2 The Elitist Set Comparison Relation is not Reasonable Inducing",
      "text" : "Recall that the property of reasonable inducing for a given set comparison relation E is necessary for ASPIC+ instantiations to have normatively rational argument preference relations - based on E, because they preserve Dung’s fundamental lemma [7, page 327, Lemma 10], as discussed in [12, Section 4.2].\nDefinition 3.1. (From [12, page 376, Definition 22]) Given a preset 〈P,≤〉, a set comparison E⊆ [Pfin(P )]2 is reasonable inducing iff\n1. E is transitive.\n2. For any Γ0, Γ1, · · · , Γn ⊆fin P (for n ≥ 1), if\nn⋃ i=1 Γi / Γ0 then (3.1)\n(a) (∃1 ≤ i ≤ n) Γi E Γ0 and (b) (∃1 ≤ i ≤ n) Γ0 6E Γi.\nRecall the following identity for bounded existential quantifiers: for any unary predicate P and a family of sets Ai indexed by another set I,(\n∃x ∈ ⋃ i∈I Ai\n) P(x)⇔ (∃i ∈ I) (∃x ∈ Ai)P(x) . (3.2)\nWe now explain why the proof that EEli is reasonable inducing [12, page 376, proposition 21] is incorrect by locating the error.\nLemma 3.1. (The following statement, [12, page 376, Proposition 21], may not be true) EEli is reasonable inducing.\nProof. (The following proof, from [12, page 390, Proposition 21], is incorrect) We know that EEli is transitive and satisfies Property 2(a) of reasonable inducing (Definition 3.1, page 11) from Equation 3.2. Assume for contradiction that property 2(b) is false, i.e.\n(∀1 ≤ i ≤ n) Γ0 EEli Γi ⇔ (∀1 ≤ i ≤ n) (∃x ∈ Γ0) (∀y ∈ Γi)x ≤ y ⇒ (∃x ∈ Γ0) (∀y ∈ Γ1)x ≤ y (by choosing i = 1), ⇔ (∀y ∈ Γ1)x1 ≤ y , (3.3)\nwhere x1 ∈ Γ0 is the witness to ∃. Now from the assumption of strictly less than in the set comparison relation (Equation 3.1, page 11), we have\nΓ0 6EEli n⋃ i=1 Γi ⇔ (∀x ∈ Γ0)\n( ∃y ∈\nn⋃ i=1 Γi\n) x 6≤ y\n⇔ (∀x ∈ Γ0) (∃1 ≤ i ≤ n) (∃y ∈ Γi)x 6≤ y by Equation 3.2 ⇒ (∃1 ≤ i(x1) ≤ n) ( ∃y ∈ Γi(x1) ) x1 6≤ y , (3.4)\nwhere in the last step we have instantiated x under ∀ to x1 ∈ Γ0, which is the witness to Equation 3.3.\n(INCORRECT STEP) Assume the witness to ∃ in Equation 3.4 is 1, i.e. i(x1) = 1. Of course, there is no guarantee that the witness to the first ∃ in Equation 3.4 is the same as the instantiation of the first ∀ in “(∀1 ≤ i ≤ n) Γ0 EEli Γ1”.\nRunning with this, we have from Equations 3.3 and 3.4,\n(∀y ∈ Γ1)x1 ≤ y and (∃y ∈ Γ1)x1 6≤ y . (3.5)\nTherefore, by instantiating the first quantifier ∀ to the witness of the second quantifier ∃, calling it y0 ∈ Γ1, we have\nx1 ≤ y0 and x1 6≤ y0 , (3.6)\nwhich is the purported contradiction. Therefore, (∃1 ≤ i ≤ n) Γ0 6EEli Γi.\nAn incorrect proof does not mean that the elitist set comparison relation [12, page 375, Definition 19] is not reasonable inducing. We now show that it is not reasonable inducing with the following counterexample.\nLemma 3.2. The proposition “if ⋃n i=1 Γi /Eli Γ0 then (∃1 ≤ i ≤ n) Γ0 6EEli Γi” is false, i.e. Property 2(b) of Definition 3.1 fails for EEli.\nProof. The counterexample is as follows: let 〈P,≤〉 be an arbitrary preset such that a, b, c, d ∈ P . Let Γ0 = {c, d}, Γ1 = {a}, Γ2 = {b} so Γ1 ∪ Γ2 = {a, b}. Let ≤ be such that a ≈ c, a < d, d ≤ b and c 6≤ b. Notice\nΓ1 ∪ Γ2 /Eli Γ0 ⇔ [Γ1 ∪ Γ2 EEli Γ0 and Γ0 6EEli Γ1 ∪ Γ2] ⇔ [{a, b} EEli {c, d} and {c, d} 6EEli {a, b}]\n{a, b} EEli {c, d} ⇔ [(a ≤ c, a ≤ d) or (b ≤ c, b ≤ d)] . ⇔ true as [a ≈ c⇒ a ≤ c and a < d⇒ a ≤ d] .\n{c, d} 6EEli {a, b} ⇔ [(c 6≤ a or c 6≤ b) and (d 6≤ a or d 6≤ b)] ⇔ true as [c 6≤ b and a < d⇒ d 6≤ a] .\nΓ0 EEli Γ1 ⇔ {c, d} EEli {a} ⇔ [c ≤ a or d ≤ a] ⇔ true as [a ≈ c⇒ c ≤ a] .\nΓ0 EEli Γ2 ⇔ {c, d} EEli {b} ⇔ [c ≤ b or d ≤ b] ⇔ true because d ≤ b .\nTherefore, we have found a situation where Γ1 ∪ Γ2 /Eli Γ0, Γ0 EEli Γ1 and Γ0 EEli Γ2 are all true.\nCorollary 3.3. EEli is not reasonable inducing.\nProof. Immediate from Definition 3.1 (page 11) and Lemma 3.2 (page 13).\nThis failure of the property of being reasonable inducing allows for counterexamples like [8, Example 5.1]. In that example, two defeasible rules can be equivalent under a suitable preorder without being equal. The original elitist order from [12] does allow for defeasible to be equivalent (i.e. just as preferred as each other) without being equal."
    }, {
      "heading" : "3.3 The Strict Elitist Set Comparison is Reasonable Inducing",
      "text" : "Consider the strict version of the elitist order, as originally proposed by Prakken in [15, page 109]. We will show that it is reasonable inducing, at the cost of not allowing distinct defeasible rules to be equivalent, i.e. that the only notion of equivalence is equality. Recall that given a preset 〈P,≤〉, its strict counterpart preorder is a < b⇔ [a ≤ b, b 6≤ a], which is a strict partial order.\nDefinition 3.2. Let 〈P,≤〉 be a preset and form its strict poset 〈P,<〉. Define the strict elitist set comparison /′Eli on Pfin(P ) as\nΓ /′Eli Γ ′ ⇔ (∃x ∈ Γ) (∀y ∈ Γ′)x < y . (3.7)\nIts non-strict counterpart is\nΓ E′Eli Γ ′ ⇔ [Γ = Γ′ or Γ /′Eli Γ′] . (3.8)\nCorollary 3.4. /′Eli is irreflexive. Proof. Assume for contradiction that Γ /′Eli Γ, which is equivalent to\n(∃x ∈ Γ) (∀y ∈ Γ)x < y .\nLet x0 ∈ Γ be the witness to ∃, which means (∀y ∈ Γ)x0 < y, and one can instantiate y to y = x0, which means x0 < x0 and hence a contradiction. Therefore, /′Eli is irreflexive.\nLemma 3.5. The strict elitist set comparison (Definition 3.2) is reasonable inducing.\nProof. Following Definition 3.1, we have:\n1. Transitivity:\nΓ /′Eli Γ ′ /′Eli Γ ′′\n⇔ (∃x ∈ Γ) (∀y ∈ Γ′)x < y and (∃y ∈ Γ′) (∀z ∈ Γ′′) y < z ⇔ (∀y ∈ Γ′)x0 < y and (∀z ∈ Γ′′) y0 < z ⇒x0 < y0 and (∀z ∈ Γ′′) y0 < z ⇔ (∀z ∈ Γ′′)x0 < y0 < z ⇒ (∀z ∈ Γ′′)x0 < z ⇔ (∃x ∈ Γ) (∀z ∈ Γ′′)x < z ⇔Γ /′Eli Γ′′ ,\nwhere in the third line x0 ∈ Γ is the witness to the first ∃, and y0 ∈ Γ′ is the witness to the second ∃. Therefore, E′Eli is transitive.\n2. Definition 3.1, Property 2(a): we have\nn⋃ i=1 Γi / ′ Eli Γ0\n⇔ ( ∃x ∈\nn⋃ i=1 Γi\n) (∀y ∈ Γ0)x < y\n⇔ (∃1 ≤ i ≤ n) (∃x ∈ Γi) (∀y ∈ Γ0)x < y by Equation 3.2 (3.9) ⇔ (∃1 ≤ i ≤ n) Γi /′Eli Γ0 by Definition 3.2 ⇒ (∃1 ≤ i ≤ n) Γi E′Eli Γ0 .\nTherefore, E′Eli satisfies the first property.\n3. Definition 3.1, Property 2(b): let 1 ≤ i0 ≤ n be the witness to the first ∃ in Equation 3.9, and xi0 ∈ Γi0 be the witness to the second ∃ in Equation 3.9. Equation 3.9:\n(∀y ∈ Γ0)xi0 < y . (3.10)\nNow assume for contradiction that\n(∀1 ≤ i ≤ n) Γ0 E′Eli Γi ⇒Γ0 E′Eli Γi0 ⇔ (∃x ∈ Γ0) (∀y ∈ Γi0)x < y ⇔ (∀y ∈ Γi0)x0 < y , (3.11)\nwhere x0 ∈ Γ0 in Equation 3.11 is the witness to ∃ in the previous line. Now instantiate y ∈ Γ0 in Equation 3.10 to x0, and instantiate y ∈ Γi0 in Equation 3.11 to xi0 . Therefore, we have\nxi0 < x0 and x0 < xi0 , (3.12)\nwhich is a contradiction. Therefore, (∃1 ≤ i ≤ n) Γ0 6E′Eli Γi and E′Eli satisfies the second property.\nThis means the strict elitist set comparison is reasonable inducing.\nExample 2. [8, Example 5.1] Let L = {ai}4i=1 be closed under (syntactic) negation, the contrary function − denote symmetric negation ¬, K = ∅, Rd = {(> ⇒ ai)}4i=1 and\nRs = { (a1, a2, a3 → ¬a4) , (a2, a3, a4 → ¬a1) , (a3, a4, a1 → ¬a2) , (a4, a1, a2 → ¬a3)}\nsuch that the preorder - is such that d1 ≈ d2 and d3 ≈ d4 only (reflexivity and transitivity is implicit). This instantiation is well-defined (Section 2.2.6, page 9). The arguments are Ai := [> ⇒ ai] for 1 ≤ i ≤ 4, and\nB4 := [A1, A2, A3 → ¬a4], B1 := [A2, A3, A4 → ¬a1], B2 := [A3, A4, A1 → ¬a2], B3 := [A4, A1, A2 → ¬a3] .\nThe strict elitist set comparison gives\n{d1, d2, d3} 6/′Eli {d4} , {d2, d3, d4} 6/′Eli {d1} , {d3, d4, d1} 6/′Eli {d2} , {d4, d1, d2} 6/′Eli {d3} ,\nbecause (e.g.) there is no defeasible rule in {d1, d2, d3} that is strictly less than d4. If the witness were d3, say, then d3 - d4, but d4 - d3 as well (rather than d4 6- d3), so d3 6≺ d4. Therefore, under the strict elitist set comparison, we have Bi 6≺ Ai (here, ≺ denotes the argument preference and not the preorder on defeasible rules), hence Bi ↪→ Ai for 1 ≤ i ≤ 4. The possible sets of justified arguments are {A1, A2, A3, B4}, {A1, A2, B3, A4}, {A1, B2, A3, A4} and {B1, A2, A3, A4}, whose conclusion sets are consistent."
    }, {
      "heading" : "3.4 Summary",
      "text" : "We conclude that Prakken’s elitist set comparison (Definition 3.2) should be used instead of the original elitist set comparison from [12, page 375, Definition 19] in all all future instantiations of ASPIC+, if one would like their ASPIC+ instantiation to be normatively rational in the sense of [6], and avoid counterexamples similar to that of [8].\n4 From ASPIC+ to Prioritised Default Logic\nWe now instantiate ASPIC+ to PDL, define a preference relation over arguments, and prove a representation theorem (Theorem 4.5, page 26), which guarantees that the inferences under the argumentation semantics correspond exactly to the inferences in PDL; this is a soundness and completeness result."
    }, {
      "heading" : "4.1 The Instantiation",
      "text" : "Let 〈D, W, ≺+〉 be a LPDT14. The corresponding (ASPIC+) instantiation is defined as follows:\n1. Our arguments are expressed in FOL, so our set of wffs is FL, although in practice we only consider SL.\n2. The contrary function − syntactically defines conflict in terms of classical negation15 so (∀θ ∈ FL) [ ¬θ ∈ θ and θ ∈ ¬θ ].\n3. The set of strict rules Rs characterises inference in first order classical logic. We leave the specific proof theory implicit.\n4. The set of defeasible rules Rd is defined in terms of D as: Rd := {\n(θ ⇒ φ) θ : φ φ ∈ D\n} , (4.1)\nwith n ≡ ∗. Clearly, there is a bijection16 f where\nf : D → Rd : θ : φ\nφ 7→ f\n( θ : φ\nφ\n) := (θ ⇒ φ) (4.2)\nand we will define the strict version of the preorder ≤′′ over Rd as17\n(θ ⇒ φ) <′′ (θ′ ⇒ φ′)⇔ θ : φ φ ≺+ θ\n′ : φ′\nφ′ . (4.3)\n14We will discuss why we only consider LPDTs in Section 6 (page 36). 15For example, ¬(θ ∧ ¬φ) is the contrary of (θ ∧ ¬φ), but (θ → φ), where → in this case denotes material implication, is not the contrary of (θ ∧ ¬φ). 16Recall from Section 2.2.1 (page 5) that two defeasible rules are equal iff they have the same antecedents and consequent syntactically. 17From Footnote 12 (page 10), we do not need to define <′′ as the order-theoretic dual to ≺+, avoiding potential confusion as to which item is more preferred.\nWe can see that the strict toset 〈Rd, <′′〉 is order isomorphic to 〈D, ≺+〉, where the non-strict version of the order ≤′′ abbreviates “either <′′ or =”. As we are only considering finite D, Rd is also finite.\n5. The set of axiom premises is Kn = W , because we take W to be the set of facts. Furthermore, Kp = ∅.\nThe set A of ASPIC+ arguments are defined as in Section 2.2 (page 4). It is easy to see that all arguments are firm because Kp = ∅, and so there are no undermining attacks. As n is undefined, no attack can be an undercut. Therefore, we only have rebut attacks, where A ⇀ B iff\n(∃B′, B′′ ⊆arg B) B′ = [B′′ ⇒ ¬Conc(A)] . (4.4)"
    }, {
      "heading" : "4.2 Preferences and Defeats",
      "text" : "Defeats are defined as in Equation 2.5 (page 7). So given a suitable argument preference - on the arguments A and attacks defined in the previous section, we can associate an ASPIC+ defeat graph 〈A, ↪→〉 to any LPDT 〈D, W, ≺+〉.\nHow should the argument preference - be defined based on the strict total order <′′ over Rd? We would want to define - such that the extension of the LPDT 〈D, W, ≺+〉 is given by the conclusions of the justified arguments of the defeat graph 〈A, ↪→〉 instantiated by the corresponding ASPIC+ instantiation, and is reasonable [12, page 372, Definition 18].\n4.2.1 Failure of all ASPIC+ Preferences\nUnfortunately, none of the four ASPIC+ argument preferences – democratic weakest link, democratic last link, elitist weakest link, and elitist last link [12, page page 375, Definitions 19 to 21] – are suitable because one can devise simple LPDTs where the prioritised default extension does not correspond to the conclusions of the justified arguments. For example, for the elitist weakest link order, EEli:\nExample 3. Consider the LPDT 〈D, W, ≺+〉 where W = {a},\nD = { d1 := a : b\nb , d2 :=\nb : c\nc , d3 := b : ¬c ¬c\n} (4.5)\nand d1 ≺+ d2 ≺+ d3. By Equation 2.14 (page 10), the prioritised default extension is Th({a, b,¬c}), with d1 applied first, then d3, which blocks d2.\nIn the ASPIC+ instantiation: r1 < ′′ r2 < ′′ r3 (where for i = 1, 2, 3, ri := f(di) and f is Equation 4.2). The arguments are A := [[[a] ⇒ b] ⇒ c] and B := [[[a]⇒ b]⇒ ¬c], which rebut each other at their conclusions.\nUnder the elitist ordering (Equation 2.8, page 8), it is neither the case that {r1, r2} /Eli {r1, r3} nor {r1, r3} /Eli {r1, r2}. As the sets are not equal, we have A 6≺ B, B 6≺ A and A 6≈ B. This means A ↪→ B and B ↪→ A by Equation 2.5, which means there are two possible stable extensions {A} and {B} so that\nneither argument is sceptically justified, and so ¬c is not an argumentationdefined inference. However ¬c is a PDL inference. Therefore the elitist weakest link ordering cannot be used to calculate -."
    }, {
      "heading" : "4.2.2 The Disjoint Elitist Order",
      "text" : "One can introduce the disjoint elitist order, EDEli, which ignores shared rules when comparing arguments. This is intuitive because when comparing two arguments we should only focus on the fallible information on which the arguments differ. It is defined as\nΓ /DEli Γ ′ ⇔ (∃x ∈ Γ− Γ′) (∀y ∈ Γ′ − Γ) x <′′ y , (4.6)\nwith argument equivalence A ≈ B ⇔ DR(A) = DR(B) and EDEli defined as usual. We call <′′ the underlying (strict) total order of /DEli.\nIf we replace Equation 2.8 with /DEli, then from r2 < ′′ r3, it is easy to see that in Example 3, A ≺ B, B 6≺ A, and so A 6↪→ B and B ↪→ A, and hence there is only a single stable extension containing the now sceptically justified argument B with conclusion ¬c. This at least repairs the correspondence in Example 3.\nThe disjoint elitist order also satisfies a very intuitive property:\nLemma 4.1. (∀A, B ∈ A) [DR(A) ⊆ DR(B)⇒ B - A].\nProof. If DR(B) = DR(A) then B ≈ A, so B - A. If DR(A) ⊂ DR(B), then DR(A)−DR(B) = ∅, which means B ≺ A is vacuously true from Equation 4.6 so B - A follows.\nFormally, this result states that EDEli extends the superset relation on Pfin (Rd). Intuitively, this means that the more defeasible rules your argument contains, the less preferred it will become. It is rational for agents to prefer more certainty than less, with all else being equal18. The extreme case is that arguments with no defeasible rules, i.e. strict arguments, are most preferred.\nThe above two intuitions of (1) ignoring shared elements of the sets being compared and (2) the order extends the superset relation have been considered in a different context and for a different order by [4].\nThe disjoint elitist order also satisfies the following property: if 〈Rd, <′′〉 is a strict toset, then 〈Pfin(Rd), /DEli〉 is also a strict toset. Further, ∅ is the EDEli-greatest element in Pfin(Rd), and Rd (if finite) is the EDEli-least element. See Appendix A (page 38) for proofs of these properties.\nUnfortunately, despite these desirable properties, there is a counterexample which shows the disjoint elitist order cannot be used to provide the correspondence with PDL.\n18More precisely, if the agent has two arguments, A and B, such that A is less certain than B because A uses more defeasible rules, then with all else being equal, the agent should prefer B over A. However, we do not demand that the agent must first seek complete certainty in the sense of Descartes (especially given limited knowledge and cognitive resources) prior to proposing an argument in a dialogue.\nExample 4. Consider the LPDT 〈D,W,≺+〉 where D = {d1, d2, d3, d4, d5}, W = ∅ and\nd1 := > : a1 a1 , d4 := a3 : a4 a4 , d3 := > : a3 a3 , d2 := a1 : a2 a2 , d5 := a1 : ¬(a2 ∧ a4) ¬(a2 ∧ a4) ,\nsuch that d1 ≺+ d4 ≺+ d3 ≺+ d2 ≺+ d5. Our PDE is constructed in the usual manner starting from E0 = Th(∅). By Equation 2.14 (page 10), the order of the application of the defaults is d3, d4, d1, d5, with d2 blocked.\nE1 = E0 + a3, E2 = E1 + a4, E3 = E2 + a1, E4 = E3 + ¬(a2 ∧ a4) , (4.7)\nand Ek = E4 for all k ≥ 5. The default d2 is blocked because ¬(a2 ∧ a4) ≡ (¬a2 ∨ ¬a4), and with a4 (from d4), we have ¬a2, which blocks d2. The unique PDE from this LPDT is\nE = Th ({a1, a3, a4,¬(a2 ∧ a4)}) = Th({a1,¬a2, a3, a4}) . (4.8)\nNow consider the corresponding arguments from our instantiation. We have the defeasible rules19\nr1 < ′′ r4 < ′′ r3 < ′′ r2 < ′′ r5 . (4.9)\nThe relevant arguments and sets of defeasible rules are\nA := [[> ⇒ a1]⇒ a2] , DR(A) = {r1, r2} (4.10) B := [[> ⇒ a3]⇒ a4] , DR(B) = {r3, r4} (4.11) C := [[> ⇒ a1]⇒ ¬(a2 ∧ a4)] , DR(C) = {r1, r5} , (4.12) D := [B,C → ¬a2] , DR(D) = {r1, r3, r4, r5} , (4.13)\nWe illustrate these arguments in Figure 4.1. The stable extension is {D, B, C, [> ⇒ a3], [> ⇒ a1]} and all strict extensions thereof20. The conclusion set does correspond to Equation 4.8. However, this would require D ↪→ A, which means, by Equation 2.5 (page 7), D ⇀ A and D 6≺ A. Clearly, D ⇀ A on A. However, D 6≺ A means, under the disjoint elitist order,\nD 6≺ A⇔ not DR(D) /DEli DR(A) ⇔ not (∃x ∈ DR(D)−DR(A)) (∀y ∈ DR(A)−DR(D))x <′′ y ⇔ not (∃x ∈ {r1, r3, r4, r5}) (∀y ∈ {r2})x <′′ y ⇔ not (∃x ∈ {r1, r3, r4, r5}x <′′ r2) ⇔ not (r1 <′′ r2 or r3 <′′ r2 or r4 <′′ r2 or r5 <′′ r2) ⇔ r2 <′′ r1, r2 <′′ r3, r2 <′′ r4, r2 <′′ r5 . (4.14)\n19Where, similar to Example 3, ri corresponds to di via Equation 4.2 (page 16). 20Informally, in ASPIC+, for S ⊆ A the strict extension of S is the smallest set containing S extended with all strict and firm arguments, and all possible applications of strict rules to those arguments. This becomes the deductive closure when ASPIC+ is instantiated into classical logic. See [12, page 370, Definition 17] for more details.\nFrom Equation 4.9, it is not the case that r2 < ′′ r1, r3, r4, so we conclude D ≺ A. Therefore, argumentation does not generate the corresponding stable extension to Equation 4.8."
    }, {
      "heading" : "4.2.3 Mimicking Prioritised Default Logic",
      "text" : "Despite not being suitable for our desired correspondence between ASPIC+ and PDL, the disjoint elitist order does capture one important intuition. When comparing two arguments A, B ∈ A, we compare them at their defeasible rules, and whichever argument has the <′′-least rule in the set DR(A) DR(B) is the less preferred argument. However, comparing sets of defeasible rules does not take the structure of arguments into account, i.e. in terms of which rules in the construction of arguments could be applied earlier, and which could be applied later. We now transform <′′ into a new order, <SP , called the structure preference order, such that it gives the correct argument preference for the correspondence.\nLet 〈Rd, <′′〉 be given. Given R ⊆ Rd, we define the set Args(R) ⊆ A to be the set of arguments such that A ∈ Args(R) ⇔ DR(A) ⊆ R. We call this set the set of arguments freely constructed with defeasible rules in R. It can be easily shown that Args is ⊆-monotonic in R and that the assignment R 7→ Args(R) is functional. Clearly, Args(∅) is the set of all strict arguments, and Args (Rd) = A. Further, Args(R) is subargument-closed, i.e.\nCorollary 4.2. If A ∈ Args(R) and B ⊆arg A, then B ∈ Args(R), for any R ⊆ Rd.\nProof. It is easy to show that if A ⊆arg B, then DR(A) ⊆ DR(B). Therefore, if A ∈ Args(R), then DR(A) ⊆ R, and hence DR(B) ⊆ R. Therefore, B ∈ Args(R).\nFor R ⊆ Rd let max<′′ R ⊆ R denote the set of all <′′-maximal elements of R. As <′′ is a (strict) total order and Rd is finite, this is a singleton set. For r ∈ Rd recall the Ante map (Equation 2.1, page 5). Note that we are considering defeasible rules with one antecedent, so Ante(r) is a singleton set. For S ⊆ A recall the Conc map (Equation 2.4, page 6).\nConsider ordering the rules in Rd as follows: for 1 ≤ i ≤ |Rd|, we define the singleton set {ai} ⊆ Rd to be\nmax <′′ {r ∈ Rd Ante(r) ⊆ Conc(Args(i−1⋃ k=1 {ak} ))} − i−1⋃ j=1 {aj}  . (4.15) More concretely,\n{a1} = max <′′ {r ∈ Rd Ante(r) ⊆ Conc (Args (∅))} , {a2} = max <′′ ({r ∈ Rd Ante(r) ⊆ Conc (Args ({a1}))} − {a1}) , {a3} = max <′′ ({r ∈ Rd Ante(r) ⊆ Conc (Args ({a1, a2}))} − {a1, a2}) ,\nand so on, until this process stops at { a|Rd| } 21. The intuition is: a1 is the most preferred rule whose antecedent is amongst the conclusions of all strict (and firm) arguments, a2 is the next most preferred rule, whose antecedent is amongst the conclusions of all arguments having at most a1 as a defeasible rule. Similarly, a3 is the next most preferred rule, whose antecedent is amongst the conclusions of all arguments having at most a1 and a2 as defeasible rules, and so on until all of the rules of Rd are exhausted. This process orders the rules by how preferred they are under <′′ and by how earlier they are applicable when constructing the arguments.\nWe then define (notice the dual order)\nai <SP aj ⇔ j < i , (4.16)\nwhere 1 ≤ i, j ≤ |Rd|. We define the non-strict order to be ai ≤SP ai ⇔ [ai = aj or ai <SP aj ]. This makes sense because i 7→ ai is bijective between Rd and {1, 2, 3, . . . , |Rd|}. Clearly <SP is a strict total order on Rd. We call this the structure preference order on Rd, which exists and is unique given <′′. The corresponding argument preference, ≺SP , is <SP under the disjoint elitist order22, i.e.\nA ≺SP B ⇔ (∃x ∈ DR(A)−DR(B)) (∀y ∈ DR(B)−DR(A)) x <SP y , (4.17)\n21This is just Equation 4.15 with i = |Rd|, which is where the assumption that Rd is a finite set is crucial.\n22We use the disjoint elitist order instead of the usual elitist order because Example 3 (page 17) shows that the usual elitist order does not give the correspondence.\nwith -SP defined as usual. We can also define the corresponding set comparison relation, /SP , as, for Γ, Γ ′ ⊆fin Rd,\nΓ /SP Γ ′ ⇔ (∃x ∈ Γ− Γ′) (∀y ∈ Γ′ − Γ)x <SP y , (4.18)\nsuch that Γ ESP Γ′ ⇔ [Γ /SP Γ′ or Γ = Γ′], and\nA -SP B ⇔ DR(A) ESP DR(B) . (4.19)\nThe name “structure preference order” refers to the fact that this order takes into account both the preference <′′ and the structure, i.e. when the rule is first applicable during the construction of arguments. This allows us to imitate how PDL applies defaults when calculating extensions.\nExample 5. (Example 4, page 19 continued) We have the following:\n{a1} = max <′′ ({r ∈ Rd Ante(r) ⊆ Conc (Args (∅))} −∅)\n= max <′′ {r ∈ Rd Ante(r) ⊆ {>}} = max <′′ {r1, r3} = {r3} =⇒ a1 = r3 .\n{a2} = max <′′ ({r ∈ Rd Ante(r) ⊆ Conc (Args ({r3}))} − {r3})\n= max <′′\n({r1, r3, r4} − {r3})\n= max <′′ {r1, r4} = {r4} =⇒ a2 = r4 .\n{a3} = max <′′ ({r ∈ Rd Ante(r) ⊆ Conc (Args ({r3, r4}))} − {r3, r4})\n= max <′′\n({r1, r3, r4} − {r3, r4})\n= max <′′ {r1} =⇒ a3 = r1 .\n{a4} = max <′′ ({r ∈ Rd Ante(r) ⊆ Conc (Args ({r3, r4, r1}))} − {r1, r3, r4})\n= max <′′\n({r2, r5, r1, r3, r4} − {r1, r3, r4})\n= max <′′ {r2, r5} = {r5} =⇒ a4 = r5 .\n{a5} = {r2} =⇒ a5 = r2 .\nTherefore, we have\na1 = r3, a2 = r4, a3 = r1, a4 = r5, a5 = r2 . (4.20)\nThe structure preference order is\nr2 <SP r5 <SP r1 <SP r4 <SP r3 . (4.21)\nNotice that this is precisely the order of how the corresponding normal defaults are added in PDL, as Equation 4.7 (page 19) shows. It is easy to show that the corresponding stable extension under ≺SP corresponds to the PDL inference, because r2 is now <SP -least, so D 6≺SP A by Equation 4.14 (page 19).\nHowever, <SP does not necessarily follow the PDL order of applying defaults as the following example illustrates.\nExample 6. Consider the LPDT 〈D, W, ≺+〉 where W = {a}, d1 := a:¬a¬a and d2 := >:b b , such that d2 ≺\n+ d1. The prioritised default extension is E = Th ({a, b}), where d1 is blocked by W , so d2 is the only default added.\nTranslating this to argumentation, we have Kn = {a}, r1 := (a⇒ ¬a) and r2 := (> ⇒ b) where for i = 1, 2, ri = f (di), such that r2 <′′ r1. The arguments are A0 := [a], A1 := [A0 ⇒ ¬a] and B := [> ⇒ b]. Applying Equation 4.15 (page 21), we have r2 <SP r1, which clearly is not the order of how the corresponding defaults are added in PDL.\nYet the correspondence still holds. Clearly A0 ↪→ A1 because A0 is strict, so the stable extension is the strict extension of {A0, B}, the conclusion set of which is the extension from PDL.\nExample 6 highlights how blocked defaults and defeated arguments are related. Where PDL blocks the application of a given default and hence preventing its conclusion from featuring in the extension, ASPIC+ allows for the construction of the argument with the corresponding defeasible rule, but that argument is always defeated by another strictly stronger argument and therefore cannot be in any extension."
    }, {
      "heading" : "4.3 Correspondence of Inferences",
      "text" : "In this section we prove that the argument preference ≺SP is the suitable order to give a correspondence between PDL and ASPIC+ in all cases. Given an LPDT 〈D, W, ≺+〉, we can construct its defeat graph 〈A, ↪→〉 where the ASPIC+ arguments A are constructed following Section 4.1 (page 16), the attacks ⇀ are rebuts at the conclusions of defeasible rules, and the defeats are as in Equation 2.5 (page 7) with ⇀ and -SP . It is always possible to construct <SP and hence -SP after translating the LPDT to ASPIC+."
    }, {
      "heading" : "4.3.1 Uniqueness of Stable Extensions",
      "text" : "In this section we show that the ASPIC+ defeat graphs 〈A, ↪→〉 that have been constructed from a LPDT 〈D, W, ≺+〉 (following Section 4.1, page 16) each has a unique stable extension. For any starting preference <′′ on Rd we first construct <SP following Equations 4.15 and 4.16 (page 21).\nTheorem 4.3. Let 〈A, ⇀, -SP 〉 be an ASPIC+ attack graph constructed from L = FL, − is ¬, Rs the rules of proof of FOL, 〈Rd, <′′〉 a finite strict toset of defeasible rules, -SP is <SP under the disjoint elitist order, n ≡ ∗ on Rd,"
    }, {
      "heading" : "Kp = ∅ and Kn ⊆ FL is a consistent set of formulae. The defeat graph 〈A, ↪→〉 from this attack graph has a unique stable extension.",
      "text" : "Proof. The construction of the unique stable extension mimics how extensions are constructed over an LPDT (Equation 2.14, page 10). Given a set of arguments S ⊆ A we define, for r ∈ Rd, S ⊕ r := Args(DR(S) ∪ {r}), i.e. we close S under all arguments with the addition of a new defeasible rule r. Now consider Algorithm 1. We input the ASPIC+ attack graph 〈A, ⇀, -SP 〉 as described by the hypothesis of the theorem, and the algorithm outputs a set of arguments.\nAlgorithm 1 Generating a Stable Extension\n1: function GenerateStableExtension(〈A, ⇀, -SP 〉) 2: S ← Args(∅) 3: for r ∈ Rd from <SP -greatest to <SP -smallest do 4: if S ⊕ r is attack-cf then 5: S ← S ⊕ r\nreturn S\nThe intuition of this algorithm is to create the largest possible set of undefeated arguments, first by including all strict arguments because strict arguments are never defeated (Line 2) and never attack each other because Kn is consistent. Then, the algorithm includes the defeasible rules from most to least preferred and tests whether the resulting arguments that are constructed by the inclusion of such a defeasible rule leads to an attack (Lines 4–5). As <SP is total, all defeasible rules are considered. This algorithm halts because Rd is finite.\nIt is clear from the algorithm that S exists and is unique, because S is a set of freely-constructed arguments (i.e. of the form Args(R) for some R ⊆ Rd) including as many mutually compatible defeasible rules as possible. We now show that S is a stable extension [2, page 26 Definition 2.2.7].\nAttack-cf: This is guaranteed by the consistency of Kn, so two strict arguments cannot attack each other, and that defeasible rules r ∈ Rd are only added if attack-cf is preserved (Lines 4–5). Therefore, S must be attack-cf.\nDefeats all other arguments: Let R ⊆ Rd be the set of all defeasible rules added to S, i.e.\nR := DR(S) = ⋃ A∈S DR(A) ⊆ Rd . (4.22)\nLet B /∈ S be any argument. As S = Args (DR(S)), this means there is some rule r ∈ DR(B) such that r /∈ R. The only reason why r /∈ R is because if r were added to R, then the resulting S would not be attack-cf, according to Algorithm 1. Let B′ ⊆arg B be such that TopRule(B′) = r, which must exist by the inductive construction of arguments. Let A be the attacker of r, such that23\n23Note that A is appropriately chosen such that Conc(A) = ¬Cons(r) is syntactic equality. This is always possible because Rs has all rules of proof of FOL. Therefore, if an argument C concludes θ, and we would want it to conclude φ, where φ and θ are logically equivalent, we can just append the strict rule (θ → φ) ∈ Rs to C to create a new argument D that concludes φ.\nConc(A) = ¬Cons(r) (Equation 2.2, page 5), so A ⇀ B′ and hence A ⇀ B. There are two possibilities: either r is <SP -greatest or it is not.\nSuppose r is <SP -greatest, then Args (∅)⊕r is not attack-cf, so A ∈ Args(∅). As A is strict, A ↪→ B′, and hence A ↪→ B.\nNow suppose r is not <SP -greatest. Consider the strict up-set of r in Rd,\nT := {r′ ∈ Rd r <SP r′} 6= ∅ . (4.23)\nThere are two sub-possibilities: either T ∩R = ∅ or T ∩R 6= ∅. If the former, then given that adding r to S will create an attack from A ∈ Args(∅), we have A ↪→ B. If the latter, i.e. T ∩ R 6= ∅, adding r to S means its attacker A ⇀ B′ is in Args (T ∩R). Either A is strict or not strict (i.e. defeasible). If it is strict, then A ↪→ B as before. If it is not strict, i.e. ∅ 6= DR(A) ⊆ T ∩R, then by definition (∀s ∈ T ) r <SP s. As DR(A) ⊆ T ∩ R ⊆ T , we must also have (∀s ∈ DR(A)) r <SP s. Therefore, there is an r ∈ DR(B′)−DR(A) such that for all rules in DR(A), and hence DR(A)−DR(B′), r <SP s. By Equation 4.17 (page 21), we conclude that B′ ≺SP A, and hence A ↪→ B′. Therefore, by definition of ↪→ and ⊆arg, A ↪→ B.\nWe conclude that the defeat graphs of these ASPIC+ attack graphs have a unique stable extension."
    }, {
      "heading" : "4.3.2 A Helpful Distinction in Prioritised Default Logic",
      "text" : "In this section we formalise a distinction between defaults in PDL that are blocked because there exists something that disagrees with them, and defaults that are blocked because they do not add any new information.\nLet 〈D, W, ≺〉 be a PDT and E = ⋃ i∈NEi one of its extensions generated from the linearisation ≺+⊇≺. The set of generating defaults (with respect to ≺+), GD(≺+), is defined as\nGDi(≺+) := { d ∈ D d is ≺+-greatest active in Ei } ,\nGD(≺+) := ⋃ i∈N GDi(≺+) ⊆ D . (4.24)\nIntuitively, this is the set of defaults applied to calculate E following the order ≺+. However, the same E can be generated by distinct total orders ≺+. Example 7. Consider the PDT 〈{ a:c c , b:c c } , {a, b} , ∅ 〉 . We have two linearisations a:cc ≺ + 1 b:c c and b:c c ≺ + 2 a:c c . We have GD(≺ + 1 ) = { a:c c } and\nGD(≺+2 ) = { b:c c } , which are not equal, even though both linearisations give the same extension E = Th ({a, b, c}). But in the case of ≺+1 , b:cc is not active because it adds no new information, rather than that we know ¬c already.\nWe wish to distinguish between inactive defaults that conflict with something we already know, and inactive defaults that add no new information. We call a default θ:φφ semi-active (in S ⊆ SL) iff [θ ∈ S, ¬φ /∈ S, φ ∈ S]. The set of semi-active defaults (with respect to the linearisation ≺+) is\nSAD(≺+) := { d ∈ D d is semi-active w.r.t. ≺+ } . (4.25)\nIntuitively, the application of semi-active defaults add no new information. We then define the set of non-blocked defaults to be\nNBD(≺+) := GD(≺+) ∪ SAD(≺+) ⊆ D . (4.26)\nIntuitively, this is precisely the set of defaults which are not blocked by the information that has accumulated in the previous steps. This includes the defaults that we have used to nonmonotonically infer some knowledge, and the defaults that do not add any new information.\nThe set of non-blocked defaults has a more elegant characterisation:\nLemma 4.4. If ≺+ generates E, then we have that\nNBD(≺+) := { θ : φ\nφ ∈ D θ ∈ E, ¬φ /∈ E\n} . (4.27)\nProof. See Appendix B (page 44).\nEquation 4.27 shows that NBD exists and is unique given an extension E. We may write NBD(E) instead of NBD (≺+), or just NBD when E is clear from context. Equation 4.27 adapts Reiter’s idea of a generating default [16, page 92 Definition 2] to PDL. The set NBD(E) can always be calculated in PDL once E is obtained."
    }, {
      "heading" : "4.3.3 The Representation Theorem",
      "text" : "In this section we state and prove the representation theorem, which guarantees that the inferences under the argumentation semantics correspond exactly to the inferences in PDL under -SP ; this is a soundness and completeness result. More specifically, the theorem relates the (unique) stable extension of 〈A, ↪→〉 with the (unique) prioritised default extension of the corresponding LPDT 〈D, W, ≺+〉.\nTheorem 4.5. Let 〈A, ⇀, -SP 〉 be the attack graph corresponding24 to an LPDT 〈D, W, ≺+〉, with defeat graph 〈A, ↪→〉.\n1. Let E be the prioritised default extension of 〈D, W, ≺+〉, NBD(E) be the set of non-blocked defaults (Equation 4.27, page 26) and R := f (NBD(E)) be the (image) set of corresponding defeasible rules (where f is Equation 4.2, page 16), then Args (R) is the stable extension of 〈A, ↪→〉.\n2. Let E ⊆ A be the unique stable extension of 〈A, ↪→〉 by Theorem 4.3 (page 23), then Conc (E) (Equation 2.4, page 6) is the prioritised default extension of 〈D, W, ≺+〉.\nProof. We will prove each part separately. For the first statement we will show that the given E is the extension generated from ≺+, and R = f (NBD(E)) is the set of defeasible rules corresponding to the defaults used in E together\n24Recall that we transform ≺+ to <′′ using Equation 4.3 (page 16), and then apply Equation 4.16 (page 21) to obtain <SP , which gives -SP as in Equation 4.17.\nwith the semi-active defaults, the set of arguments Args(R) is a stable extension. For the second statement, we let E be the prioritised default extension of 〈D, W, ≺+〉 and show Conc(E) ⊆ E and E ⊆ Conc(E).\n1. Args(R) is a stable extension:\nTo show that Args(R) is a stable extension, it is sufficient to show Args(R) is attack-cf and that for all arguments B /∈ Args(R), there is some argument A ∈ Args(R) such that A ↪→ B [2, page 26 Definition 2.2.7].\n1.1 Args(R) is attack-cf:\nTo show that Args(R) is attack-cf we have to show that no two arguments A, B ∈ Args(R) attack each other. Assume for contradiction that Args(R) is not attackcf, then (∃A, B ∈ Args(R))A ⇀ B. By definition, DR(B) ⊆ R = f (NBD(E)). Suppose A ⇀ B on B′ ⊆arg B, so (∃B′′ ⊆arg B) B′ = [B′′ ⇒ ¬Conc(A)] by Equation 4.4 (page 17). Let r = TopRule(B′), so r = (Conc(B′′)⇒ ¬Conc(A)). Clearly r ∈ DR(B), and hence f−1(r) = Conc(B\n′′):¬Conc(A) ¬Conc(A) ∈ NBD(E), and\n¬Conc(A) ∈ E. However, we also have DR(A) ⊆ R as well. Let {r1, · · · , rn} ⊆ DR(A) be the set of defeasible rules such that W∪{Cons(r1), · · · , Cons(rn)} |= ¬Conc(A) (Cons is defined in Equation 2.2, page 5). For 1 ≤ i ≤ n let di := f−1 (ri). Clearly the corresponding defaults d1, . . . , dn ∈ NBE(E) and hence Cons(ri) ∈ E for 1 ≤ i ≤ n. As E is deductively closed and W ⊆ E, then ¬Conc(A) ∈ E. Therefore, E is inconsistent - contradiction, because W is consistent. Therefore, Args(R) is attack-cf.\n1.2 Args(R) defeats all other arguments:\nNow we show that Args(R) defeats all other arguments, by showing that for every argument B /∈ Args(R) there exists an argument in A ∈ Args(R) such that A ↪→ B. Let B /∈ Args(R) be arbitrary, which means there is some r ∈ DR(B) such that r /∈ R. Let B′ ⊆arg B be such that TopRule(B′) = r. Let r = (θ ⇒ φ), so r /∈ R means f−1 (r) = θ:φφ /∈ NBD(E). By Equation 4.27 (page 26), this means θ /∈ E or ¬φ ∈ E. This gives us two possibilities: either θ /∈ E, or ¬φ ∈ E.\n1.2.1 The case of ¬φ ∈ E:\nAssume ¬φ ∈ E, then (∃i ∈ N) ¬φ ∈ Ei by Equations 2.13 and 2.14 (page 10). Either i = 0 or i > 0.\n1.2.1.1 The case of i = 0:\nSuppose i = 0, then W |= ¬φ from Equation 2.13. By compactness, there is some finite W ′ ⊆ W such that W ′ |= ¬φ. We can construct an argument\nA such that Prem(A) = W ′ and Conc(A) = ¬φ as there will be appropriate combinations of strict rules in Rs, so A ⇀ B. As DR(A) = ∅ ⊆ R, we must have A ∈ Args(R). Further, as A is strict, A ↪→ B is guaranteed25 by -SP .\n1.2.1.2 The case of i > 0:\nNow suppose i > 0, then ¬φ ∈ Ej where j > 0 is the witness for i. Let dj ∈ D be the default that is ≺+-greatest active in the layer Ej , so the set of defaults that conclude ¬θ (up to the application of deductive rules) is S := {d0, . . . , dj−1} ⊆ GDj−1 (≺+) ⊆ NBD(E). We can construct an argument A such that Prem(A) ⊆ W , Conc(A) = ¬φ and DR(A) = f(S). Clearly, DR(A) = f(S) ⊆ f (NBD(E)) = R and hence A ∈ Args (R). It is clear that A ⇀ B, so we need to show B 6≺SP A.\nGiven that ¬φ ∈ Ej , it must be the case that φ /∈ Ej . Therefore, r is not ≺+-greatest active for all extension layers E0, . . . , Ej−1. Suppose for contradiction that there are some rules s ∈ DR(A) that are <SP -smaller than r. Then by Equation 4.15 (page 21), r must be ≺+-greatest active at some Ek for k < j − 1, which would then result in φ in Ek+1, therefore preventing ¬φ ∈ Ej - contradiction. Therefore, r is <SP -smaller than all rules in DR(A). By Equation 4.17, we must have B ≺SP A, and hence A 6≺SP B, so A ↪→ B. Therefore, for the case of ¬φ ∈ E, Args(R) defeats all arguments outside it.\n1.2.2 The case of θ /∈ E:\nNow assume θ /∈ E. We will show this case is impossible by using the method of infinite descent26.\nWe start with that f−1 (r) = θ:φφ and θ /∈ E. As r ∈ DR(B), and r = TopRule(B′) (Equation 4.4), there is a B′′ ⊂arg B that concludes θ. Either B′′ is strict or it is not strict. Suppose it is strict, then Prem(B′′) |= θ, so by monotonicity W |= θ because Prem(B′′) ⊆ W . This means θ ∈ E0 ⊆ E – contradiction. Therefore, B′′ cannot be strict.\nFurthermore, either B′′ ∈ Args(R) or not. If B′′ ∈ Args(R), then DR(B′′) ⊆ R, which means θ ∈ Ei ⊆ E, where i is the level such that all defaults corresponding to DR(B′′) have been applied (Equation 2.14) – contradiction. Therefore, B′′ /∈ Args(R).\nThis means DR(B′′) 6⊆ R, which means there is some rule, s ∈ DR(B′′), such that f−1(s) /∈ NBD(E). Suppose s = θ ′:φ′\nφ′ . There are two possibilities:\neither θ′ /∈ E or ¬φ′ ∈ E. If the latter, then we can construct an argument A′ concluding ¬φ′ which defeats B′′ as in the case when ¬φ ∈ E. If the former, we can argue as in the previous paragraph to get a strictly smaller argument B′′′ ⊂arg B′′ which concludes θ′.\n25This is because -SP is based on the disjoint elitist order, which ranks ∅ as the greatest element in Pfin (Rd).\n26That is, we argue “backwards” from a given argument B ∈ A down to its smallest subarguments (the singletons), and derive a contradiction.\nWe cannot continue this process forever because arguments are well-founded. Eventually, we must stop at a strict subargument of B′′, which gives a contradiction. Therefore, we cannot have the case θ /∈ E. Therefore, this second case is impossible, and the first case means that for every argument B /∈ Args(R) there is some A ∈ Args(R) such that A ↪→ B. This proves the first statement of the representation theorem.\n2. Conc(E) = E:\nWe show that Conc(E) ⊆ FL is the prioritised default extension of our LPDT 〈D, W, ≺+〉. We let E be the prioritised default extension of 〈D, W, ≺+〉 and show E = Conc(E).\n2.1 Conc(E) ⊆ E:\nWe first show Conc(E) ⊆ E. Let θ ∈ Conc(E), which means there is some argument A ∈ E where Conc(A) = θ. Either A is strict or it is not.\nIf A is strict, then as Prem(A) ⊆W , we must have W |= θ by monotonicity. Therefore, W ∈ E0 ⊆ E by Equation 2.13, and hence θ ∈ E.\nIf A is not strict, then for some k ∈ N+, DR(A) := {d1, . . . , dk}. None of these defaults give rise to a conflict because E is a stable extension. Take the smallest i ∈ N such that sufficiently many corresponding defeasible rules are applied from DR(A) to conclude θ in Ei+1 from W . Therefore, θ ∈ Ei+1 ⊆ E and hence θ ∈ E. Therefore, in either case, Conc(E) ⊆ E.\n2.2 E ⊆ Conc(E):\nWe now show E ⊆ Conc(E). Let θ ∈ E so (∃i ∈ N) θ ∈ Ei by Equation 2.14 (page 10). We have to show there is some argument A ∈ E such that Conc(A) = θ. Either i = 0 or i > 0."
    }, {
      "heading" : "2.2.1 The case of i = 0:",
      "text" : "Suppose i = 0, which means θ ∈ E0 ⇔ W |= θ. By compactness, we have some finite W ′ ⊆W such that W ′ |= θ. We can build a strict argument A with Prem(A) = W ′ and conclusion θ as Rs has all the appropriate rules of inference in FOL. Assume for contradiction A /∈ E , then there exists some B ∈ E defeating A, which is impossible because A is strict. Therefore, A ∈ E and Conc(A) = θ, so θ ∈ Conc(E) by Equation 2.4 (page 6)."
    }, {
      "heading" : "2.2.2 The case of i > 0:",
      "text" : "Now suppose i > 0. As θ ∈ Ei, let dj for 0 ≤ j ≤ i− 1 be the ≺+-greatest active default in Ej . We can use the corresponding defeasible rules rj = f (dj) to build an argument A such that Prem(A) ⊆W , Conc(A) = θ and DR(A) ⊆ {rj}i−1j=0.\nNow we need to show A ∈ E . Assume for contradiction that A /∈ E , then there is some B ∈ E such that B ↪→ A. So there is some defeasible rule r in A that is necessary to conclude θ, such that Conc(B) = ¬Cons(r). Either B is strict or not."
    }, {
      "heading" : "2.2.2.1 If B ∈ E is strict:",
      "text" : "Assume that B is strict, then Conc(B) ∈ E0 ⊆ Ei, which must conflict with at least one of the rules in DR(A). If this is so, then the corresponding defaults to these rules cannot be ≺+-active in the appropriate Ej ’s, and hence A cannot be constructed - contradiction. Therefore, B cannot be strict."
    }, {
      "heading" : "2.2.2.2 If B ∈ E is not strict:",
      "text" : "Assume that B is not strict, then DR(B) 6= ∅ and, as B ↪→ A, there is some r ∈ DR(A)−DR(B) such that for all s ∈ DR(B)−DR(A), r <SP s by Equation 4.17 (page 21). By Equation 4.15, even if r ∈ DR(A)−DR(B) can be added to the arguments as a defeasible rule, every single s ∈ DR(B)−DR(A) is <′′-more preferred than r. Therefore, the corresponding defaults in DR(B)−DR(A) are ≺+-greatest active in Ej for j < i, the application of which would block r from being applied. This contradicts the claim that it is possible to construct A in order to conclude θ. Therefore, B cannot exist.\nTherefore, A ∈ E , and given that Conc(A) = θ, we have θ ∈ Conc(E) by Equation 2.4. As θ is arbitrary, we conclude E ⊆ Conc(E) and hence E = Conc(E). This proves that Conc(E) is the prioritised default extension of 〈D, W, ≺+〉.\nThe representation theorem allows us to formally interpret the inferences of PDL as the conclusions of justified arguments, and the conclusions of the justified arguments are exactly those of the corresponding PDT. Therefore, by the representation theorem, PDL is sound and complete with respect to its argumentation semantics."
    }, {
      "heading" : "4.4 Summary",
      "text" : "In this section, we have provided an instantiation of ASPIC+ to PDL. We can construct an ASPIC+ attack graph from a LPDT. The subtlety then is to find a suitable argument preference relation such that it gives a correspondence between the conclusions of the justified arguments, and the extensions of the PDT. We showed that none of the ASPIC+ orders gives a correspondence, and even the intuitive disjoint elitist order does not give a correspondence either. We then devised the structure-preference order which mimics how defaults are added in PDL when constructing extensions. We then showed that ASPIC+ defeat graphs that have been constructed by LPDTs have unique stable extensions. The representation theorem states that under the structure-preference order the inferences correspond exactly - this is a soundness and completeness result."
    }, {
      "heading" : "5 On the Normative Rationality of this Instan-",
      "text" : "tiation\nWe have so far instantiated ASPIC+ to PDL through an appropriate choice of the underlying logic, defeasible rules and preferences. We have proven that the inferences of this instantiation correspond exactly in Theorem 4.5 (page 26). In this section, we will discuss current work on establishing whether this instantiation is normatively rational27.\n5.1 Rational Instantiations of ASPIC+\nASPIC+ can in principle be instantiated into any concrete argumentation theory, but it is desirable for such instantiations to be normatively rational. For example, a normatively rational instantiation of ASPIC+ would guarantee that the conclusions of the ultimately justified arguments are consistent. This idea of normative rationality for structured argumentation frameworks have been formalised by [6]. Let E denote the set of justified arguments. The rationality postulates informally state [12, Section 4.2]:\n1. E is subargument-closed.\n2. Conc (E) is closed under strict rules.\n3. Conc (E) is consistent.\n4. Under Rs, the closure under strict rules of Conc (E) is consistent.\nASPIC+ provides sufficient conditions for its instantiations to be rational. They are:\n1. The argumentation theory (i.e. the argumentation system and the knowledge base) is well-defined [12, page 369, Definition 12],\n2. and the argument preference relation - is reasonable [12, page 372, Definition 18]."
    }, {
      "heading" : "5.2 Well-Definedness of this Instantiation",
      "text" : "A well-defined classical logic ASPIC+ instantiation need only satisfy:\n1. Closure under transposition: If the rule (θ1, . . . , θn → φ) ∈ Rd for n ∈ N, then for all 1 ≤ i ≤ n,\n(θ1, . . . , θi−1, ¬φ, θi+1, . . . , θn → ¬θi) ∈ Rs .\nThis is satisfied because Rs has all the rules of proof of FOL. 27We say “normatively rational” to indicate that the type of rationality we are considering\nis prescriptive, not descriptive.\n2. Axiom consistency: This means Rn is consistent, so we assert that W is consistent28. Given that we are considering LPDTs with consistent W , axiom consistency is satisfied.\n3. Well-formed: This is a property concerning asymmetric contrary functions, and is vacuously satisfied for instantiations with only a symmetric contrary function, like classical negation ¬.\nTherefore, this ASPIC+ instantiation into PDL is well-defined."
    }, {
      "heading" : "5.3 Reasonableness of the Argument Preference",
      "text" : "One further requirement for an ASPIC+ instantiation to be normatively rationality is that the argument preference relation, -, is reasonable. For a more detailed discussion of why this is important, see [12, Section 4]. In this subsection, we are concerned with whether the structure preference order, -SP , is reasonable."
    }, {
      "heading" : "5.3.1 Strict Extensions",
      "text" : "(From [12, page 370 Definition 17]) Let S ⊆fin A. We define a strict extension of S to be any argument A ∈ A that satisfies\nDR(A) = DR(S), P remp(A) = Premp(S) , SR(A) ⊇ SR(S) and Premn(A) ⊇ Premn(S) . (5.1)\nThe intuition is that given a finite set of arguments S, we combine all of these arguments into a bigger argument A only by adding strict rules and axiom premises, leaving the fallible information unchanged. The set S must be finite because the requirement is that all arguments in S must be combined into a single argument A. We may use the notation S+ (∈ A) instead of A to emphasise that S+ is a strict extension obtained by extending all arguments of the set S.\nNote that given S, S+ may not exist, nor must it be unique if it does exist. In the former case, there may not be suitable strict rules whose antecedents are in Conc(S) such that S+ is well-defined, in the sense that S+ is a single argument. In the latter case, ∅+ exists when Kn 6= ∅ but is, by definition, any strict and firm argument (which includes singleton arguments). Clearly, every argument is its own strict extension.\nWe can define the set of strict extensions of (a finite set of arguments) S to be\nStExt(S) := {A ∈ A Equation 5.1 is true for A .} (5.2)\nClearly, {A} ⊆ StExt ({A}).\nExample 8. Consider an instantiation where Rs = ∅, i.e. there are no strict rules. Given an arbitrary finite set S of arguments, what are the strict extensions in this case?\n28The argumentation semantics for PDL will still be valid for an inconsistent W , but normative rationality excludes this case by requiring W to be consistent\n1. If S = ∅, then S+ is only defined when Kn 6= ∅, and S+ is any of the (strict) singleton arguments. If Kn = ∅, then ∅+ = ∗ and hence StExt(S) = ∅.\n2. If |S| = 1, say S = {A}, then StExt(S) = {A}.\n3. If |S| ≥ 2, then StExt(S) = ∅ because there are no strict rules to join multiple arguments (or additional axiom premises that may be introduced) in S together into one argument.\nTherefore, when Rs = ∅, the only case where the strict extension of a set of arguments S is defined is when S is singleton."
    }, {
      "heading" : "5.3.2 Reasonableness Defined",
      "text" : "Definition 5.1. (From [12, page 372, Definition 18]) An argument preference relation - on A is reasonable iff for all A,B ∈ A and ∅ 6= S ⊆fin A,\n1. (R1) If A is strict and firm, and B is neither strict nor firm, then B ≺ A.\n2. (R2) If A is strict and firm, then A 6≺ B.\n3. (R3) If A 6≺ B then {A}+ 6≺ B. If B 6≺ A then B 6≺ {A}+ (for appropriate strict extensions).\n4. (R4) It is not the case that\n(∀A ∈ S) (∃B ∈ StExt (S − {A}))B ≺ A . (5.3)\nThe intuition is as follows. (R1) and (R2) state that strict and firm arguments must be maximally preferred. (R3) states that strict extensions do not change the relative preference of arguments. (R4) is an acyclicity condition as illustrated in the following example:\nExample 9. Suppose we have a classical logic instantiation of ASPIC+ whereRs have all strict rules and ¬ is the only (symmetric) contrary function. Let Rd = {r1, r2, r3} such that r1 := (> ⇒ a), r2 := (> ⇒ b) and r3 := (> ⇒ ¬(a ∧ b)). Let A := [> ⇒ a], B := [> ⇒ b] and C := [> ⇒ ¬(a ∧ b)]. We also define F := [A,B → (a ∧ b)] ∈ StExt ({A,B}), E := [C,A → ¬b] ∈ StExt ({C,A}) and D := [B,C → ¬a] ∈ StExt ({B,C}). We illustrate these arguments in Figure 5.1.\nClearly, DR(A) = {r1}, DR(B) = {r2}, DR(C) = {r3}, DR(D) = {r2, r3}, DR(E) = {r3, r1} and DR(F ) = {r1, r2}.\nNow assume (R4) is false, which means Equation 5.3 is true. This means, for S = {A, B, C},\nD ≺ A, E ≺ B, F ≺ C ⇔{r2, r3} /DEli {r1} , {r3, r1} /DEli {r2} , {r1, r2} /DEli {r3} ⇔ [r2 <′′ r1 or r3 <′′ r1] , [r3 <′′ r2 or r1 <′′ r2] , [r1 <′′ r3 or r2 <′′ r3] ,\n(5.4)\nbut no total order <′′ on the set {r1, r2, r3} can satisfy any of the above eight conditions (Equation 5.4), as a cycle will always be created. Therefore, - based on the disjoint elitist order satisfies (R4) in this example."
    }, {
      "heading" : "5.3.3 Is the Structure Preference Order Reasonable?",
      "text" : "Lemma 5.1. The structure preference order over arguments, -SP (Equation 4.17, page 21), satisfies (R1) to (R3) in the definition of reasonableness29.\nProof. We have:\n1. (R1) This follows because ∅ is the greatest element under the disjoint elitist order.\n2. (R2) This follows for the same reason as (R1).\n3. (R3) This follows because strict extensions do not change the set of defeasible rules.\nThis shows the result.\nSo to show that -SP is reasonable, we need to show (R4) is true. This is work in progress and we now provide some special cases.\nCorollary 5.2. If |S| ≤ 2, then -SP is reasonable30.\nProof. Assume for contradiction that -SP is not reasonable, i.e. Equation 5.3 is true.\nIf |S| = 1, then S = {A} (say) so there is a B ∈ StExt (S − {A}) = StExt(∅) such that B ≺SP A, so there is a strict (and firm) argument B that is strictly less preferred than A, which contradicts (R2).\n29In fact, this result holds for the disjoint elitist order in general, i.e. with any underlying strict total order <′′. Recall that -SP is just the disjoint elitist order with <SP (Equation 4.16, page 21) as the underlying strict total order.\n30This result holds for the disjoint elitist order more generally.\nIf |S| = 2, then S = {A,B} (say), so there is a C ∈ StExt ({B}) such that C ≺SP A, and there is a D ∈ StExt ({A}) such that D ≺SP B. But by the contrapositive of (R3) this means A ≺SP B ≺SP A, which contradicts irreflexivity.\nTherefore, for the case of |S| ≤ 2, -SP is reasonable.\nLemma 5.3. If Rs = ∅, then -SP is reasonable31.\nProof. From Lemma 5.1, it is sufficient to show -SP satisfies (R4). Let ∅ 6= S ⊆fin A be arbitrary. We need to show it is not the case that, for any A ∈ S, there is some B ∈ StExt (S − {A}) such that B ≺SP A. Assume for contradiction that it is true, and let A ∈ S be arbitrary. We know from Corollary 5.2 (page 34) we need to show this for |S| > 2. But from Example 8 (page 32), in the case of no strict rules, StExt(S − {A}) = ∅ for |S| > 2, which means Equation 5.3 is false, therefore (R4) holds.\nLemma 5.4. If ∅ 6= S ⊆fin A is such that for all A, B ∈ S,\nA 6= B =⇒ DR(A) ∩DR(B) = ∅ , (5.5)\nthen -SP is reasonable32.\nProof. Clearly DR(S) ⊆fin Rd, because DR(A) ⊆fin Rd for each A ∈ A and DR(S) is a union of finite sets. Given the strict toset 〈Rd, <′′〉, we also have a finite strict toset 〈DR(S), <′′〉. This has a <′′-least element r0 ∈ DR(S). By definition, (∃A ∈ S) r0 ∈ DR(A) (Equation 2.4, page 6). Call the witness to ∃ A0, say.\nNote that for all other arguments in S distinct from A0, r0 would not be amongst their defeasible rules. Now assume for contradiction (R4) is false, so Equation 5.3 is true. We instantiate ∀ to A0 and get\n(∃B ∈ StExt (S − {A0}))B ≺SP A0 . (5.6)\nLet B0 be the witness to ∃. From the definition of the disjoint elitist order, B0 ≺SP A0 means that\n(∃x ∈ DR(B0)−DR(A0)) (∀y ∈ DR(A0)−DR(B0))x <′′ y =⇒ (∃x ∈ DR(B0))x <′′ r0 ,\nbecause r0 ∈ DR(A0) and r0 /∈ DR(B0). However, as r0 is the <′′-least element of DR(S), there is no element in DR(B0) that is smaller than r0. Therefore, Equation 5.3 is false and hence (R4) is true.\nNotice that this last result is consistent with Example 9 (page 33). It is still unknown whether -SP is reasonable for general sets S where ∅ 6= S ⊆fin A although we conjecture that it should be given the consistency properties of PDL and that we have shown the representation theorem. This is work in progress.\n31This result holds for the disjoint elitist order more generally. 32This result holds for the disjoint elitist order more generally."
    }, {
      "heading" : "5.4 Summary",
      "text" : "In this section, we have reviewed the sufficient conditions that an ASPIC+ instantiation needs to satisfy in order to be normatively rational, which formally means that the rationality postulates of [6] are true. The sufficient conditions are that the instantiation is well-defined, and the argument preference relation is reasonable. It is easy to show that the PDL instantiation is well-defined. We are currently working on showing how the structure preference order, -SP , is reasonable. We conjecture that it is reasonable, due to the representation theorem."
    }, {
      "heading" : "6 Discussion and Conclusion",
      "text" : "In this note we have endowed PDL [3] with argumentation semantics using ASPIC+ [12]. We did this by instantiating ASPIC+ to PDL (Section 4, page 16), devising an ASPIC+ preference order that imitates the procedural construction of extensions in PDL (Section 4.2.3, page 20), and proving the conclusions of the justified arguments correspond exactly to the inferences in PDL (Theorem 4.5, page 26) under this preference. As explained in Section 1, endowing PDL with argumentation semantics allows us to perform inferences in PDL dialectically, in the sense that inference in PDL can formally be viewed as a process of exchanging of arguments and counterarguments [11], until the ultimately justified arguments are found, the conclusions of which are exactly what PDL would conclude. This renders the process of inference in PDL more intuitive, and clarifies the reasons for accepting or rejecting a conclusion.\nIt is easy to see how Theorem 4.5 generalises the argumentation semantics of preferred subtheories [12, page 381 Theorem 34]. Informally, a default theory is isomorphic to a PDT 〈D, ∅, ≺〉, where D consists of supernormal defaults and ≺ is consistent with how the sets of the default theory are ranked. Given a linearisation ≺+ ⊇≺, the corresponding preferred subtheory Σ is related to the prioritised default extension by E = Th (Σ). The set of arguments with premises from Σ is graph-isomorphic to Args (f (NBD(E))), both of which form a stable extension. Similarly, given the stable extension E , Conc (E) is the prioritised default extension by Theorem 4.5, and the conclusions of the defeasible rules that feature in E make up the corresponding preferred subtheory. In future work we will articulate this idea more formally.\nThere are several issues with the approach we have taken. Firstly, it seems that we have lost generality because we have restricted attention to LPDTs (Section 4.1, page 16). We claim that this does not lose generality because extensions in PDL always presuppose a linearisation ≺+ of ≺ [3], and we have shown that for any such linearisation the correspondence between PDL and its argumentation semantics is exact.\nSecondly, we have not yet shown that the argument preference relation used, -SP , is reasonable, so we have not guaranteed normative rationality from the point of view of ASPIC+. This is work in progress.\nThe importance of proving that -SP is reasonable is that one can use ASPIC+ to generalise PDL by abstracting the concepts developed in this note to other situations, not necessarily motivated by PDL. For example, if -SP is reasonable, then it can be used in a wider range of contexts. Further, ASPIC+ can identify argumentation-based inferences assuming only a partial ordering, unlike in PDL. How can multiple partial orderings be related to multiple stable extensions of PDL without explicitly linearising? Also, do the other Dung semantics33 become relevant? All of this suggests that our argumentative characterisation can be used to generalise PDL, yet if we lift the requirement to linearise, we can no longer guarantee normative rationality, because one can show that the disjoint elitist order is not transitive when the underlying set 〈Rd, <′′〉 is a poset instead of a toset34. Future work will consider how to generalise the requirement that the defeasible rules are totally ordered, how in this case one can obtain all PDL extensions via argumentation, and the significance of other types of Dung semantics.\nLastly, the argumentative characterisation of PDL provides for distributed reasoning in the course of deliberation and persuasion dialogues. For example, BOID agents with PDL representations of mental attitudes can now exchange arguments and counterarguments when deliberating about which goals to select, and consequently which actions to pursue. Future work can investigate the precise advantages the argumentation semantics in PDL have over more traditional approaches in such situations."
    }, {
      "heading" : "A Properties of the Disjoint Elitist Order",
      "text" : "In this section we prove several statements made in Section 4.2.2 (page 18).\nTheorem A.1. If 〈P, <〉 is a strict toset, then 〈Pfin(P ), /DEli〉 is also a strict toset.\nProof. We prove that /DEli is irreflexive, transitive and total over Pfin(P ). Assume for contradiction Γ /DEli Γ, which is equivalent to, by Equation 4.6 (page 18), (∃x ∈ ∅) (∀y ∈ ∅) x < y, which is impossible because exists precedes for all. Therefore, /DEli is irreflexive.\nTo show transitivity, let n1, · · · , n7 ∈ N, such that\n{a1, · · · , an1} ∪ {b1, · · · , bn2} ∪ {c1, · · · , cn3} ∪ {d1, · · · , dn4} ∪ {e1, · · · , en5} ∪ {f1, · · · , fn6} ∪ {g1, · · · , gn7} ⊆ P . (A.1)\nEach element of the sets are distinct. If ni = 0 then the corresponding set is empty. It is sufficient to consider finite subsets due to Pfin(P ). Let Γ, Γ′, Γ′′ be such that\nΓ = {a1, · · · , an1} ∪ {d1, · · · , dn4} ∪ {f1, · · · , fn6} ∪ {g1, · · · , gn7} , Γ′ = {b1, · · · , bn2} ∪ {d1, · · · , dn4} ∪ {e1, · · · , en5} ∪ {g1, · · · , gn7} and Γ′′ = {c1, · · · , cn3} ∪ {e1, · · · , en5} ∪ {f1, · · · , fn6} ∪ {g1, · · · , gn7} .\nWe can picture this situation with the the Venn diagram in Figure A.1.\nNow suppose < permits Γ /DEli Γ ′ /DEli Γ ′′, we write this out in terms of\nthe elements (Equations A.2 and A.3).\nΓ /DEli Γ ′ ⇔ (∃x ∈ Γ− Γ′) (∀y ∈ Γ′ − Γ) x < y ⇔ (∃x ∈ {a1, · · · , an1} ∪ {f1, · · · , fn6})\n(∀y ∈ {b1, · · · , bn2} ∪ {e1, · · · , en5}) x < y ⇔ (∃x ∈ {a1, · · · , an1} ∪ {f1, · · · , fn6})( n2∧\ni=1\nx < bi\n) ∧  n5∧ j=1 x < ej  ⇔\nn1∨ k=1 ( n2∧ i=1 ak < bi ) ∧  n5∧ j=1 ak < ej  ∨ n6∨ l=1 ( n2∧ i=1 fl < bi ) ∧  n5∧ j=1 fl < ej\n . (A.2) Note that there are (n1 + n6) disjuncts in Equation A.2.\nΓ′ /DEli Γ ′′ ⇔ (∃x ∈ Γ′ − Γ′′) (∀y ∈ Γ′′ − Γ′) x < y ⇔ (∃x ∈ {b1, · · · , bn2} ∪ {d1, · · · , dn4})\n(∀y ∈ {c1, · · · , cn3} ∪ {f1, · · · , fn6}) x < y ⇔ (∃x ∈ {b1, · · · , bn2} ∪ {d1, · · · , dn4})( n3∧\ni=1\nx < ci\n) ∧  n6∧ j=1 x < fj  ⇔\nn2∨ k=1 ( n3∧ i=1 bk < ci ) ∧  n6∧ j=1 bk < fj  ∨ n4∨ l=1 ( n3∧ i=1 dl < ci ) ∧  n6∧ j=1 dl < fj\n . (A.3) Note that there are (n2 + n4) disjuncts in Equation A.2.\nWe need to show that Γ /DEli Γ ′′, i.e.\nΓ /DEli Γ ′′ ⇔ (∃x ∈ Γ− Γ′′) (∀y ∈ Γ′′ − Γ) x < y ⇔ (∃x ∈ {a1, · · · , an1} ∪ {d1, · · · , dn4})\n(∀y ∈ {c1, · · · , cn3} ∪ {e1, · · · , en5}) x < y ⇔ (∃x ∈ {a1, · · · , an1} ∪ {d1, · · · , dn4})( n3∧\ni=1\nx < ci\n) ∧  n5∧ j=1 x < ej  ⇔\nn1∨ k=1 ( n3∧ i=1 ak < ci ) ∧  n5∧ j=1 ak < ej  ∨ n4∨ l=1 ( n3∧ i=1 dl < ci ) ∧  n5∧ j=1 dl < ej\n . (A.4) To prove Equation A.4, we need to show one of the disjuncts, i.e. for at least one of 1 ≤ k ≤ n1 or 1 ≤ l ≤ n4, we show either( n3∧\ni=1\nak < ci\n) ∧  n5∧ j=1 ak < ej  or ( n3∧ i=1 dl < ci ) ∧  n5∧ j=1 dl < ej  (A.5)\nby establishing all of the conjuncts. Given Γ /DEli Γ ′ /DEli Γ ′′, we take the conjunction of Equations A.2 and A.3, making (n1 + n6)(n2 + n4) disjuncts, which is equivalent to the following expression: n1∨ k=1 ( n2∧ i=1 ak < bi ) ∧  n5∧ j=1 ak < ej  ∨ n6∨ l=1 ( n2∧ i=1 fl < bi ) ∧  n5∧ j=1 fl < ej\n ∧\n n2∨ k=1 ( n3∧ i=1 bk < ci ) ∧  n6∧ j=1 bk < fj  ∨ n4∨ l=1 ( n3∧ i=1 dl < ci ) ∧  n6∧ j=1 dl < fj  . As ∧ and ∨ bi-distribute, we have four cases:\n1. For some 1 ≤ k ≤ n1 and 1 ≤ k′ ≤ n2, we have( n2∧ i=1 ak < bi ) ∧  n5∧ j=1 ak < ej  ∧( n3∧ i′=1 bk′ < ci′ ) ∧  n6∧ j′=1 bk′ < fj′  . (A.6)\nThis means for some 1 ≤ k ≤ n1, we have n5∧ j=1 ak < ej  (A.7)\nand from ( n2∧ i=1 ak < bi ) ∧ ( n3∧ i′=1 bk′ < ci′ ) , that 1 ≤ k′ ≤ n2, and transitivity of <, we infer( n3∧ i=1 ak < ci ) . (A.8)\nEquations A.7 and A.8 imply Γ /DEli Γ ′′.\n2. For some 1 ≤ k ≤ n1 and 1 ≤ l ≤ n4, we have( n2∧ i=1 ak < bi ) ∧  n5∧ j=1 ak < ej  ∧( n3∧ i′=1 dl < ci′ ) ∧  n6∧ j′=1 dl < fj′  (A.9)\nThis is the most subtle case of the four, and uses the fact that < is total. The second the third bracketed conjuncts are necessary but not sufficient to lead to Γ /DEli Γ\n′′. Let k0 be the witness to 1 ≤ k ≤ n1 and l0 be the witness to 1 ≤ l0 ≤ n4. As < is total, either ak0 < dl0 or dl0 < ak0 (remember all elements are distinct).\n• If ak0 < dl0 then ak0 < ci for all 1 ≤ i ≤ n3. Therefore,( n3∧ i=1 ak0 < ci ) .\n• If dl0 < ak0 then dl0 < ej for all 1 ≤ j ≤ n5. Therefore, n5∧ j=1 dl0 < ej  . In either case, Γ /DEli Γ ′′.\n3. For some 1 ≤ l ≤ n6 and 1 ≤ k ≤ n2, we have( n2∧ i=1 fl < bi ) ∧  n5∧ j=1 fl < ej  ∧( n3∧ i′=1 bk < ci′ ) ∧  n6∧ j′=1 bk < fj′  (A.10)\nThe irreflexivity of < and the first and last bracketed conjuncts gives a contradiction when you run over all indices, so this case gives a contradiction.\n4. For some 1 ≤ l ≤ n6 and 1 ≤ l′ ≤ n4, we have( n2∧ i=1 fl < bi ) ∧  n5∧ j=1 fl < ej  ∧( n3∧ i′=1 dl′ < ci′ ) ∧  n6∧ j′=1 dl′ < fj′  (A.11)\nThis case is similar to the first case - we use transitivity to combine the second and last bracketed conjuncts. This infers the second conjunct of Equation A.5, which means Γ /DEli Γ ′′.\nTherefore, in all cases, Γ /DEli Γ ′′. This shows /DEli is transitive when the underlying order < is total. Now let Γ, Γ′ ∈ Pfin(P ) be arbitrary. To show trichotomy, we start by assuming Γ 6= Γ′ and show either Γ/DEliΓ′ or Γ′/DEliΓ. From Equation 4.6 (page 18), we consider the symmetric difference Γ Γ′. The set 〈Γ Γ′, <〉 ⊆ 〈P, <〉 is also a finite strict toset. This means there must exist a <-least element x0 ∈ Γ Γ′, say. There are two possibilities:\n• If x0 ∈ Γ− Γ′, then Γ /DEli Γ′.\n• If x0 ∈ Γ′ − Γ, then Γ′ /DEli Γ′.\nThis establishes trichotomy - so 〈Pfin(P ), /DEli〉 is a strict toset.\nLemma A.2. If 〈P, <〉 is a strict poset, then /DEli is not necessarily transitive over Pfin(P ).\nProof. We provide the following counterexample: let P = {a0, a1, a2, a3} such that a0 < a2 and a1 < a3 and nothing else. This means a0||a3 and a1||a2. This is a well-defined strict poset. Now let Γ := {a0, a1}, Γ′ := {a1, a2} and Γ′′ := {a2, a3}. We can illustrate this in Figure A.2.\nClearly, Γ /DEli Γ ′ because a0 < a2, and Γ ′ /DEli Γ ′′ because a1 < a3. Now,\nΓ 6/DEliΓ′′ ⇔ (∀x ∈ Γ− Γ′′) (∃y ∈ Γ′′ − Γ)x 6< y ⇔ (∀x ∈ {a0, a1}) (∃y ∈ {a2, a3}) x 6< y ⇔ (∀x ∈ {a0, a1}) [x 6< a2 or x 6< a3] ⇔ [a0 6< a2 or a0 6< a3] and [a1 6< a2 or a1 6< a3] .\nThis is true, because a0 6< a3 and a1 6< a2 are both true. So this is a situation where Γ /DEli Γ ′ /DEli Γ ′′ and Γ 6/DEliΓ′′. Therefore, /DEli is not transitive.\nCorollary A.3. If 〈P, <〉 is a strict toset, then ∅ is the /DEli-greatest element in 〈Pfin(P ), /DEli〉.\nProof. Assume for contradiction that there is some Γ ∈ Pfin(P ), ∅/DEliΓ, which by Equation 4.6 (page 18) is equivalent to (∃x ∈ ∅) (∀y ∈ Γ)x < y, which is false due to “(∃x ∈ ∅)”.\nCorollary A.4. If 〈P, <〉 is a strict finite toset, then P is the /DEli-least element in 〈Pfin(P ), /DEli〉.\nProof. Assume for contradiction that there is some Γ ∈ Pfin(P ), Γ /DEli P . As Γ ⊆ P , we must have Γ− P = ∅. By Equation 4.6, Γ /DEli P is equivalent to (∃x ∈ ∅) (∀y ∈ Γ), which is false due to “(∃x ∈ ∅)”."
    }, {
      "heading" : "B Characterising Non-Blocked Defaults",
      "text" : "In this section we prove Lemma 4.4 (page 26). We restate the lemma below for convenience.\nLemma B.1. Let 〈D, W, ≺+〉 be a LPDT. If ≺+ generates E, then we have that\nNBD(≺+) := { θ : φ\nφ ∈ D θ ∈ E, ¬φ /∈ E\n} . (B.1)\nProof. It is sufficient to show Equation 4.26 (with Equations 4.24 and 4.25) is the same as the right hand side of Equation 4.27. Let ≺+ generate the extension E and, for convenience, we suppress the argument “≺+” in the sets for this proof.\n(⇒) Case 1: Assume d ∈ SAD, then Ante(d) ⊆ S, ¬Conc(d) /∈ S and Conc(d) ∈ S. This implies Ante(d) ⊆ S and ¬Conc(d) /∈ S. Therefore,\nd ∈ {d′ ∈ D Ante(d′) ⊆ E, ¬Conc(d′) /∈ E} , (B.2)\nand hence\nSAD ⊆ {d ∈ D Ante(d) ⊆ E, ¬Conc(d) /∈ E} . (B.3)\nCase 2: Now assume d ∈ GD, which means\n⇔ (∃i ∈ N) d ∈ GDi ⇔ (∃i ∈ N) [Ante(d) ⊆ Ei, Conc(d) /∈ Ei, ¬Conc(d) /∈ Ei] ⇔Ante(d) ⊆ Ej0 , Conc(d) /∈ Ej0 , ¬Conc(d) /∈ Ej0 j0 witness to i, (B.4) ⇒Ante(d) ⊆ Ej0 , ¬Conc(d) /∈ Ej0 ⇒Ante(d) ⊆ E, ¬Conc(d) /∈ Ej0 .\nClearly, this means Ante(d) ⊆ E. Now assume for contradiction that ¬Conc(d) ∈ E, which means there is some i0 ∈ N such that ¬Conc(d) ∈ Ei0 . What is the relationship between i0 and j0? As both are natural numbers, there are three possibilities:\n• i0 = j0: This is impossible as else we will have ¬Conc(d) /∈ Ei0 and ¬Conc(d) ∈ Ei0 .\n• i0 < j0: We have ¬Conc(d) /∈ Ej0 and ¬Conc(d) ∈ Ei0 , which is also impossible because the Ei’s form an ascending chain, so Ei0 ⊆ Ej0 . Therefore, we get ¬Conc(d) ∈ Ej0 and ¬Conc(d) /∈ Ej0 .\n• i0 > j0: We have ¬Conc(d) /∈ Ej0 and ¬Conc(d) ∈ Ei0 . From Equation B.4, we have that d is active in Ej0 , hence Conc(d) ∈ Ej0+1 ⊆ Ei0 , which makes ¬Conc(d) ∈ Ei0 impossible because the Ei’s are consistent.\nTherefore, ¬Conc(d) /∈ E. So we have Ante(d) ⊆ E and ¬Conc(d) /∈ E. Therefore, Equation B.2 is true for this case and we have\nGD ⊆ {d ∈ D Ante(d) ⊆ E, ¬Conc(d) /∈ E} . (B.5)\nWe can take the union of Equations B.5 and B.3 to get\nGD ∪ SAD ⊆ {d ∈ D Ante(d) ⊆ E, ¬Conc(d) /∈ E} . (B.6)\n(⇐) Assume d ∈ {d′ ∈ D Ante(d′) ⊆ E, ¬Conc(d′) /∈ E}, which means Ante(d) ⊆ E and ¬Conc(d) /∈ E. We have, for some i0 ∈ N,\n⇔Ante(d) ⊆ Ei0 , (∀j ∈ N)¬Conc(d) /∈ Ej ⇔Ante(d) ⊆ Ei0 , ¬Conc(d) /∈ Ei0 , (∀j ∈ N− {i0})¬Conc(d) /∈ Ej ⇔ (∀j ∈ N− {i0})¬Conc(d) /∈ Ej and\n[(Ante(d) ⊆ Ei0 , ¬Conc(d) /∈ Ei0 , Conc(d) ∈ Ei0) or (Ante(d) ⊆ Ei0 , ¬Conc(d) /∈ Ei0 , Conc(d) /∈ Ei0)]\n⇔ (∀j ∈ N− {i0})¬Conc(d) /∈ Ej and [(Ante(d) ⊆ Ei0 , ¬Conc(d) /∈ Ei0 , Conc(d) ∈ Ei0) or d ∈ GDi0 ⇒ (∀j ∈ N− {i0})¬Conc(d) /∈ Ej and [(Ante(d) ⊆ Ei0 , ¬Conc(d) /∈ Ei0 , Conc(d) ∈ Ei0) or d ∈ GD ⇒d ∈ GD or [Ante(d) ⊆ Ei0 , ¬Conc(d) /∈ Ei0 , Conc(d) ∈ Ei0 and (∀j ∈ N− {i0})¬Conc(d) /∈ Ej ] ⇒d ∈ GD or [Ante(d) ⊆ E and (∀j ∈ N)¬Conc(d) /∈ Ej ] ⇒d ∈ GD or [Ante(d) ⊆ E and ¬Conc(d) /∈ E] , ⇔d ∈ GD ∪ SAD .\nTherefore, we have\n{d ∈ D Ante(d) ⊆ E, ¬Conc(d) /∈ E} ⊆ GD ∪ SAD . (B.7)\nThe result follows from Equations B.6 and B.7."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2015,
    "abstractText" : "<lb>We endow prioritised default logic (PDL) with argumentation semantics<lb>using the ASPIC framework for structured argumentation, and prove<lb>that the conclusions of the justified arguments are exactly the prioritised<lb>default extensions. Argumentation semantics for PDL will allow for the<lb>application of argument game proof theories to the process of inference<lb>in PDL, making the reasons for accepting a conclusion transparent and<lb>the inference process more intuitive. This also opens up the possibility for<lb>argumentation-based distributed reasoning and communication amongst<lb>agents with PDL representations of mental attitudes.",
    "creator" : "LaTeX with hyperref package"
  }
}