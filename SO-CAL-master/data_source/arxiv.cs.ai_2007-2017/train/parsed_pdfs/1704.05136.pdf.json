{
  "name" : "1704.05136.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "The Causality/Repair Connection in Databases: Causality-Programs⋆",
    "authors" : [ "Leopoldo Bertossi" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n70 4.\n05 13\n6v 1\n[ cs\n.D B\n] 1\n7 A\npr 2\n01 7\nused as a basis for solving computational and reasoning problems about causes for query answers from databases."
    }, {
      "heading" : "1 Introduction",
      "text" : "Causality appears at the foundations of many scientific disciplines. In data and knowl-\nedge management, the need to represent and compute causes may be related to some\nform of uncertainty about the information at hand. More specifically in data management, we need to understandwhy certain results, e.g. query answers, are obtained or not.\nOr why certain natural semantic conditions are not satisfied. Accordingly, a database (DB) system should provide explanations, to understand and explore the data, or recon-\nsider the queries and integrity constraints (ICs).\nSeminal work on causality in DBs was introduced in [17], building on work on causality as found in artificial intelligence that appeals to the notions of counterfactuals,\ninterventions and structural models [15]. Actually, [17] introduces the notions of: (a) a\nDB tuple as an actual cause for a query result, (b) a contingency set for a cause, as a set of tuples that must accompany the cause for it to be such, and (c) the responsibility\nof a cause as a numerical measure of its strength (building on [11]).\nMost of our research on causality in DBs has been motivated by an attempt to under-\nstand causality from different angles of data and knowledgemanagement. In [6], precise\nreductions between causality in DBs, DB repairs, and consistency-based diagnosis were established; and the relationships where investigated and exploited. In [7], causality in\nDBs was related to view-based DB updates and abductive diagnosis. These are all inter-\nesting and fruitful connections among several forms of non-monotonic reasoning; each of them reflecting some form of uncertainty about the information at hand. In the case\nof DB repairs [3], it is about the uncertainty due the non-satisfaction of given ICs, which is represented by presence of possibly multiple intended repairs of the inconsistent DB.\nDB repairs can be specified by means of answer-set programs (or disjunctive logic\nprograms with stable model semantics) [14], the so-called repair-programs. Cf. [10, 3] for repair-programs and additional references. In this work we exploit the reduction of\nDB causality to DB repairs established in [6], by taking advantage of repair programs\nfor specifying and computing causes, their contingency sets, and their responsibility degrees. We show that that the resulting causality-programs have the necessary and suffi-\ncient expressive power to capture and compute not only causes, which can be done with\nless expressive programs [17], but specially minimal contingency sets and responsibilities (which can not). Causality programs can also be used for reasoning about causes.\nFinally, we briefly show how causality-programs can be adapted to give an account of other forms of causality in DBs. ⋆ This is a “Short Paper” reporting progress on ongoing research. ⋆⋆ Carleton Univ., School of Computer Science, Canada. bertossi@scs.carleton.ca"
    }, {
      "heading" : "2 Background",
      "text" : "Relational DBs. A relational schema R contains a domain, C, of constants and a set, P , of predicates of finite arities. R gives rise to a language L(R) of first-order (FO) predicate logic with built-in equality, =. Variables are usually denoted by x, y, z, ..., and sequences thereof by x̄, ...; and constants with a, b, c, ..., etc. An atom is of the form P (t1, . . . , tn), with n-ary P ∈ P and t1, . . . , tn terms, i.e. constants, or variables. An atom is ground (aka. a tuple) if it contains no variables. A DB instance,D, forR is a finite set of ground atoms; and it serves as an interpretation structure for L(R).\nA conjunctive query (CQ) is a FO formula,Q(x̄), of the form ∃ȳ (P1(x̄1) ∧ · · · ∧ Pm(x̄m)), with Pi ∈ P , and (distinct) free variables x̄ := ( ⋃ x̄i)r ȳ. If Q has n (free) variables, c̄ ∈ Cn is an answer to Q from D if D |= Q[c̄], i.e. Q[c̄] is true in D when the variables in x̄ are componentwise replaced by the values in c̄.Q(D) denotes the set of answers to Q fromD D.Q is a boolean conjunctive query (BCQ) when x̄ is empty; and when true inD, Q(D) := {true}. Otherwise, it is false, and Q(D) := ∅.\nIn this work we consider integrity constraints (ICs), i.e. sentences of L(R), that are: (a) denial constraints (DCs), i.e. of the form κ : ¬∃x̄(P1(x̄1) ∧ · · · ∧ Pm(x̄m)), where Pi ∈ P , and x̄ = ⋃ x̄i; and (b) functional dependencies (FDs), i.e. of the form ϕ : ¬∃x̄(P (v̄, ȳ1, z1) ∧ P (v̄, ȳ2, z2) ∧ z1 6= z2). Here, x̄ = ȳ1 ∪ ȳ2 ∪ v̄ ∪ {z1, z2}, and z1 6= z2 is an abbreviation for ¬z1 = z2.1 A key constraint (KC) is a conjunction of FDs: ∧k\nj=1 ¬∃x̄(P (v̄, ȳ1) ∧ P (v̄, ȳ2) ∧ y j 1 6= y j 2), with k = |ȳ1| = |ȳ2|. A given\nschema may come with its set of ICs, and its instances are expected to satisfy them. If\nthis is not the case, we say the instance is inconsistent.\nCausality in DBs. A notion of cause as an explanation for a query result was introduced in [17], as follows. For a relational instanceD = Dn ∪Dx, whereDn andDx denote the mutually exclusive sets of endogenous and exogenous tuples, a tuple τ ∈ Dn is called a counterfactual cause for a BCQ Q, if D |= Q and D r {τ} 6|= Q. Now, τ ∈ Dn is an actual cause forQ if there exists Γ ⊆ Dn, called a contingency set for τ , such that τ is a counterfactual cause for Q inD r Γ . This definition is based on [15].\nThe notion of responsibility reflects the relative degree of causality of a tuple for a query result [17] (based on [11]). The responsibility of an actual cause τ for Q, is ρ(τ) := 1|Γ |+1 , where |Γ | is the size of a smallest contingency set for τ . If τ is not an actual cause, ρ(τ) := 0. Tuples with higher responsibility are stronger explanations. In the following we will assume all the tuples in a DB instance are endogenous. (Cf.\n[6] for the general case.) The notion of cause as defined above can be applied monotonic query, i.e whose sets of answers may only grow when the DB grows [6].2 In this work we concentrate only on conjunctive queries, possibly with 6=.\nExample 1. Consider the relational DB D = {R(a4, a3), R(a2, a1), R(a3, a3), S(a4), S(a2), S(a3)}, and the query Q : ∃x∃y(S(x) ∧R(x, y) ∧ S(y)). It holds,D |= Q.\nS(a3) is counterfactual cause for Q: if S(a3) is removed from D, Q is no longer true. Its responsibility is 1. R(a4, a3) is an actual cause for Q with contingency set {R(a3, a3)}: if R(a3, a3) is removed from D, Q is still true, but further removing\n1 The variables in the atoms do not have to occur in the indicated order, but their positions should\nbe in correspondence in the two atoms. 2 E.g. CQs, unions of CQs (UCQs), Datalog queries are monotonic.\nR(a4, a3)makesQ false. The responsibility ofR(a4, a3) is 1\n2 .R(a3, a3) and S(a4) are\nactual causes, with responsibility 1 2 .\nDatabase repairs. Cf. [3] for a survey on DB repairs and consistent query answering\nin DBs. We introduce the main ideas by means of an example. The ICs we consider in\nthis work can be enforced only by deleting tuples from the DB (as opposed to inserting tuples). Repairing the DB by changing attribute values is also possible [3, 4, 5], [6, sec.\n7.4], but until further notice we will not consider this kind of repairs.\nExample 2. The DB D = {P (a), P (e), Q(a, b), R(a, c)} is inconsistent with respect to the (set of) denial constraints (DCs) κ1 : ¬∃x∃y(P (x) ∧ Q(x, y)), and κ2 : ¬∃x∃y(P (x) ∧R(x, y)). It holds D 6|= {κ1, κ2}.\nA subset-repair, in short an S-repair, ofD wrt. the set of DCs is a⊆-maximal subset ofD that is consistent, i.e. no proper superset is consistent. The following are S-repairs: D1 = {P (e), Q(a, b), R(a, b)} andD2 = {P (e), P (a)}.\nA cardinality-repair, in short a C-repair, of D wrt. the set of DCs is a maximumcardinality subset of D that is consistent, i.e. no subset of D with larger cardinality is consistent. D1 above is the only C-repair.\nFor an instanceD and a setΣ of DCs, the sets of S-repairs and C-repairs are denoted with Srep(D,Σ) and Crep(D,Σ), resp."
    }, {
      "heading" : "3 Causality Answer Set Programs",
      "text" : "Causes from repairs. In [6] it was shown that causes for queries can be obtained from DB repairs. Consider the BCQ Q : ∃x̄(P1(x̄1) ∧ · · · ∧ Pm(x̄m)) that is (possibly unexpectedly) true in D: D |= Q. Actual causes for Q, their contingency sets, and responsibilities can be obtained from DB repairs. First, ¬Q is logically equivalent to the DC:\nκ(Q) : ¬∃x̄(P1(x̄1) ∧ · · · ∧ Pm(x̄m)). (1)\nSo, ifQ is true inD, D is inconsistent wrt. κ(Q), giving rise to repairs ofD wrt. κ(Q). Next, we build differences, containing a tuple τ , betweenD and S- or C-repairs:\n(a) Dif s(D,κ(Q), τ) = {D rD′ | D′ ∈ Srep(D,κ(Q)), τ ∈ (D rD′)}, (2) (b) Dif c(D,κ(Q), τ) = {D rD′ | D′ ∈ Crep(D,κ(Q)), τ ∈ (D rD′)}. (3)\nIt holds [6]: τ ∈ D is an actual cause for Q iff Dif s(D,κ(Q), τ) 6= ∅. Furthermore, each S-repairD′ for which (D rD′) ∈ Dif s(D,κ(Q), τ) gives us (D r (D′ ∪ {τ})) as a subset-minimal contingency set for τ . Also, if Dif s(D κ(Q), τ) = ∅, then ρ(τ) = 0. Otherwise, ρ(τ) = 1|s| , where s ∈ Dif s(D, κ(Q), τ) and there is no s′ ∈ Dif s(D,κ(Q), τ) with |s′| < |s|. As a consequence we obtain that τ is a most responsible actual cause for Q iff Dif c(D,κ(Q), τ) 6= ∅.\nExample 3. (ex. 1 cont.) With the same instance D and query Q, we consider the DC κ(Q): ¬∃x∃y(S(x) ∧ R(x, y) ∧ S(y)), which is not satisfied by D. Here, Srep(D,κ(Q)) = {D1, D2, D3} andCrep(D,κ(Q)) = {D1}, withD1 = {R(a4, a3), R(a2, a1), R(a3, a3), S(a4), S(a2)}, D2 = {R(a2, a1), S(a4), S(a2), S(a3)}, D3 = {R(a4, a3), R(a2, a1), S(a2), S(a3)}.\nFor tuple R(a4, a3), Dif s(D,κ(Q), R(a4, a3)) = {D rD2} = {{R(a4, a3),\nR(a3, a3)}}. So,R(a4, a3) is an actual cause, with responsibility 1\n2 . Similarly,R(a3, a3)\nis an actual cause, with responsibility 1 2 . For tuple S(a3), Dif c(D,κ(Q), S(a3)) = {D rD1} = {S(a3)}. So, S(a3) is an actual cause, with responsibility 1, i.e. a most responsible cause.\nIt is also possible, the other way around, to characterize repairs in terms of causes and their contingency sets. Actually this connection can be used to obtain complex-\nity results for causality problems from repair-related computational problems [6]. Most computational problems related to repairs, specially C-repairs, which are related to most\nresponsible causes, are provably hard. This is reflected in a high complexity for respon-\nsibility [6] (see below for some more details).\nAnswer-set programs for repairs. Given a DB D and a set of ICs, Σ, it is possible to specify the repairs of D wrt. Σ by means of an answer-set program (ASP) Π(D,Σ), in the sense that the set, Mod(Π(D,Σ)), of its stable models is in one-to-one correspondence with Srep(D,Σ) [10, 2] (cf. [3] for more references). In the following we consider a single denial constraint κ : ¬∃x̄(P1(x̄1) ∧ · · · ∧ Pm(x̄m)).3\nAlthough not necessary for repair purposes, it may be useful on the causality side having global unique tuple identifiers (tids), i.e. every tuple R(c̄) in D is represented as R(t, c̄) for some integer t that is not used by any other tuple in D. For the repair program we introduce a nickname predicate R′ for every predicate R ∈ R that has an extra, final attribute to hold an annotation from the set {d, s}, for “delete” and “stays”, resp. Nickname predicates are used to represent and compute repairs.\nThe repair-ASP, Π(D,κ), for D and κ contains all the tuples in D as facts (with tids), plus the following rules:\nP ′1(t1, x̄1, d) ∨ · · · ∨ P ′ m(tn, x̄m, d) ← P1(t1, x̄1), . . . , Pm(tm, x̄m),\nP ′i (ti, x̄i, s) ← Pi(ti, x̄i), not P ′ i (ti, x̄i, d), i = 1, · · · ,m.\nA stable model M of the program determines a repair D′ of D: D′ := {P (c̄) | P ′(t, c̄, s) ∈ M}, and every repair can be obtained in this way [10]. For an FD, say ϕ : ¬∃xyz1z2vw(R(x, y, z1, v) ∧ R(x, y, z2, w) ∧ z1 6= z2), which makes the third attribute functionally depend upon the first two, the repair program contains the rules:\nR ′(t1, x, y, z1, v, d) ∨R ′(t2, x, y, z2, w, d) ← R(t1, x, y, z1, v), R(t2, x, y, z2, w), z1 6= z2.\nR ′(t, x, y, z, v, s) ← R(t, x, y, z, v), not R′(t, x, y, z, v, d).\nAs established in [10, 2], for DCs and FDs, the repair program can be made nondisjunctive by moving all the disjuncts but one, in turns, in negated form to the body of the rule. For example, the rule P (a) ∨ R(b) ← Body , can be written as the two rules P (a) ← Body , notR(b) and R(b) ← Body , P (a). Still the resulting program can be non-stratified if there is recursion via negation [14], as in the case of FDs and DCs with\nself-joins.\nExample 4. (ex. 3 cont.) For the DC κ(Q): ¬∃x∃y(S(x)∧R(x, y)∧S(y)), the repairASP contains the facts (with tids) R(1, a4, a3), R(2, a2, a1), R(3, a3, a3), S(4, a4), S(5, a2), S(6, a3), and the rules:\n3 It is possible to consider a combination of several DCs and FDs, corresponding to UCQs\n(possibly with 6=), on the causality side [6].\nS ′(t1, x,d) ∨R ′(t2, x, y, d) ∨ S ′(t3, y, d) ← S(t1, x), R(t2, x, y), S(t3, y),\nS ′(t, x, s) ← S(t, x), not S′(t, x,d). etc.\nRepair D1 is represented by the stable model M1 containing R ′(1, a4, a3, s),\nR′(2, a2, a1, s), R ′(3, a3, a3, s), S ′(4, a4, s), S ′(5, a2, s), and S ′(6, a3, d).\nSpecifying causes with repair-ASPs. According to (2), we concentrate on the differences between the D and its repairs, now represented by {P (c̄) | P (t, c̄, d) ∈ M}, for M a stable model of the repair-program. They are used to compute actual causes and their⊆-minimal contingency sets, both identified by tids. So, given the repair-ASP for a DC κ(Q), a binary predicate Cause(·, ·) will contain a tid for cause in it first argument, and a tid for a tuple belonging to its contingency set. More precisely, for each pair of predicates Pi, Pj in the DC κ(Q) as in (1) (they could be the same if it has self-joins), introduce the rule Cause(t, t′) ← P ′i (t, x̄i, d), P ′ j(t\n′, x̄j , d), t 6= t′, with the inequality condition only when Pi and Pj are the same.\nExample 5. (ex. 3 and 4 cont.) The causes for the query, represented by their tids,\ncan be obtained by posing simple queries to the program under the uncertain or brave semantics that makes true what is true in some model of the repair-ASP.4 In this case, Π(D,κ(Q)) |=brave Ans(t), where the auxiliary predicate is defined on top of Π(D, κ(Q)) by the rules: Ans(t) ← R′(t, x, y, d) and Ans(t) ← S′(t, x, d).\nThe repair-ASP can be extended with the following rules to compute causes with\ncontingency sets:\nCause(t, t′) ← S′(t, x, d),R′(t′, u, v, d), Cause(t, t′) ← S′(t, x, d), S′(t′, u, d), t 6= t′, Cause(t, t′) ← R′(t, x, y, d), S′(t′, u, d). For the stable model M2 corresponding to repair D2, we obtain Cause(1, 3) and Cause(3, 1), from the repair differenceDr D2 = {R(a4, a3), R(a3, a3)}.\nWe can use the DLV system [16] to build the contingency set associated to a cause,\nby means of its extension, DLV-Complex [9], that supports set building, membership and union, as built-ins. For every atom Cause(t, t′), we introduce the atom Con(t, {t′}), and the rule that computes the union of (partial) contingency sets as long as they differ by some element:\nCon(T,#union(C1, C2)) ← Con(T,C1),Con(T,C2),#member(M,C1),\nnot #member(M,C2).\nThe responsibility for an actual cause τ , with tid t, as associated to a given repair D′ (with τ /∈ D′), and then to a given model M ′ of the extended repair-ASP, can be computed counting the number of t′s for which Cause(t, t′) ∈ M ′. This responsibility will be maximum within a repair (or model): ρ(t,M ′) := 1/(1 + |d(t,M ′)|), where d(t,M ′) := {Cause(t, t′) ∈ M ′}. This value can be computed by means of the count function, supported by DLV [13], as follows: prerho(T,N) ← #count{T ′ : Con(T, T ′)} = N , followed by rho(T,M) ← M ∗ (prerho(T,M) + 1) = 1. Or equivalently, via 1/|d(M)|, with d(M ′) := {P (t′, c̄, d) | P (t′, c̄, d) ∈ M ′}.\nEach modelM of the program so far will return, for a given tuple (id) that is an actual cause, amaximal-responsibility contingency set within that model: no proper subset\n4 As opposed to the skeptical or cautious semantics that sanctions as true what is true in all\nmodels. Both semantics as supported by the DLV system [16], to which we refer below.\nis a contingency set for the given cause. However, its cardinality may not correspond\nto the (global) maximum responsibility for that tuple. For that we need to compute only\nmaximum-cardinality repairs, i.e. C-repairs.\nC-repairs can be specified by means of repair-ASPs [1] that contain weak-program constraints [8, 13]. In this case, we want repairs that minimize the number of deleted tuples. For each DB predicateP , we introduce the weak-constraint5 ⇐ P (t, x̄), P ′(t, x̄, d). In a model M the body can be satisfied, and then the program constraint violated, but the number of violations is kept to a minimum (among the models of the program with-\nout the weak-constraints). A repair-ASP with these weak constraints specifies repairs that minimize the number of deleted tuples; and minimum-cardinality contingency sets\nand maximum responsibilities can be computed, as above.\nComplexity. Computing causes for CQs can be done in polynomial time in data [17],\nwhich was extended to UCQs in [6]. As has been established in [17, 6], the compu-\ntational problems associated to contingency sets and responsibility are in the second level of the polynomial hierarchy (PH), in data complexity [12]. On the other side, our\ncausality-ASPs can be transformed into non-disjunctive, unstratified programs, whose reasoning tasks are also in the second level of the PH (in data). It is worth mentioning\nthat the ASP approach to causality via repairs programs could be extended to deal with\nqueries that are more complex than CQs or UCQs. (In [18] causality for queries that are conjunctions of literals was investigated; and in [7] it was established that cause\ncomputation for Datalog queries can be in the second level of the PH.)\nCausality programs and ICs The original causality setting in [17] does not consider\nICs. An extension of causality under ICs was proposed in [7]. Under it, the ICs have to\nbe satisfied by the DBs involved, i.e. the initial one and those obtained by cause- and contingency-set deletions. When the query at hand is monotonic6, monotonic ICs (e.g.\ndenial constraints and FDs) are not much of an issue since they stay satisfied under deletions associated to causes. So, the most relevant ICs are non-monotonic, such as referential ICs, e.g. ∀xy(R(x, y) → S(x)) in our running example. These ICs can be represented in a causality-program by means of (strong) program constraints. In the running example, we would have, for example, the constraint: ← R′(t, x, y, s), not S′(t′, x, s).7\nPreferred causes and repairs. In [6], generalized causes were introduced on the basis of arbitrary repair semantics (i.e. classes of preferred consistent subinstances, commonly\nunder some maximality criterion), basically starting from the characterization in (2) and (3), but using repairs ofD wrt. κ(Q) in a class, Rep(D,κ(Q)), possibly different from Srep(D,κ(Q)) orCrep(D,κ(Q)). As a particular case in [6], causes based on changes of attribute values (as opposed to tuple deletions) were defined. In that case, admissible updates are replacements of data values by null values, to break joins, in a minimal\nor minimum way. Those underlying DB repairs were used in [4] to hide sensitive data\nthat could be exposed through CQ answering; and corresponding repair programs were\n5 Hard program-constraints, of the form ← Body , eliminate the models where they are violated. 6 I.e. the set of answers may only grow when the instance grows. 7 Or better, to make it safe, by a rule and a constraint: aux(x) ← S′(t′, x, s) and ← R′(t, x, y, s), not aux (x).\nintroduced. They could be used, as done earlier in this paper, as a basis to reason about-\nand compute the new resulting causes (at the tuple or attribute-value level) and their contingency sets.8\nAcknowledgements: Research supported by NSERC Discovery Grant #06148."
    } ],
    "references" : [ {
      "title" : "Answer Sets for Consistent Query Answers",
      "author" : [ "M. Arenas", "L. Bertossi", "J. Chomicki" ],
      "venue" : "Theory and Practice of Logic Programming,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2003
    }, {
      "title" : "Characterizing and Computing Semantically Correct Answers from Databases with Annotated Logic and Answer Sets",
      "author" : [ "P. Barcelo", "L. Bertossi", "L. Bravo" ],
      "venue" : "In Semantics in Databases, Springer LNCS",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2003
    }, {
      "title" : "Database Repairing and Consistent Query Answering",
      "author" : [ "L. Bertossi" ],
      "venue" : "Morgan & Claypool, Synthesis Lectures on Data Management,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2011
    }, {
      "title" : "Achieving Data Privacy through Secrecy Views and Null-Based Virtual Updates",
      "author" : [ "L. Bertossi", "L. Li" ],
      "venue" : "IEEE Trans. Knowledge and Data Engineering,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2013
    }, {
      "title" : "Consistency and Trust in Peer Data Exchange Systems",
      "author" : [ "L. Bertossi", "L. Bravo" ],
      "venue" : "Theory and Practice of Logic Programming,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2017
    }, {
      "title" : "Enhancing Disjunctive Datalog by Constraints",
      "author" : [ "F. Buccafurri", "N. Leone", "P. Rullo" ],
      "venue" : "IEEE Tran. Knowledge and Data Engineering,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2000
    }, {
      "title" : "An ASP System with Functions, Lists, and Sets",
      "author" : [ "Calimeri", "F. Cozza", "G.S. Ianni", "N. Leone" ],
      "venue" : "Proc. LPNMR 2009, Springer LNCS 5753,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2009
    }, {
      "title" : "The Consistency Extractor System: Answer Set Programs for Consistent Query Answering in Databases",
      "author" : [ "M. Caniupan-Marileo", "L. Bertossi" ],
      "venue" : "Data & Knowledge Engineering,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2010
    }, {
      "title" : "Responsibility and Blame: A Structural-Model Approach",
      "author" : [ "H. Chockler", "J.Y. Halpern" ],
      "venue" : "J. Artif. Intell. Res.,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2004
    }, {
      "title" : "Design and implementation of aggregate functions in the DLV system",
      "author" : [ "W. Faber", "G. Pfeifer", "N. Leone", "T. Dell’Armi", "G. Ielpa" ],
      "venue" : "Theory and Practice of Logoc Programming,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2008
    }, {
      "title" : "Knowledge Representation and Reasoning, and the Design of Intelligent Agents",
      "author" : [ "M. Gelfond", "Y. Kahl" ],
      "venue" : null,
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2014
    }, {
      "title" : "Causes and Explanations: A Structural-Model Approach: Part 1",
      "author" : [ "J. Halpern", "J. Pearl" ],
      "venue" : "British J. Philosophy of Science,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2005
    }, {
      "title" : "The DLV System for Knowledge Representation and Reasoning",
      "author" : [ "N. Leone", "G. Pfeifer", "W. Faber", "T. Eiter", "G. Gottlob", "S. Perri", "F. Scarcello" ],
      "venue" : "ACM Trans. Comput. Log.,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2006
    }, {
      "title" : "The Complexity of Causality and Responsibility for Query Answers and Non-Answers",
      "author" : [ "A. Meliou", "W. Gatterbauer", "K.F. Moore", "D. Suciu" ],
      "venue" : "Proc. VLDB,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2010
    }, {
      "title" : "Quantifying Causal Effects on Query Answering in Databases",
      "author" : [ "B. Salimi", "L. Bertossi", "D. Suciu", "G. Van den Broeck" ],
      "venue" : "Proc. TaPP,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2016
    } ],
    "referenceMentions" : [ {
      "referenceID" : 13,
      "context" : "Seminal work on causality in DBs was introduced in [17], building on work on causality as found in artificial intelligence that appeals to the notions of counterfactuals, interventions and structural models [15].",
      "startOffset" : 51,
      "endOffset" : 55
    }, {
      "referenceID" : 11,
      "context" : "Seminal work on causality in DBs was introduced in [17], building on work on causality as found in artificial intelligence that appeals to the notions of counterfactuals, interventions and structural models [15].",
      "startOffset" : 207,
      "endOffset" : 211
    }, {
      "referenceID" : 13,
      "context" : "Actually, [17] introduces the notions of: (a) a DB tuple as an actual cause for a query result, (b) a contingency set for a cause, as a set of tuples that must accompany the cause for it to be such, and (c) the responsibility of a cause as a numerical measure of its strength (building on [11]).",
      "startOffset" : 10,
      "endOffset" : 14
    }, {
      "referenceID" : 8,
      "context" : "Actually, [17] introduces the notions of: (a) a DB tuple as an actual cause for a query result, (b) a contingency set for a cause, as a set of tuples that must accompany the cause for it to be such, and (c) the responsibility of a cause as a numerical measure of its strength (building on [11]).",
      "startOffset" : 289,
      "endOffset" : 293
    }, {
      "referenceID" : 2,
      "context" : "In the case of DB repairs [3], it is about the uncertainty due the non-satisfaction of given ICs, which is represented by presence of possibly multiple intended repairs of the inconsistent DB.",
      "startOffset" : 26,
      "endOffset" : 29
    }, {
      "referenceID" : 10,
      "context" : "DB repairs can be specified by means of answer-set programs (or disjunctive logic programs with stable model semantics) [14], the so-called repair-programs.",
      "startOffset" : 120,
      "endOffset" : 124
    }, {
      "referenceID" : 7,
      "context" : "[10, 3] for repair-programs and additional references.",
      "startOffset" : 0,
      "endOffset" : 7
    }, {
      "referenceID" : 2,
      "context" : "[10, 3] for repair-programs and additional references.",
      "startOffset" : 0,
      "endOffset" : 7
    }, {
      "referenceID" : 13,
      "context" : "We show that that the resulting causality-programs have the necessary and sufficient expressive power to capture and compute not only causes, which can be done with less expressive programs [17], but specially minimal contingency sets and responsibilities (which can not).",
      "startOffset" : 190,
      "endOffset" : 194
    }, {
      "referenceID" : 13,
      "context" : "A notion of cause as an explanation for a query result was introduced in [17], as follows.",
      "startOffset" : 73,
      "endOffset" : 77
    }, {
      "referenceID" : 11,
      "context" : "This definition is based on [15].",
      "startOffset" : 28,
      "endOffset" : 32
    }, {
      "referenceID" : 13,
      "context" : "The notion of responsibility reflects the relative degree of causality of a tuple for a query result [17] (based on [11]).",
      "startOffset" : 101,
      "endOffset" : 105
    }, {
      "referenceID" : 8,
      "context" : "The notion of responsibility reflects the relative degree of causality of a tuple for a query result [17] (based on [11]).",
      "startOffset" : 116,
      "endOffset" : 120
    }, {
      "referenceID" : 2,
      "context" : "[3] for a survey on DB repairs and consistent query answering in DBs.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 2,
      "context" : "Repairing the DB by changing attribute values is also possible [3, 4, 5], [6, sec.",
      "startOffset" : 63,
      "endOffset" : 72
    }, {
      "referenceID" : 3,
      "context" : "Repairing the DB by changing attribute values is also possible [3, 4, 5], [6, sec.",
      "startOffset" : 63,
      "endOffset" : 72
    }, {
      "referenceID" : 4,
      "context" : "Repairing the DB by changing attribute values is also possible [3, 4, 5], [6, sec.",
      "startOffset" : 63,
      "endOffset" : 72
    }, {
      "referenceID" : 7,
      "context" : "Σ by means of an answer-set program (ASP) Π(D,Σ), in the sense that the set, Mod(Π(D,Σ)), of its stable models is in one-to-one correspondence with Srep(D,Σ) [10, 2] (cf.",
      "startOffset" : 158,
      "endOffset" : 165
    }, {
      "referenceID" : 1,
      "context" : "Σ by means of an answer-set program (ASP) Π(D,Σ), in the sense that the set, Mod(Π(D,Σ)), of its stable models is in one-to-one correspondence with Srep(D,Σ) [10, 2] (cf.",
      "startOffset" : 158,
      "endOffset" : 165
    }, {
      "referenceID" : 2,
      "context" : "[3] for more references).",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 7,
      "context" : "A stable model M of the program determines a repair D of D: D := {P (c̄) | P (t, c̄, s) ∈ M}, and every repair can be obtained in this way [10].",
      "startOffset" : 139,
      "endOffset" : 143
    }, {
      "referenceID" : 7,
      "context" : "As established in [10, 2], for DCs and FDs, the repair program can be made nondisjunctive by moving all the disjuncts but one, in turns, in negated form to the body of the rule.",
      "startOffset" : 18,
      "endOffset" : 25
    }, {
      "referenceID" : 1,
      "context" : "As established in [10, 2], for DCs and FDs, the repair program can be made nondisjunctive by moving all the disjuncts but one, in turns, in negated form to the body of the rule.",
      "startOffset" : 18,
      "endOffset" : 25
    }, {
      "referenceID" : 10,
      "context" : "Still the resulting program can be non-stratified if there is recursion via negation [14], as in the case of FDs and DCs with self-joins.",
      "startOffset" : 85,
      "endOffset" : 89
    }, {
      "referenceID" : 12,
      "context" : "We can use the DLV system [16] to build the contingency set associated to a cause, by means of its extension, DLV-Complex [9], that supports set building, membership and union, as built-ins.",
      "startOffset" : 26,
      "endOffset" : 30
    }, {
      "referenceID" : 6,
      "context" : "We can use the DLV system [16] to build the contingency set associated to a cause, by means of its extension, DLV-Complex [9], that supports set building, membership and union, as built-ins.",
      "startOffset" : 122,
      "endOffset" : 125
    }, {
      "referenceID" : 9,
      "context" : "This value can be computed by means of the count function, supported by DLV [13], as follows: prerho(T,N) ← #count{T ′ : Con(T, T )} = N , followed by rho(T,M) ← M ∗ (prerho(T,M) + 1) = 1.",
      "startOffset" : 76,
      "endOffset" : 80
    }, {
      "referenceID" : 12,
      "context" : "Both semantics as supported by the DLV system [16], to which we refer below.",
      "startOffset" : 46,
      "endOffset" : 50
    }, {
      "referenceID" : 0,
      "context" : "C-repairs can be specified by means of repair-ASPs [1] that contain weak-program constraints [8, 13].",
      "startOffset" : 51,
      "endOffset" : 54
    }, {
      "referenceID" : 5,
      "context" : "C-repairs can be specified by means of repair-ASPs [1] that contain weak-program constraints [8, 13].",
      "startOffset" : 93,
      "endOffset" : 100
    }, {
      "referenceID" : 9,
      "context" : "C-repairs can be specified by means of repair-ASPs [1] that contain weak-program constraints [8, 13].",
      "startOffset" : 93,
      "endOffset" : 100
    }, {
      "referenceID" : 13,
      "context" : "Computing causes for CQs can be done in polynomial time in data [17], which was extended to UCQs in [6].",
      "startOffset" : 64,
      "endOffset" : 68
    }, {
      "referenceID" : 13,
      "context" : "As has been established in [17, 6], the computational problems associated to contingency sets and responsibility are in the second level of the polynomial hierarchy (PH), in data complexity [12].",
      "startOffset" : 27,
      "endOffset" : 34
    }, {
      "referenceID" : 14,
      "context" : "(In [18] causality for queries that are conjunctions of literals was investigated; and in [7] it was established that cause computation for Datalog queries can be in the second level of the PH.",
      "startOffset" : 4,
      "endOffset" : 8
    }, {
      "referenceID" : 13,
      "context" : "Causality programs and ICs The original causality setting in [17] does not consider ICs.",
      "startOffset" : 61,
      "endOffset" : 65
    }, {
      "referenceID" : 3,
      "context" : "Those underlying DB repairs were used in [4] to hide sensitive data that could be exposed through CQ answering; and corresponding repair programs were",
      "startOffset" : 41,
      "endOffset" : 44
    } ],
    "year" : 2017,
    "abstractText" : "In this work, answer-set programs that specify repairs of databases are used as a basis for solving computational and reasoning problems about causes for query answers from databases.",
    "creator" : "LaTeX with hyperref package"
  }
}