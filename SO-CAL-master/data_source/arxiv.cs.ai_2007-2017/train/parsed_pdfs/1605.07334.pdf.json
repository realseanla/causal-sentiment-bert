{
  "name" : "1605.07334.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Near-optimal Bayesian Active Learning with Correlated and Noisy Tests",
    "authors" : [ "Yuxin Chen", "S. Hamed Hassani" ],
    "emails" : [ "yuxin.chen@inf.ethz.ch", "hamed@inf.ethz.ch", "krausea@ethz.ch" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Optimal information gathering, i.e., selectively acquiring the most useful data, is one of the central challenges in machine learning. The problem of optimal information gathering has been studied in the context of active learning (Dasgupta, 2004a; Settles, 2012), Bayesian experimental design (Chaloner & Verdinelli, 1995), policy making (Runge et al., 2011), optimal control (Smallwood & Sondik, 1973), and numerous other domains. In a typical set-up for these problems, there is some unknown target variable Y of interest, and a set of tests which correspond to observable variables defined through a probabilistic model. The goal is to determine the value of the target variable with a sequential policy – which adaptively selects the next test based on previous observations – such that the cost of performing these tests is minimized.\nDeriving the optimal testing policy is NP-hard in general (Chakaravarthy et al., 2007); however, under certain conditions, some approximation results are known. In particular, if test outcomes are deterministic functions of the target variable (i.e., in the noise-free setting), a simple greedy algorithm, namely Generalized Binary Search (GBS), is guaranteed to provide a near-optimal approximation of the optimal policy (Kosaraju et al., 1999). On the other hand, if test outcomes are noisy, but the outcomes of different tests are conditionally independent given Y (i.e., under the Naïve Bayes assumption), then using the most informative selection policy, which greedily selects the test that maximizes the expected reduction in uncertainty of the target variable (quantified in terms of Shannon entropy), is guaranteed to perform near-optimally (Chen et al., 2015a).\n29th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nar X\niv :1\n60 5.\n07 33\n4v 1\n[ cs\n.L G\n] 2\n4 M\nay 2\nHowever, in many practical problems, due to the effect of noise or complex structural assumptions in the probabilistic model (beyond Naïve Bayes), we only have access to tests that are indirectly informative about the target variable Y (i.e., test outcomes depend on Y through another hidden random variable. See Fig. 1.) – as a consequence, the test outcomes become conditionally dependent given Y . Consider a medical diagnosis example, where a doctor wants to predict the best treatment for a patient, by carrying out a series of medical tests, each of which reveals some information about the patient’s physical condition. Here, outcomes of medical tests are conditionally independent given the patient’s condition, but are not independent given the treatment, which is made based on the patient’s condition. It is known that in such cases, both GBS and the most informative selection policy (which myopically maximizes the information gain w.r.t. the distribution over Y ) can perform arbitrarily poorly. Golovin et al. (2010) then formalize this problem as an equivalence class determination problem (See §2.1), and show that if the tests’ outcomes are noise-free, then one can obtain near-optimal expected cost, by running a greedy policy based on a surrogate objective function. Their results rely on the fact that the surrogate objective function exhibits adaptive submodularity (Golovin & Krause, 2011), a natural diminishing returns property that generalizes the classical notion of submodularity to adaptive policies. Unfortunately, in the more general setting where tests are noisy, no efficient policies are known to be provably competitive with the optimal policy.\nOur Contribution. In this paper, we introduce Equivalence Class Edge Discounting (ECED), a novel algorithm for practical Bayesian active learning and experimental design problems, and prove strong theoretical guarantees with correlated, noisy tests. In particular, we focus on the setting where the tests’ outcomes indirectly depend on the target variable (and hence conditionally dependent given Y ), and we assume that the outcome of each test can be corrupted by some random, persistent noise (§2). We prove that when the test outcomes are binary, and the noise on test outcomes are mutually independent, then ECED is guaranteed to obtain near-optimal cost, compared with an optimal policy that achieves a lower prediction error (§3). We develop a theoretical framework for analyzing such sequential policies, where we leverage an information-theoretic auxiliary function to reason about the effect of noise, and combine it with the theory of adaptive submodularity to attain the near-optimal bound (§4). The key insight is to show that ECED is effectively making progress in the long run as it picks more tests, even if the myopic choices of tests do not have immediate gain in terms of reducing the uncertainty of the target variable. We demonstrate the compelling performance of ECED on two real-world problem instances, a Bayesian experimental design task intended to distinguish among economic theories of how people make risky decisions, and an active preference learning task via pairwise comparisons (§5). To facilitate better understanding, we provide the detailed proofs, illustrative examples and a third application on pool-based active learning in the supplemental material."
    }, {
      "heading" : "2 Preliminaries and Problem Statement",
      "text" : "The Basic Model Let Y be the target random variable whose value we want to learn. The value of Y , which ranges among set Y = {y1, . . . , yt}, depends deterministically on another random variable Θ ∈ supp(Θ) = {θ1, . . . , θn} with some known distribution P [Θ]. Concretely, there is a deterministic mapping r : supp(Θ) → Y that gives Y = r(Θ). Let X = {X1, . . . , Xm} be a collection of discrete observable variables that are statistically dependent on Θ (see Fig. 1).\nWe use e ∈ V , {1, . . . ,m} as the indexing variable of a test. Performing each testXe produces an outcome xe ∈ O (here,O encodes the set of possible outcomes of a test), and incurs a unit cost. We can think of Θ as representing the underlying “root-cause” among a set of n possible root-causes of the joint event {X1, . . . , Xm}, and Y as representing the optimal “target action” to be taken for root-cause Θ. Also, each of the Xe’s is a “test” that we can perform, whose\nobservation reveals some information about Θ. In our medical diagnosis example (see Fig. 2(a)), Xe’s encode tests’ outcomes, Y encodes the treatment, and Θ encodes the patient’s physical condition.\nCrucially, we assume that Xe’s are conditionally independent given Θ, i.e., P [Θ, X1, . . . , Xm] = P [Θ] ∏m i=1 P [Xi | Θ] with known parameters. Note that noise is implicitly encoded in our model, as we can equivalently assume that Xe’s are first generated from a deterministic mapping of Θ, and then perturbed by some random noise. As an example, if test outcomes are binary, then we can think of Xe as resulting from flipping the deterministic outcome of test e given Θ with some probability, and the flipping events of the tests are mutually independent.\nProblem Statement We consider sequential, adaptive policies for picking the tests. Denote a policy by π. In words, a policy specifies which test to pick next, as well as when to stop picking tests, based on the tests picked so far and their corresponding outcomes. After each pick, our observations so far can be represented as a partial realization Ψ ∈ 2V×O (e.g., Ψ encodes what tests have been performed and what their outcomes are). Formally, a policy π : 2V×O 7→ V is defined to be a partial mapping from partial realizations Ψ to tests. Suppose that running π till termination returns a sequence of test-observation pairs of length k, denoted by ψπ, i.e., ψπ , {(eπ,1, xeπ,1), (eπ,2, xeπ,2), · · · , (eπ,k, xeπ,k)}. This can be interpreted as a random path1 taken by policy π. Once ψπ is observed, we obtain a new posterior on Θ (and consequently on Y ). After observing ψπ, the MAP estimator of Y has error probability pMAPERR (ψπ) , 1−maxy∈Y p(y | ψπ). The expected error probability after running policy π is then defined as pERR(π) , Eψπ [ pMAPERR (ψπ) ] . In words, pERR(π) is the expected error probability w.r.t. the posterior, given the final outcome of π. Let the (worst-case) cost of a policy π be cost(π) , maxψπ |ψπ|, i.e., the maximum number of tests performed by π over all possible paths it takes. Given some small tolerance δ ∈ [0, 1], we seek a policy with the minimal cost, such that upon termination, it will achieve expected error probability less than δ. Denote such policy by OPT(δ). Formally, we seek\nOPT(δ) ∈ arg min π cost(π), s.t. pERR(π) < δ. (2.1)"
    }, {
      "heading" : "2.1 Special Case: The Equivalence Class Determination Problem",
      "text" : "Note that computing the optimal policy for Problem (2.1) is intractable in general. When δ = 0, this problem reduces to the equivalence class determination problem (Golovin et al., 2010; Bellala et al., 2010). Here, the target variables are referred to as equivalence classes, since each y ∈ Y corresponds to a subset of root-causes in supp(Θ) that (equivalently) share the same “action”.\nIf tests are noise-free, i.e., ∀e, P [Xe | Θ] ∈ {0, 1}, this problem can be solved near-optimally by the equivalence class edge cutting (EC2) algorithm (Golovin et al., 2010). As is illustrated in Fig. 2, EC2 employs an edge-cutting strategy based on a weighted graph G = (supp(Θ), E), where vertices represent root-causes, and edges link root-causes that we want to distinguish between. Formally, E , {{θ, θ′} : r(θ) 6= r(θ′)} consists of all (unordered) pairs of root-causes corresponding to different target values (see Fig. 2(b)). We define a weight function w : E → R≥0 by w({θ, θ′}) , P [θ] · P [θ′], i.e., as the product of the probabilities of its incident root-causes. We extend the weight function on sets of edges E′ ⊆ E, as the sum of weight of all edges {θ, θ′} ∈ E′, i.e., w(E′) , ∑ {θ,θ′}∈E′ w({θ, θ′}).\nPerforming test e ∈ V with outcome xe is said to “cut” an edge, if at least one of its incident root-causes is inconsistent with xe (See Fig. 2(c)). Denote E(xe) , {{θ, θ′} ∈ E : P [xe | θ] = 0 ∨ P [xe | θ′] = 0} as the set of edges cut by observing xe. The EC2 objective (which is greedily maximized per iteration of EC2), is then defined as the total weight of edges cut by the current partial observation ψπ: fEC2(ψπ) , w (⋃ (e,xe)∈ψπ E(xe) ) .\n1What π returns in the end is random, dependent on the outcomes of selected tests.\nThe EC2 objective function is adaptive submodular, and strongly adaptive monotone (Golovin et al., 2010). Formally, let ψ1, ψ2 ∈ 2V×O be two partial realizations of tests’ outcomes. We call ψ1 a subrealization of ψ2, denoted as ψ1 ψ2, if every test seen by ψ1 is also seen by ψ2, and P [ψ2 | ψ1] > 0. A function f : 2V×O → R is called adaptive submodular w.r.t. a distribution P, if for any ψ1 ψ2 and any Xe it holds that ∆(Xe | ψ1) ≥ ∆(Xe | ψ2), where ∆(Xe | ψ) := Exe [f(ψ ∪ {(e, xe)})− f(ψ) | ψ] (i.e., “adding information earlier helps more”). Further, function f is called strongly adaptively monotone w.r.t. P, if for all ψ, test e not seen by ψ, and xe ∈ O, it holds that f(ψ) ≤ f(ψ ∪ {(e, xe)}) (i.e., “adding new information never hurts”). For sequential decision problems satisfying adaptive submodularity and strongly adaptive monotonicity, the policy that greedily, upon having observed ψ, selects the test e∗ ∈ arg maxe ∆(Xe | ψ), is guaranteed to attain near-minimal cost (Golovin & Krause, 2011).\nIn the noisy setting, however, we can no longer attain 0 error probability (or equivalently, cut all the edges constructed for EC2), even if we exhaust all tests. A natural approach to solving Problem (2.1) for δ > 0 would be to pick tests greedily maximizing the expected reduction in the error probability pERR. However, this objective is not adaptive submodular; in fact, as we show in the supplemental material, such policy can perform arbitrarily badly if there are complementaries among tests, i.e., the gain of a set of tests can be far better than sum of the individual gains of the tests in the set. Therefore, motivated by the EC2 objective in the noise-free setting, we would like to optimize a surrogate objective function which captures the effect of noise, while being amenable to greedy optimization.\n3 The ECED Algorithm\nWe now introduce ECED for Bayesian active learning under correlated noisy tests, which strictly generalizes EC2 to the noisy setting, while preserving the near-optimal guarantee.\nEC2 with Bayesian Updates on Edge Weights In the noisy setting, the test outcomes are not necessarily deterministic given a root-cause, i.e., ∀θ, P [Xe | θ] ∈ [0, 1]. Therefore, one can no longer “cut away” a root-cause θ by observing xe, as long as P [Xe = xe | θ] > 0. In such cases, a natural extension of the edge-cutting strategy will be – instead of cutting off edges – to discount the edge weights through Bayesian updates: After observing xe, we can discount the weight of an edge {θ, θ′}, by multiplying the probabilities of its incident root-causes with the likelihoods of the observation2: w({θ, θ′} | xe) := P [θ]P [θ′] · P [xe | θ]P [xe | θ′] = P [θ, xe] · P [θ′, xe]. This gives us a greedy policy that, at every iteration, picks the test that has the maximal expected reduction in total edge weight. We call such policy EC2-Bayes. Unfortunately, as we demonstrate later in §5, this seemingly promising update scheme is not ideal for solving our problem: it tends to pick tests that are very noisy, which do not help facilitate differentiation among different target values. Consider a simple example with three root-causes distributed as P [θ1] = 0.2,P [θ2] = P [θ3] = 0.4, and two target values r(θ1) = r(θ2) = y1, r(θ3) = y2. We want to evaluate two tests: (1) a purely noisy test X1, i.e., ∀θ, P [X1 = 1 | θ] = 0.5, and (2) a noiseless test X2 with P [X2 = 1 | θ1] = 1 and P [X2 = 1 | θ2] = P [X2 = 1 | θ3] = 0. One can easily verify that by running EC2-Bayes, one actually prefers X1 (with expected reduction in edge weight 0.18, as opposed to 0.112 for X2).\nThe ECED Algorithm The example above hints us on an important principle of designing proper objective functions for this task: as the noise rate increases, one must take reasonable precautions when evaluating the informativeness of a test, such that the undesired contribution by noise is accounted for. Suppose we have performed test e and observed xe. We call a root-cause θ to be “consistent” with observation xe, if xe is the most likely outcome of Xe given θ (i.e., xe ∈ arg maxx P [Xe = x | θ]). Otherwise, we say θ is inconsistent. Now, instead of discounting the weight of all root-causes by the likelihoods P [Xe = xe | θ] (as EC2-Bayes does), we choose to discount the root-causes by the likelihood ratio: λθ,xe ,\nP[Xe=xe|θ] maxx′e P[Xe=x′e|θ] . Intuitively, this is\nbecause we want to “penalize” a root-cause (and hence the weight of its incident edges), only if it is inconsistent with the observation (See Fig. 2(d)). When xe is consistent with root-cause θ, then λθ,xe = 1 and we do not discount θ; otherwise, if xe is inconsistent with θ, we have λθ,xe < 1. When a test is not informative for root-cause θ, i.e. P [Xe | θ] is uniform, then λθ,e = 1, so that it neutralizes the effect of such test in terms of edge weight reduction. Formally, given\n2Here we choose not to normalize the probabilities of θ, θ′ to their posterior probabilities. Otherwise, we can end up having 0 gain in terms of edge weight reduction, even if we perform a very informative test.\nAlgorithm 1: The Equivalence Class Edge Discounting (ECED) Algorithm 1 Input: [λθ,x]n×m (or Conditional Probabilities P [X | Θ]), Prior P [Θ], Mapping r : supp(Θ)→ Y;\nbegin 2 ψπ ← ∅; foreach (θ, θ′) ∈ E do 3 wθ,θ′ ← P [θ]P [θ′]; while pERR(ψπ) > δ do 4 e∗ ← arg maxe Exe [∑ {θ,θ′}∈E wθ,θ′ ( weight discounted︷ ︸︸ ︷ 1− λθ,xeλθ′,xe − offset term︷ ︸︸ ︷ (1−maxθ λ2θ,xe) )] ; 5 Observe xe∗ ; wθ,θ′ ← wθ,θ′ · P [xe∗ | θ]P [xe∗ | θ′]; 6 ψπ ← ψπ ∪ {(e∗, xe∗)}; 7 Output: y∗ = arg maxy P [y | ψπ].\nobservations ψπ , we define the value of observing xe as the total amount of edge weight discounted: δBS(xe | ψπ) , ∑ {θ,θ′}∈E P [θ, ψπ]P [θ′, ψπ] · (1− λθ,xeλθ′,xe).\nFurther, we call test e to be non-informative, if its outcome does not affect the distribution of Θ, i.e., ∀ θ, θ′ ∈ supp(Θ) and xe ∈ O, P [Xe = xe | θ] = P [Xe = xe | θ′]. Obviously, performing a non-informative test does not reveal any useful information of Θ (and hence Y ). Therefore, we should augment our basic value function δBS, such that the value of a non-informative test is 0. Following this principle, we define δOFFSET(xe | ψπ) , ∑ {θ,θ′}∈E P [θ, ψπ]P [θ′, ψπ]·(1−maxθ λ2θ,xe), as the offset value for observing outcome xe. It is easy to check that if test e is non-informative, then it holds that δBS(xe | ψπ)− δOFFSET(xe | ψπ) = 0 for all xe ∈ O; otherwise δBS(xe | ψπ)− δOFFSET(xe | ψπ) ≥ 0. This motivates us to use the following objective function:\n∆ECED(Xe | ψπ) , Exe [δBS(xe | ψπ)− δOFFSET(xe | ψπ)] , (3.1) as the expected amount of edge weight that is effectively reduced by performing test e. We call the algorithm that greedily maximizes ∆ECED the Equivalence Class Edge Discounting (ECED) algorithm, and present the pseudocode in Algorithm 1.\nSimilar with EC2, the efficiency (in terms of computation complexity as well as the query complexity) of ECED depends on the number of root-causes. Let θ,e , 1−maxx P [Xe = x | θ] be the noise rate for test e. As our main theoretical result, we show that under the basic setting where test outcomes are binary, and the test noise is independent of the underlying root-causes (i.e., ∀θ ∈ supp(Θ), θ,e = e), ECED is competitive with the optimal policy that achieves a lower error probability for Problem (2.1): Theorem 1. Fix δ ∈ (0, 1). To achieve expected error probability less than δ, it suffices to run ECED for O ( k cε ( log knδ log n δ )2) steps where n , | supp(Θ)| denotes the number of root-causes, cε , mine∈V(1− 2 e)2 characterizes the severity of noise, and k , cost (OPT(δopt)) is the worstcase cost of the optimal policy that achieves expected error probability δopt , O ( δ (logn·log(1/δ))2 ) .\nNote that a pessimistic upper bound for k is the total number of tests m, and hence the cost of ECED is at mostO ( (log(mn/δ) log(n/δ)) 2 /cε ) times the worst-case cost of the optimal algorithm, which achieves a lower error probability O ( δ/(log n · log(1/δ))2 ) . Further, as one can observe, the upper bound on the cost of ECED degrades as we increase the maximal noise rate of the tests. When cε = 1, we have e = 0 for all test e, and ECED reduces to the EC2 algorithm. Theorem 1 implies that running EC2 for O ( k ( log knδ log n δ )2) in the noise-free setting is sufficient to achieve pERR ≤ δ. Finally, notice that by construction ECED never selects any non-informative test. Therefore, we can always remove purely noisy tests (i.e., {e : ∀θ, P [Xe = 1 | θ] = P [Xe = 0 | θ] = 1/2}), so that cε > 0, and the upper bound in Theorem 1 becomes non-trivial."
    }, {
      "heading" : "4 Theoretical Analysis",
      "text" : "Information-theoretic Auxiliary Function We now present the main idea behind the proof of Theorem 1. In general, an effective way to relate the performance (measured in terms of the gain in the\ntarget objective function) of the greedy policy to the optimal policy is by showing that, the one-step gain of the greedy policy always makes effective progress towards approaching the cumulative gain of OPT over k steps. One powerful tool facilitating this is the adaptive submodularity theory, which imposes a lower bound on the one-step greedy gain against the optimal policy, given that the objective function in consideration exhibits a natural diminishing returns condition. Unfortunately, in our context, the target function to optimize, i.e., the expected error probability of a policy, does not satisfy adaptive submodularity. Furthermore, it is nontrivial to understand how one can directly relate the two objectives: the ECED objective of (3.1), which we utilize for selecting informative tests, and the gain in the reduction of error probability, which we use for evaluating a policy.\nWe circumvent such problems by introducing surrogate functions, as a proxy to connect the ECED objective ∆ECED with the expected reduction in error probability pERR. Ideally, we aim to find some auxiliary objective fAUX, such that the tests with the maximal ∆ECED also have a high gain in fAUX; meanwhile, fAUX should also be comparable with the error probability pERR, such that minimizing fAUX itself is sufficient for achieving low error probability.\nWe consider the function fAUX : 2V×O → R≥0, defined as\nfAUX(ψ) = ∑\n(θ,θ′)∈E P [θ | ψ]P [θ′ | ψ] · log 1\nP [θ | ψ]P [θ′ | ψ] + c ∑\ny∈Y H2 (P [y | ψ]) . (4.1)\nHere H2 (x) := −x log x− (1− x) log(1− x), and c is a constant that will be made concrete shortly (in Lemma 3). Interestingly, we show that function fAUX is intrinsically linked to the error probability:\nLemma 2. We consider the auxiliary function defined in Equation (4.1). Let n , | supp(Θ)| be the number of root-causes, and pMAPERR (ψ) be the error probability given partial realization ψ. Then\n2c · pMAPERR (ψ) ≤ fAUX(ψ) ≤ (3c+ 4) · ( H2 ( pMAPERR (ψ) ) + pMAPERR (ψ) log n ) .\nTherefore, if we can show that by running ECED, we can effectively reduce fAUX, then by Lemma 2, we can conclude that ECED also makes significant progress in reducing the error probability pMAPERR .\nBounding the Gain w.r.t. the Auxiliary Function It remains to understand how ECED interacts with fAUX. For any test e, we define ∆AUX(Xe | ψ) , Exe [fAUX(ψ ∪ {e, xe})− fAUX(ψ) | ψ] to be the expected gain of test e in fAUX. Let ∆EC2,ψ(Xe) denote the gain of test e in the EC\n2 objective, assuming that the edge weights are configured according to the posterior distribution P [Θ | ψ]. Similarly, let ∆ECED,ψ(Xe) denote the ECED gain, if the edge weights are configured according to P [Θ | ψ]. We prove the following result: Lemma 3. Let n = | supp(Θ)|, t = |Y|, and be the noise rate associated with test e ∈ V . Fix η ∈ (0, 1). We consider fAUX as defined in Equation (4.1), with c = 8 ( log(2n2/η) )2 . It holds that\n∆AUX(Xe | ψ) + cη, ≥ ∆ECED,ψ(Xe) · (1− )2/16 = c ∆EC2,ψ(Xe) ,\nwhere cη, = 2t(1− 2 )2η, and c , (1− 2 )2/16.\nLemma 3 indicates that the test being selected by ECED can effectively reduce fAUX.\nLifting the Adaptive Submodularity Framework Recall that our general strategy is to bound the one step gain in fAUX against the gain of an optimal policy. In order to do so, we need to show that our surrogate exhibits, to some extent, the diminishing returns property. By Lemma 3 we can relate ∆AUX(Xe | ψπ), i.e., the gain in fAUX under the noisy setting, to ∆EC2,ψ(Xe), i.e., the expected weight of edges cut by the EC2 algorithm. Since fEC2 is adaptive submodular, this allows us to lift the adaptive submodularity framework into the analysis. As a result, we can now relate the 1-step gain w.r.t. fAUX of a test selected by ECED, to the cumulative gain w.r.t. fEC2 of an optimal policy in the noise-free setting. Further, observe that the EC2 objective at ψ satisfies:\nfEC2,ψ := ∑\ny\nP [y | ψ] (1− P [y | ψ]) (a)\n≥ 1−max y P [y | ψ] = pMAPERR (ψ). (4.2)\nHereby, step (a) is due to the fact that the error probability of a MAP estimator always lower bounds that of a stochastic estimator (which is drawn randomly according to the posterior distribution of Y ).\nSuppose we want to compare ECED against an optimal policy OPT. By adaptive submodularity, we can relate the 1-step gain of ECED in fEC2,ψ to the cummulative gain of OPT. Combining Equation (4.2) with Lemma 2 and Lemma 3, we can bound the 1-step gain in fAUX of ECED against the k-step gain of OPT, and consequently bound the cost of ECED against OPT for Problem 2.1. We defer a more detailed proof outline and the full proof to the supplemental material."
    }, {
      "heading" : "5 Experimental Results",
      "text" : "We now demonstrate the performance of ECED on two real-world problem instances: a Bayesian experimental design task intended to distinguish among economic theories of how people make risky decisions, and an active preference learning task via pairwise comparisons. Due to space limitations, we defer a third case study on pool-based active learning to the supplemental material.\nBaselines. The first baseline we consider is EC2-Bayes, which uses the Bayes’ rule to update the edge weights when computing the gain of a test (as described in §3). Note that after observing the outcome of a test, both ECED and EC2-Bayes update the posteriors on Θ and Y according to the Bayes’ rule; the only difference is that they use different strategies when selecting a test. We also compare with two commonly used sequential information gathering policies: Information Gain (IG), and Uncertainty Sampling (US), which consider picking tests that greedily maximizing the reduction of entropy over the target variable Y , and root-causes Θ respectively. Last, we consider myopic optimization of the decision-theoretic value of information (VOI) (Howard, 1966). In our problems, the VOI policy greedily picks the test maximizing the expected reduction in prediction error in Y ."
    }, {
      "heading" : "5.1 Preference Elicitation in Behavioral Economics",
      "text" : "We first conduct experiments on a Bayesian experimental design task, which intends to distinguish among economic theories of how people make risky decisions. Several theories have been proposed in behavioral economics to explain how people make decisions under risk and uncertainty. We test ECED on six theories of subjective valuation of risky choices (Wakker, 2010; Tversky & Kahneman, 1992; Sharpe, 1964), namely (1) expected utility with constant relative risk aversion, (2) expected value, (3) prospect theory, (4) cumulative prospect theory, (5) weighted moments, and (6) weighted standardized moments. Choices are between risky lotteries, i.e., known distribution over payoffs (e.g., the monetary value gained or lost). A test e , (L1, L2) is a pair of lotteries, and root-causes Θ correspond to parametrized theories that predict, for a given test, which lottery is preferable. The goal, is to adaptively select a sequence of tests to present to a human subject in order to distinguish which of the six theories best explains the subject’s responses. We employ the same set of parameters used in Ray et al. (2012) to generate tests and root-causes. In particular, we have generated∼16K tests. Given root-cause θ and test e = (L1, L2), one can compute the values of L1 and L2, denoted by v1 and v2. Then, the probability that root-cause θ favors L1 is modeled as P [Xe = 1 | θ] = 11+exp(−λ·(v1−v2)) .\nResults Fig. 3(a) demonstrates the performance of ECED on this data set. The average error probability has been computed across 1000 random trials for all methods. We observe that ECED and EC2-Bayes have similar behavior on this data set; however, the performance of the US algorithm is much worse. This can be explained by the nature of the data set: it has more concentrated distribution over Θ, but not Y . Therefore, since tests only provide indirect information about Y through Θ, what the uncertainty sampling scheme tries to optimize is actually Θ, hence it performs quite poorly."
    }, {
      "heading" : "5.2 Preference Learning via Pairwise Comparisons",
      "text" : "The second application considers a comparison-based movie recommendation system, which learns a user’s movie preference (e.g., the favorable genre) by sequentially showing her pairs of candidate movies, and letting her choose which one she prefers. We use the MovieLens 100k dataset (Herlocker et al., 1999), which consists of a matrix of 1 to 5 ratings of 1682 movies from 943 users, and adopt the experimental setup proposed in Chen et al. (2015b). In particular, we extract movie features by computing a low-rank approximation of the user/rating matrix of the MovieLens 100k dataset through singular value decomposition (SVD). We then simulate the target “categories” Y that a user may be interested by partitioning the set of movies into t (non-overlapping) clusters in the Euclidean space. A root-cause Θ corresponds to user’s favorite movie, and tests e’s are given in the form of movie pairs, i.e., e , (ma,mb), where a and b are embeddings of movie ma and mb in Euclidean space. Suppose user’s movie is represented by θ, then test e is realized as 1 if a is closer to y than b, and 0 otherwise. We simulate the effect of noise by P [Xe = 1 | θ] = 11+exp(−λ·(d(ma,θ)−d(mb,θ))) . where d(·, ·) is the distance function, and λ control the level of noise in the system.\nResults Fig. 3(b) shows the performance of ECED compared other baseline methods, when we fix the size of Y to be 20 and λ to be 10. We compute the average error probability across 1000 random trials for all methods. We can see that ECED consistently outperforms all other baselines. Interestingly, EC2-Bayes performs poorly on this data set. This may be due to the fact that the noise level is still high, misguiding the two heuristics to select noisy, uninformative tests. Fig. 3(c) shows the performance of ECED as we vary λ. When λ = 100, the tests become close to deterministic given a root-cause, and ECED is able to achieve 0 error with ∼ 12 tests. As we increase the noise rate (i.e., decrease λ), it takes ECED many more queries for the prediction error to converge. This is because with high noise rate, ECED discounts the root-causes more uniformly, hence they are hardly informative in Y . This comes at the cost of performing more tests, and hence low convergence rate."
    }, {
      "heading" : "6 Related Work",
      "text" : "Active learning in statistical learning theory. In most of the theoretical active learning literature (e.g., Dasgupta (2004b); Hanneke (2007, 2014); Balcan & Urner (2015)), sample complexity bounds have been characterized in terms of the structure of the hypothesis class, as well as additional distribution-dependent complexity measures (e.g., splitting index (Dasgupta, 2004b), disagreement coefficient (Hanneke, 2007), etc); In comparison, in this paper we seek computationally-efficient approaches that are provably competitive with the optimal policy. Therefore, we do not seek to bound how the optimal policy behaves, and hence we make no assumptions on the hypothesis class.\nPersistent noise vs non-persistent noise. If tests can be repeated with i.i.d. outcomes, the noisy problem can then be effectively reduced to the noise-free setting (Kääriäinen, 2006; Karp & Kleinberg, 2007; Nowak, 2009). While the modeling of non-persistent noise may be appropriate in some settings (e.g., if the noise is due to measurement error), it is often important to consider the setting of persistent noise in many other applications. In many applications, repeating tests are impossible, or repeating a test produces identical outcomes. For example, it could be unrealistic to replicate a medical test for practical clinical treatment. Despite of some recent development in dealing with persistent noise in simple graphical models (Chen et al., 2015a) and strict noise assumptions (Golovin et al., 2010), more general settings, which we focus on in this paper, are much less understood."
    }, {
      "heading" : "7 Conclusion",
      "text" : "We have introduced ECED, which strictly generalizes the EC2 algorithm, for solving practical Bayesian active learning and experimental design problems with correlated and noisy tests. We have proved that ECED enjoys strong theoretical guarantees, by introducing an analysis framework that draws upon adaptive submodularity and information theory. We have demonstrated the compelling performance of ECED on two (noisy) problem instances, including an active preference learning task via pairwise comparisons, and a Bayesian experimental design task for preference elicitation in behavioral economics. We believe that our work makes an important step towards understanding the theoretical aspects of complex, sequential information gathering problems, and provides useful insight on how to develop practical algorithms to address noise."
    }, {
      "heading" : "A Table of Notations Defined in the Main Paper",
      "text" : "We summarize the notations used in the main paper in Table 1."
    }, {
      "heading" : "B The Analysis Framework",
      "text" : "In this section, we provide the proofs of our theoretical results in full detail. Recall that for the theoretical analysis, we study the basic setting where test outcomes are binary, and the test noise is independent of the underlying root-causes (i.e., given a test e, the noise rate on the outcome of test e is only a function of e, but not a function of θ)."
    }, {
      "heading" : "B.1 The Auxiliary Function and the Proof Outline",
      "text" : "The general idea behind our analysis, is to show that by running ECED, the one-step gain in learning the value of the target variable is significant, compared with the cumulative gain of an optimal policy over k steps (see Fig. 4).\nIn Appendix §C, we show that if tests are greedily selected to optimize the (reduction in) expected prediction error, we may end up failing to pick some tests, which have negligible immediate gain in terms of error reduction, but are very informative in the long run. ECED bypasses such an issue by selecting tests that maximally distinguish root-causes with different target values. In order to analyze ECED, we need to find an auxiliary function that properly tracks the “progress” of the ECED algorithm; meanwhile, this auxiliary function should allow us to connect the heuristic by which we select tests (i.e., ∆ECED), with the target objective of interest (i.e., the expected prediction error pERR).\nWe consider the auxiliary function defined in Equation (4.1). For brevity, we suppress the dependence of ψ where it is unambiguous. Further, we use pθ, pθ′ , and py as shorthand notations for P [θ | ψ], P [θ′ | ψ] and P [y | ψ]. Equation (4.1) can be simplified as\nfAUX = ∑\n(θ,θ′)∈E pθpθ′ log\n1\npθpθ′ + c\n∑ y∈Y H2 (py) (B.1)\nWe illustrate the outline of our proofs in Fig. 5. Our goal is to bound the cost of ECED against the cost of OPT (Theorem 1; proof provided in Appendix §B.6). As we have explained earlier, our strategy is to relate the one-step gain of ECED 1-step: AUX(e`+1 | `) with the gain of OPT in k-steps OPT: AUX (Appendix §B.5, Lemma 8). To achieve that, we divide our proof into three parts:\n1. We show that the auxiliary function fAUX is closely related with the target objective function pERR. More specifically, we provide both an upper bound Ub pMAPerr and a lower bound\nLb pMAPerr of fAUX in Lemma 2, and give the detailed proofs in Appendix §B.2.\n2. To analyze the one-step gain of ECED, we introduce another intermediate auxiliary function: For a test e`+1 chosen by ECED, we relate its one-step gain in the auxiliary function 1-step: AUX(Xe`+1 | `) , to its one-step gain in the EC2 objective 1-step: EC2, (\nLemma 3, detailed proof provided in Appendix §B.3). The reason why we introduce this step is that the EC2 objective is adaptive submodular , by which we can relate the 1-step gain of a greedy policy 1-step: EC2, to an optimal policy OPT: EC2, .\n3. To close the loop, it remains to connect the gain of an optimal policy OPT in the EC2 objective function OPT: EC2, , with the gain of OPT in the auxiliary function OPT: AUX . We show how to achieve this connection ( ) in Appendix §B.4, by\nrelating OPT: EC2, to the expected reduction in prediction error, and further in §B.5, by applying the upper bound Ub pMAPerr provided in §B.2.\nTo make the proof more accessible, we insert the annotated color blocks from Fig. 5 (i.e., Ub pMAPerr ,\nLb pMAPerr , 1-step: AUX(Xe`+1 | `) , 1-step: EC2, , OPT: EC2, , OPT: AUX , etc), into the subsequent subsections in Appendix §B, so that readers can easily relate different parts of this section to the proof outline. Note that we only use these annotated color blocks for positioning the proofs, and hence readers can ignore the notations, as it may slightly differ from the ones used in the proof.\nB.2 Proof of Lemma 2: Relating fAUX to pERR\nDefine pE(ψ) , ∑ y∈Y P [y | ψ] (1− P [y | ψ]) as the prediction error of a stochastic estimator upon observing ψ, i.e., the probability of mispredicting y if we make a random draw from P [Y | ψ]. We show in Lemma 4 that pMAPERR (ψ) is within a constant factor of pE(ψ):\nLemma 4. Fix ψ, it holds that pMAPERR (ψ) ≤ pE(ψ) ≤ 2pMAPERR (ψ).\nProof of Lemma 4. We can always lower bound pE by pMAPERR , since by definition, p MAP ERR (ψ) = 1 −\nmaxy P [y | ψ] = ∑ y∈Y P [y | ψ] · (1−maxy P [y | ψ]) ≤ ∑ y∈Y P [y | ψ] (1− P [y | ψ]) = pE(ψ).\nTo prove the second part, we write pyi = P [Y = yi | ψ] for all yi ∈ Y . W.l.o.g., we assume py1 ≥ py2 ≥ · · · ≥ pyt . Then pMAPERR = 1− py1 . We further have\n2pMAPERR = 2(1− py1) = 2( t∑\ni=2\npyi) = 2(\nt∑\ni=1\npyi)(\nt∑\ni=2\npyi) = 2(py1 +\nt∑\ni=2\npyi)(\nt∑\ni=2\npyi)\n≥ 2py1( t∑\ni=2\npyi) + (\nt∑\ni=2\npyi) 2\n≥ t∑\ni 6=j pyipyj =\n∑\ni\npyi(1− pyi) = pE\nNow, we provide lower and upper bounds of the second term in the RHS of Equation (B.1): Lemma 5. 2pMAPERR ≤ ∑ y∈Y H2 (py) ≤ 3(H2 ( pMAPERR ) + pMAPERR log n).\nProof of Lemma 5. We first prove the inequality on the left. Expanding the middle term involving the binary entropy of py , we get\n∑ y∈Y H2 (py) = ∑ y∈Y ( py log 1 py + (1− py) log 1 1− py )\n(a) ≥ 2\nln 2\n∑ y∈Y py(1− py)\n≥ 2pE Lemma 4 ≥ 2pMAPERR\nHere, step (a) is by inequality lnx ≥ 1− 1/x for x ≥ 0. To prove the second part, we first show in the following that\n∑ y(1− py) log 11−py ≤ 2 ∑ y py log 1 py .\nW.l.o.g., we assume that the probabilities py’s are in decreasing order, i.e., py1 ≥ py2 ≥ · · · ≥ pyt . Observe that if py ∈ [0, 1/2], then (1− py) log 11−py ≤ py log 1 py . Consider the following two cases:\n1. py1 ≤ 1/2. In this case, we have ∑ y(1− py) log 11−py ≤ ∑ y py log 1 py . 2. py1 > 1/2. Since ∑ i>1 pyi = 1− py1 , we have\n∑\ni\n(1− pyi) log 1\n1− pyi = (1− py1) log\n1 1− py1 + ∑\ni>1\n(1− pyi) log 1\n1− pyi\n= ∑\ni>1\npyi log 1∑ i>1 pyi + ∑\ni>1\n(1− pyi) log 1\n1− pyi\n≤ ∑\ni>1\npyi log 1 pyi + ∑\ni>1\n(1− pyi) log 1\n1− pyi\n≤ ∑\ni>1\npyi log 1 pyi + ∑\ni>1\npyi log 1\npyi\n≤ 2 ∑\ni>0\npyi log 1\npyi\nTherefore, ∑\ny∈Y H2 (py) ≤ 3\n∑\ni>0\npyi log 1\npyi = 3H (Y ) . (B.2)\nFurthermore, by Fano’s inequality (in the absence of conditioning), we know that H (Y ) ≤ H2 ( pMAPERR ) + pMAPERR log(|Y| − 1). Combining with Equation (B.2) we get\n∑\ny\nH2 (py) ≤ 3H (Y ) ≤ 3 ( H2 ( pMAPERR ) + log(|Y| − 1) ) (b) ≤ 3 ( H2 ( pMAPERR ) + log(n) )\nwhere in (b) we use the fact that t = |Y| ≤ | supp(Θ)| = n, since Y = r(Θ) is a function of Θ. Hence it completes the proof.\nNext, we bound the first term on the RHS of Equation (B.1), i.e., ∑ {θ,θ′}∈E pθpθ′ log 1 pθpθ′\n, against pMAPERR : Lemma 6. ∑ {θ,θ′}∈E pθpθ′ log 1 pθpθ′ ≤ 2(H2 (pE) + pE log n).\nProof of Lemma 6. We can expand the LHS as\nLHS = − ∑\nθ′\npθ′ ∑\nθ:r(θ)6=r(θ′) pθ(log pθ + log pθ′)\n= −2 ∑\nθ′\npθ′ ∑\nθ:r(θ)6=r(θ′) pθ log pθ\n= −2 ∑\ny∈Y\n∑\nθ′:r(θ′)=y\npθ′ ∑\nθ:r(θ) 6=y pθ log pθ\n= 2 ∑\ny∈Y py(1− py)\n∑\nθ:r(θ)6=y\npθ 1− py\n( log\npθ 1− py\n+ log (1− py) )\n= −2 ∑\ny∈Y py(1− py) log(1− py) + 2\n∑ y∈Y py(1− py)H\n({ pθ\n(1− py)\n}\nθ:r(θ)6=y\n) (B.3)\n≤ 2 ∑\ny∈Y pyH2 (1− py) + 2\n∑ y∈Y py(1− py)H\n({ pθ\n(1− py)\n}\nθ:r(θ)6=y\n)\nSince H ({\npθ (1−py) } θ:r(θ)6=y ) ≤ log t ≤ log n, we have\nLHS ≤ 2 ∑\ny∈Y pyH2 (1− py) + 2\n∑\ny py(1− py) log n︸ ︷︷ ︸ pE logn\nJensen ≤ 2H2\n ∑\ny∈Y py(1− py)\n + 2pE log n\n= 2 (H2 (pE) + pE log n) . which completes the proof.\nNow, we are ready to state the upper bound Ub pMAPerr and lower bound Lb pMAPerr of fAUX.\nProof of Lemma 2. Clearly, ∑ {θ,θ′}∈E pθpθ′ log 1 pθpθ′ ≥ 0. By Lemma 5 we get the lower bound:\nfAUX(ψ) ≥ 2c · pMAPERR (ψ). Now assume pMAPERR ≤ 1/4. By Lemma 4 we know pE ≤ 2pMAPERR , and H2 (pE) ≤ H2 ( 2pMAPERR ) ≤\n2H2 ( pMAPERR ) . Combining with Lemma 5 and Lemma 6, we get\nfAUX(ψ) ≤ 3c · ( H2 ( pMAPERR ) + pMAPERR log n ) + 4 (H2 (pE) + pE log n)\n≤ (3c+ 4) · ( H2 ( pMAPERR ) + pMAPERR log n ) ,\nwhich completes the proof."
    }, {
      "heading" : "B.3 Proof of Lemma 3: Bounding ∆AUX against ∆EC2 , ∆ECED",
      "text" : "In this section, we analyze the 1-step gain in the auxiliary function 1-step: AUX(Xe`+1 | `) , of any test e ∈ V . By the end of this section, we will show that it is lowered bounded by the one-step gain in the EC2 objective 1-step: EC2, .\nRecall that we assume test outcomes are binary for our analysis, and in the following of this section, we assume the outcome xe of test e is in {+,−} instead of {0, 1}, for clarity purposes.\nB.3.1 Notations and the Intermediate Goal\nh : Pr[{ }] q : Pr[{ } | Xe = ]p : Pr[{ } | Xe = +]\nFor brevity, we first define a few short-hand notations to simplify our derivation. Let p, q be two distributions on Θ, and h = h+p+ h−q be the convex combination of the two, where h+, h− ≥ 0 and h+ + h− = 1.\nIn fact, we are using p and q to refer to the posterior distribution over Θ after we observe the (noisy) outcome of some binary test e, and use h to refer to the distribution over Θ before we perform the test, i.e., pθ , P [θ | Xe = +], qθ , P [θ | Xe = −], and hθ , P [θ] = h+pθ + h−qθ, where h+ = P [Xe = +] and h− = P [Xe = −]. For yi ∈ Y , we use pi , ∑ θ:r(θ)=yi\npθ to denote the probability of yi under distribution p, and use qi , ∑ θ:r(θ)=yi\nqθ to denote the probability of yi under distribution q.\nFurther, given a test e, we define Θ+i , Θ − i to be the set of root-causes associated with target yi, whose favorable outcome of test e is + (for Θ+i ) and − (for Θ−i ). Formally, Θ+i , {θ : r(θ) = yi ∧ P [Xe = + | θ] ≥ 1/2} Θ−i , {θ : r(θ) = yi ∧ P [Xe = + | θ] < 1/2}\nWe then define Θ+ , ⋃ i∈{1,...,t}Θ + i , and Θ − , ⋃ i∈{1,...,t}Θ − i , to be the set of “positive” and “negative” root-causes for test e, respectively.\nLet αi, βi be the probability mass of the root-causes in Θ+i and Θ − i , i.e., αi , ∑ y∈Θ+i\nP [θ], and βi , ∑ y∈Θ−i P [θ] . We further define α , ∑ yi∈Y αi = ∑ θ∈Θ+ P [θ], and β , ∑ yi∈Y βy =∑\nθ∈Θ− P [θ], then clearly we have α+ β = 1. See Fig. 6 for illustration.\nNow, we assume that test e has error rate . That is, ∀θ, min{P [Xe = + | θ] ,P [Xe = − | θ]} = . Then, by definition of h+, h−, pi, qi, pθ, qθ, it is easy to verify that\nh+ = ᾱ+ β , h− = α + β̄\npi = αī+ βi\nh+ , qi =\nαi + βī\nh−\npθ = hθ ̄\nh+ , qθ =\nhθ h− , if θ ∈ Θ+i\npθ = hθ\nh+ , qθ =\nhθ ̄\nh− , if θ ∈ Θ−i (B.4)\nFor the convenience of readers, we summarize the notations provided above in Table 2.\nGiven root-causes θ and θ′, we use θ θ′ to denote that the values of the target variable Y associated with root-causes θ and θ′ are different, i.e., r(θ) 6= r(θ′). We can rewrite the auxiliary function (as defined in Equation (4.1)) as follows:\nfAUX = ∑\nθ θ′ hθhθ′ log\n1\nhθhθ′ + c\n∑\nyi∈Y H2 (hi) .\nIf by performing test e we observe Xe = +, we have\nfAUX((e,+)) = ∑\nθ θ′ pθpθ′ log\n1\npθpθ′ + c\n∑\nyi∈Y H2 (pi)\notherwise, if we observe Xe = −,\nfAUX((e,−)) = ∑\nθ θ′ qθqθ′ log\n1\nqθqθ′ + c\n∑\nyi∈Y H2 (qi)\nTherefore, the expected gain (i.e., 1-step: AUX(Xe`+1 | `) ) of performing test e is,\n∆AUX =\n1︷ ︸︸ ︷ ∑ θ θ′ hθhθ′ log 1 hθhθ′ − ( h+ ∑ θ θ′ pθpθ′ log 1 pθpθ′ + h− ∑ θ θ′ qθqθ′ log 1 qθqθ′ )\n+ c\n ∑\nyi∈Y H2 (hi)−\n h+ ∑\nyi∈Y H2 (pi) + h−\n∑\nyi∈Y H2 (qi)\n   \n︸ ︷︷ ︸ 2\n(B.5)\nIn the following, we derive lower bounds for the above two terms respectively."
    }, {
      "heading" : "B.3.2 A Lower Bound on Term 1",
      "text" : "Let gθ,θ′ , h+pθpθ′ + h−qθqθ′ . Then, we can rewrite Term 1 as,\nTerm 1 = ∑\nθ θ′ hθhθ′ log\n1 hθhθ′ − ∑\nθ θ′ gθ,θ′ log\n1\ngθ,θ′ ︸ ︷︷ ︸\nPart 1\n+ ∑\nθ θ′ gθ,θ′ log\n1 gθ,θ′ − ( h+ ∑\nθ θ′ pθpθ′ log\n1\npθpθ′ + h−\n∑ θ θ′ qθqθ′ log 1 qθqθ′\n)\n︸ ︷︷ ︸ Part 2\n(B.6)\nPart 1. We first provide a lower bound for part 1 of Equation (B.6).\nNotice that for concave function f(x) = x log 1x and δ < x, it holds that f(x)−f(x−δ) ≥ δ ∂f ∂x ∣∣ x = δ(log 1x − 1), then we get\n∑ θ θ′ hθhθ′ log 1 hθhθ′ − ∑ θ θ′ gθ,θ′ log 1 gθ,θ′ ≥ ∑ θ θ′ (hθhθ′ − gθ,θ′)\n( log 1 hθhθ′ − 1 )\nFurther, observe\nhθhθ′ − gθ,θ′ = (h+pθ + h−qθ)(h+pθ′ + h−qθ′)− (h+pθpθ′ + h−qθqθ′) = (h+pθ + h−qθ)(pθ′ + qθ′ − h−pθ′ − h+qθ′)− (h+pθpθ′ + h−qθqθ′) = h+h−pθ′qθ − h+h−pθ′pθ + h+h−pθqθ′ − h−h+qθ′qθ = −h+h−(pθ − qθ)(pθ′ − qθ′)\nCombining the above two equations gives us\nPart 1 ≥ ∑\nθ θ′ −h+h−(pθ − qθ)(pθ′ − qθ′)\n( log 1 hθhθ′ − 1 )\nFor any root-cause pair {θ, θ′} with θ θ′, and binary test e, there are only 4 possible combinations in terms of the root-causes’ favorable outcomes. Namely,\n1. Both θ and θ′ maps x to +, i.e., θ ∈ Θ+ ∧ θ′ ∈ Θ+.\nWe define such set of root-cause pairs with positive favorable outcomes as U(+,+) , {{θ, θ′} : θ ∈ Θ+ ∧ θ′ ∈ Θ+} (For other cases, we define U(−,−), U(+,−), U(−,+) in a similar way).\nIn this case, we have\n∑\n{θ,θ′}∈U(+,+)\n−h+h−(pθ − qθ)(pθ′ − qθ′) ( log 1 hθhθ′ − 1 )\nEq (B.4) =\n∑\n{θ,θ′}∈U(+,+)\n−h+h− ( hθ ̄\nh+ − hθ h−\n)( hθ′ ̄\nh+ − hθ′ h−\n)( log 1 hθhθ′ − 1 )\n=h+h− ( h−̄− h+̄ h+h− )2 ∑\n{θ,θ′}∈U(+,+)\n−hθhθ′ ( log 1 hθhθ′ − 1 )\n= β2 (1− 2 )2 h+h−\n∑\n{θ,θ′}∈U(+,+)\n−hθhθ′ ( log 1 hθhθ′ − 1 )\n= β2 (1− 2 )2 h+h−\n∑\n{θ,θ′}∈U(+,+)\n( −2hθhθ′ log 1\nhθ + hθhθ′\n)\n= β2 (1− 2 )2 h+h−\n ∑\nyi∈Y (α− αi)\n∑\nθ∈Θ+i\n−2hθ log 1 hθ + ∑\nyi∈Y αi(α− αi)\n \n= (1− 2 )2 h+h−\n −2β2 ∑\nyi∈Y (α− αi)\n∑\nθ∈Θ+i\nhθ log 1\nhθ + β2\n∑\nyi∈Y αi(α− αi)\n \n2. Both θ and θ′ maps x to −. Similarly, we get\n∑\n{θ,θ′}∈U(−,−)\n−h+h−(pθ − qθ)(pθ′ − qθ′) ( log 1 hθhθ′ − 1 )\n= (1− 2 )2 h+h−\n −2α2 ∑\nyi∈Y (β − βi)\n∑\nθ∈Θ−i\nhθ log 1\nhθ + α2\n∑\nyi∈Y βi(β − βi)\n \n3. θ maps x to +, θ′ maps x to −. We have\n∑\n(θ,θ′)∈U(+,−)\n−h+h−(pθ − qθ)(pθ′ − qθ′) ( log 1 hθhθ′ − 1 )\n= (1− 2 )2 h+h−\n αβ ∑\nyi∈Y (β − βi)\n∑\nθ∈Θ+i\nhθ log 1\nhθ + αβ\n∑\nyi∈Y (α− αi)\n∑\nθ∈Θ−i\nhθ log 1\nhθ − αβ\n∑\nyi∈Y αi(β − βi)\n \n4. θ maps x to −, θ′ maps x to +. By symmetry we have\n∑\n(θ,θ′)∈U(−,+)\n−h+h−(pθ − qθ)(pθ′ − qθ′) ( log 1 hθhθ′ − 1 )\n= ∑\n(θ,θ′)∈U(+,−)\n−h+h−(pθ − qθ)(pθ′ − qθ′) ( log 1 hθhθ′ − 1 )\nCombining the above four equations, we obtain a lower bound on Part 1:\nPart 1 ≥ (1− 2 ) 2\nh+h−\n −2β2 ∑\nyi∈Y (α− αi)\n∑\nθ∈Θ+i\nhθ log 1\nhθ + β2\n∑\nyi∈Y αi(α− αi)\n−2α2 ∑\nyi∈Y (β − βi)\n∑\nθ∈Θ−i\nhθ log 1\nhθ + α2\n∑\nyi∈Y βi(β − βi)\n+2αβ ∑\nyi∈Y (β − βi)\n∑\nθ∈Θ+i\nhθ log 1\nhθ + 2αβ\n∑\nyi∈Y (α− αi)\n∑\nθ∈Θ−i\nhθ log 1\nhθ − 2αβ\n∑\nyi∈Y αi(β − βi)\n \n= (1− 2 )2 h+h−\n   2αβ ∑\nyi∈Y (β − βi)− 2β2\n∑\nyi∈Y (α− αi)\n  ∑\nθ∈Θ+i\nhθ log 1\nhθ\n+  2αβ ∑\nyi∈Y (α− αi)− 2α2\n∑\nyi∈Y (β − βi)\n  ∑\nθ∈Θ−i\nhθ log 1\nhθ\n+β2 ∑\nyi∈Y αi(α− αi) + α2\n∑\nyi∈Y βi(β − βi)− 2αβ\n∑\nyi∈Y αi(β − βi)\n \n= (1− 2 )2 h+h−\n·  2 ∑\nyi∈Y β(βαi − αβi)\n∑\nθ∈Θ+i\nhθ log 1\nhθ + 2\n∑\nyi∈Y α(αβi − βαi)\n∑\nθ∈Θ−i\nhθ log 1 hθ − ∑\nyi∈Y (βαi − αβi)2\n \n= (1− 2 )2 h+h−\n·  2 ∑\nyi∈Y (βαi − αβi)\n βαi ∑\nθ∈Θ+i\nhθ αi log 1 hθ − αβi\n∑\nθ∈Θ−i\nhθ βi log 1 hθ\n − ∑\nyi∈Y (βαi − αβi)2\n \n(B.7)\nPart 2. Next, we will provide a lower bound on Part 2 of Equation (B.6).\nBy definition, we have\nPart 2 = ∑\nθ θ′ (h+pθpθ′ + h−qθqθ′) log\n1\nh+pθpθ′ + h−qθqθ′\n− ( h+ ∑\nθ θ′ pθpθ′ log\n1\npθpθ′ + h−\n∑ θ θ′ qθqθ′ log 1 qθqθ′\n)\n(a) ≥ h+h−\n2\n∑\nθ θ′\n(pθpθ′ − qθqθ′)2 pθpθ′ + qθqθ′\nHereby, step (a) is due to the strong concavity3 of f(x) = x log 1x . Similarly with the analysis of Part 1, we consider the four sets of {θ, θ′} pairs:\n1. {θ, θ′} ∈ U(+,+): both θ and θ′ maps x to +.\n3If f is strongly concave, then for t ∈ [0, 1], it holds that f(tx + (1 − t)y) − tf(x) − (1 − t)f(y) ≥ t(1−t)\n2 m(x− y)2, where m = min (|f ′′(x)|, |f ′′(y)|) .\nIn this case, we have\n∑\n(θ,θ′)∈U(+,+)\nh+h− 2 (pθpθ′ − qθqθ′)2 pθpθ′ + qθqθ′ ≥ ∑\n(θ,θ′)∈U(+,+)\nh+h− 2 ( √ pθpθ′ − √ qθqθ′) 2\nEq (B.4) =\n∑\n(θ,θ′)∈U(+,+)\nh+h− 2\n(√ hθ ̄\nh+\nhθ′ ̄ h+ − √ hθ h− hθ′ h− )2\n= ∑\n(θ,θ′)∈U(+,+)\nh+h− 2 hθhθ′\n( ̄\nh+ − h−\n)2\n= ∑\n(θ,θ′)∈U(+,+)\nh+h− 2\nhθhθ′ β2 (1− 2 )2\n(h+h−)2\n= (1− 2 )2 2h+h− β2 ∑\nyi∈Y αi(α− αi)\n2. (θ, θ′) ∈ U(−,−). Similarly, we get\n∑\n(θ,θ′)∈U(−,−)\nh+h− 2 (pθpθ′ − qθqθ′)2 pθpθ′ + qθqθ′ ≥ (1− 2 ) 2 2h+h− α2 ∑\nyi∈Y βi(β − βi)\n3. (θ, θ′) ∈ U(+,−): θ maps x to +, θ′ maps x to −. We have\n∑\n(θ,θ′)∈U(+,−)\nh+h− 2 (pθpθ′ − qθqθ′)2 pθpθ′ + qθqθ′ ≥ ∑\n(θ,θ′)∈U(+,+)\nh+h− 2\n(√ hθ ̄\nh+\nhθ′ h+ − √ hθ h− hθ′ ̄ h− )2\n= ∑\n(θ,θ′)∈U(+,+)\nh+h− 2 hθhθ′ ̄\n( 1\nh+ − 1 h−\n)2\n= (1− 2 )2 2h+h− ̄(α− β)2 ∑\nyi∈Y αi(β − βi)\n4. (θ, θ′) ∈ U(−,+): θ maps x to −, θ′ maps x to +. By symmetry we have\n∑\n(θ,θ′)∈U(+,−)\nh+h− 2 (pθpθ′ − qθqθ′)2 pθpθ′ + qθqθ′ ≥ (1− 2 ) 2 2h+h− ̄(α− β)2\n∑\nyi∈Y βi(α− αi)\nCombining the above four equations, we obtain a lower bound on Part 2:\nPart 2 ≥ ∑\n(θ,θ′)∈U(+,+)\nh+h− 2 (pθpθ′ − qθqθ′)2 pθpθ′ + qθqθ′ + ∑\n(θ,θ′)∈U(−,−)\nh+h− 2 (pθpθ′ − qθqθ′)2 pθpθ′ + qθqθ′\n+ ∑\n(θ,θ′)∈U(+,−)\nh+h− 2 (pθpθ′ − qθqθ′)2 pθpθ′ + qθqθ′ + ∑\n(θ,θ′)∈U(−,+)\nh+h− 2 (pθpθ′ − qθqθ′)2 pθpθ′ + qθqθ′\n= (1− 2 )2 2h+h−\n β2 ∑\nyi∈Y αi(α− αi) + α2\n∑\nyi∈Y βi(β − βi) + 2 ̄(α− β)2\n∑\nyi∈Y αi(β − βi)\n \n(B.8)"
    }, {
      "heading" : "B.3.3 A Lower Bound on Term 2",
      "text" : "Now we move on to analyze Term 2 of Equation (B.6). By strong concavity of f(x) = x log 1x + (1− x) log 11−x , we obtain\nTerm 2 = c ∑\nyi∈Y\n( hi log 1\nhi + (1− hi) log\n1\n1− hi − h+\n( pi log 1\npi + (1− pi) log\n1\n1− pi\n)\n− h− ( qi log 1\nqi + (1− qi) log\n1\n1− qi\n))\nfootnote 3 ≥ c · h+h−\n2\n∑\nyi∈Y\n(pi − qi)2 max{pi(1− pi), qi(1− qi)}\nPlugging in the definition of pi, qi from Equation (B.4), we get\nTerm 2 = c · h+h−\n2\n∑\nyi∈Y\n( αī+ βi\nh+ − αi + βī h−\n)2 1\nmax{pi(1− pi), qi(1− qi)}\n= c\n2h+h−\n∑\nyi∈Y\n((α + β̄)(αī+ βi )− (ᾱ+ β )(αi + βī))2 max{pi(1− pi), qi(1− qi)}\n= c\n2h+h−\n∑\nyi∈Y\n( αβi 2 + βαī 2 − αβī2 − βαi 2 )2\nmax{pi(1− pi), qi(1− qi)}\n= c(1− 2 )2\n2h+h−\n∑\nyi∈Y\n(βαi − αβi)2 max{pi(1− pi), qi(1− qi)}\n(B.9)"
    }, {
      "heading" : "B.3.4 A Combined Lower Bound for ∆AUX",
      "text" : "Now, combining Equation (B.7), (B.8), and (B.9), we can get a lower bound for ∆AUX:\n∆AUX ≥ (1− 2 )2 h+h− ·\n 2 ∑\nyi∈Y (βαi − αβi)\n βαi ∑\nθ∈Θ+i\nhθ αi log 1 hθ − αβi\n∑\nθ∈Θ−i\nhθ βi log 1 hθ\n \n− ∑\nyi∈Y (βαi − αβi)2\n \n+ (1− 2 )2 2h+h−\n β2 ∑\nyi∈Y αi(α− αi) + α2\n∑\nyi∈Y βi(β − βi) + 2 ̄(α− β)2\n∑\nyi∈Y αi(β − βi)\n \n+ c(1− 2 )2\n2h+h−\n∑\nyi∈Y\n(βαi − αβi)2 max{pi(1− pi), qi(1− qi)}\n(B.10)\nWe can rewrite Equation (B.10) as\n∆AUX ≥\n(1− 2 )2 4h+h−\n ∑\nyi∈Y (βαi − αβi)2 + β2\n∑\nyi∈Y αi(α− αi) + α2\n∑\nyi∈Y βi(β − βi) + 2 ̄(α− β)2\n∑\nyi∈Y αi(β − βi)\n \n︸ ︷︷ ︸ LB1\n+ (1− 2 )2 4h+h−\n β2 ∑\nyi∈Y αi(α− αi) + α2\n∑\nyi∈Y βi(β − βi) + 2 ̄(α− β)2\n∑\nyi∈Y αi(β − βi)\n+ 2c ∑\nyi∈Y\n(βαi − αβi)2 max{pi(1− pi), qi(1− qi)} − 5 ∑\nyi∈Y (βαi − αβi)2\n+ 8 ∑\nyi∈Y (βαi − αβi)\n βαi ∑\nθ∈Θ+i\nhθ αi log 1 hθ − αβi\n∑\nθ∈Θ−i\nhθ βi log 1 hθ\n   \n︸ ︷︷ ︸ LB2\n(B.11)"
    }, {
      "heading" : "B.3.5 Connecting ∆AUX with ∆EC2",
      "text" : "Next, we will show that term LB1 is lower-bounded by a factor of ∆EC2 (i.e., 1-step: EC2, ), while LB2 cannot be too much less than 0. Concretely, we will show\n• LB1 ≥ 116 (1− 2 ) 2 ∆EC2 , and\n• LB2 ≥ −2t (1− 2 )2 η, for η ∈ (0, 1).\nAt the end of this subsection, we will combine the above results to connect 1-step: AUX(Xe`+1 | `) with 1-step: EC2, (See Equation (B.18)).\nLB1 VS. ∆EC2 . We expand the EC2 gain 1-step: EC2, as\n∆EC2 = ∑\nyi∈Y (αi + βi)(1− αi − βi)− α\n∑\nyi∈Y αi(α− αi)− β\n∑\nyi∈Y βi(β − βi)\n= β ∑\nyi∈Y αi(α− αi) + α\n∑\nyi∈Y βi(β − βi) + 2\n∑\nyi∈Y αi(β − βi) (B.12)\nDefine\n   * , 16h+h−(1−2 )2 · LB1 = 4 (∑ yi∈Y (βαi − αβi) 2 + β2 ∑ yi∈Y αi(α− αi) + α2 ∑ yi∈Y βi(β − βi) +2 ̄(α− β)2∑yi∈Y αi(β − βi) ) # , h+h−∆EC2 = ( ̄(α− β)2 + αβ ) ( β ∑ yi∈Y αi(α− αi) + α ∑ yi∈Y βi(β − βi) + 2 ∑ yi∈Y αi(β − βi) )\nTo bound LB1 against 116 (1− 2 ) 2 ∆EC2 , it suffices to show * ≥ # . To prove the above inequality, we consider the following two cases:\n1. ̄(α− β)2 ≤ αβ. In this case, we have ̄(α− β)2 + αβ ≤ 2αβ. Then,\n* − # 2 ≥ * 2 − αβ\n β ∑\nyi∈Y αi(α− αi) + α\n∑\nyi∈Y βi(β − βi) + 2\n∑\nyi∈Y αi(β − βi)\n \n≥ β2(1 + β) ∑\nyi∈Y αi(α− αi) + α2(1 + α)\n∑\nyi∈Y βi(β − βi)− 2αβ\n∑\nyi∈Y αi(β − βi)\n+ ∑\nyi∈Y (βαi − αβi)2\n≥ β2 ∑\nyi∈Y αi(α− αi) + α2\n∑\nyi∈Y βi(β − βi)− 2αβ\n∑\nyi∈Y αi(β − βi) +\n∑\nyi∈Y (βαi − αβi)2\n= 0\n2. ̄(α− β)2 > αβ. W.l.o.g., we assume β ≤ α ≤ 1. By α+ β = 1 we get 2α ≥ 1. Observe the fact that ∑\nyi∈Y (βαi − αβi)2 = −β2\n∑\nyi∈Y αi(α− αi)− α2\n∑\nyi∈Y βi(β − βi) + 2αβ\n∑\nyi∈Y αi(β − βi) ≥ 0\nRearranging the terms in the above inequality, we get\nβ ∑\nyi∈Y αi(α− αi) ≤ 2α\n∑\nyi∈Y αi(β − βi) ≤ 2(αβ −\n∑\nyi∈Y αiβi) = 2\n∑\nyi∈Y αi(β − βi) (B.13)\nHence,\n# ≤ 2 ̄(α− β)2  β ∑\nyi∈Y αi(α− αi) + α\n∑\nyi∈Y βi(β − βi) + 2\n∑\nyi∈Y αi(β − βi)\n \n(B.13) ≤ 2 ̄(α− β)2  α ∑\nyi∈Y βi(β − βi) + 4\n∑\nyi∈Y αi(β − βi)\n \n2α≥1 ≤ 2 ̄(α− β)2  2α2 ∑\nyi∈Y βi(β − βi) + 4\n∑\nyi∈Y αi(β − βi)\n \n̄(α−β)2≤1 ≤ 4  2 ̄(α− β)2 ∑\nyi∈Y αi(β − βi) + α2\n∑\nyi∈Y βi(β − βi)\n \n≤ * Therefore, we get\nLB1 ≥ 1 16 (1− 2 )2 ∆EC2 (B.14)\nA lower bound on LB2. In the following, we will analyze LB2.\nLB2 ≥ (1− 2 ) 2\n4h+h−\n β2 ∑\nyi∈Y αi(α− αi) + α2\n∑\nyi∈Y βi(β − βi)− 5\n∑\nyi∈Y (βαi − αβi)2\n+ 2c2 ∑\nyi∈Y\n(βαi − αβi)2 max{pi(1− pi), qi(1− qi)}\n+ 8 ∑\nyi∈Y (βαi − αβi)\n βαi ∑\nθ∈Θ+i\nhθ αi log αi hθ + βαi log 1 αi − αβi\n∑\nθ∈Θ−i\nhθ βi log βi hθ − αβi log 1 βi\n \nFor brevity, define µi , αi/α, and νi , βi/β. We can simplify the above equation as\nLB2 ≥ α 2β2 (1− 2 )2\n4h+h−\n∑\nyi∈Y\n( µi(1− µi) + νi(1− νi)− 5(µi − νi)2 +\n2c2 (µi − νi)2 max{pi(1− pi), qi(1− qi)}\n+ 8(µi − νi)  µi ∑\nθ∈Θ+i\nhθ αi log αi hθ + µi log 1 µiα − νi\n∑\nθ∈Θ−i\nhθ βi log βi hθ − νi log 1 νiβ\n   \n(B.15)\nDenote the summand on the RHS of the above equation as LB2i. If for any yi ∈ Y we can lower bound LB2i, we can then bound the whole sum. Fix i. W.l.o.g., we assume µi ≥ νi. Then\nLB2i , µi(1− µi) + νi(1− νi)− 5(µi − νi)2 + 2c (µi − νi)2\nmax{pi(1− pi), qi(1− qi)}\n+ 8(µi − νi)  \n:≥ 0\nµi ∑\nθ∈Θ+i\nhθ αi log αi hθ + µi log 1 µiα − νi\n∑\nθ∈Θ−i\nhθ βi log βi hθ − νi log 1 νiβ\n \n≥ µi(1− µi) + νi(1− νi)− 5(µi − νi)2 + 2c (µi − νi)2\nmax{pi(1− pi), qi(1− qi)}\n− 8(µi − νi)  νi\n* ≤ log n ∑\nθ∈Θ−i\nhθ βi log βi hθ + νi log 1 νi + νi log 1 β\n \n≥ µi(1− µi) + νi(1− νi)− 5(µi − νi)2 − 8(µi − νi) ( νi log n\nβ + νi log\n1\nνi\n)\n+ 2c (µi − νi)2\nmax{pi(1− pi), qi(1− qi)}\nIn order to put a lower bound on the above terms, we first need to lower bound the term involving (µi−νi)2\nmax{pi(1−pi),qi(1−qi)} . Notice that pi = αi+βi /̄ α+β /̄ , and pi = αi /̄+βi α /̄+β . Therefore, min {µi, νi} ≤ pi, qi ≤ max {µi, νi}. We check three different cases:\n• µi ≥ νi ≥ 1/2, or νi ≤ µi ≤ 1/2. In this case, max{pi(1− pi), qi(1− qi)} ≤ max{µi(1− µi), νi(1− νi)}. Therefore,\nLB2i ≥ −5(µi − νi)2 − 8(µi − νi) ( νi log n\nβ + νi log\n1\nνi\n)\n+ 2c (µi − νi)2\nmax{µi(1− µi), νi(1− νi)} + µi(1− µi) + νi(1− νi)\n≥ −5(µi − νi)2 − 8(µi − νi) ( νi log n\nβ + νi log\n1\nνi\n)\n+ 2c (µi − νi)2\nmax{µi(1− µi), νi(1− νi)} + max{µi(1− µi), νi(1− νi)}\n≥ −5(µi − νi)2 − 8(µi − νi) ( νi log n\nβ + νi log\n1\nνi\n) + 2 √ 2c(µi − νi)\nµi−νi≤1/2 ≥ (µi − νi) ( 2 √ 2c− 5/2− 8 ( νi log n\nβ + νi log\n1\nνi\n))\n(a) ≥ (µi − νi) ( 2 √\n2c− 5/2− 8 log n β\n)\nHere, step (a) is due to the fact that f(x) = x log nβx is monotone increasing for n ≥ 3. When n < 3, we have µi = 1 and νi = 0 (otherwise, there is no uncertainty left in Y ) and hence the problem becomes trivial. • 1/n ≤ νi ≤ 1/2 ≤ µi.\nIn this case, we cannot replace pi, qi with µi or νi. However, notice that max{µi(1− µi), νi(1− νi)} ≤ 1/4, we have LB2i ≥ µi(1− µi) + νi(1− νi)− 5(µi − νi)2 − 8(µi − νi) ( νi log n\nβ + νi log\n1\nνi\n) + 8c (µi − νi)2\n= µi(1− µi) + νi(1− νi) + (µi − νi)2 + (8c− 6)(µi − νi)2\n− 8(µi − νi) ( νi log n\nβ + νi log\n1\nνi\n)\n= µi(1− νi) + νi(1− µi) + (8c− 6)(µi − νi)2 − 8(µi − νi) ( νi log n\nβ + νi log\n1\nνi\n)\n≥ µi(1− νi) + (8c− 6)(µi − νi)2 − 8(µi − νi) ( νi log n\nβ + νi log\n1\nνi\n) (B.16)\nνi≥1/n ≥ µi(1− νi) + (8c− 6)(µi − νi)2 − 8(µi − νi)νi log n2\nβ\nTo further simplify notation, we denote γ1 , 8c− 6, and γ2 , 8 log n 2\nβ . Then the above equation can be rewritten as\nLB2i ≥ µi(1− νi) + γ1(µi − νi)2 − γ2(µi − νi)νi\nIf µi − νi ≤ 12γ2 , then\nLB2i ≥ µi(1− νi) + γ1(µi − νi)2 − 1\n2γ2 γ2νi = µi(1− νi)− νi 2 ≥ 0\nOtherwise, if µi − νi > 12γ2 , we have\nLB2i ≥ µi(1− νi) + (µi − νi) (γ1(µi − νi)− γ2νi)\n> µi(1− νi) + (µi − νi) ( γ1 1\n2γ2 − γ2νi\n)\n> µi − νi\n2\n( γ1 γ2 − γ2 )\n• νi ≤ 1/n < 1/2 ≤ µi. In this case, we have\nLB2i Eq (B.16) ≥ µi(1− νi) + γ1(µi − νi)2 − 8(µi − νi) ( νi log n\nβ + νi log\n1\nνi\n)\n≥ µi(1− νi) + γ1(µi − νi)2 − 8(µi − νi) ( 1\nn log\nn β + log n n\n)\n= µi(1− νi) + γ1(µi − νi)2 − γ2 n (µi − νi) > µi(1− νi) + (µi − νi) ( γ1 n− 2\n2n − γ2 n\n)\n(a) ≥ µi − νi\n3\n(γ1 2 − γ2 )\n≥ µi − νi 3 ( γ1 γ2 − γ2 )\nStep (a) is due to the fact that 1/n < 1/2 and therefore n ≥ 3.\nPutting the above cases together, we obtain the following equations:\nLB2i ≥    (µi − νi) ( 2 √ 2c− 5/2− 8 log nβ ) if µi ≥ νi ≥ 1/2, or νi ≤ µi ≤ 1/2 0 if 1/n ≤ νi ≤ 1/2 ≤ µi, and µi − νi ≤ 12γ2 µi−νi 2 ( γ1 γ2 − γ2 ) if 1/n ≤ νi ≤ 1/2 ≤ µi, and µi − νi > 12γ2\nµi−νi 3 ( γ1 γ2 − γ2 ) if νi ≤ 1/n < 1/2 ≤ µi\nFix η ≥ 0. Let c = 8 ( log 2n 2\nη\n)2 , we have γ1 > ( 8 log n 2\nη\n)2 , and γ2 = 8 log n 2\nβ , so\nγ1 γ2 − γ2 =\n( √ γ1 − γ2)(√γ1 + γ2)\nγ2 > 8\n√ γ1 + γ2\nγ2 log\nβ\nη\nand thus we get\nLB2i ≥    8(µi − νi) log βη if µi ≥ νi ≥ 1/2, or νi ≤ µi ≤ 1/2 0 if 1/n ≤ νi ≤ 1/2 ≤ µi, and µi − νi ≤ 12γ2 4(µi−νi)(√γ1+γ2)\nγ2 log βη if νi ≤ 1/2 ≤ µi, and µi − νi > 12γ2\nThat is, if β ≥ η, we have LB2i ≥ 0 for all i ∈ {1, . . . , t}.\nOn the other hand, if β < η, we get 4( √ γ1+γ2)\nγ2 =\n4(log n 2 η +log n2 β )\nlog n 2\nβ ≤ 8, and therefore LB2i ≥ 8(µi − νi) log βη . Summing over all i ∈ {1, . . . , t}, we get that for β < η, it holds LB2 ≥ ∑yi∈Y |µi − νi| · 2α2β2(1−2 )2\nh+h− log βη . We hence get\nLB2 ≥ { −2t (1− 2 )2 αβ log ηαβ if αβ < η 0 if αβ ≥ η\nFurther relaxing the above condition by αβ log ηαβ ≤ η − αβ ≤ η, we obtain:\nLB2 ≥ −2t (1− 2 )2 η (B.17)\nCombining Equation (B.11), (B.14), and (B.17), we get\n∆AUX ≥ 1\n16 (1− 2 )2 ∆EC2 − 2t (1− 2 )2 η. (B.18)\nHence, we have related 1-step: AUX(Xe`+1 | `) to 1-step: EC2, , as stated in Lemma 3."
    }, {
      "heading" : "B.3.6 Bounding ∆AUX against ∆ECED",
      "text" : "To finish the proof for Lemma 3, it remains to bound ∆AUX against ∆ECED. In this subsection, we complete the proof of Lemma 3, by showing that ∆AUX(Xe | ψ) + 2t (1− 2 )2 η ≥ ∆ECED,ψ(Xe) /64. Recall that is the noise rate of test e. Let ρ = 1− be the discount factor for inconsistent root-causes. By the definition of ∆ECED in Equation (3.1), we first expand the expected offset value of performing test e:\nExe [δOFFSET(xe)] = ∑\nyi∈Y (αi + βi)(1− αi − βi)\n( 1− ρ2 ) .\nDenote γ = ( 1− ρ2 ) . Then, we can expand ∆ECED as\n∆ECED\n= ∑\nyi∈Y\n  (initial total edge weight)−(offset value)︷ ︸︸ ︷ (αi + βi)(1− αi − βi) (1− γ)\n− expected remaining weight after discounting︷ ︸︸ ︷ (h+(αi + ρβi)(α+ ρβ − αi − ρβi) + h−(βi + ραi)(β + ρα− βi − ραi))  \n= h+ ∑\nyi∈Y\n( −γαi(α− αi) + αi(β − βi)(1− γ − ρ) + βi(α− αi)(1− γ − ρ) + βi(β − βi)(1− γ − ρ2) )\n+ h− ∑\nyi∈Y\n( −γβi(β − βi) + βi(α− αi)(1− γ − ρ) + αi(β − βi)(1− γ − ρ) + αi(α− αi)(1− γ − ρ2) )\n= ∑\nyi∈Y\n( 2(1− γ − ρ)αi(β − βi) + ( h+(1− γ − ρ2)− h−γ ) βi(β − βi)\n+ ( h−(1− γ − ρ2)− h+γ ) αi(α− αi) )\nSince γ = (1−2 )(1− )2 , 1− γ − ρ2 = 1−2 1− , and 1− γ − ρ = ( 1−2 1− )2 , we have,\nh+(1− γ − ρ2)− h−γ = (α(1− ) + β ) 1− 2 1− − (α + β(1− )) (1− 2 ) (1− )2 = ( 1− 2 1− )2 α\nTherefore\n∆ECED = ( 1− 2 1−\n)2  α ∑\nyi∈Y βi(β − βi) + β\n∑\nyi∈Y αi(α− αi) + 2\n∑\nyi∈Y αi(β − βi)\n \n= ( 1− 2 1− )2 ∆EC2 (B.19)\nCombining Equation (B.19) with Equation (B.18) we obtain\n∆AUX + 2t (1− 2 )2 η ≥ (1− )2\n16 ∆ECED\n= 1\n16 (1− 2 )2 ∆EC2\nWith the results from Appendix §B.3.5 and §B.3.6, we therefore complete the proof of Lemma 3.\nB.4 Bounding the error probability: Noiseless vs. Noisy setting\nNow that we have seen how ECED interacts with our auxiliary function in terms of the one-step gain, it remains to understand how one can relate the one-step gain to the gain of an optimal policy OPT: AUX , over k steps. In this subsection, we make an important step towards this goal.\nSpecifically, we provide Lemma 7. Consider a policy π of length k, and assume that we are using a stochastic estimator (SE). Let p>E be the error probability of SE before running policy π, p ⊥ E,noisy be the average error probability of SE after running π in the noisy setting, and p⊥E,noiseless be the average error probability of SE after running π in the noiseless setting. Then\np⊥E,noiseless ≤ p⊥E,noisy\nProof of Lemma 7. Recall that a stochastic estimator predicts the value of a random variable, by randomly drawing from its distribution. Let π be a policy. We denote by pE(πφ) the expected error\nprobability of an stochastic estimator after observing πφ :\np⊥E,noisy = Eφ[pE(πφ)] = ∑\nφ\np(πφ) ∑\ny∈Y p(y | πφ)(1− p(y | πφ))\nwhere φ ∈ V ×O denotes a set of test-outcome pairs, and πφ denotes a path taken by π, given that it observes φ.\nNow, let us see what happens in the noiseless setting: we run π exactly as it is, but in the end compute the error probability of the noiseless setting (i.e., as if we know which test outcomes are corrupted by noise). Denote the noise put on the tests by Ξ, and the realized noise by ξ. We can imagine the noiseless setting through the following equivalent way: we ran the same policy π exactly as in the noisy setting. But upon completion of π we reveal what Ξ was. We thus have\np(y | πφ) = ∑\nΞ=ξ\np(y | πφ, ξ)p(ξ | π)\nThe error probability upon observing πφ and Ξ = ξ is\npE(πφ, ξ) = ∑\ny∈Y p(y | πφ, ξ)(1− p(y | πφ, ξ)).\nThe expected error probability in the noiseless setting after running π is\np⊥E,noiseless = Eφ,n[pE(πφ, ξ)] = ∑\nφ,n\np(πφ, ξ) ∑\ny∈Y p(y | πφ, ξ)(1− p(y | πφ, ξ)) (B.20)\nNow, we can relate p⊥E,noisy to p ⊥ E,noiseless.\np⊥E,noisy = ∑\nφ\np(πφ) ∑\ny∈Y p(y | πφ)(1− p(y | πφ))\n= ∑\nφ\np(πφ) ∑\ny∈Y\n∑\nξ\np(ξ | πφ)p(y | πφ, ξ)(1− ∑\nn\np(ξ | πφ)p(y | πφ, ξ))\n(a) ≥ ∑\nφ\np(πφ) ∑\ny∈Y\n∑\nξ\np(ξ | πφ)p(y | πφ, ξ)(1− p(y | πφ, ξ))\n= ∑\nφ,ξ\np(πφ, ξ) ∑\ny∈Y p(y | πφ, ξ)(1− p(y | πφ, ξ))\nwhere (a) is by Jensen’s inequality and the fact that f(x) = x(1− x) is concave. Combining with Equation (B.20) we complete the proof.\nEssentially, Lemma 7 implies that, in terms of the reduction in the expected prediction error of SE, running a policy in the noise-free setting has higher gain than running the exact same policy in the noisy setting. This result is important to us, since analyzing a policy in the noise-free setting is often easier. We are going to use Lemma 7 in the next section, to relate the gain of an optimal policy OPT: EC2, in the EC2 objective (which assumes tests to be noise-free), with the gain OPT: AUX in the auxiliary function (which considers noisy test outcomes).\nB.5 The Key Lemma: One-step Gain of ECED VS. k-step Gain of OPT\nNow we are ready to state our key lemma, which connects 1-step: AUX(Xe`+1 | `) to OPT: AUX . Lemma 8 (Key Lemma). Fix η, τ ∈ (0, 1). Let n = | supp(Θ)| be the number of root-causes, t = |Y| be the number of target values, OPT(δopt) be the optimal policy that achieves pERR(OPT(δopt)) ≤ δopt, and ψ` be the partial realization observed by running ECED with cost `. We denote by f avgAUX(`) := Eψ` [fAUX(ψ`)] the expected value of fAUX(ψ`) over all the paths ψ` at cost `. Assume that f avgAUX(`) ≤ δg. We then have\nf avgAUX(`)− f avgAUX(`+ 1) ≥ f avgAUX(`)− δopt\nk · c cδ + cη, .\nwhere k = cost(OPT(δopt))), cη, , 2t(1− 2 )2η, cδ , (6c+ 8) log(n/δg), c , 8 ( log(2n2/η) )2 , and c , (1− 2 )2/16.\nProof of Lemma 8. Let ψ` be a path ending up at level ` of the greedy algorithm. Recall that ∆EC2(Xe | ψ`) denotes the gain in fEC2 if we perform test e and assuming it to be noiseless (i.e., we perform edge cutting as if the outcome of test e is noiseless), conditioning on partial observation ψ`. Further, recall that ∆AUX(Xe | ψ`) denotes the gain in fAUX if we perform noisy test e after observing ψ` and perform Bayesian update on the root-causes.\nLet e = arg maxe′ ∆ECED(Xe′ | ψ`) be the test chosen by ECED, and ê = arg maxe′ ∆EC2(Xe′ | ψ`) be the test that maximizes ∆EC2 , then by Lemma 3 we know\n∆AUX(Xe | ψ`) + cη, ≥ (1− )2\n16 (∆ECED,ψ`(Xe))\n≥ (1− ) 2\n16 (∆ECED,ψ`(Xê))\n= 1\n16 (1− 2 )2 ∆EC2,ψ(Xê) (B.21)\nNote that ∆EC2,ψ`(Xe) is the EC2 gain of test e over the normalized edge weights at step `+ 1 in the noiseless setting. That is, upon observing ψ`, we create a new EC2 problem instance (by considering the posterior probability over root-causes at ψ`), and run (noiseless) greedy algorithm w.r.t. the EC2 objective on such problem instance. Recall that c , (1− 2 )/16. By adaptive submodularity of fEC2 (in the noiseless setting, see Golovin et al. (2010)), we obtain\nmax e ∆EC2,ψ(Xe)\nadaptive submodularity ≥ f>EC2,ψ` − E[f ⊥ EC2,ψ` ]\nk\nwhere by f>EC2,ψ` we mean the initial EC2 objective value given partial realization ψ`, and by E[f⊥EC2,ψ` ] we mean the expected gain in fEC2 when we run OPT (δopt). Note that OPT (δopt) has worst-case length k.\nNow, imagine that we run the policy OPT (δopt), and upon completion of the policy we can observe the noise. We consider the gain of such policy in fEC2 :\nf>EC2 − E[f⊥EC2 ] (a) = p>E − E[f⊥EC2 ] (b) ≥ p>E − p⊥E,noiseless.\nThe reason for step (a) is that the error probability of the stochastic estimator upon observing ψ`, i.e., p>E , is equivalent to the total amount of edge weight at ψ`, i.e., f > EC2,ψ`\n. The reason for step (b) is that under the noiseless setting (i.e., assuming we have access to the noise), the EC2 objective is always a lower-bound on the error probability of the stochastic estimator (due to normalization). Thus, E[f⊥EC2 ] ≤ p⊥E,noiseless. Hence we get\n∆AUX(Xe | ψ) + cη, ≥ c p>E,ψ` − p⊥E,noiseless,ψ`\nk .\nHere p>E,ψ` denotes the error probability under P [Y | ψ`], and p⊥E,noisy,ψ` denotes the expected error probability of running OPT (δopt) after ψ` in the noise-free setting. By Lemma 7 we get\n∆AUX(Xe | ψ) + cη, ≥ c p>E,ψ` − p⊥E,noisy,ψ`\nk ,\nwhere p⊥E,noisy,ψ` denotes the expected error probability of running OPT (δopt) after ψ` in the noisy setting. By (the lower bound in) Lemma 4, we know that p>E,ψ` = pE(ψ`) ≥ pMAPERR (ψ`), and hence\n∆AUX(Xe | ψ) + cη, ≥ c pMAPERR (ψ`)− δopt\nk ,\nTaking expectation with respect to ψ`, we get\nEψ` [∆AUX(Xe | ψ) + cη, ] ≥ c Eψ`\n[ pMAPERR (ψ`) ] − δopt\nk . (B.22)\nUsing (the upper bound in) Lemma 2, we obtain\nf avgAUX(`) = Eψ` [fAUX(ψ`)] ≤ (3c+ 4) ( Eψ` [ H2 ( pMAPERR (ψ`) )] + Eψ` [ pMAPERR (ψ`) ] log n )\n(a) ≤ (3c+ 4) ( H2 ( Eψ` [ pMAPERR (ψ`) ]) + Eψ` [ pMAPERR (ψ`) ] log n ) (B.23)\nwhere (a) is by Jensen’s inequality.\nSuppose we run ECED, and achieve expected error probability δg, then clearly before ECED terminates we have Eψ` [ pMAPERR (ψ`) ] ≥ δg. Assuming Eψ` [ pMAPERR (ψ`) ] ≤ 1/2, we have\nf avgAUX(`) ≤ (3c+ 4)Eψ` [ pMAPERR (ψ`) ]( 2 log\n1\nEψ` [pMAPERR (ψ`)] + log n\n)\n≤ (3c+ 4)Eψ` [ pMAPERR (ψ`) ]( 2 log 1\nδg + log n\n)\n≤ Eψ` [ pMAPERR (ψ`) ] · (6c+ 8) log n\nδg (B.24)\nwhich gives us\nEψ` [ pMAPERR (ψ`) ] ≥ f avg AUX(`)\n(6c+ 8) log nδg\ncδ,(6c+8) log nδg = f avgAUX(`)\ncδ . (B.25)\nCombining Equation (B.25) with Equation (B.22), we get\nf avgAUX(`)− f avgAUX(`+ 1) = Eψ` [∆AUX(e | ψ)]\n≥ c f avgAUX(`) cδ − δopt k − cη, = f avgAUX(`)− δoptcδ\nk · c cδ − cη,\nwhich completes the proof.\nB.6 Proof of Theorem 1: Near-optimality of ECED\nWe are going to put together the pieces from previous subsection, to give a proof of our main theoretical result (Theorem 1).\nProof of Theorem 1. In the following, we use both OPT[k] and OPT(δopt) to represent the optimal policy that achieves prediction error δopt, with worst-cast cost (i.e., length) k. Define S(π, φ) to be the (partial) realization seen by policy π under realization φ. With slight abuse of notation, we use f avgAUX ( OPT[k] ) := Eφ [ fAUX(S(OPT[k], φ)) ] to denote the expected value achieved by running OPT[k].\nAfter running OPT[k], we know by Lemma 2 that the expected value of fAUX is lower bounded by 2c · δopt. That is, δopt · cδ ≤ f avgAUX ( OPT[k] ) · cδ2c ≤ f avg AUX ( OPT[k] ) · 4 log(n/δg), where the last inequality is due to cδ , (6c+ 8) log nδg < 8c log n δg . We then have\nf avgAUX(`)− f avgAUX(`+ 1) Lemma 8 ≥ ( f avgAUX(`)− δopt · cδ ) · cε kcδ − cη,\n≥ ( f avgAUX(`)− f avgAUX ( OPT[k] ) · 4 log n\nδg ) · cε kcδ − cη, (B.26)\nLet ∆` , f avg AUX(`) − f avgAUX ( OPT[k] ) · 4 log nδg , so that Inequality (B.26) implies ∆` − ∆`+1 ≥\n∆` · c kcδ − cη, . From here we get ∆`+1 ≤ ( 1− c kcδ ) ∆` + cη, , and hence\n∆k′ ≤ (\n1− c kcδ\n)k′ ∆0 + k′∑\ni=0\n( 1− c\nkcδ\n)i · cη,\n(a) ≤ exp ( −k′ c\nkcδ\n) ∆0 +\n1− ( 1− c kcδ )k′\nc kcδ\n· cη,\n(b) ≤ exp ( −k′ c\nkcδ\n) ∆0 +\nkcδ c · cη,\nwhere step (a) is due to the fact that (1 − x)k′ ≤ exp(−k′x) for any x < 1, and step (b) is due to( 1− c kcδ )k′ > 0. It follows that\nf avgAUX(k ′)− f avgAUX ( OPT[k] ) · 4 log n\nδg ≤ exp\n( −k′ c\nkcδ\n) ∆0 +\nkcδ c · cη,\n≤ exp ( −k′ c\nkcδ\n)( f avgAUX(∅)− f avgAUX ( OPT[k] ) · 4 log n\nδg\n) + kcδ c · cη,\nThis gives us\nf avgAUX(k ′) ≤ f avgAUX(∅) · exp ( −k′ c\nkcδ\n)\n︸ ︷︷ ︸ UB1\n+ f avgAUX ( OPT[k] ) · 4 log n\nδg\n( 1− exp ( −k′ c\nkcδ\n))\n︸ ︷︷ ︸ UB2\n+ kcδ c · cη,\n︸ ︷︷ ︸ UB3\n(B.27)\nDenote the three terms on the RHS. of Equation (B.27) as UB1, UB2 and UB3, respectively. We get\n   UB1 Eq (B.23) ≤ (3c+ 4) (1 + log n) · exp ( −k′ c kcδ ) UB2 Eq (B.24) < (6c+ 8) · δopt log nδopt · 4 log n δg\nUB3 = k · (6c+ 8) log nδg · 2t(1−2 )2η 1 16 (1−2 )2 = (6c+ 8) · 32 · k · log nδg · tη\nNow we set { k′ , kcδcε · ln 8 logn δg\nδopt , δg\n64·36·logn·log 1δg ·log n δg\n(B.28)\nand obtain exp ( −k′ c kcδ ) = δg 8 logn . It is easy to verify that UB1 ≤ 2c · δg 4 , and UB2 ≤ 2c · δg 2 .\nWe further set\nη , δg16·32·kt·log nδg , (B.29)\nand obtain UB3 = 2c · δg4 . Combining the upper bound derived above for UB1, UB2, UB3, and by Equation (B.27), we get f avgAUX(k′) ≤ 2c · δg. By Lemma 2 we know that the error probability is upper bounded by pERR = Eψk′ [ pMAPERR (ψk′) ] ≤ f avg AUX(k ′) 2c ≤ δg. That is, with the cost k′ specified in Equation (B.28), ECED is guaranteed to achieve pERR ≤ δg. It remains to compute the (exact) value of k′. Combining the definition of c , 8 ( log(2n2/η) )2 and\ncδ , (6c+ 8) log(n/δg) with Equation (B.29) it is easy to verify that\ncδ ≤ c1 · ( log nk\nδg\n)2 · log n\nδg ,\nholds for some constant c1. Therefore by Equation (B.28),\nk′ ≤ k · c1 ( log nk\nδg\n)2 log n\nδg · 1 cε ln 8 log n δg = O\n( k\ncε\n( log nk\nδg\n)2( log n\nδg\n)2) .\nTo put it in words, it suffices to run ECED for O ( k cε ( log nkδg )2 ( log nδg )2) steps to have expected\nerror below δg, where k denotes the worst-case cost the optimal policy that achieves expected error\nprobability δopt , O (\nδg (logn·log(1/δg))2\n) ; hence the completion of the proof.\nC Examples When GBS and the Most Informative Policy Fail\nIn this section, we provide problem instances where GBS and/or the Most Informative Policy may fail, while ECED performs well. Since in the noise-free setting ECED is equivalent to EC2, it suffices to demonstrate the limitations of GBS and the most informative policy, even if we provide just examples that apply to the noise-free setting.\nC.1 A Bad Example for GBS: Imbalanced Equivalence Classes\nWe use the same example as provided in Golovin et al. (2010). Consider an instance with a uniform prior over n root-causes, θ1, . . . , θn, and two target values y1 = r(θ1) = . . . r(θn−1), and y2 = r(θn). There are tests V = {1, . . . , n} such that P [Xe = 1 | θi] = 1 {i = e} (all of unit cost). Here, 1 {·} is the indicator function. See Fig. 7 for illustration.\nNow, suppose we want to solve Problem (2.1) for δ = 1/n. Note that in the noise-free setting, the problem is equivalent to find a minimal cost policy π that achieves 0 prediction error, because once the error probability drops below 1/n we will know precisely which target value is realized.\nIn this case, the optimal policy only needs to select test n, however GBS may select tests {1, . . . , n} in order until running test e, where Θ = θe is the true root-cause. Given our uniform prior, it takes n/2 tests in expectation until this happens, so that GBS pays, in expectation, n/2 times the optimal expected cost in this instance. Note that in this example, ECED (equivalently, EC2) also selects test n, which is optimal."
    }, {
      "heading" : "C.2 A Bad Example for the Most Informative Policy: Treasure Hunt",
      "text" : "In this section, we provide a treasure-hunt example, in which the most informative policy pays Ω (n/ log(n)) times the optimal cost. This example is adapted from Golovin et al. (2010), where they show that the most informative policy (referred to as the Informative Gain policy), as well as the myopic policy that greedily maximizes the reduction in the expected prediction error (referred as the Value of Information policy), both perform badly, compared with EC2.\nConsider the problem instance in Fig. 8(a). Fix s > 0 to be some integer, and let t = |Y| = 2s. For each target value yi ∈ Y , there exists two root-causes, i.e., θi,1, θi,0, such that r(θi,1) = r(θi,0) = yi. Denote a root-causes as θi,o, if it belongs to target i and is indexed by o. We assume a uniform prior over the root-causes: {θi,o}i∈{1,...,t},o∈0,1.\nSuppose we want to solve Problem (2.1) for δ = 1/3. Similarly with §C.1, the problem is equivalent to find a minimal cost policy π that achieves 0 prediction error, because once the error probability drops below 1/3, we will know precisely which target value is realized.\nThere are three set of tests, and all of them have binary outcomes and unit cost. The first set V1 := {e0} contains one test e0, which tells us the value of o of the underlying root-cause θi,o. Hence for all i, Θ = θi,o ⇒ Xe0 = o (see Fig. 8(b)). The second set of tests are designed to help us quickly discover the index of the target value via binary search if we have already run e0, but to offer no information whatsoever (in terms of expected reduction in the prediction error, or expected reduction in entropy of Y ) if e0 has not yet been run. There are a total number of s tests in the second set V2 := {e1, e2, . . . , es}. For z ∈ {1, . . . , t}, let bk(z) be the kth least-significant bit of the binary encoding of z, so that z = ∑s k=1 2\nk−1bk(z). Then, if Θ = θi,o, then the outcome of test ek ∈ V2 is Xek = 1 {φk(i) = o} (see Fig. 8(c)). The third set of tests are designed to allow us to do a (comparatively slow) sequential search on the index of the the target values. Specifically, we have V3 := {eseq1 , . . . , eseqt }, such that Θ = θi,o ⇒ Xeseqk = 1 {i = k} (Fig. 8(d)). Now consider running the maximal informative policy π (the same analysis also applies to the value of information policy, which we omits from the paper). Note that in the beginning, no single test from V1 ∪ V2 results in any change in the distribution over Y , as it remains uniform no matter with test is performed. Hence, the maximal informative policy only picks tests from V3, which have non-zero (positive) expected reduction in the posterior entropy of Y . In the likely event that the test chosen is not the index of Y , we are left with a residual problem in which tests in V1 ∪ V2 still have no effect on the posterior. The only difference is that there is one less class, but the prior remains uniform. Hence our previous argument still applies, and π will repeatedly select tests in V3, until a test has an outcome of 1. In expectation, the cost of π is least cost(π) ≥ 1t ∑t z=1 z = t+1 2 . On the other hand, a smarter policy π∗ will select test e0 ∈ V1 first, and then performs a binary search by running test e1, . . . , es ∈ V2 to determine bk(i) for all 1 ≤ k ≤ s (and hence to determine the index i of Y ). Since the tests have unit cost, the cost of π∗ is cost(π∗) = s+ 1.\nSince t = 2s, and n = 2t = 2s+1, we conclude that\ncost(π) = t+ 1 2 > t 2 = n 4 s+ 1 log n =\nn\n4 log(n) cost(π∗)."
    }, {
      "heading" : "D Case Study: Pool-based Active Learning for Classification",
      "text" : "Experimental setup. To demonstrate the empirical performance of ECED, we further conduct experiments on two pool-based binary active classification tasks. In the active learning application, we can sequentially query from a pool of data points, and the goal is to learn a binary classifier, which achieves some small prediction error on the unseen data points from the pool, with the smallest number of queries as possible.\nActive Learning: Targets and Root-causes To discretize the hypotheses space, we use a noisy version of hit-and-run sampler as suggested in Chen & Krause (2013). Each hypothesis can be represented by a binary vector indicating the outcomes of all data points in the training set. Then, we construct an epsilon-net on the set of hypotheses (based on the Hamming distance between hypotheses). We obtain the equivalence classes for ECED, by assigning each hypothesis to its closest center of epsilon-ball, measured by their Hamming distances. Note that the Hamming distance between two hypotheses reflects the difference of prediction error. Consider epsilon-net of fixed radius ε. By construction, hypotheses that lie in the some equivalence classes are at most 2ε away from each other; therefore the hypotheses which are within the epsilon-ball of the optimal hypotheses are considered to be near-optimal. Using the terminology in this paper, hypotheses correspond to root-causes, and the groups of hypothesis correspond to the target variable of interest. Running ECED, ideally, will help us locate a near-optimal epsilon-ball as quickly as possible.\nBaselines. We compare ECED with the popular uncertainty sampling heuristic (UNC-SVM), which sequentially queries the data points which are the closest to the decision boundary of a SVM classifier. We also compare with the GBS algorithm, which sequentially queries the data points that maximally reduces the volume of the version space.\nIn Fig. 9(a), we demonstrate the different behaviors between GBS and EC2 on a 2-d plane. In this simple example, there are 4 color-coded equivalence classes: we first sample hypotheses uniformly within the unit circle, and then generate equivalence classes, by constructing an epsilon-net over the sampled hypotheses as previously described. Fig. 9(a) illustrates two tests (i.e., the gray lines intersecting the circles) selected by ECED and GBS, respectively. ECED primarily selects tests that best disambiguate the clusters, while GBS focuses on disambiguate individual hypotheses.\nResults. We evaluate ECED and the baseline algorithms on the UCI WDBC dataset (569 instances, 32-d) and Fourclass dataset (862 instances, 2-d). For ECED and GBS, we sample a fixed number of 1000 hypotheses in each random trial. For both instances we assume a constant error rate = 0.02 for all tests. Fig. 9(b) and Fig. 9(c) demonstrate that ECED is competitive with the baselines. Such results suggests that grouping of hypotheses could be beneficial when learning under noisy data."
    } ],
    "references" : [ {
      "title" : "Active learning–modern learning theory",
      "author" : [ "Balcan", "Maria-Florina", "Urner", "Ruth" ],
      "venue" : "Encyclopedia of Algorithms,",
      "citeRegEx" : "Balcan et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Balcan et al\\.",
      "year" : 2015
    }, {
      "title" : "Extensions of generalized binary search to group identification and exponential costs",
      "author" : [ "G. Bellala", "S. Bhavnani", "C. Scott" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Bellala et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Bellala et al\\.",
      "year" : 2010
    }, {
      "title" : "Decision trees for entity identification: Approximation algorithms and hardness results",
      "author" : [ "V.T. Chakaravarthy", "V. Pandit", "S. Roy", "P. Awasthi", "M. Mohania" ],
      "venue" : "SIGMOD/PODS,",
      "citeRegEx" : "Chakaravarthy et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Chakaravarthy et al\\.",
      "year" : 2007
    }, {
      "title" : "Bayesian experimental design: A review",
      "author" : [ "K. Chaloner", "I. Verdinelli" ],
      "venue" : "Statistical Science,",
      "citeRegEx" : "Chaloner and Verdinelli,? \\Q1995\\E",
      "shortCiteRegEx" : "Chaloner and Verdinelli",
      "year" : 1995
    }, {
      "title" : "Near-optimal batch mode active learning and adaptive submodular optimization",
      "author" : [ "Chen", "Yuxin", "Krause", "Andreas" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Chen et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2013
    }, {
      "title" : "Sequential information maximization: When is greedy near-optimal",
      "author" : [ "Chen", "Yuxin", "Hassani", "S. Hamed", "Karbasi", "Amin", "Krause", "Andreas" ],
      "venue" : "In COLT,",
      "citeRegEx" : "Chen et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2015
    }, {
      "title" : "Submodular surrogates for value of information",
      "author" : [ "Chen", "Yuxin", "Javdani", "Shervin", "Karbasi", "Amin", "Bagnell", "James Andrew", "Srinivasa", "Siddhartha", "Krause", "Andreas" ],
      "venue" : "In AAAI,",
      "citeRegEx" : "Chen et al\\.,? \\Q2015\\E",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2015
    }, {
      "title" : "Analysis of a greedy active learning strategy",
      "author" : [ "S. Dasgupta" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Dasgupta,? \\Q2004\\E",
      "shortCiteRegEx" : "Dasgupta",
      "year" : 2004
    }, {
      "title" : "Analysis of a greedy active learning strategy",
      "author" : [ "Dasgupta", "Sanjoy" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Dasgupta and Sanjoy.,? \\Q2004\\E",
      "shortCiteRegEx" : "Dasgupta and Sanjoy.",
      "year" : 2004
    }, {
      "title" : "Adaptive submodularity: Theory and applications in active learning and stochastic optimization",
      "author" : [ "Golovin", "Daniel", "Krause", "Andreas" ],
      "venue" : "JAIR,",
      "citeRegEx" : "Golovin et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Golovin et al\\.",
      "year" : 2011
    }, {
      "title" : "Near-optimal bayesian active learning with noisy observations",
      "author" : [ "Golovin", "Daniel", "Krause", "Andreas", "Ray", "Debajyoti" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Golovin et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Golovin et al\\.",
      "year" : 2010
    }, {
      "title" : "A bound on the label complexity of agnostic active learning",
      "author" : [ "Hanneke", "Steve" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Hanneke and Steve.,? \\Q2007\\E",
      "shortCiteRegEx" : "Hanneke and Steve.",
      "year" : 2007
    }, {
      "title" : "An algorithmic framework for performing collaborative filtering",
      "author" : [ "Herlocker", "Jonathan L", "Konstan", "Joseph A", "Borchers", "Al", "Riedl", "John" ],
      "venue" : "In SIGIR,",
      "citeRegEx" : "Herlocker et al\\.,? \\Q1999\\E",
      "shortCiteRegEx" : "Herlocker et al\\.",
      "year" : 1999
    }, {
      "title" : "Information value theory",
      "author" : [ "R.A. Howard" ],
      "venue" : "Systems Science and Cybernetics, IEEE Trans. on,",
      "citeRegEx" : "Howard,? \\Q1966\\E",
      "shortCiteRegEx" : "Howard",
      "year" : 1966
    }, {
      "title" : "Active learning in the non-realizable case",
      "author" : [ "Kääriäinen", "Matti" ],
      "venue" : "In Algorithmic Learning Theory, pp",
      "citeRegEx" : "Kääriäinen and Matti.,? \\Q2006\\E",
      "shortCiteRegEx" : "Kääriäinen and Matti.",
      "year" : 2006
    }, {
      "title" : "Noisy binary search and its applications",
      "author" : [ "Karp", "Richard M", "Kleinberg", "Robert" ],
      "venue" : "In SODA,",
      "citeRegEx" : "Karp et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Karp et al\\.",
      "year" : 2007
    }, {
      "title" : "On an optimal split tree problem",
      "author" : [ "Kosaraju", "S Rao", "Przytycka", "Teresa M", "Borgstrom", "Ryan" ],
      "venue" : "In Algorithms and Data Structures,",
      "citeRegEx" : "Kosaraju et al\\.,? \\Q1999\\E",
      "shortCiteRegEx" : "Kosaraju et al\\.",
      "year" : 1999
    }, {
      "title" : "Noisy generalized binary search",
      "author" : [ "Nowak", "Robert" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Nowak and Robert.,? \\Q2009\\E",
      "shortCiteRegEx" : "Nowak and Robert.",
      "year" : 2009
    }, {
      "title" : "Bayesian rapid optimal adaptive design (broad): Method and application distinguishing models of risky choice",
      "author" : [ "Ray", "Debajyoti", "Golovin", "Daniel", "Krause", "Andreas", "Camerer", "Colin" ],
      "venue" : "Tech. Report,",
      "citeRegEx" : "Ray et al\\.,? \\Q2012\\E",
      "shortCiteRegEx" : "Ray et al\\.",
      "year" : 2012
    }, {
      "title" : "Which uncertainty? using expert elicitation and expected value of information to design an adaptive program",
      "author" : [ "M.C. Runge", "S.J. Converse", "J.E. Lyons" ],
      "venue" : "Biological Conservation,",
      "citeRegEx" : "Runge et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Runge et al\\.",
      "year" : 2011
    }, {
      "title" : "Active Learning",
      "author" : [ "B. Settles" ],
      "venue" : null,
      "citeRegEx" : "Settles,? \\Q2012\\E",
      "shortCiteRegEx" : "Settles",
      "year" : 2012
    }, {
      "title" : "Capital Asset Prices: A Theory of Market Equilibrium under Conditions of Risk",
      "author" : [ "Sharpe", "William F" ],
      "venue" : "The Journal of Finance,",
      "citeRegEx" : "Sharpe and F.,? \\Q1964\\E",
      "shortCiteRegEx" : "Sharpe and F.",
      "year" : 1964
    }, {
      "title" : "The optimal control of partially observable markov processes over a finite horizon",
      "author" : [ "Smallwood", "Richard D", "Sondik", "Edward J" ],
      "venue" : "Operations Research,",
      "citeRegEx" : "Smallwood et al\\.,? \\Q1973\\E",
      "shortCiteRegEx" : "Smallwood et al\\.",
      "year" : 1973
    }, {
      "title" : "Advances in prospect theory: Cumulative representation of uncertainty",
      "author" : [ "Tversky", "Amos", "Kahneman", "Daniel" ],
      "venue" : "Journal of Risk and Uncertainty,",
      "citeRegEx" : "Tversky et al\\.,? \\Q1992\\E",
      "shortCiteRegEx" : "Tversky et al\\.",
      "year" : 1992
    }, {
      "title" : "Prospect Theory: For Risk and Ambiguity",
      "author" : [ "P.P. Wakker" ],
      "venue" : null,
      "citeRegEx" : "Wakker,? \\Q2010\\E",
      "shortCiteRegEx" : "Wakker",
      "year" : 2010
    } ],
    "referenceMentions" : [ {
      "referenceID" : 20,
      "context" : "The problem of optimal information gathering has been studied in the context of active learning (Dasgupta, 2004a; Settles, 2012), Bayesian experimental design (Chaloner & Verdinelli, 1995), policy making (Runge et al.",
      "startOffset" : 96,
      "endOffset" : 128
    }, {
      "referenceID" : 19,
      "context" : "The problem of optimal information gathering has been studied in the context of active learning (Dasgupta, 2004a; Settles, 2012), Bayesian experimental design (Chaloner & Verdinelli, 1995), policy making (Runge et al., 2011), optimal control (Smallwood & Sondik, 1973), and numerous other domains.",
      "startOffset" : 204,
      "endOffset" : 224
    }, {
      "referenceID" : 2,
      "context" : "Deriving the optimal testing policy is NP-hard in general (Chakaravarthy et al., 2007); however, under certain conditions, some approximation results are known.",
      "startOffset" : 58,
      "endOffset" : 86
    }, {
      "referenceID" : 16,
      "context" : ", in the noise-free setting), a simple greedy algorithm, namely Generalized Binary Search (GBS), is guaranteed to provide a near-optimal approximation of the optimal policy (Kosaraju et al., 1999).",
      "startOffset" : 173,
      "endOffset" : 196
    }, {
      "referenceID" : 9,
      "context" : "Golovin et al. (2010) then formalize this problem as an equivalence class determination problem (See §2.",
      "startOffset" : 0,
      "endOffset" : 22
    }, {
      "referenceID" : 10,
      "context" : "When δ = 0, this problem reduces to the equivalence class determination problem (Golovin et al., 2010; Bellala et al., 2010).",
      "startOffset" : 80,
      "endOffset" : 124
    }, {
      "referenceID" : 1,
      "context" : "When δ = 0, this problem reduces to the equivalence class determination problem (Golovin et al., 2010; Bellala et al., 2010).",
      "startOffset" : 80,
      "endOffset" : 124
    }, {
      "referenceID" : 10,
      "context" : ", ∀e, P [Xe | Θ] ∈ {0, 1}, this problem can be solved near-optimally by the equivalence class edge cutting (EC) algorithm (Golovin et al., 2010).",
      "startOffset" : 122,
      "endOffset" : 144
    }, {
      "referenceID" : 10,
      "context" : "The EC objective function is adaptive submodular, and strongly adaptive monotone (Golovin et al., 2010).",
      "startOffset" : 81,
      "endOffset" : 103
    }, {
      "referenceID" : 13,
      "context" : "Last, we consider myopic optimization of the decision-theoretic value of information (VOI) (Howard, 1966).",
      "startOffset" : 91,
      "endOffset" : 105
    }, {
      "referenceID" : 24,
      "context" : "We test ECED on six theories of subjective valuation of risky choices (Wakker, 2010; Tversky & Kahneman, 1992; Sharpe, 1964), namely (1) expected utility with constant relative risk aversion, (2) expected value, (3) prospect theory, (4) cumulative prospect theory, (5) weighted moments, and (6) weighted standardized moments.",
      "startOffset" : 70,
      "endOffset" : 124
    }, {
      "referenceID" : 18,
      "context" : "We employ the same set of parameters used in Ray et al. (2012) to generate tests and root-causes.",
      "startOffset" : 45,
      "endOffset" : 63
    }, {
      "referenceID" : 12,
      "context" : "We use the MovieLens 100k dataset (Herlocker et al., 1999), which consists of a matrix of 1 to 5 ratings of 1682 movies from 943 users, and adopt the experimental setup proposed in Chen et al.",
      "startOffset" : 34,
      "endOffset" : 58
    }, {
      "referenceID" : 4,
      "context" : ", 1999), which consists of a matrix of 1 to 5 ratings of 1682 movies from 943 users, and adopt the experimental setup proposed in Chen et al. (2015b). In particular, we extract movie features by computing a low-rank approximation of the user/rating matrix of the MovieLens 100k dataset through singular value decomposition (SVD).",
      "startOffset" : 130,
      "endOffset" : 150
    }, {
      "referenceID" : 7,
      "context" : ", Dasgupta (2004b); Hanneke (2007, 2014); Balcan & Urner (2015)), sample complexity bounds have been characterized in terms of the structure of the hypothesis class, as well as additional distribution-dependent complexity measures (e.",
      "startOffset" : 2,
      "endOffset" : 19
    }, {
      "referenceID" : 7,
      "context" : ", Dasgupta (2004b); Hanneke (2007, 2014); Balcan & Urner (2015)), sample complexity bounds have been characterized in terms of the structure of the hypothesis class, as well as additional distribution-dependent complexity measures (e.",
      "startOffset" : 2,
      "endOffset" : 64
    }, {
      "referenceID" : 10,
      "context" : ", 2015a) and strict noise assumptions (Golovin et al., 2010), more general settings, which we focus on in this paper, are much less understood.",
      "startOffset" : 38,
      "endOffset" : 60
    }, {
      "referenceID" : 9,
      "context" : "By adaptive submodularity of fEC2 (in the noiseless setting, see Golovin et al. (2010)), we obtain",
      "startOffset" : 65,
      "endOffset" : 87
    }, {
      "referenceID" : 9,
      "context" : "1 A Bad Example for GBS: Imbalanced Equivalence Classes We use the same example as provided in Golovin et al. (2010). Consider an instance with a uniform prior over n root-causes, θ1, .",
      "startOffset" : 95,
      "endOffset" : 117
    }, {
      "referenceID" : 9,
      "context" : "This example is adapted from Golovin et al. (2010), where they show that the most informative policy (referred to as the Informative Gain policy), as well as the myopic policy that greedily maximizes the reduction in the expected prediction error (referred as the Value of Information policy), both perform badly, compared with EC.",
      "startOffset" : 29,
      "endOffset" : 51
    } ],
    "year" : 2016,
    "abstractText" : "We consider the Bayesian active learning and experimental design problem, where the goal is to learn the value of some unknown target variable through a sequence of informative, noisy tests. In contrast to prior work, we focus on the challenging, yet practically relevant setting where test outcomes can be conditionally dependent given the hidden target variable. Under such assumptions, common heuristics, such as greedily performing tests that maximize the reduction in uncertainty of the target, often perform poorly. In this paper, we propose ECED, a novel, computationally efficient active learning algorithm, and prove strong theoretical guarantees that hold with correlated, noisy tests. Rather than directly optimizing the prediction error, at each step, ECED picks the test that maximizes the gain in a surrogate objective, which takes into account the dependencies between tests. Our analysis relies on an information-theoretic auxiliary function to track the progress of ECED, and utilizes adaptive submodularity to attain the near-optimal bound. We demonstrate strong empirical performance of ECED on two problem instances, including a Bayesian experimental design task intended to distinguish among economic theories of how people make risky decisions, and an active preference learning task via pairwise comparisons.",
    "creator" : "LaTeX with hyperref package"
  }
}