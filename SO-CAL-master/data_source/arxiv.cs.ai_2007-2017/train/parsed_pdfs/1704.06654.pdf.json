{
  "name" : "1704.06654.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "GOVERNING GOVERNANCE", "M. B. van Riemsdijk" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "GOVERNING GOVERNANCE"
    }, {
      "heading" : "A FORMAL FRAMEWORK FOR ANALYSING INSTITUTIONAL",
      "text" : "DESIGN AND ENACTMENT GOVERNANCE\nar X\niv :1\n70 4.\n06 65\n4v 1\n[ cs\n.A I]\n2 1\nA pr\n2 01\n7\nGOVERNING GOVERNANCE"
    }, {
      "heading" : "A FORMAL FRAMEWORK FOR ANALYSING INSTITUTIONAL DESIGN AND ENACTMENT GOVERNANCE",
      "text" : "Proefschrift\nter verkrijging van de graad van doctor aan de Technische Universiteit Delft,\nop gezag van de Rector Magnificus Prof. Ir. K.Ch.A.M. Luyben, voorzitter van het College voor Promoties,\nin het openbaar te verdedigen op donderdag 27 oktober 2016 om 10.00 uur\ndoor\nThomas Christopher KING\nBachelor of Science in Computer Science from King’s College London, United Kingdom geboren te Londen, Verenigd Koningkrijk\nThis dissertation has been approved by the promotors:\nPromotor: Prof. dr. C. M. Jonker Copromotor: Dr. M. V. Dignum Copromotor: Dr. M. B. van Riemsdijk\nComposition of the doctoral committee:\nRector Magnificus, chairman Prof. dr. C. M. Jonker, Delft University of Technology, promotor Dr. M. V. Dignum, Delft University of Technology, copromotor Dr. M. B. van Riemsdijk, Delft University of Technology, copromotor Independent members: Prof. dr. K. Atkinson, University of Liverpool Prof. dr. F. Brazier, Delft University of Technology Prof. dr. J. Pitt, Imperial College London Prof. dr. L. van der Torre, University of Luxembourg Reserve: Prof. dr. C. Witteveen Delft University of Technology\nSIKS Dissertation Series No. 2016-41 The research reported in this thesis has been carried out under the auspices of SIKS, the Dutch Research School for Information and Knowledge Systems. The research reported in this thesis was funded by the SHINE project of TU Delft.\nCopyright © 2016 by Thomas C. King\nISBN 978-94-6186-726-1\nAn electronic version of this dissertation is available at http://repository.tudelft.nl/\nSUMMARY\nThis dissertation is motivated by the need, in today’s globalist world, for a precise way to enable governments, organisations and other regulatory bodies to evaluate the constraints they place on themselves and others. An organisation’s modus operandi is enacting and fulfilling contracts between itself and its participants. Yet, organisational contracts should respect external laws, such as those setting out data privacy rights and liberties. Contracts can only be enacted by following contract law processes, which often require bilateral agreement and consideration. Governments need to legislate whilst understanding today’s context of national and international governance hierarchy where law makers shun isolationism and seek to influence one another. Governments should avoid punishment by respecting constraints from international treaties and human rights charters. Governments can only enact legislation by following their own, pre-existing, law making procedures. In other words, institutions, such as laws and contracts are designed and enacted under constraints.\nThe common thread shared by these examples is that institution designers, such as organisations and governments, are constrained in two senses. They are loosely tied in how the institutions they enact should be designed and strongly tied in how and when they can enact institutional changes. We can clearly see such constraints exist in written form, even though we cannot physically see how the machinery that applies and tightens those constraints around the institutional designers works. It is consequently hard to grasp exactly how institution designers need to operate under these constraints.\nThis dissertation addresses this issue by contributing a formal framework for analysing institutional design and enactment governance. Through formalisation, the framework provides a mathematically rigorous account of constraints placed on institutional designs and enacting institutional changes. Hence, the unseen constraints become seeable not as physical bindings, but as symbols on a page defining general institutional reasoning. From a conceptualisation standpoint, the main benefit is that we are able to understand the institutional constraints and identify any conceptual flaws. Or, in the words of Leibniz, “The only way to rectify our reasonings is to make them as tangible as those of the Mathematicians, so that we can find our error at a glance”.\nThere are three main practical benefits. Firstly, the formal reasoning is disseminated in clear mathematical language. Institution designers and judiciaries apply exactly the same reasoning, making judgements predictable, providing they share the same legal rule bases. Moreover, citizens can have common knowledge of when regulatory changes are enacted by applying the same institutional reasoning. Secondly, the framework facilitates automation of otherwise cognitively difficult tasks in understanding the constraints placed on institution designers. Thirdly, the framework deals with the pragmatics with applications to real world case studies, in order to capture the meaning of institutional constraints as they are used.\nIn summary, this dissertation introduces the PARAGon framework for Practical Automated Reasoning for Assessing Governance of institution design and change.\nCentral to the PARAGon framework is Searle’s well known institutional constitutive\ni\nii SUMMARY\ncounts-as rules of the form “A counts-as B in context C”. For example, “a piece of paper with certain European Union symbols counts-as money in the context of the European Union”. These rules build a social reality from brute facts and regulate social reality change when the brute facts change. PARAGon makes three main contributions founded on countsas rules.\nPARAGon contributes formalised reasoning for a governance architecture called multilevel governance where institutions operate at different governance levels. The lowest-level institutions prescribe concrete regulations to govern societies (e.g. national legislation), whilst higher-level level institutions impose abstract regulations on the concrete regulatory outcomes of lower-level institutions (e.g. directives, human rights charters and supranational agreements). The PARAGon framework derives from counts-as rules whether concrete regulations at lower governance levels can be applied in social contexts such that they violate abstract regulations as set out in directives, human rights charters, etcetera.\nPARAGon contributes a computational mechanism for finding explanations for noncompliant institution designs used to rectify non-compliance. The explanations are minimal counts-as rule additions, deletions and modifications that ensure compliance. Moreover, the explanations keep institution designs as close as possible to designers’ original intentions.\nPARAGon formalises constraints called secondary legal rules, which define when institutions and institutional changes can be enacted. PARAGon formalises such secondary rules as rule-modifying counts-as rules, which ascribe rule change at various points in time. For example, a government voting for a rule change counts-as enacting a rule change. Determining rule change legality is difficult, since changing counts-as rules alters social contexts, which rule changes are conditional on. PARAGon contributes formal reasoning for determining when rule changes count-as legal rule changes.\nThe PARAGon framework was developed under the SHINE (Sensing Heterogeneous Information Network Environment) project1, which aims to form large-scale heterogeneous sensor networks, using existing sensors in the environment belonging to external stakeholders. PARAGon aims to support automated governance for large scale heterogeneous ‘SHINE’ sensor networks. Firstly, by automating the application of multi-level governance to forming SHINE sensor super-systems of sub-systems, comprising a thin SHINE institution layer abstractly governing the design of sub-system institutions towards coordinated regulations for collecting environmental data collection. Secondly, PARAGon supports sensor network stakeholders with automated institution re-design recommendations to ensure the institutions are designed compliantly. Thirdly, PARAGon supports automated reasoning for how and when sensor system regulations are changed over time as different governance needs arise (e.g. as the data needs change or as it emerges existing rules are inadequate).\nThe PARAGon framework makes both formal and practical contributions. From the formal side, this dissertation aims to formalise previously informal notions provided by political science and legal philosophy. Particular attention is paid to understanding the new conceptualisations and testing them against a number of case studies to assess whether the formal contributions provide ‘correct’ inferences. From the practical side, the contributed reasoning is either coupled with an implementation or a computational characterisation of the formal concepts providing necessary details for implementation. This dissertation lies at the intersection of legal philosophy and symbolic artificial intelligence.\n1http://shine.tudelft.nl\nSAMENVATTING\nTen grondslag aan deze dissertatie ligt de behoefte in de hedendaagse globalistische wereld aan een precieze methode om overheden, organisaties en andere regelgevende instanties in staat te stellen de beperkingen die ze opleggen aan zichzelf en anderen te evalueren. De modus operandi van een organisatie bestaat uit het instantiëren en uitvoeren van verbintenissen tussen zichzelf en haar deelnemers. Organisationele verbintenissen dienen echter wel de externe wetgeving te respecteren, zoals de wetgeving waarin de rechten en vrijheden op het gebied van gegevensbescherming zijn neergelegd. Verbintenissen kunnen alleen worden geïnstantieerd door verbintenissenrechtelijke processen te volgen, die vaak bilaterale overeenstemming en afweging vereisen. Overheden moeten wetten opstellen en daarnaast inzicht hebben in de hedendaagse context van nationale en internationale governancehiërarchie waarin wetgevers isolationisme uit de weg gaan en elkaar proberen te beïnvloeden. Overheden dienen sancties te voorkomen door zich te houden aan de beperkingen die zijn opgelegd via internationale verdragen en mensenrechtenhandvesten. Overheden kunnen wetten alleen maar instantiëren door hun eigen, reeds bestaande wetgevingsprocedures te volgen. Met andere woorden: het ontwerpen en instantiëren van instituties, zoals wetten en verbintenissen, is onderworpen aan beperkingen.\nDe rode draad bij deze voorbeelden is dat ontwerpers van instituties, zoals organisaties en overheden, in twee opzichten beperkt zijn. Ze zijn lichtelijk gebonden in hoe de instituties die ze instantiëren moeten worden ontworpen, en sterk gebonden in hoe en wanneer ze institutionele veranderingen kunnen instantiëren. We zien duidelijk dat dergelijke beperkingen op schrift bestaan, ook al kunnen we niet fysiek zien hoe de machinerie werkt die de beperkingen toepast en ze rond de institutionele ontwerpers aantrekt. Derhalve is het moeilijk precies te begrijpen hoe ontwerpers van instituties moeten opereren te midden van deze beperkingen.\nDeze dissertatie gaat in op deze problematiek door een formeel raamwerk aan te reiken voor het analyseren van institutioneel ontwerp en instantiatie-governance. Door formalisering biedt het raamwerk een mathematisch rigoureus overzicht van de beperkingen die opgelegd zijn aan institutionele ontwerpen en instantiatie van institutionele veranderingen. Daarmee worden de onzichtbare beperkingen zichtbaar, niet in fysiek opzicht, maar als symbolen op een pagina waarop algemeen institutioneel redeneren wordt gedefinieerd. Vanuit het oogpunt van conceptualisatie is het grootste voordeel dat we in staat zijn de institutionele beperkingen te begrijpen en eventuele conceptuele tekortkomingen te identificeren. Oftewel, in de woorden van Leibniz, “De enige manier om onze redeneringen te corrigeren, is ze net zo tastbaar te maken als die van de Mathematici, zodat we een fout van ons in één oogopslag kunnen ontwaren”.\nEr zijn drie grote praktische voordelen. In de eerste plaats wordt formeel redeneren alom verspreid in heldere mathematische taal. Institutie-ontwerpers en rechters passen exact dezelfde redeneringen toe, waardoor uitspraken voorspelbaar worden, mits ze uitgaan van dezelfde juridische grondslagen. Bovendien kunnen burgers door toepassing van\niii\niv SAMENVATTING\ndezelfde institutionele redeneringen gemeenschappelijke kennis hebben van het moment waarop wijzigingen in regelgeving worden geïnstantieerd. In de tweede plaats faciliteert het raamwerk automatisering van anderszins cognitief lastige taken bij het begrijpen van de beperkingen die zijn opgelegd aan ontwerpers van instituties. In de derde plaats gaat het raamwerk in op de pragmatica middels toepassingen op casestudies uit de praktijk, om zo de betekenis van gehanteerde institutionele beperkingen te kunnen begrijpen.\nSamenvattend, introduceert deze dissertatie het PARAGon-raamwerk voor Practical Automated Reasoning for Assessing Governance met betrekking tot het ontwerpen en wijzigen van instituties.\nEen centrale plaats in het PARAGon-raamwerk wordt ingenomen door Searle’s welbekende institutionele constitutieve \"geldt als\"-regels in de vorm “A geldt in context C als B”. Voorbeeld: “een stuk papier met bepaalde aanduidingen van de Europese Unie geldt in de context van de Europese Unie als geld”. Deze regels bouwen een sociale realiteit van brute feiten op en reguleren veranderingen in de sociale realiteit wanneer de brute feiten veranderen. PARAGon levert drie hoofdbijdragen die gebaseerd zijn op geldt-alsregels. PARAGon biedt geformaliseerd redeneren voor een governance-architectuur, multilevel governance genaamd, waarbij instituten op meerdere governance-niveaus opereren. De instituties op het laagste niveau schrijven concrete reguleringen voor om samenlevingen te besturen (bijv. nationale wetgeving), terwijl instellingen op hoger niveau abstracte reguleringen opleggen met betrekking tot de concrete regulerende uitkomsten van lagere instituties (bijv. richtlijnen, mensenrechtenhandvesten en supranationale overeenkomsten). Het PARAGon-raamwerk leidt van geldt-als-regels af of concrete reguleringen op lagere governance-niveaus zodanig kunnen worden toegepast in sociale contexten dat ze een inbreuk vormen op abstracte reguleringen als neergelegd in richtlijnen, mensenrechtenhandvesten, enzovoort. PARAGon reikt een berekeningsmechanisme aan voor het vinden van verklaringen voor niet-compliante institutie-ontwerpen die gebruikt worden om non –compliantie te herstellen. De verklaringen zijn ten opzichte van geldt-als-regels minimale toevoegingen, verwijderingen en aanpassingen die zorgen voor compliantie. Verder houden de verklaringen de institutie-ontwerpen zo dicht mogelijk bij de oorspronkelijke bedoelingen van de ontwerpers.\nPARAGon formaliseert beperkingen, de zogenaamde secundaire rechtsregels, die definiëren wanneer instituties en institutionele wijzigingen geïnstantieerd kunnen worden. PARAGon formaliseert dergelijke secundaire regels als rule-modifying geldt-als-regels, die op verschillende momenten wijzigingen van regels toekennen. Een stemming in het parlement om een regel te wijzigen geldt bijvoorbeeld als het instantiëren van een regelwijziging. Het bepalen van de legaliteit van regelwijzigingen is lastig aangezien een verandering van geldt-als-regels leidt tot een verandering van sociale contexten, waar regelwijzigingen afhankelijk van zijn. PARAGon biedt een formele redenering voor het bepalen wanneer regelwijzigingen gelden als wijzigingen van rechtsregels.\nHet PARAGon-raamwerk is ontwikkeld in het kader van het project SHINE (Sensing Heterogeneous Information Network Environment)2, dat beoogt grootschalige heterogene sensornetwerken te vormen met behulp van bestaande sensoren in de omgeving die toebehoort aan externe belanghebbenden. PARAGon beoogt ondersteuning van geautomatiseerde governance voor grootschalige heterogene SHINE-sensornetwerken. In de eerste\n2http://shine.tudelft.nl\nSAMENVATTING v\nplaats door automatisering van de toepassing van multi-level governance op de vorming van SHINE sensor-supersystemen van subsystemen, bestaande uit een dunne SHINE institutielaag die op abstracte wijze het ontwerp van subsysteem-instituties aanstuurt richting gecoördineerde regulering voor het verzamelen van milieugegevens. In de tweede plaats ondersteunt PARAGon belanghebbenden in het sensornetwerk met aanbevelingen voor het geautomatiseerd herontwerpen van instituties om zo te waarborgen dat de instituties op compliante wijze worden ontworpen. In de derde plaats ondersteunt PARAGon geautomatiseerde redenering voor hoe en wanneer regels van sensorsystemen in de loop der tijd worden gewijzigd naarmate andere governance-behoeften ontstaan (bijv. als de data gewijzigd moeten worden of als blijkt dat bestaande regels ontoereikend zijn).\nHet PARAGon-raamwerk levert zowel formele als praktische bijdragen. In formeel opzicht streeft deze dissertatie naar het formaliseren van voorheen informele noties die vanuit de politieke wetenschap en de rechtsfilosofie werden aangeleverd. Bijzondere aandacht wordt besteed aan het begrijpen van de nieuwe conceptualisaties en het toetsen ervan aan een aantal casestudies teneinde te beoordelen of de formele bijdragen resulteren in ‘correcte’ inferenties. In praktisch opzicht wordt de aangedragen redenering gekoppeld aan ofwel een implementatie ofwel een rekenkundige karakterisering van de formele concepten die de noodzakelijke details aanleveren voor implementatie. Deze dissertatie bevindt zich op het raakvlak van rechtsfilosofie en symbolische artificiële intelligentie.\nCONTENTS\nSummary i\nSamenvatting iii\nList of Figures xi\nList of Tables xiii"
    }, {
      "heading" : "1 Introduction 1",
      "text" : "1.1 Research Questions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 1.2 Research Approach. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 1.3 The SHINE Project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 1.4 Dissertation Outline . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 1.5 List of Publications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16"
    }, {
      "heading" : "2 Background 17",
      "text" : "2.1 Agents and Multi–agent Systems . . . . . . . . . . . . . . . . . . . . . . 18 2.2 Governing Multi–Agent Systems . . . . . . . . . . . . . . . . . . . . . . 21\n2.2.1 Institutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 2.2.2 Norms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 2.2.3 Governing Institutional Design and Enactment . . . . . . . . . . . 25\n2.3 Formal Foundations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 2.4 Formal Approaches. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n2.4.1 Standard Deontic Logic . . . . . . . . . . . . . . . . . . . . . . 32 2.4.2 Anderson’s Reduction . . . . . . . . . . . . . . . . . . . . . . . 34 2.4.3 Temporal Deontic Logics . . . . . . . . . . . . . . . . . . . . . . 35 2.4.4 Seinsollen and Tunsollen: Ought–to–be and Ought–to–do. . . . . . 36\n2.5 Practical Formal Governance . . . . . . . . . . . . . . . . . . . . . . . . 37 2.5.1 Organisational Frameworks. . . . . . . . . . . . . . . . . . . . . 37 2.5.2 Institutional Frameworks . . . . . . . . . . . . . . . . . . . . . . 39 2.6 Knowledge Gaps and Approach . . . . . . . . . . . . . . . . . . . . . . 40 2.7 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42"
    }, {
      "heading" : "3 Formalising Compliance in Multi–level Governance 45",
      "text" : "3.1 Approach. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 3.2 Formal Representation . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 3.3 Case Study Formalisation. . . . . . . . . . . . . . . . . . . . . . . . . . 58 3.4 Semantics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 3.5 Related Work. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n3.5.1 Hierarchical Governance . . . . . . . . . . . . . . . . . . . . . . 77 3.5.2 Abstracting Norms . . . . . . . . . . . . . . . . . . . . . . . . . 79\nvii\nviii CONTENTS\n3.6 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80"
    }, {
      "heading" : "4 Computational Multi–level Governance Compliance Checking 83",
      "text" : "4.1 Preliminaries – Answer Set Programming. . . . . . . . . . . . . . . . . . 85 4.2 Approach. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 4.3 Computational Framework . . . . . . . . . . . . . . . . . . . . . . . . . 90\n4.3.1 Multi–level Governance Institution ASP Representation . . . . . . 90 4.3.2 Deontological Counts–as ASP Representation . . . . . . . . . . . 92 4.3.3 Multi–level Governance Semantics ASP Representation . . . . . . 97\n4.4 Executed Case Study . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 4.5 Computational Framework Soundness and Completeness . . . . . . . . . . 104 4.6 Related Work. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107 4.7 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110"
    }, {
      "heading" : "5 Explanatory Rectifications for Non–compliant Institutions 111",
      "text" : "5.1 Approach. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\n5.1.1 Multi–tier Institutions . . . . . . . . . . . . . . . . . . . . . . . 113 5.1.2 Formal Representation . . . . . . . . . . . . . . . . . . . . . . . 115 5.1.3 Case Study . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117 5.1.4 Multi–Tier Institution Operationalisation in ASP . . . . . . . . . . 120 5.1.5 Executed Case Study . . . . . . . . . . . . . . . . . . . . . . . . 122 5.1.6 Inductive Logic Programming: A brief overview . . . . . . . . . . 124\n5.2 Revising Institutions For Compliance . . . . . . . . . . . . . . . . . . . . 124 5.2.1 Revising Institutions to be Compliant is an ILP Theory Revision\nTask Instance. . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 5.2.2 Solving ILP Institution Revision in ASP . . . . . . . . . . . . . . 127 5.2.3 Implementation and Results . . . . . . . . . . . . . . . . . . . . 129\n5.3 Related Work. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131 5.4 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132"
    }, {
      "heading" : "6 Formalising Institutional Enactment Validity 135",
      "text" : "6.1 Comparison with InstAL . . . . . . . . . . . . . . . . . . . . . . . . . . 137 6.2 Representation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139 6.3 Semantics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\n6.3.1 Institutional Change . . . . . . . . . . . . . . . . . . . . . . . . 141 6.3.2 Models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\n6.4 Case Studies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147 6.4.1 Related Work. . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\n6.5 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153"
    }, {
      "heading" : "7 Application 155",
      "text" : "7.1 Contractually Crowdsensing Rain Data . . . . . . . . . . . . . . . . . . . 156\n7.1.1 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158 7.2 System Overview. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159 7.3 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161\nCONTENTS ix"
    }, {
      "heading" : "8 Conclusions 163",
      "text" : "8.1 Discussion of Results. . . . . . . . . . . . . . . . . . . . . . . . . . . . 164 8.2 Applying the Research to the SHINE Project . . . . . . . . . . . . . . . . 172 8.3 Future Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\n8.3.1 Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174 8.3.2 Improvements . . . . . . . . . . . . . . . . . . . . . . . . . . . 175 8.3.3 New Research Lines . . . . . . . . . . . . . . . . . . . . . . . . 178\n8.4 Closing Remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181"
    }, {
      "heading" : "9 Appendices 183",
      "text" : "References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184\nAcknowledgements 203\nCurriculum Vitae 205\nLIST OF FIGURES\n1.1 Dissertation overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n2.1 High–level multi–level governance overview . . . . . . . . . . . . . . . . . . 26 2.2 The deontic square of opposition . . . . . . . . . . . . . . . . . . . . . . . . . 33\n3.1 Multi–level Governance reasoning overview . . . . . . . . . . . . . . . . . . 50 3.2 Multi–level governance abstraction semantics example . . . . . . . . . . . . 51 3.3 Modal norm discharge and violation . . . . . . . . . . . . . . . . . . . . . . . 52 3.4 Multi–level governance semantics definitional overview . . . . . . . . . . . . 64 3.5 Deontological counts–as semantics overview . . . . . . . . . . . . . . . . . . 67\n4.1 Multi–level governance case study execution . . . . . . . . . . . . . . . . . . 100\n5.1 Multi–tier institution schema . . . . . . . . . . . . . . . . . . . . . . . . . . . 114 5.2 Example trace as input for finding non–compliance explanations . . . . . . . 123 5.3 Compiler for finding non–compliance explanations overview . . . . . . . . . 130\n6.1 Institutional enactment governance case 6.4.1 . . . . . . . . . . . . . . . . . . 148 6.2 Institutional enactment governance case 6.4.2 . . . . . . . . . . . . . . . . . . 149 6.3 Institutional enactment governance case 6.4.4 . . . . . . . . . . . . . . . . . . 151 6.4 Institutional enactment governance case 6.4.5 . . . . . . . . . . . . . . . . . . 152\n7.1 Simulated application architecture . . . . . . . . . . . . . . . . . . . . . . . . 160 7.2 Prototype simulated crowdsensing system visualisation . . . . . . . . . . . . 161\nxi\nLIST OF TABLES\n2.1 Existing knowledge comparison . . . . . . . . . . . . . . . . . . . . . . . . . 41\n3.1 Charter of Fundamental Rights formalisation . . . . . . . . . . . . . . . . . . 60 3.3 Data Retention Directive formalisation . . . . . . . . . . . . . . . . . . . . . 62 3.4 Data Retention Regulations formalisation . . . . . . . . . . . . . . . . . . . . 63\n4.7 Multi–level governance reasoning comparison with InstAL . . . . . . . . . . 109\n5.1 Soundsensing Institution formalisation . . . . . . . . . . . . . . . . . . . . . . 118 5.3 Governmental Institution formalisation . . . . . . . . . . . . . . . . . . . . . 119 5.6 Abducible predicates explanation . . . . . . . . . . . . . . . . . . . . . . . . . 128\n7.1 Crowdsensing contract institution formalisation . . . . . . . . . . . . . . . . 159 7.2 Crowdsensing contract formalisation . . . . . . . . . . . . . . . . . . . . . . . 159\nxiii\n1 INTRODUCTION\nThe only way to rectify our reasonings is to make them as tangible as those of the Mathematicians, so that we can find our error at a glance, and when there are disputes among persons, we can simply say: Let us calculate [calculemus], without further ado, to see who is right.[153]\nGottfried Wilhelm Leibniz\n1"
    }, {
      "heading" : "2 1. INTRODUCTION",
      "text" : "In today’s increasingly connected world, governments, organisations and other regulatory bodies do not operate in isolate free from control. Let us take a look at three examples. Our first example concerns the SHINE1 project under which this dissertation’s research was conducted. SHINE aims to form systems comprising heterogeneous environmental sensors (e.g. cellphone cameras, weather radars) contracted from the sensor owners to collect environmental data. However, constraints are placed on forming contracts, in the sense that a sensor owner is only likely to agree to a contract if it meets their own policies stating what rights the contract should confer and what liberties it should not take away. Our second example concerns European Union (EU) law. In the EU, member states’ governments enact legislation to meet governance aims. When the EU council wishes to coordinate legislation across the union, an EU directive is issued. Directives constrain and direct member states to implement regulations that meet cross–national aims. For example, retaining communications data for EU–wide criminal investigations [71]. In turn, national legislation and EU directives are also required to confer rights and uphold liberties specified in the EU Charter of Fundamental Rights [72]. Our third example concerns the rules that make enacting and changing regulations possible. An organisation can only enact a legally valid and binding contract if the rules and processes that state how and when contractual regulations are enacted are followed [117, p.96]. The EU council is only able to legislate directives according to the rules that give it rule–making powers [73, Art. 288]. The United States government has the power to enact laws by following law making procedures, but laws cannot be created that apply to the past [221, Art. 1 Sec. 9 Cl. 3]. In other words, governments, organisations, contract writers and regulatory bodies are constrained in their regulatory activities.\nThese examples are all about institutions and the constraints placed on institution designers. Institutions are sets of rules and regulations, such as national legislation and contracts [27, 208]. Institution designers are governments, contract writers, organisations and other regulatory bodies. Institutions regulate, organize and guide individuals’ behaviour in a society towards collaboratively meeting societal aims [186]. Societal participants are autonomous agents, such as people or software agents, which are liable to act in their own self interests. Hence, institutions pair regulations with penalties to ensure it is in an individual’s own self–interest to comply for the greater good of the governed society [15, 41][44, p.80]. Institution designers craft institutions to regulate agents towards societal aims, such as people contractually participating in an organisation collecting and providing data, or citizens participating in a society whilst respecting one another’s rights. By regulating rather than regimenting (forcing certain) agent behaviour, institution designers can achieve societal aims whilst preserving agents’ autonomy.\nInstitution designers are also autonomous agents and hence are liable to act in their own self–interests. Consequently, regulations are placed on institution designers to reign their behaviour in. The first two examples showed how institution designers are governed in the institutions they design. Some institutions are designed to govern societies, such as national legislation. But, such institutional designs are in turn governed by other institutions, such as EU directives and human rights charters. The third example shows how institution designers are regulated in their ability to enact institutional changes by establishing new institutions or change existing institutions. By enactment, we mean in the sense of passing of a new law or a change to legislation, making a contract legally binding or more generally\n1http://shine.tudelft.nl\n3 the social action of making an institutional change legally valid and imposed on agents. For example, enacting contracts or changing existing institutional rules to meet new aims. Governing regulatory change is defined by rules that stipulate when institutional changes are enacted. Hence, institution designers autonomously design and enact institutions, but institution designers are also governed in the institutions they design and the institutional enactment process.\nIn today’s increasingly technological world, operationalising institutions by applying rules and regulations is not just left up to opaque human reasoning. Instead, the fields of Normative Multi–Agent Systems and AI and Law are concerned with automated reasoning for institutions by contributing formal frameworks that interpret and apply institutions (we discuss background on implemented systems later in Chapter 2, and a literature survey is provided by [12]). Formalisation, in general, takes informal reasoning, that is ambiguous and unclear, and exposes it in plain sight with precise mathematically rigorous definitions.\nYet, thus far the reasoning involved in the governance placed on institution designers has not been formalised. We can see a common thread is shared by our examples, in that institution designers are constrained loosely in how the institutions they enact should be designed and strongly in how and when they can enact institutional changes. Yet, although we can clearly see such constraints exist in their written form, we cannot physically see precisely how the machinery that applies and tightens those constraints around the institutional designers works. It is consequently hard to grasp how exactly institution designers need to operate under institutional design and enactment constraints. This dissertation addresses this knowledge gap, by contributing a formal framework for analysing institutional design and enactment governance. To understand more specifically why such formal reasoning is important, let us first take a closer look at the concepts behind institutional design and enactment governance.\nFrom the institutional design governance perspective, institution designs are governed by other institutions in what is called multi–level governance [121]. In this dissertation, multi–level governance is conceived as higher–level institutions designed to govern and guide the institution designs, enacted by autonomous institution designers, operating at lower governance levels. Multi–level governance facilitates institution designs in being coordinated, when viewed as being related in a wider multi–institution system (e.g. [244]). For example, at a national level a government enacts institutions to govern a nation. At a cross–national level institutions are designed to guide national governments in enacting institutions with coordinated regulations. Moreover, designers are guided in ensuring their designs do not take away rights and liberties, such as by human rights charters. In multi– level governance, institution designers have autonomy to design institutions according to their aims, but their institution designs are also subject to being governed and guided by higher–level institutions.\nMulti–level governance creates the possibility for institution designs to be non–compliant. A non–compliant institution design is problematic. From the higher governance levels’ perspective non–compliant institution designs are uncoordinated with other institutions governing separate jurisdictions, do not uphold rights and/or do take away liberties. From an institution designer’s perspective, they are liable to face punishment for non–compliant design. When societal members act in a non–compliant way they are liable to being penalised in order to guide society towards compliance[11, p. 279]. Hence, when an institution"
    }, {
      "heading" : "4 1. INTRODUCTION",
      "text" : "designer designs a non–compliant institution, they are liable to being fined or having institution designs annulled [210] by judiciaries. Non–compliance in multi–level governance should be detected and avoided before institution enactment by an institution designer in order to avoid punishment, and detected after institution enactment by a judiciary to issue punishment and thus incentivise institution designers in enacting compliant institutions.\nFrom the institutional change enactment governance perspective, institutional rules define the legislative actions that constitute a valid institutional change enactment conditional on the social context [20]. In a simple case, a legislature voting by majority on an institution enactment change suffices. In other cases, there are further constraints on valid institution change enactment, such as there being no valid way to change an institution in the past (retroactively) [221, Art. 1 Sec. 9 Cl. 3] “No Bill of Attainder or ex post facto Law shall be passed”. In general, there are rules that state how and when rules are changed. According to the influential legal philosopher Hart, these are secondary institutional rules and they create the possibility for governments to change legislation and citizens to create contracts [117, p.81]. When an institution designer designs or changes an institution outside of the secondary rules the “enacted” changes are invalid. For example, enactment does not occur merely by physically writing institutional rules without following the necessary voting procedure set out by secondary rules. From an institution’s perspective, invalid enactments or changes do not take place. Hence, the system or society the institution governs should ignore such invalid enactments in order to have the correct and shared view of an institution’s rules.\nFormal reasoning is important for the governance of institution design and enactment. Specifically, for precision and automation:\nPrecision. In general, formalisation removes ambiguity. Without ambiguity, rigorous interrogation of the underlying reasoning is possible. Hence, reasoning flaws can be found and fixed, which can have real positive and negative consequences for agents being rewarded or punished. Moreover, formalisation communicates in clear mathematical terms the reasoning involved. Hence, given an institution and the facts of a case, agents can independently come to the same conclusions by applying identical reasoning.\nFrom a multi–level governance perspective, an institution designer can predict whether a judiciary would find the institution design non–compliant. With one caveat, the designer and judiciary must have the same legal rule base, including any unwritten rules such as conceptual interpretations. Prediction benefits an institution designer who can choose to not enact a non–compliant institution in order to avoid punishment.\nIn the case of governing the institutional change enactment process with secondary rules, all agents governed by an institution are able to come to the same understanding over the changes made to the rules they are governed by. A common understanding benefits two agents in neither having a different understanding of the regulations in place nor misunderstanding what they ought to do according to the institutions governing them.\nAutomation. Formalisation removes ambiguity, which is a necessary pre–requisite\n5 for automation since it means, potentially, the formal reasoning can be implemented in a computational language as a program for a computer to execute.\nFrom the multi–level governance perspective, automation lowers compliance checking costs. A judiciary does not face the dilemma over either arduously determining if an institutional design is compliant or forego judgement and face the possibility that institution designs are allowed to be uncoordinated or take away agents’ rights and liberties without punishment. Automation also lowers compliance checking costs for institution designers and helps rectify non–compliance. Fixing non–compliance is not necessarily easy. There can be multiple possible explanations for why an institution is non–compliant in there there is often a space of many compliant institution designs. For example, EU member states are at liberty to comply with an EU directive in many ways [76, p.5]. Yet, some compliant designs will meet an institution designers’ objectives more than others. By automating compliance checking, searching for explanations for non–compliance that can be used to rectify the underlying causes is also automatable in a way that meets an institution designer’s aims the most.\nIt is non–trivial to determine how an institution is changed according to secondary rules governing rule change. For example, a new rule might be enacted stating rules can be changed by majority vote. Enacting such a rule affects which future rule changes can be enacted. More generally, without wishing to delve into the temporal details at this point, rule changes can also be applied to the past, present or future and have many complex interacting affects with other rule changes. Automation takes over the cognitively difficult task for a human of determining when rule change enactments are legally valid.\nIn order to address the need for precision and automation, institutional design and enactment governance should be formalised, but there is a lack of formal work in this area. This dissertation addresses this problem by proposing the PARAGon2 formal framework for Practical Automated Reasoning for Assessing Governance of institution design and enactment. The formalism comprises precise definitions for compliance in multi–level governance, a mechanism to determine explanations and rectifications for non–compliance, and precise definitions for institution enactment validity according to secondary rules.\nMoreover, this dissertation adopts a practical approach in two senses. Firstly, it provides definitions that are either coupled with a corresponding computational implementation or are defined in such a way as to make it obvious how the reasoning can be implemented. Thus, the formalisation provides automated reasoning. Secondly, the conceptualisations are aimed at capturing a number of real–world case studies in a realistic setting that includes factors such as time and change. The framework allows an institution designer to specify the institutions in a formal grammar and determine using the reasoning whether the design is compliant in multi–level governance and rectify any non–compliance. Moreover, institution designers and agents governed by institutions alike can apply the framework to determine which rule changes are validly enacted and when. The framework users need\n2Just as an institution defines ideality, a paragon is an example of a person or thing regarded as a perfect example of such an ideal [191]"
    }, {
      "heading" : "6 1. INTRODUCTION",
      "text" : "not understand the underlying mechanics, in terms of how it is decided what the regulatory effects of an institution are. Rather, users only need to understand what the concept of an institution being used by the system is and correctly provide as input the various institutions that are governing/being governed and the actions of various agents that are occurring. Consequently, the reasoning burden can be delegated to a computer to mechanically determine institution design compliance, rectifications for non–compliance and valid rule change enactment.\nThis chapter proceeds to introduce the research questions in section 1.1. We describe how this dissertation fits into the SHINE project in section 1.3. Then, the research approach is described in section 1.2. Finally, the outline of this dissertation is given in section 1.4.\n1.1. RESEARCH QUESTIONS As we discussed, there is a lack of formal and practical reasoning for governing institution design and enactment that needs addressing. This leads to the main research question:\nHow can institutional design and enactment governance be supported with formal reasoning?\nThe main research question is broken down into five sub–questions.\nThe idea is to contribute formal reasoning to support human stakeholders in understanding the constraints placed on institution designers. Stakeholders need a way to represent institutions and their governance relationships. This leads to our first research question.\nSub–research question 1: What is a suitable representation to specify institutional design and enactment governance?\nIt is important for the representation to be natural, by which we mean with a clear correspondence to how written and verbal institutions are represented, for two reasons. Firstly, from the precision perspective we are interested in formalising institutional governance to make it clear what we mean by the relevant concepts. The idea being, the concepts are exposed and can be interrogated, and discussed and debated for ‘correctness’. A natural representation supports this aim by demonstrating to what extent the formalised reasoning is doing all the work of coming to correct conclusions and to what extent it is actually highly dependent on the way an institution is written. The latter case is far from desirable. For example, if we have to represent an institution in a very convoluted or procedural way to get the correct reasoning results, it is reasonable to assume that the informal reasoning has hardly been formalised at all. From the automation perspective, a ‘user’ 3 needs to face as little burden as possible, meaning they should be able to specify an institution close to how they would a written law without thinking about how a computer might interpret it. To give a contrasting example, we could simply provide the user with an abstract computational machine (e.g. a Turing machine [225]) and give the user all the flexibility to specify institutions in whichever way they want as procedural code. However, by giving users an\n3a user of the PARAGon framework can be a human agent interested in reasoning about institutional design and change enactment governance, such as to avoid punishment for non–compliant design. A user can also be a researcher wishing to understand the precise meaning of the concepts involved."
    }, {
      "heading" : "1.1. RESEARCH QUESTIONS 7",
      "text" : "‘unnatural’ language to specify institutions, we have contributed nothing to automating institutional governance reasoning. Hence, a natural representation is central to being able to critique the PARAGon framework, and the framework itself providing the benefits of formalisation for institutional design and enactment governance.\nThe PARAGon framework answers this question by providing different ways to represent institutions depending on whether we are interested in the governance of institution design or change enactment. The first step in answering the question is to gather background knowledge on the kinds of institutional rules and regulations we wish to represent and to what extent there are already suitable grammars to represent those concepts in Chapter 2. Then, in Chapter 3 and 4 we provide a representation for multi–level governance and apply it to European Union laws. A simpler representation for governing institutional designs is provided in Chapter 5 and applied to a crowdsourced mobile sensing scenario inspired by the SHINE project. In Chapter 6 we provide a further representation language, this time focussed on secondary rules used to govern institutional change enactments. Once we have a way to represent institutions, we need a way to reason about them, leading to our next four sub–research questions.\nThe first aspect we look at is compliance of institution designs in multi–level governance. Although it is expected that institution designers enact compliant institutions, due to designers’ autonomy it is not guaranteed. Compliance of institution designs should be evaluated to enable institution designers to understand whether their designs are compliant before enactment, and higher governance levels’ judiciaries in punishing institution designers for offending institution designs. Compliance should be assessed in a precise and consistent way, such that the same notion of compliance is shared by institution designers and judiciaries. Hence, compliance requires formalisation. Since this dissertation takes a practical approach, addressing real–world needs, compliance should be formalised to capture its real–world informal notion. This leads to our next sub–research question:\nSub–research question 2: How can we formalise compliance in multi–level governance?\nIn general, compliance involves adhering to regulatory requirements [172]. In multi– level governance, compliance represents whether from the perspective of institutions designed at higher governance levels (e.g. [76, p.5]), lower–level institutions regulate in a ‘good’ way to meet particular higher–level governance aims. There is a difference between societal compliance and institution design compliance. Societal compliance focuses on agent behaviour, which is already widely formalised [12], such as agents being compliant if they do not murder one another according to institutions that prohibit murder. On the other hand, institution design compliance focuses on whether the effects of regulations are good, such as by being coordinated with other institutions’ regulatory effects (e.g. controlling carbon emissions through high–level international institution design coordination [188]), conferring human rights (e.g. prohibiting murder) and respecting liberties. So, compliant institution design is formalised by defining when the regulatory effects at lower governance levels are compliant with the regulations at higher governance levels.\nThe formal notion of compliance in multi–level governance must, however, also take into account abstraction. In multi–level governance, there are conceptual differences be-"
    }, {
      "heading" : "8 1. INTRODUCTION",
      "text" : "tween institutions operating at different governance levels. Institutions embody institutional concepts defined with context–sensitive conceptualising rules [214]. For example, a rule stating that a soldier killing another person who is not a member of an opposing army is murder. Such conceptual rules serve an important role, since they allow regulations to be succinctly defined over high–level concepts [32]. For example, a regulation prohibiting murder as opposed to a regulation prohibiting a soldier from doing such and such. Separate institutions can potentially define the same concepts differently or define different concepts altogether. Moreover, since institutions define regulations over separate concepts, the regulations themselves have different, context–sensitive, meanings. In multi–level governance, we can see higher governance levels in fact use more abstract concepts. For example national legislation might concretely require communications data to be stored (e.g. [226]). Yet, human rights charters describe abstract notions such as the right to a private and family life [48]. Therefore, compliance should be defined in terms of concrete lower–level governance regulations being compliant with abstract higher–level governance regulations. Moreover, compliance should account for the meanings of the regulations potentially being entirely different depending on the social context.\nThe PARAGon framework provides a formal definition of compliance in multi–level governance in Chapter 3, reconciling the different, context–sensitive, regulation meanings from a conceptually concrete lower–level institution compared to a conceptually abstract higher–level institution. By defining compliance in multi–level governance, we are able to unambiguously determine compliance with mathematical rigour and regularised predictable results for a real world setting.\nHaving a formal definition of compliance does not necessarily reveal how to practically reason about compliance in a computational way. This leads us to the third sub–research question:\nSub–research question 3: How can institutional design compliance in multi– level governance be computationally verified?\nComputationally verifying institution design compliance in a practical way is desirable to reduce compliance checking burdens placed on the various actors involved in multi–level governance. Whilst each institution designer at each level of governance must provide the institutions being governed and doing the governing as input, there should be no burden on those designers to implement or understand the mechanics of compliance checking. As Sergot exemplifies using the law [216], institutions are sets of declarative rules. Whilst rules can influence each other, and rules can define procedures which should be followed, the ordering of the rules themselves should not impact their meaning. What we can take from this is that institutions are not algorithmic and any algorithmic reasoning applied to an institution is not visible in an institutional specification. Consequently, institution designers are not particularly concerned with the reasoning mechanisms used to operationalise institutions. So, automated compliance checking is needed to ensure institution designers do not need to take extra effort in applying the formalised reasoning. That is, by providing a computational framework which hides the mechanics (i.e. algorithms or semantics) for compliance checking. So, what we aim for when answering this research question, is a computational framework that takes a natural representation of institutions as input and de-"
    }, {
      "heading" : "1.1. RESEARCH QUESTIONS 9",
      "text" : "termines if an institution design is compliant in a sound and complete way (i.e. equivalent) with respect to our formal notion of compliance.\nThe PARAGon framework contributes computational compliance checking in multi– level governance in Chapter 5, which is sound and complete with respect to our formal notion of compliance. This supports judiciaries in determining penalties issued on institution designers for non–compliant designs. Moreover, it supports institution designers in avoiding penalties by indicating a non–compliant institution design should perhaps not be enacted.\nFor an institution designer it might be simplistic to state that they can simply avoid punishment by not enacting a non–compliant institution design. Firstly, in the case that an institution designer is actually obliged to enact an institution in order to implement the imperatives issued by a higher–level institution, as is required in complying with EU Directives and other cross–national institutions. Secondly, in the case that an institution designer prefers to enact an adjusted and compliant institution rather than not enacting an institution at all. This leads us to our fourth sub–research question:\nSub–research question 4: How can non–compliant institution designs be explained in order to rectify non–compliance according to the institution designer’s objectives?\nInstitutions are designed with a purpose, to guide societies towards an ideal envisaged by the institution designer or guide and coordinate other institution designs towards an ideal. We are interested in resolving non–compliant designs. Mitchell [174], provides a number of reasons for (non–)compliance in general, such as the non–compliance if agentive actions in society. Pertinent to institution design, non–compliance can occur due to preference, in our case because institution designers prefer a non–compliant institution design due to its positive governance effects, even in the face of penalties for non–compliance. Non– compliance can also occur due to incapacity, in our case simply because the institution designers do not know how to design a compliant institution.\nThese reasons for non–compliance should be taken into account when rectifying non– compliant institution designs. From the non–compliance due to designer preference perspective, any non–compliance resolution should balance the requirement to successfully adjust the design to be compliant against the objectives of the institution designer. Assuming the non–compliant design was crafted to achieve particular governance aims, resolving non–compliance must remain as closely as possible to the original design’s regulatory effects. From the non–compliance due to designer incapacity perspective, non–compliance resolution should take into account the fact that incapacity can be due to institutions being complicated, comprising many interrelated rules and regulations [97, p.14] [171, p.2]. This means it can be non–obvious to an institution designer which rules and their interactions are causing non–compliance.\nAssuming an institution designer wishes to resolve non–compliance in a way they understand, non–compliance resolution should seek the simplest and most general explanations for non–compliance, to support the institution designer in understanding and remedying the underlying problems. For example, the following case of non–compliance could have multiple explanations, which resolve the non–compliance – a lower governance level"
    }, {
      "heading" : "10 1. INTRODUCTION",
      "text" : "institution is governed by a higher–level institution in only obliging agents that are adults in providing personal information, but the lower–level institution obliges both children and adults to provide personal information. One possible explanation for non–compliance is that it is due to there existing a rule that obliges people to provide personal data and that rule should be removed to ensure compliance. A second explanation for non–compliance that gives less drastic institution re–design advice and is, is that the rule obliging people to provide personal information is too general and it should be modified to only applying to adults. In summary, non–compliance resolution should adhere to an institution designer’s own objectives and recommend the simplest explanations and rectifications for non–compliance.\nThe PARAGon framework answers this question in Chapter 5 with a computational non–compliance resolution mechanism.\nThe previous research questions address institution design governance, our fifth and last research question addresses institution change enactment governance:\nSub–research question 5: How can we formally define when legally valid institutional change enactments occur?\nInstitutional change enactment is constrained in its validity according to secondary legal rules. We need a formal definition of when, for a set of secondary legal rules, particular physical behaviour such as ‘the thing we call’ voting on a rule change causes the social action of rules actually being changed. Such secondary rules create the possibility to take the social action of changing rules [20]. These rules making rule change possible are also themselves changeable [220]. Formalising the legal validity of rule change enactment must take into account the fact that changing rules can affect further rule change enactments. Since we are dealing with real–world case studies the temporal aspect of secondary rules is a factor. It is possible, for example, for secondary rules to make past rule change enactments possible. Institution designers have enacted past rule changes in order to ‘undo’ the consequences of ‘bad’ institution design decisions [192]. The implication is that, since changing rules can affect rule change enactments, changing rules in the past can affect rule changes at various other points in time, including in the more recent past, the present or the future. So, what this research question requires is that we formalise rule change enactment validity whilst taking into account complex temporal interdependencies between secondary rules and rule changes.\nThe PARAGon framework answers this research question in Chapter 6 with a formal framework for determining when rule changes count–as legal rule change enactments. In answering this question, special attention is paid to formalising in such a way that demonstrates the computational mechanism to decide whether a rule enactment is valid. Moreover, an account of the temporal aspects is given, demonstrated against a number of real and imagined case studies.\nBy addressing these research questions the following argument is made:\nThis dissertation formalises governing governance by giving a rigorous mathematical definition for institutions being governed in how they should be designed and how institutional change enactments can be made.\nNow we proceed to the approach we take to answering the research questions.\n1.2. RESEARCH APPROACH 11\n1.2. RESEARCH APPROACH This dissertation’s result is the PARAGon framework for formally reasoning about governing institution design and enacting changes. A research approach was followed to develop the PARAGon framework and its constituent parts. The approach is to start with a literature review and then per research question gather case studies, develop a formal framework and apply model checking to assess the framework against the case studies. Each step is described as follows.\nLiterature review: this step achieves three aims. This research started out in the broad area of institutional and normative reasoning. The first aim was to understand informal definitions of the main concepts involved, namely institutions and norms, governance and closely related concepts. The second aim was to identify an area of research which was both useful to the SHINE project of governing large–scale sensor systems (and systems of systems) and had not been looked at previously from an Artificial Intelligence perspective. Namely, the governance of institution design and enacting changes. The third aim was to identify a single underlying formalism providing more primitive concepts (institutions and regulations) on which the PARAGon framework can use as foundations.\nFramework development cycle: The next step was, per research question, to iterate the following three sub–steps. The iterative cycle terminates when applying the PARAGon framework to case studies results in a natural representation and judgements that correspond to real–world judgements or what we would intuitively expect. Although, ‘natural representation’ and ‘intuitive expectations’ are subjective, the representation and reasoning are made precise so that they can be argued for and against.\n– Gather case studies: Each research question addressed a real–world governmental process to formalise and automate. To answer the research questions, the first step was to gather or synthesise relevant case studies against which the framework was developed, to ensure it was grounded in a realistic setting.\n– Formalisation: The next step was to take the relevant case studies and understand the specific reasoning involved in order to come to the intuitive outcome for each case study. Then, to provide a more general account of the reasoning through formalisation, defining a formal syntax and semantics, potentially coupled with a corresponding computational mechanism. Following Hansson’s argument [114], the purpose of formalisation is not to produce an empirically supported theory, but rather to precisely define previously informal concepts (in our case secondary rules, governance of institution design and so on).\n– Model checking case studies: given a formal language comprising a representation and semantics, it is possible to formally represent the case studies and construct models for those case studies. By a model, we mean a logical model, which for a logical theory is a structure that satisfies the theory (if such a structure exists). By constructing a model, it is possible to check various properties of the theory. In our case, the logical theory is an institutional specification and"
    }, {
      "heading" : "12 1. INTRODUCTION",
      "text" : "a series of events. The events either occur hypothetically as a part of an offline institution design check (e.g. checking how the institution behaves when an agent decides to collect data) or events which occur in reality (e.g. agents voting on rule enactments). The properties being checked are whether an institution design is compliant, ways to rectify non–compliance and which rule changes have validly been enacted and when. During this step, it was often revealed that there were counter–intuitive results for the developed semantics and given case studies, consequently further refinement of the formalisation was required and the previous steps repeated.\nPutting it all together: The final step in the research approach was to apply the results and reflect on open questions. This step takes the application further to show its practical relevance by implementing part of the PARAGon framework in a prototype system described in Chapter 7. Each component of the PARAGon framework has its own implications. In this step those implications are compared and synthesised into an overall conclusion and set of unanswered questions in the final chapter, Chapter 8.\n1.3. THE SHINE PROJECT This research was initiated and supported by the SHINE project of TU Delft. SHINE was a large interdisciplinary research project. It aimed to develop techniques for acquiring and coordinating large numbers of heterogeneous data resources (e.g. cellphone sensors, radars and people). The idea was to use these sensors to gather a wide range of detailed environmental data (e.g. rainfall and pollution levels). In so doing, various stakeholders (e.g. citizens, municipalities) can gain answers to questions pertaining the environment (e.g. ‘how do I get from A to B whilst avoiding flooding?’). SHINE looked at the problem from many different angles, such as algorithms for configuring sensors, user modelling, governing and coordinating resources, and visualising the acquired data to help answer questions.\nThis dissertation contributes techniques for formalising governance, with a focus on formalising governance which is, arguably, particularly suitable for governance and coordination of ‘SHINE–like’ sensor systems of various types. For example, governing and coordinating systems of cellphones gathering geospatial audio data to determine crowding levels or systems of weather radars used to determine rainfall levels. The formalisation is applied to a mixture of governance case studies, from national and international data and human rights laws to imagined SHINE sensor system regulations. The idea is to formalise compliance in multi–level governance and institutional enactment validity as found in the social world to support automated ‘SHINE sensor system’ governance.\nMulti–level governance is relevant to SHINE according to the argument that it is a necessary governance architecture for governing heterogeneous sociotechnical systems (e.g. what is also called polycentric governance [197, 198]). We will exemplify why using examples concerning SHINE systems. On the one hand, a homogeneous sensor system comprising users crowdsourced into donating their cellphone sensors can, arguably, be governed with a single set of related regulations. For example, regulations defining a communal economy with a single incentive for users to contribute data (i.e. receiving data from a common pool in return). On the other hand, SHINE aims to form heterogeneous sensor systems"
    }, {
      "heading" : "1.3. THE SHINE PROJECT 13",
      "text" : "which, arguably, are unsuitable for a ‘one–size–fits–all’ set of regulations. For example, a system comprising weather radars contributed by organisations could operate best as a market economy, where organisations are incentivised to join the system in order to trade data. In this case, the regulations for a crowdsourcing sensor system operating as a communal economy are entirely inappropriate. One possibility is to view each set of sensors as a separate sensor sub–system and write regulations to govern those sub–systems separately to form a super system of sub–systems. However, this places a burden on the SHINE–system institution designer in writing appropriate regulations for each sensor sub–system.\nMulti–level governance offers an architecture to move the burden of writing specific regulations from the SHINE–system institution designer to the sensor sub–system stakeholders. The architecture proposes a solution, in the same vein as existing proposals of poly–centric governance for smart–grids comprising heterogeneous energy sub–systems [57]. The idea being, that the stakeholder wishing to form a heterogeneous SHINE sensor system crafts an institution at a second governance level which governs the design of institutions governing the separate sub–systems. The ‘SHINE institution’ is a thin governance layer, comprising abstract regulations requiring that sub–sensor–systems are governed by institutions which regulate resources towards collecting useful environmental data and punishing sensor owners for contributing erroneous data. Appealing to the principle of subsidiarity, what can be done at the local level should be left up to the local level, the SHINE institution would give space for the sensor sub–system stakeholders to determine which data is collected and what the incentives are (e.g. a market economy or a communal economy). In return, sensor sub–system stakeholders can design institutions to govern those sub–systems in order to join the SHINE super–system and gain data from other sub–systems in return. The PARAGon framework helps to operationalise multi–level governance for forming SHINE systems governed by a higher–level SHINE institution, by automating compliance checking and non–compliance rectification.\nThe automated reasoning for compliance checking is also applicable to the SHINE project’s aim of crowdsourcing the existing sensors people already own and their time. For example, crowdsourcing people in donating their cellphone audio sensors in order to detect geo–spatial crowding, or crowdsourcing people into taking photographs of the sky when requested to determine pollution levels. This type of sensing is dubbed by the SHINE project as ‘request driven social sensing’ and a key idea behind it is that people are offered contracts for use of their devices and time. Since people are ideally offered many contracts to address many data needs as and when they arise, it is important cellphone users can automatically accept or reject contracts on the basis of policies they define stating how, when and for whom their cellphone sensors can be used. In this situation, a policy stating sensor usage governs offered contracts. The automated multi–level governance reasoning can be used to automate such contract rejection and is implemented in a prototype simulated crowdsourced mobile sensing system described in Chapter 7.\nSecondary rules governing institutional enactment are relevant to SHINE from the perspective that they provide sensor system stakeholders a flexible and automated way to govern sensor systems’ regulatory change. Flexibility is meant in two senses. Firstly, stakeholders are able to make how regulatory change legally operates flexible. This is important since the sensing aims or dynamics of the system are liable to changing over time and hence regulatory changes need to be enacted to meet stakeholders new aims or system par-"
    }, {
      "heading" : "14 1. INTRODUCTION",
      "text" : "ticipant’s changing behaviour. Secondly, the way in which the regulatory change enactment process is defined is flexible. For example, one sensor system can define regulatory change as requiring sensor system participant’s democratic vote, this might be suitable for a system of crowdsourced cellphone users that donate their cellphone sensors to the system partly due to having a say in how that system is run. In another case, where designing regulations requires highly–technical knowledge of sensors’ operation, a sensor system’s regulatory change may be defined on the basis of elected technocrats coming to an agreement. Hence, secondary rules allow a diverse range of governance and regulatory change enactment styles to be defined for different sensor systems in a way that enables those system’s regulations to adapt, as deemed appropriate, to new aims and needs.\nThe PARAGon framework supports realising these benefits by contributing formalisation to automatically determine how and when regulatory changes are legally enacted. For example, such as due to a vote to move a system from a market economy where data is traded to a communal economy where data is contributed to a common pool and shared. Moreover, formalisation means the way in which changes are enacted is automatically changed according to legal rule changes, such as moving from a directed democracy to an elected technocracy. Automation means system stakeholders can operate a flexible governance system at lower cost and therefore makes systems where flexible governance is necessary, such as for diverse SHINE sub–systems, more viable.\n1.4. DISSERTATION OUTLINE The dissertation outline is depicted in figure 1.1. This dissertation is broken up into the introduction (Chapter 1) and the background (Chapter 2), then the main contributions of formal reasoning for governing institution design and change enactment (chapters 3 to 6), and finally an illustration of the framework’s application (Chapter 7) and the conclusions (Chapter 8). The main technical contributions begin by looking at soft constraints. These are constraints that create the possibility for (non–)compliance and, respecting agents’ autonomy, cannot be guaranteed to be complied with. In our case, the soft constraints specify how an institution should be designed (chapters 3 and 4). We subsequently contribute a mechanism for revising an institution design to be compliant with such soft constraints (Chapter 5). Then, we move to reasoning about governance in the form of hard institutional constraints. These are constraints that are not violatable. In our case, the hard constraints are secondary institutional rules defining when institutional change enactment is possible (Chapter 6).\nThe following chapters are described in more detail:\nChapter 2 provides background starting with an overview of the informal concepts we wish to formalise and reason about. Then, proceeding to analyse the existing knowledge and its gaps in formalising governance of institution design and change enactment. Next, suitable frameworks that provide preliminary formalisation on which to build the PARAGon framework are compared. Finally, suitable foundational formalisations are selected on which this dissertation builds.\nChapter 3 contributes a formalisation of compliance in multi–level governance, providing a way to precisely determine compliant institution designs in a predictable way."
    }, {
      "heading" : "1.4. DISSERTATION OUTLINE 15",
      "text" : "Chapter 4 contributes the computational means to go about detecting compliance in multi–level governance, furthermore this chapter contributes a computational framework which is sound and complete with respect to the more theoretical formalism in the previous chapter.\nChapter 5 contributes a computational mechanism to automatically rectify non– compliant institution designs.\nChapter 6 contributes a practical formalisation of institution design validity, looking at when rule changes count–as legal rule change enactments in the face of secondary rules governing the rule change enactment process.\nChapter 7 describes a prototype application of compliance checking institution designs (contracts in this case) to forming networks of crowdsourced users and their cellphones in order to collect and aggregate weather data whilst giving users autonomy over how, when and for whom their devices are used.\nChapter 8 concludes with discussion on the contributions, implications and directions for future work."
    }, {
      "heading" : "16 1. INTRODUCTION",
      "text" : "1.5. LIST OF PUBLICATIONS The chapters in this dissertation are based on the following publications:\nKing, T. C., Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & van Riemsdijk, M. B. (2016, July). Automated Multi–level Governance Compliance Checking. Journal of Autonomous Agents and Multiagent Systems (JAAMAS). International Foundation for Autonomous Agents and Multiagent Systems. (In Submission)\nKing, T. C., Dignum, V., & Jonker, C. M. (2016). When Do Rule Changes Count–as Legal Rule Changes? In Proceedings of the 22nd European Conference on Artificial Intelligence (ECAI 2016). Frontiers in Artificial Intelligence and Applications. Vol 285. (pp. 3 – 11). IOS Press. http://doi.org/10.3233/978–1–61499–672–9–3\nKing, T. C., Li, T., Vos, M. De, Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2016). Revising Institutions Governed by Institutions for Compliant Regulations. Coordination, Organizations, Institutions, and Normes in Agent Systems XI: COIN 2015 International Workshops, COIN@ AAMAS, Istanbul, Turkey, May 4, 2015, COIN@ IJCAI, Buenos Aires, Argentina, July 26, 2015, Revised Selected Papers., 9628, 191 – 208.\nKing, T. C., Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2015). A Framework for Institutions Governing Institutions. In Proceedings of the 2015 International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2015) (pp. 473–481). Istanbul, Turkey: International Foundation for Autonomous Agents and Multiagent Systems.\nKing, T. C., Liu, Q., Polevoy, G., Weerdt, M. de, Dignum, V., Riemsdijk, M. B. van, & Warnier, M. (2014). Request Driven Social Sensing (Demonstration). In A. Lomuscio, P. Scerri, A. Bazzan, & M. Huhns (Eds.), In Proceedings of the 2014 International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2014) (pp. 1651 – 1652). Paris, France: International Foundation for Autonomous Agents and Multiagent Systems.\nKing, T. C., Riemsdijk, M. B. Van, Dignum, V., & Jonker, C. M. (2015). Supporting Request Acceptance with Use Policies. Coordination, Organizations, Institutions, and Norms in Agent Systems X: COIN 2014 International Workshops, COIN@ AAMAS, Paris, France, May 6, 2014, COIN@ PRICAI, Gold Coast, QLD, Australia, December 4, 2014, Revised Selected Papers (pp. 114 – 131). Springer.\n2 BACKGROUND\nThere is a lot of work which tries to do sophisticated statistical analysis. You know, Bayesian so on and so forth. Without any concern for the actual structure of language. As\nfar as I’m aware that only achieves success in a very odd sense of success [...] I don’t know anything like it in the history of Science. [196]\nNoam Chomsky\n17"
    }, {
      "heading" : "18 2. BACKGROUND",
      "text" : "This chapter makes the following contributions:\n• An overview of the informal background knowledge from multi–agent systems, philosophy of language and law, and political science. The focus is on institutions, and institutional design and enactment governance.\n• Formalisation requirements for the PARAGon framework.\n• A comparison of existing formal approaches and the extent to which they fulfil the PARAGon framework’s requirements.\nThis dissertation formalises reasoning for understanding institutional design and enactment governance. The formalisation supports institution designers in designing compliant institutions and enacting institutional changes in a valid way. The same formalisation allows judiciaries to determine if punishments should be imposed for non–compliant institution designs. Moreover, the formalisation supports agents in understanding when institutional rules are changed. Generally, the objective is to formalise the informal concepts involved in governing institution design and rule change enactment to the extent that the reasoning can be executed by a computer.\nIn this chapter, we give background on the research contributed by this dissertation. First, we situate the research within the wider field of autonomous agents and multi–agent systems in Section 2.1. Then, Section 2.2 gives a broad overview of institutions and norms from an informal point of view. Section 2.3 summarises the formal foundations required for this dissertation to build on and the new formal building blocks this dissertation develops in order to formalise institutional design and enactment governance. Section 2.4 outlines a number of relevant formalisations of institutions on which the contributions of this dissertation can be based. Special attention is paid to identifying to what extent existing approaches can be built on by this dissertation and where there are knowledge gaps. We summarise the knowledge gap in Section 2.6 and outline the approach we take.\n2.1. AGENTS AND MULTI–AGENT SYSTEMS The research presented in this dissertation overlaps with the field of Agents and Multi–agent systems. Examples include socio–technical systems and human societies. To situate this dissertation, it is important to give some background on the general concepts used by the field.\nWhen we talk about an agent, we mean an entity which has the ability to act on the world, or in other words possesses agency [211]. Philosophy contributes many agent concepts, primarily dealing with human agents and action. Agency as the ability to act intentionally is a view taken by Bratman [31], Goldman [96] and Mele [169]. Under this definition agents are able to bring about changes of their own volition to realise their intentions. The view that agency is the ability to initiate action spontaneously regardless of intention is taken by Ginet [95], Lowe [161] and O’Connor [184], among others. A more complicated agent, called a ‘person’ is described by [84] as being able to act both on the world and also on their own internal mental states (e.g. realising second–order desires). Agents can be significantly simpler – Dennett [56] questions the conceptual utility in requiring mental attitudes as pre–requisites for agency. He undercuts arguments for requiring"
    }, {
      "heading" : "2.1. AGENTS AND MULTI–AGENT SYSTEMS 19",
      "text" : "mental attitudes in the agent concept with Occam’s razor – they should only be ascribed to agents if they help with predicting action. Agents need not be human or biological at all, Wooldridge [240, 241] offers a frequently used definition of an artificial autonomous agent in the MAS community. According to Wooldridge, an agent is software able to act in an environment to meet its own goals, often those given to it at design–time. Without attempting to resolve the differences between these stances the key point subscribed to by this dissertation and the wider field is that agents are able to act on their environment, by extension act in ways that affect one another and importantly act autonomously in ways that cannot be controlled directly.\nA system comprising agents is called a multi–agent system (MAS). Such systems can be biological (e.g. a nation state comprising humans), artificial (e.g. a software system of agents controlling sensors) or mixed (e.g. a system comprising teams of humans and robots). An MAS is often formed with a goal in mind or an idea of how the agents should behave, from the perspective of the system’s stakeholders (e.g. the members of a nation state or the designer of a software system). For example, a nation state may have the societal goal to minimise the number of car accidents. Another example is a system comprising software agents on people’s cellphones for collecting and aggregating location and sound level data to determine large crowds of people [162]. To achieve the MAS’ ideal and system goals as envisioned by the relevant stakeholders, the agents in an MAS need to act collectively. For example, driving on the same side of the road to avoid collisions or configuring sensors appropriately (e.g. ensuring a microphone is on) for the data being gathered. An MAS is a system comprising agents which is typically designed with an aim or ideal for agents to collectively achieve.\nThe autonomy of agents in an MAS makes it difficult to ensure agents collectively achieve the MAS’ goals. Agents are liable to acting in their own self–interests (e.g. turning cellphone sensors off to conserve cellphone energy rather than contributing data) and if agents are left to their own devices their actions are liable to be uncoordinated (e.g. driving on different sides of the road). Mechanisms for system–wide agent control are required to ensure agents achieve the MAS’ goals.\nDifferent mechanisms to control and coordinate agents are available. We split these mechanisms into bottom–up control, top–down governance and bottom–up compliance with top–down control. Which approach is appropriate depends on the level of control a system stakeholder (e.g. software designer, national government) has over the agents and conversely, the level of agency an agent has.\n• Bottom–up control – this approach relies on being able to control artificial agents directly. Specifically, by programming agents to coordinate their behaviour and collectively achieve the MAS’ goals. Even basic software agents only capable of reacting to a single percept with no memory of past percepts and actions have been shown to exhibit complex emergent coordination such as decentralised gathering and collecting of objects [89]. For more complex cases agent programming languages have been proposed, often based on an architecture where reasoning is compartmentalised into mental constructs such as beliefs, desires and intentions (BDI). In these architectures agents can communicate and therefore be programmed to coordinate their behaviour (e.g. [52, 55, 119, 202, 205]), in the coo–BDI agent architecture for BDI (Belief, Desires, Intentions) agents’ cooperation and coordination is supported with"
    }, {
      "heading" : "20 2. BACKGROUND",
      "text" : "specific constructs for sharing plans [8]. Overall, the bottom–up control approach works by coordinating an MAS from the bottom level comprising the agents and their internal reasoning by regimenting the behaviour of each individual agent, such as by programming their behaviour in being coordinated and collaborative.\n• Top–down governance – this approach deals with cases where agents cannot be controlled directly. For example, when the agents are biological (e.g. humans). Since such agents cannot be controlled directly they are liable to act in their own self–interests. A common example is the tragedy of the commons [115], where given no constraints it is optimal for agents to act in their self–interests based on the premise that other agents will be doing the same. A top–down approach is also required when an open artificial multi–agent system [118] is designed comprising heterogeneous agents that are unknown a–priori. In an open artificial MAS agents are liable to changing over time and are contributed by various programmers such that they are not (easily) reprogrammable and hence should be guided in behaving in the right way rather than being directly controlled. In top–down governance regulations prescribe how agents should behave (e.g. agents should drive on the left) coupled with rewards/punishments to give agents reason to comply (e.g. fines). Whilst in this situation direct control of agents cannot be automated, the top–down governance can. For example, formal and/or automated reasoning for: monitoring agents’ compliance [34, 38, 75, 79, 175]; determining which regulations apply and when and which agents are compliant and should be rewarded or punished [25– 28, 40, 42, 43, 58, 63, 97–103, 103, 130–132, 159, 160]; synthesising institutions [176–178]; verifying institution designs meet certain correctness properties and do not enable agents to exploit regulations [148, 167]. In this approach societal coordination is realised by top–down governance in the sense that it operates at a level sitting above the entire system and governs agents rather than directly controls them.\n• Bottom–up compliance with top–down governance – this approach lies in between the two previously mentioned approaches as a way to automate compliance with top–down governance. In this approach, norm–aware agents are programmed. A norm–aware agent could be an artificial agent contributed to an open MAS with top– down governance. Here, the agent can act appropriately to comply with the top– down governance with no assumptions that the regulations placed on the agent will be known a–priori. Research in this area has focussed on agent programming languages, semantics and reasoning for agents acting in a compliant or preferable way way with the regulations and organizations the agents might join (e.g. [6, 50, 52, 124, 128, 129, 152, 170, 218, 222]).\nThis dissertation provides reasoning for both top–down governance and bottom–up compliance with top–down governance. Top–down governance reasoning is provided for determining whether institutions are being designed in a bad way (i.e. the designs themselves are non–compliant in multi–level governance) or institutional changes are enacted without following procedure (i.e. secondary legal rules are not adhered to and thus institutional changes are invalid). Bottom–up compliance with top–down governance is provided for institution designers themselves, so that they can design institutions in a compliant"
    }, {
      "heading" : "2.2. GOVERNING MULTI–AGENT SYSTEMS 21",
      "text" : "way and validly enact institutional changes. In the former case, bottom–up compliance is supported with automated reasoning to find explanatory rectifications for non–compliant institutions. In the next sections we will give background on institutions and governing institutional design and enactment.\n2.2. GOVERNING MULTI–AGENT SYSTEMS In this section we discuss governance of multi–agent systems from a conceptual point of view. This dissertation builds on concepts of institutions, discussed in Section 2.2.1 and norms discussed in Section 2.2.2. This dissertation contributes new formal conceptualisations involved in institutional design and enactment governance. Background informal concepts for institution design and enactment governance are described in Section 2.2.3.\n2.2.1. INSTITUTIONS Institutions provide top–down governance of agents. A definition from economics is given by North [182], as a set of rules regulating behaviour enforced with rewards and punishments. For example, fining agents or simply deviating from certain rules being considered a societal taboo and therefore affecting trust. Ostrom [185] provides a similar definition, put best in her own words as “the prescriptions that humans use to organize all forms of repetitive and structured interaction”. In legal theory Ruiter [208] agrees with North and also analogously refers to institutions as a kind of “social agent”, realised as agents practising the institution with behaviour that complies with the institution’s rules. John Austin [14] viewed the law (legal institutions) as rules laid down by one individual who has power over another. Alternatively, Ruiter [208] also views contracts between agents as legal institutions. In legal positivism, legal rules’ validity depends on the source (i.e. whether legislated by a legislator) [88]. According to these definitions regulative rules are an essential part of an institution and when an institution is legislated, such as by a parliament, it is a legal institution.\nIn philosophy [173] an institution is viewed as comprising regulative rules but also rules establishing the language and concepts with which agents and a social reality are talked about. For example, a rule stating ‘I do’ establishes what we call ‘marriage’. Such rules come about through social acceptance. Concepts such as marriage established by an institution, according to Searle [213, 215], are institutional facts and come about only because an institution makes social actions (e.g. marrying) possible. These institutional facts describe a social reality ascribed by the institution, giving an institutional interpretation of the brute (actual) reality. Searle refers to the facts that are independent of an institutional interpretation as brute facts, referring to a ground truth. For example, an institutional fact might be ‘paper’ which refers to a brute fact ‘the thing we call paper’. Searle proposes constitutive institutional counts–as rules of the form “A counts–as B in a context C”, to which from brute facts (As) ascribe more abstract institutional facts (Bs) in a particular social context entailed by the social reality (Cs). For example, the thing we call paper counts–as paper. In turn institutional facts may count–as further institution facts. For example, an agent does not just possess paper with 10 euros written on it, various watermarks and an identification number. Rather, that piece of paper is collectively agreed as counting–as money in the context of a particular nation state and so the agent possesses money in the right context. Counts–as"
    }, {
      "heading" : "22 2. BACKGROUND",
      "text" : "rules establish a concise social description of reality, which can feasibly be talked about at a more abstract, social level, than would otherwise be possible (e.g. ‘money’ is far more concise than a fine–grained description of everything that constitutes money).\nSearle argues counts–as rules also ascribe special statuses and deontic powers to various concepts [215]. For example, a piece of paper that counts–as money gives an agent possessing it the special deontic power to purchase goods. But, only because there is a social institution ascribing a special status to the money. On the deontic dimension of institutions, Searle says that various obligations are entailed by an institutional fact having a certain status. For example, a police person has a socially recognised status where they are obliged to uphold the law. In fact, Searle states that counts–as rules ascribing institutional facts and assigning statuses to those facts are necessary for there to be a deontology – “No language, no status functions. No status functions, no institutional deontology” [215, p.14]. Searle states institutions contain constitutive counts–as rules, which create a social reality from brute facts, and counts–as rules are necessary for a deontology.\nRicciardi [206] views related constitutive rules (e.g. all the rules ascribing meaning and status to money) as constituting the institution they belong to (e.g. the ‘money’ institution). A classic example from Ricciardi is the rules of chess constituting the game of chess and the institution of chess. Moves can physically be made on a chess board that do not conform to chess’ rules, but then the game of chess is not being played and the chess institution does not recognise those moves. Hence, an institution (e.g. chess) is its set of rules.\nThe key points in these definitions subscribed to by this dissertation are:\n• Institutions can be created by law makers (legislation), between agents (contracts) or through social acceptance. This dissertation mostly focuses on legal case–studies, but we do not tie ourselves to any particular institution source.\n• Institutions are a set of related counts–as rules, which ascribe a social meaning to brute facts by building an institutional reality comprising institutional facts (n.b. this differs from the more complicated notion of an institution as a social agent). Chapter 3, and Chapter 6 focus on formalising constitutive rules.\n• Institutions are used to govern and guide agents towards an ideal with rules and regulations (a deontology), rewards and punishments. Chapters 3 to 5 focus on this regulatory aspect of institutions.\n• Counts–as rules and a social reality are necessary for an institution to have a deontology.\nIn the next section we will describe in more detail the deontic aspect of institutions and its informal representation.\n2.2.2. NORMS In this section we discuss institutional regulations, called norms, further. Norms state what the social reality should be (e.g. an agent should pay for a train ticket before boarding a train). With a suitable mechanism to ensure norms are abided by, norms guide agents towards an ideal. Two mechanisms to ensure norms are abided by are discussed in the literature: regimentation and enforcement."
    }, {
      "heading" : "2.2. GOVERNING MULTI–AGENT SYSTEMS 23",
      "text" : "Regimentation [135] forces norm compliance on agents by controlling their behaviour directly. For example, by programming agents so they cannot board a train unless they have paid for a ticket or by constructing a barrier at the train station that does not let agents onto the train platform unless they have a ticket. One drawback of regimentation is that it assumes hard constraints can be implemented (e.g. an agent can be directly programmed or there are physical barriers that can be constructed). Another drawback is that regimentation does not acknowledge that there are exceptional circumstances under which norms should not be followed – for example when an agent needs to drive faster than the speed limit in the case of an emergency. Regimented norms act as hard constraints on agents’ actions, which is not always possible or in the best interests of the agents and the system. We do not consider norm regimentation in this dissertation.\nEnforcement [107] gives agents the option to comply with norms that act as soft constraints on agents’ behaviour. To give reasons for agents to comply, secondary reward and punishment norms come into force if a primary norm is violated. For example, a norm stating an agent should pay a fine for boarding a train without a ticket. In turn, the secondary norms can have further enforcing norms. For example, a train guard that finds an agent who refuses to pay a fine should throw the non–compliant agent off the train. This dissertation considers norms that can be violated and are supported through enforcement.\nNorms take two common forms in the literature. Firstly, an evaluative representation lacking an explicit deontic modality (obligation/permission/prohibition). Secondly, a modal representation where the deontic modality is explicit.\nEvaluative norms are found in some formal work [9, 105]. In an evaluative representation norms are represented as counts–as rules denoting that “A counts–as being good/bad/compliant/a violation in a context C” with no reference to obligation/permission/prohibition. To give an example based on the UK’s data retention regulations [226] – a communications provider (e.g. telephonics company) retaining all of a person’s communications meta–data (e.g. the time a phone call was made) counts–as compliance in the context that the communications provider is operating in the United Kingdom. An evaluative norm creates evaluative institutional facts in the social reality. For example, creating ‘compliance’ if meta–data is stored. The social reality does not represent which norms are in force (what should be done). If we want to know whether the UK’s data retention regulations require meta–data to be stored then the query is “do the rules state storing meta–data counts–as compliance in a context that holds in the present social reality?”. Determining which evaluative norms are in force requires assessing the constitutive rules for whether they ascribe a concept counting–as compliance/violation in a context that holds in the social reality.\nModal norms are counts–as statements ascribing explicit deontic (obligation/prohibition/permission) positions in the social reality. Specifically, as Searle proposed in [213, p. 63] “A counts–as undertaking an obligation to do B in context C”. For example, communicating using a communications provider’s services establishes an obligation for the communications provider to store your meta–data in the context that they are operating in the United Kingdom. A modal representation creates a deontic position in the social reality. For example, an obligation to store communications meta–data. The social reality explicitly represents what should be the case or should be done. If we want to know whether the UK’s data retention regulations require meta–data to be stored then we can look at the social reality for whether storing meta–data obliged. Determining which modal norms are"
    }, {
      "heading" : "24 2. BACKGROUND",
      "text" : "in force requires inspecting the built social reality for which deontic modal statements hold. In this dissertation, one objective is to reason about norms that govern other norms. Expressing and determining that particular norms should (not) be imposed differs between modal and evaluative norms. There are two ways for a norm to express that it is required that other norms do not require storing communications metadata in the context that a user has not consented to their communications metadata being stored.\nIn the evaluative form one possible representation is to nest a counts–as rule within another counts–as rule. For example, “the rule (storing metadata counts–as compliance in a context C) counts–as a violation if context C is somehow compatible with the user not consenting)”. There may be other evaluative representations, but it appears to be the simplest that fully captures a norm stating the requirement for other norms to not require a specific social fact. In a modal form an unconditional constitutive rule seems to express the same thing – “it is prohibited to oblige a user’s metadata to be stored in the context that they have not consented”.\nThe modal norm appears simpler and with little difference between prohibiting an obligation to store metadata and the modal norm obliging metadata to be stored. We would expect that determining compliance is more or less the same for a modal norm obliging storing metadata compared to a modal norm prohibiting obliging storing metadata. In comparison, the evaluative version seems far more complex and is not a simple generalisation of evaluative norms about events. This dissertation considers a modal norm representation for simplicity of reasoning about norms that regulate other norms.\nNorms prescribe a social reality and are often used together with counts–as rules ascribing non–normative institutional facts. According to Sergot [216, 217], and Jones and Sergot [135], a legal system (what we call an institution) largely consists of rules that define concepts (what we call counts–as rules ascribing institutional facts). Secondary in occurrence to rules defining concepts are the institution’s norms. Definitional rules are used for succinctness, according to Ross [207]. For example, we can define storing communications metadata or content data as counting–as storing personal data. If we want to describe a new concept relating to personal data then we can refer to personal data rather than everything that constitutes personal data. For example, disrespecting someone’s privacy is storing their personal data without their consent, rather than storing their metadata or content data or ... without their consent. Such definitional rules, according to Grossi et al. [109] and Breuker et al. [32], allow norms to be issued more succinctly over abstract concepts. For example a norm stating “you should not disrespect someone’s privacy” is more succinct than “you should not store content data without consent”, “you should not store metadata without consent”, etcetera. Institutions largely comprise concept defining rules, which ascribe an abstract social reality, over which norms are concisely defined.\nThe key points in these definitions subscribed to by this dissertation are:\n• Norms can take an evaluative or a modal form. An evaluative form does not make explicit that there is an obligation/prohibition/permission in force, it simply states a social action will cause compliance or a violation. A modal form makes explicit that something is obliged/prohibited/permitted in the social reality. The modal form offers a simpler way to represent norms governing other norms and a straightforward way to evaluate such norms. Chapters 3 to 5 formalise modal norms."
    }, {
      "heading" : "2.2. GOVERNING MULTI–AGENT SYSTEMS 25",
      "text" : "• Two ways to ensure norms are abided by are found in the literature – regimentation and enforcement. Regimentation assumes agents can be directly controlled. Enforcement does not assume agents’ actions can be controlled, instead it aims to guide agents’ behaviour. This dissertation does not make assumptions that agents can be controlled directly. In chapters 3 to 5 we look at soft constraints which guide, rather than regiment, agents in their actions within an MAS and how they design institutions. However, in Chapter 6 we look at a kind of hard constraint in the form of rules stating which institutional rule changes are possible. These are not hard constraints in the traditional sense (e.g. physically preventing an agent to board a train or directly controlling an agent’s reasoning to comply with norms). So, we call these hard institutional constraints.\n• Norms are defined in terms of an abstract social reality created by counts–as rules. Counts–as rules and norms are closely tied, counts–as rules by building an abstract social reality provide a pragmatic means to author concise norms. The link between constitutive rules ascribing abstract concepts and norms defined over these abstract concepts is focussed on in Chapter 3 and Chapter 4. Counts–as rules that make the social action of changing rules possible are addressed in Chapter 6.\n2.2.3. GOVERNING INSTITUTIONAL DESIGN AND ENACTMENT In this section we discuss how institution designers, such as legislators, are governed. The need to govern institution designers is motivated by the fact that they are autonomous agents. Being autonomous agents, institution designers are liable to behaving in ways that are sub–ideal. For example, designing an institution that takes away agents’ rights or enacting institutional rule changes without following relevant procedure, such as obtaining a majority vote from a parliament. Hence, we look at how institutional designers are governed in their institutional designs and institutional change enactments, which we describe further from an informal point of view in this section.\nGOVERNING INSTITUTIONAL DESIGN: MULTI–LEVEL GOVERNANCE The problem with agency is that agents are liable to acting undesirably and hence need institutional governance; the problem with institutional governance is that autonomous agents can design subjectively ‘bad’ institutions. For example, an institution can lack coordinated regulations with institutions governing other jurisdictions or place unacceptable limits on agents’ rights. One solution is to override an institution designers’ regulations. But this would violate their autonomy and the principle of subsidiarity – what can be legislated at the local level should be left up to the local level. Hence, institution designers need to be guided in designing subjectively good institutions. In MAS agents are guided towards good behaviour with institutions governing their actions. In order to guide institution designers, institutions are used to govern institution designs.\nMulti–level governance is an umbrella term for governance styles where institution designs themselves are governed. We depict it abstractly in Figure 2.1. The term multi–level governance is taken from political science [121] (alternatively called multi–tier and polycentric governance). An early conceptualisation by Marks [166] views multi–level governance as negotiation between state actors in the European Union to achieve coordinated"
    }, {
      "heading" : "26 2. BACKGROUND",
      "text" : "goals through regulatory change. The negotiated outcome being binding agreements/institutions between EU member states to design their institutions (national legislation) in such a way that they implement those binding agreements. In effect, the negotiations establish a hierarchy of institutions. The negotiated binding agreement being a higher–level institution governing the design of member states’ legislation, which are lower level institutions. More recently, Börzel and Risse [30] conceive multi–level governance as existing at sub–national, national and supranational levels. Conceptually, elected institutional designers (i.e. local councils, national governments, EU governing bodies) create institutions to govern institutions at lower governance levels and comply with institutions enacted at higher governance levels. Hooghe and Marks [121] classify multi–level governance into two types. In the first type, an institution at a higher–level governs a jurisdiction of institutions nested at a level below. In this type lower–level institutions do not belong to any other jurisdiction and are only governed by a single institution at the level above. In the second type institutions at each level can belong to multiple jurisdictions and therefore be governed by multiple higher–level institutions. More generally, multi–level governance comprises institutions at higher governance levels (e.g. EU directives) governing the institution designs operating at lower governance levels (e.g. national legislation) which in turn might govern institution designs at even lower governance levels (e.g. sub–national regulations) etcetera.\nMulti–level governance guides institution designers towards enacting ideal regulations. Eichener [65] showed multi–level governance in the European Union successfully resulted in cooperating legislation on occupational safety. By issuing higher–level institutions, an EU directive, the EU established workplace health and safety regulations across the EU. The health and safety regulations were coordinated in the sense that no country had more relaxed regulations allowing them to out–compete other member states on labour costs. Hence coordinated regulations ensured no ‘race to the bottom’ was triggered. From a human rights point of view, multi–level governance has ensured legislation that violated cer-"
    }, {
      "heading" : "2.2. GOVERNING MULTI–AGENT SYSTEMS 27",
      "text" : "tain rights of agents is revoked, such as the right to privacy set out by EU human rights law [48, 70]. In Artificial Intelligence, Diaconescu and Pitt [57], Pitt and Diaconescu [198], and Jiang, Pitt and Diaconescu [133], view the multi–level governance paradigm as being applicable to artificial societies such as smart grids. In [57] sub–systems of energy users are governed by institutions, each sub–system (e.g. a small housing community) has its own governance to manage its own energy production and usage. Sub–systems can cooperate, requiring coordinated regulations, such as to ensure greater energy stability by sharing energy. Coordinated regulations can be achieved with hierarchical governance, where an overarching institution ensures institution’s regulations at lower–levels are compatible. Multi–level governance helps to ensure that regulations are subjectively ideal in the sense of being coordinated across jurisdictions and upholding agents’ rights.\nIn multi–level governance, institution designs are governed with regulations that govern other regulations. Since multi–level governance is regulatory it implies compliance is possible but not guaranteed. Hence, regulations governing regulations also give the possibility for non–compliant institution designs. In order to ensure institution designers comply, non– compliance can result in legal action being brought about [210], which Smith [219, p. 15] argues is necessary for effective multi–level governance.\nFrom a philosophical tradition, Von Wright argues that [236] regulation governing regulations (or in his words, higher-order norms) are really there to transmit will. By which we mean, for example, a regulation requiring another regulation to oblige communications meta-data is stored, is really issued because the issuer wishes not just that there is an obligation for meta-data to be stored, but also that meta-data is actually stored. That is, the issuer is transmitting their will for meta-data to be stored via an intermediary regulator, operating at a lower governance level, acting as a conduit for their will. Following this idea, it has been shown by Boella and van der Torre [29] that in order to transmit will via regulation governing regulations there must be regulation enforcement with reward and/or punishment. Two types of enforcement required for effective regulation governing regulations, need to be distinguished. First, enforcement of the regulation governing regulations, such as punishing EU member states for not implementing an EU directive, which helps to ensure the will is transmitted from the higher-authority to a lower-authority. Secondly, the enforcement of the regulations governing society, which are designed to be compliant with regulation governing regulations. For example, the Data Retention Directive [71] requires other regulations to not just oblige meta-data to be stored but also to enforce that obligation by punishing for not storing meta-data. Without enforcement, a regulation could be compliant with a directive by obliging meta-data to be stored and yet that obligation would be meaningless since it is unenforced. Moreover, enforcement is required so that the will of the higher-authority (e.g. an issuer of an EU directive) is transmitted all the way down to the societal level. Philosophically, regulation governing regulations only make sense if firstly they are enforced through reward/punishment for (non–)compliance and secondly if they also require the enforcement of the regulations that they require to be implemented (if any).\nDetermining such (non–)compliance in multi–level governance is different from determining the compliance of societal members with an individual institution. The main difference is that in multi–level governance, when compared to single–levelled societal governance, regulations operate at different levels of abstraction. Regulations are the most"
    }, {
      "heading" : "28 2. BACKGROUND",
      "text" : "abstract in the highest–level institutions and the most concretely defined in the lowest–level institutions. To give an example, at the (typically) highest level of governance human rights charters use abstract terminology such as ‘fairness’ or ‘privacy’ which can have many different interpretations. At a slightly lower–level, such as supranational agreements or EU directives, the terminology is more precise but countries can comply in different concrete ways. For example, the Data Retention Directive [71] states that member states should legislate for communications metadata (e.g. the time of a phone call) to be stored between 6 and 24 months. The directive’s regulation is far clearer than human rights regulations, but does not provide the precise data retention time. At a slightly lower–level, such as at the level of nation–states, regulations are more concrete. For example, providing a precise time in which data should be stored. In multi–level governance increasingly abstract regulations are prescribed at increasingly higher levels of governance which can be interpreted in many different ways, making determining compliance of institutional designs different from determining compliance of a society’s members.\nInstitutional design compliance is determined by legal monitors such as courts, which interpret concrete regulations to determine if they violate more abstract regulations. To give an example, the European Court of Justice [70] determined that the Data Retention Directive’s relatively concrete requirement for communications metadata to be stored violated the EU Human Rights Charter’s requirement for personal data to be processed fairly [72]. The judgement was based on the interpretation that storing metadata was the same as storing personal data, and storing personal data without someone’s consent was the same as processing data unfairly. In a different context, where someone has given consent, storing personal data would not be unfair data processing. Hence, a relationship between concrete concepts having a context–sensitive abstract meaning is used to determine compliance between concrete and abstract regulations. According to the Searlian institution concept we adopt, the context–sensitive rules linking concrete and abstract social facts are constitutive rules. Hence, the relation between concrete and abstract norms as found in multi–level governance is derived from constitutive rules.\nTo summarise, institutions govern the design of other institutions in what is known as multi–level governance, the main points are:\n• Constitutive rules provide context–sensitive links between concrete and abstract concepts and through a derivation, concrete and abstract norms. Chapter 3 and Chapter 4 adopt constitutive rules to determine links between concrete and abstract norms in different social contexts.\n• In multi–level governance abstract regulations at higher–levels are used to govern concrete regulations at lower–levels. Non–compliant concrete regulations results in punishment. Chapter 3 and Chapter 4 look at formalising and automatically detecting (non–)compliance in multi–level governance. The objective is to flag problems to institution designers before they enact non–compliant institutions (and hence are subject to punishment) and to support higher–levels of governance in monitoring the compliance of lower–level institution designs. In order to support institutional designers in enacting compliant designs, Chapter 5 looks at finding explanatory rectifications for non–compliant institutional designs.\n• Enforcement should be ensured for regulation governing regulations in two senses."
    }, {
      "heading" : "2.2. GOVERNING MULTI–AGENT SYSTEMS 29",
      "text" : "Firstly, the regulation governing regulations should be supported with rewards and/or punishments. We do not look specifically at formalising reward and punishment for regulation governing regulations, but the fact that it should and does exist motivates the contribution of automated compliance checking in Chapter 3 and Chapter 4. Secondly, regulations governing regulations issued by higher-level authorities really require that lower-level authorities do not just implement certain regulations in order to be compliant, but also enforce those implemented regulations. We do not formalise the general principle of both implementation and enforcement required by regulation governing regulations, but we do formalise the specific requirement of the Data Retention Directive [71] to be supported with punishments for non-compliance in Chapter 3 and Chapter 4.\nGOVERNING THE INSTITUTION DESIGN PROCESS: CONSTITUTIVE SECONDARY LEGAL RULES ASCRIBING RULE CHANGE Constitutive rules define how a social reality grows out of brute facts describing the ground truth. Moreover, constitutive rules make certain social actions, such as marriage, possible. Since brute facts (the ground truth) are liable to changing, it follows that the social reality is liable to changing too and so too the social actions that are possible. Consequently, constitutive rules both describe how the social reality is built and how it evolves over time. Biagoli [20] views an institution itself as having similar dynamic qualities, referring to institutions (legal systems) as organic sets of rules that in themselves change over time. Constitutive rules regulate the change of the social reality but are also subject to changing themselves.\nAccording to Hart [117] the complexity of institutions necessitates institutional rules with the sole function to regulate rule change. Hart refers to these rule–change regulating rules as secondary rules. Secondary rules state how and when rules can be changed, modified, repealed and by whom. To give an example, the Italian constitution states that after a law is voted to be enacted by one of the houses of government it is [204][Art. 73] “promulgated by the President of the Republic within one month of their approval”. Such rules regulate rule change by describing the institution design process that must be followed for rule changes to take place. In other words, rules exist with the exclusive function to state what actions constitute rule changes and thereby make the social actions of changing institutional rules possible.\nBiagoli [20] views rules regulating rule change as constitutive rules that ascribe what constitutes a rule change. From this perspective, a physical rule change does not necessarily count–as a rule change. Physically changing a rule in the Italian rule book (i.e. writing it down) does not count–as changing the rule on its own. Rather, only the president approving a law previously voted for by one of the government houses counts–as a rule change, making the social action of rule change possible.\nFollowing this idea, just as constitutive rules ascribe a social reality, making the social reality possible, constitutive rules ascribing rule change make rule changes possible. An analogy can be made to Ricciardi’s argument [206] of the rules of chess constituting the game of chess where moves made outside of chess’ rules can physically be made but then the game of chess is not being played. Likewise, physical rule modifications can be made that do not follow an institution’s constitutive rule change rules, but then according to the"
    }, {
      "heading" : "30 2. BACKGROUND",
      "text" : "institution the rule change has not actually taken place. Taking this view to its logical conclusion – an institution’s rule–modifying counts–as rules constitute its own rule–change system and ascribe the rule changes that can be made.\nThe philosopher Suber [220] famously describes changing institutional rules as a game commonly known as Nomic. In Nomic, a move is proposing a rule change, debating it and then applying it according to the constitutive rules of the game (e.g. by majority vote or some other mechanism). Changing the system’s rules can affect which rule changes are possible in the first place. For example, changing which agents are constituted as being able to change rules by participating in a vote. Suber observes many paradoxes can also arise, in the simplest case by modifying rules that make rule modifications possible. It follows that an agent wishing to change institutional rules to meet their goals, must understand how rule changes affect the built social reality and similarly which rule changes are possible.\nThe effects of rule change on the social reality and possible rule changes also takes a temporal dimension. At the very least, changing rules in the present affects the social reality and possible rule changes in the future. In some institutions it is only possible to change rules from the present onwards – such as ascribed by the United States Constitution [221, Art. 1 Sec. 9 Cl. 3] “No Bill of Attainder or ex post facto Law shall be passed”. In other institutions rule modifications in the past (retroactive modifications) are possible, such retroactive modifications have been made in the United Kingdom [192, Sec. 58]. Given that changing rules affects which rule changes are possible, changing rules in the past, present and future can affect which rule modifications are possible or even happened up until the present.\nIn other cases, constitutive rules ascribe rule changes conditional on the effects of the rule changes. An example is found in the European Convention on Human Rights [48, Art. 7], which explicitly states that retroactive changes to rules are only possible if they do not criminalise formerly innocent people in the past. In order for an agent to determine what rule changes they can make or what rule changes actually took place according to the institution, the hypothetical effects of rule changes must be accounted for.\nThe main points are:\n• Institutional rules are dynamic and subject to being changed over time. In order to determine what the social reality is at any given point we need to understand how rules have been modified and the effects of modification. Chapter 6 provides reasoning for rule modifications.\n• Constitutive rules state what rule changes can be made, that is, the rule changes that are recognised by the institution as being valid. Chapter 6 adopts these kinds of constitutive rules, earlier chapters 3 to 5 adopt constitutive rules in general but not rule–modifying constitutive rules.\n• Rule changes are conditional on the built social reality, the rule changes that have and will take place and the potential effect of the rule changes on the social reality. Chapter 6 pays special attention to an interdependency between rule changes that are conditional on the built social reality and are able to change the social reality.\n2.3. FORMAL FOUNDATIONS 31\n2.3. FORMAL FOUNDATIONS In the previous section we saw that institution designers are governed in what institutions they should design and institutional rule enactments they can make. The idea of this dissertation is to formalise practical reasoning in a single framework: to determine which institutions should be designed, how institutional design non–compliance can be explained to support rectification and what rule modifications can be made. Several foundations for the framework are elicited based on the requirement for a practical framework, and our overview of the informal concepts we wish to formalise given in the previous section. These foundations are:\n• A temporal setting – the physical reality is not static, brute facts are subject to change, consequently the social reality is also subject to change. When a currency is decommissioned, the paper that counted–as money no longer counts–as money. If you are an academic, you are obliged to submit papers to conferences before their paper submission deadlines. Practical reasoning implies reasoning for realistic institutions and consequently reasoning for a temporal setting.\n• Constitutive rules – institutions do not govern over a brute reality, but rather a social reality established by constitutive rules. Constitutive rules are a theory of institutional language and to paraphrase Searle [215, p. 13] if there is no language (e.g. represented as constitutive rules) then there can be no deontology.\n• Modal norms – institutions govern and guide agents towards an ideal with norms. It is simpler to reason about and represent regulations governing regulations using a modal rather than evaluative norms, as this dissertation sets out to do.\nOn top of these foundations, this dissertation lays the following building blocks for formalising the governance of institutional design and enactment:\n• Automatically detecting non–compliance in multi–level governance:\n– Regulations governing regulations – in multi–level governance institutions act to govern other institution designs. The instruments governing institution designs are regulations governing other regulations.\n– Abstraction based on constitutive rules – in multi–level governance institutions are designed at different levels of abstraction. Lower–level institution’s concrete regulations are interpreted for whether they comply with the abstract regulations at higher–levels of governance. The interpretation between concrete and abstract concepts is based on constitutive rules. In turn, the interpretation of concrete norms in terms of the abstract norms that govern them is derived from relationships between concrete and abstract concepts defined by constitutive rules.\n• Automatic resolution of non–compliance – when an institution is designed that is non–compliant, punishments can be issued. In order to avoid punishment an institution designer should rectify the underlying causes of non–compliance rather than enacting a non–compliant institution. The assumption is that it is preferable to rectify"
    }, {
      "heading" : "32 2. BACKGROUND",
      "text" : "non–compliance whilst remaining as closely to the institution’s original design goals rather than not enact an institution in the first place.\n• Determining which rule–changes can be made:\n– Rule–modifying constitutive rules – institution designers are constrained in which rule modifications they can make by constitutive rules. These constitutive rules ascribe rule modifications based on the context in which the modification takes place, including the hypothetical effects of rule modification.\n– Modifiable institutions in the past, present and future – institution designers can make modifications to institutions. These modifications can be at any point in time made possible by the rule–modifying constitutive rules.\nIn summary, this dissertation builds on foundational concepts comprising institutional reasoning in a temporal setting, constitutive rules and modal norms. Building on these concepts, this dissertation contributes novel formalisations of institutional notions for institutions governed in multi–level governance, explanations for non–compliant institution designs and institutions comprising rule–modifying constitutive rules, where the institution can be modified over time. Collectively, these novel formal building blocks allow us to reason about institutional design and enactment governance.\n2.4. FORMAL APPROACHES In this section existing formal approaches for normative and institutional reasoning are compared. We focus on approaches that provide useful historical and conceptual context or provide foundations on which to base our framework. In formal philosophy, deontic logic is the field dedicated to the study of ‘ought’ and other normative statements relevant to institutional reasoning. This section overviews a few systems of deontic logic and related developments.\n2.4.1. STANDARD DEONTIC LOGIC Von Wright’s Standard Deontic Logic (SDL) 1 [234] is the first deontic logic widely considered to be a viable formalisation of ought (see [86, p. 5] for a historical overview dating back to medieval times). SDL is situated in a propositional setting. It introduces modal operators over propositional formulae p to express the deontic modalities of obligation (Op), prohibition/forbidden (Fp) and permission (Pp).\nVon Wright introduced an axiomatisation for the modal deontic operators which, among other axioms, provided equivalences between the deontic modalities that have been used in many other systems of deontic logic. These equivalences are, what is forbidden is obliged to the contrary (Fp =O¬p) and what is permitted is not obliged to the contrary/not forbidden (Pp = ¬O¬p) (i.e. permission is the dual of obligation). This scheme gives us the well known deontic square of opposition depicted in Figure 2.2, succinctly summarising the relationships between the different modalities.\n1n.b. Standard is a moniker and does not denote that SDL is by any means the standard [86, p. 39], hence we do not restrict our search for an appropriate formalism to just SDL."
    }, {
      "heading" : "2.4. FORMAL APPROACHES 33",
      "text" : "denoted with , implications are denoted with and sub-contraries are denoted with . For further geometric analyses of deontic and related logics see [179].\nSDL is not without its problems, rather it is susceptible to a number of so–called paradoxes. In SDL conditional norms, such as if there is a fence ( f ) it should be a white fence (w) are represented with formulae mixing propositional sentences and deontic operators ( f →Ow). A problem arises if we extend the previous example with a prohibition on there not being a fence (F f ), a fact that there is a fence ( f ) and the implication that a painted fence implies there is a fence (p → f ). The problem is that it leads to a contradiction in SDL – there ought to be a fence and not a fence (O f ∧¬ f ) [201]. However, in principle, there should not be a contradiction. In general, a problem arises where there is a primary norm (forbidden for there to be a fence) that is supported with a secondary norm that when applied represents a level below what is ideal (the fence should be painted white). Potentially, such a secondary norm can also be used to represent a punishment for sub–ideal behaviour or circumstances, for example, you should not speed but if you do then you should pay a fine. Such statements are known as contrary–to–duty norms (CTDs). They are viewed as being an important aspect of the law where norms are commonly used to define punishments for non–compliance or state what the sub–ideal circumstances are [134, 135]. Hence, it is important contrary–to–duty norms are handled adequately.\nSeveral proposals address the problems caused by CTDs in SDL. A common view is to distinguish between prima facie oughts, the oughts that on the face of it hold, and all things considered oughts [86, p. 256]. For example, prima facie it is forbidden for there to be a fence and obliged the fence is painted white. All things considered, it is only obliged the fence is painted white. Proposals addressing CTDs thus derive ‘all things considered’ oughts from prima facie oughts. For example, by using defeasible reasoning [209] to exclude prima facie oughts that are violated, in favour of secondary oughts. Other significant approaches are preference–based formalisations [228, 230] which interpret ought as ideal and CTDs as representing sub–ideal circumstances, then separating contradictory oughts into separate worlds of ideality. For example, in the ideal world it is forbidden for there to be a fence, in a sub–ideal world the fence ought to be painted white and both do not hold in the same ideality (hence no contradiction). In all of these approaches the semantics of classical implication are replaced with non–classical semantics.\nRelevant to our dissertation is the fact that, as expected, such a modal representation for"
    }, {
      "heading" : "34 2. BACKGROUND",
      "text" : "norms supports nesting. Nested deontic modalities such as OOp are grammatical in SDL. Unfortunately, SDL is a strictly non–temporal logic and hence unsuitable on its own for the purposes of this dissertation. Furthermore, SDL lacks constitutive rules; with material implication as the only conditional of which context is not a part.\n2.4.2. ANDERSON’S REDUCTION Anderson proposed a logic that replaces SDL’s deontic operators in favour of evaluative norms [9, 10]. In Anderson’s proposal SDL is reduced to alethic modal2 logic by replacing Op with a formula stating that it is necessary (ä) that going against the norm (¬p) materially implies a violation (V ): ä(¬p → V ). In Anderson’s reduction, norms are rules that ascribe violations.\nGrossi [105] developed Anderson’s idea further by proposing a logic for evaluative norms expressed as constitutive rules. In Grossi’s proposal a logic of context and ascriptions is proposed. In his proposal implications operating on a context i are introduced, denoted as ⇒cli . Evaluative norms stating that p is a duty are represented as a formula ascribing a violation V in a context i : ¬p ⇒cli V . In Grossi’s proposal, Anderson’s reduction is realised in a logic of constitutive rules. Hence, Grossi realises the context–sensitive ascription of abstract institutional concepts, including violation, in a deontic logic.\nAldewereld et al. [4] build on these proposals with a formalism for reasoning about evaluative norms at different abstraction levels. They combine constitutive rules to ascribe abstract institutional facts from more concrete brute or institutional facts. Constitutive rules define norms by ascribing evaluative statements (compliant and violation in their case). To give their example, the rule “transferring money with a credit card counts–as payment” ascribes the abstract institutional fact of payment from the more concrete fact of using a credit card. A norm is then “paying counts–as fulfilment’. The norm is abstract in that it states someone should make a payment but it does not concretely define, on its own, what payment exactly is. By providing a semantics for counts–as statements that includes a form of transitivity, norms can also be concretised. For example, through transitivity, using a credit–card counts–as fulfilment. In their proposal, constitutive rules are contextual and hence transitivity only holds between constitutive rules if their contexts are compatible. To summarise, Aldewereld et al. take the principles behind Grossi’s reduction to constitutive rules in order to reason about concretisation of abstract norms.\nDevelopments in the reductionist approach to norms are relevant to this dissertation. First, they offer a way to reason about abstract norms, in this case by concretising abstract norms. Hence, it seems that the same approach can be taken to multi–level governance. Perhaps, abstract regulations governing other regulations at higher–levels of governance can be reified to determine their concrete meaning and therefore whether concrete norms violate the abstract norms. Conversely, perhaps the same reasoning can be reversed to take concrete norms and abstract them to determine if they are compliant with more abstract norms. However, a major stumbling block is that by reducing norms to evaluative constitutive rules it is no longer straightforward to represent and reason about regulation governing regulations, as we argued previously. Consequently, this dissertation does not take a reductionist approach to norms.\n2If this is Greek to you, alethic modalities are modalities denoting truth, in comparison to deontic modalities, which denote normativity."
    }, {
      "heading" : "2.4. FORMAL APPROACHES 35",
      "text" : "2.4.3. TEMPORAL DEONTIC LOGICS The previously described approaches are situated in a static setting with no consideration for time. Hence, they deal with non–temporal norms. For example the norm ‘you should not murder’ has no temporal element. However, in the real world duties are often temporal and contain deadlines. For example ‘you should submit your paper before the submission deadline’. Thus, there are deontic logics that deal explicitly with time, by which we mean a temporal ordering of states containing formulae, including temporal obligations.\nSeveral temporal logics independent from deontic logic already exist. The prominent ones are Linear Temporal Logic (LTL) [199], Computational Tree Logic (CTL) [69] and CTL* [68], which combines both. There are also logics of actions as transitions between states. Dynamic logic [116] being a prominent action logic, which combines modal logic operators of necessity and possibility with actions to express and reason about statements such as ‘it is possible that action a will cause p to hold’. A common approach to temporalising deontic logic is to combine a deontic logic and one of the aforementioned temporal or action logics.\nTo name a few. Broersen et al. [33] combine SDL and CTL. They introduce dyadic deontic modalities (O(ρ ≤ δ)) representing a propositional formula ρ should hold before or at the same time as a formula δ representing the deadline. In Broersen et al.’s formalisation if δ occurs before ρ then a proposition denoting violation holds. Conversely, ρ holding before or at the same time as δ causes a proposition denoting norm fulfilment to hold. An obligation holds from one state to the next until it is fulfilled or violated, that is, a norm persists by default.\nF. Dignum et al. [60] combine SDL and dynamic logic. Obligations can take the form O(α < ρ < δ) representing an obligation conditional on α that requires action ρ to be performed before δ. States also have time indices. The special index now denotes the time of the current state. In F. Dignum et al’s proposal instantaneous norms that must be fulfilled immediately are expressed as O(α< ρ < now+1) representing that α causes an obligation for ρ to be performed before the next state.\nF. Dignum and Kuiper [59] combine SDL with a logic of ‘dense’ time in which actions are not instantaneous. Rather, actions are performed over a time period. An obligation O(α) represents that an action α should be continuously performed until it is done. It is interesting to note that violations persist from one state to the next until the norm that has been violated is ‘repaired’ (e.g. by performing some punishing action, such as paying a fine).\nTo summarise, temporal deontic logics allow expressing that there should be an ordering in which propositions hold in states or actions are performed. A temporal obligation holding in a state typically states that at the present time an α should be done/hold before a δ. Obligations persist from one state to another if not discharged. Hence, if α and δ do not occur, then α should still be performed/hold before δ. Instantaneous norms then just state that an α should be done/hold before the next state. In this dissertation we adopt similar notions in Chapter 3, Chapter 4 and Chapter 5 – a deontic statement persists until discharged, and either represents one thing should be done before another or that something must be done instantaneously."
    }, {
      "heading" : "36 2. BACKGROUND",
      "text" : "2.4.4. SEINSOLLEN AND TUNSOLLEN: OUGHT–TO–BE AND OUGHT–TO– DO There is a difference between ought–to–be statements about what should hold (seinsollen) and ought–to–do statements about what should be done (tunsollen) [35]. In SDL [234] the two are not distinguished; SDL abstracts away from whether a proposition denotes an action or a state–of–affairs. Subsequent developments have focussed on one or the other, or both.\n• Ought–to–be – logics of this type are characterised by obligations that hold in states and are about propositions that hold in states. Examples include [33, 53, 98]. It is interesting to note that ought–to–be can represent two types of obligation explored in [98]. The first is an achievement obligation: a state of affairs should be achieved before a deadline. The second is a maintenance obligation: a state of affairs should be maintained up until a deadline.\n• Ought–to–do – logics of this type are characterised by obligations that hold in states and are about events or actions that occur when transitioning between states. Examples include [33, 58, 60, 122]. It is interesting to note that Broersen et al. [33], Horty and Belnap [122], and V. Dignum et al. [58] use a stit (see–to–it–that) operator (or a version thereof) to represent the action of an agent bringing about a particular state of affairs. For example stitφ is an action to bring about φ in a state. Consequently, ought–to–do statements are framed as ought–to–bring–about a particular state, abstracting away from labelled actions whilst still remaining ought–to–do statements.\nIn this dissertation, we look at obligations about agents’ actions (or events if we view actions as requiring intention). This is because they seem to be more concrete and are frequently found in the law – you should not murder, you should not steal, if you do either you should go to prison. We also look at obligations about obligations to reason about regulations governing other regulations. Yet, obligations are normative propositions that hold in states and so obligations about obligations are seinsollen ought statements about a state of affairs. As Von Wright points out, if obligations are about actions then nested modalities are nonsensical [235, p. 91]. Where does this leave us, do we look at both ought–to–do (obligations about actions) and ought–to–be (obligations about obligations which hold in states)?\nOne approach would be only to look at ought–to–do. Here, the idea is to follow Wansing’s suggestion [237] that nested obligations are obligations to see–to–it–that obligations hold. The idea being that a nested obligation is an obligation to perform a locutionary act to establish an obligation, for example, if we are an authority with legal power, by saying “I command you to do X” we can see–to–it–that there is an obligation to do X (see Searle’s account of how to go from is to ought, or obligations from locutionary promises [212]). The problem is, this means imposing obligations requires agency. However, in this dissertation we set out to look at institutions with regulations that govern other regulations – an institution is not a type of agent, it belongs to a class with instantiations that include the written law, promises, contracts etcetera.\nHence, in this dissertation we combine ought–to–do for obligations that govern agents’ actions and ought–to–be for norms governing other norms. The combination of both was"
    }, {
      "heading" : "2.5. PRACTICAL FORMAL GOVERNANCE 37",
      "text" : "also looked at by D‘Altan et al. [51]. Chapter 3, Chapter 4 and 5 combine both types of ought. Other aspects, of ought–to–be statements such as maintenance and achievement obligations are not considered in this dissertation.\n2.5. PRACTICAL FORMAL GOVERNANCE In this section a number of frameworks for practical formal governance are proposed. There are many links between deontic logics and the following research described and hence the two cannot be easily disentangled. Rather, the following frameworks are characterised firstly by drawing from a wider informal sphere such as legal and organisational theory, whilst deontic logics come from a philosophical tradition. Secondly, by being pragmatic, such as by having a low computational complexity (e.g. by talking about obligations over single propositions rather than arbitrary propositional formulae) or providing clear links to implementation. It is important to note that this dissertation falls firmly in practical formal governance, since it provides a formal account that is characterised in such a way that the decision procedure is obvious and/or is coupled with a computational framework (i.e. an implementation).\n2.5.1. ORGANISATIONAL FRAMEWORKS Whilst this dissertation focuses on institutional reasoning a similar coordination mechanism, multi–agent organisations, is also widely studied for formalisation. Like institutions, organisations comprise a normative dimension. In contrast with institutions, organisations also comprise constructs such as roles agents play and interaction patterns to achieve various organisational objectives. If an institution is legislation, contracts and promises, then an organisation is a university or a corporation within which institutions can play a part in the form of contracts and other bodies of rules and regulations. Consequently, formal reasoning between the two areas has much overlap (e.g. norms), institutions tending to focus on legal concepts (e.g. legal empowerment to affect an institution) whilst organisations focus on cooperation concepts and processes to achieve goals (e.g. interaction patterns).\nHarmonIA [233] is an organisational framework that focuses on conceptualising ‘electronic organisations’ and methodologies for their design. In HarmonIA, organisations comprise different levels of abstraction. These are an abstract level, concrete level, rule level and a procedure level. At the abstract level, the organisation defines abstract norms such as statutes. At the concrete level the organisation refines the abstract level’s norms to concrete policies. At the rule level further refinements are made to the concrete norms as rules for agents to follow in order to comply with the concrete norms. The procedure level comprises the actual computational implementation of the rules. In HarmonIA norms are modal and their refinement/concretisation is based on the counts–as relation. However, a semantics for norm refinement is not investigated. Instead the approach is given [233, p.94] and tools to automate refinement/concretisation are left for future work [233, p.168]. HarmonIA’s focus is on the conceptualisation and design methodology for organisations in MAS at different abstraction levels, but not the formal reasoning.\nMOISE+ [124] provides a conceptualisation for designing organisations comprising roles, dependencies between roles and norms. In MOISE+ norms have a modal representation. In contrast to much of the work in formal philosophy and elsewhere, MOISE+ does not"
    }, {
      "heading" : "38 2. BACKGROUND",
      "text" : "provide a formal semantics for norms or other organisational concepts. Rather, it focuses on programming organisations at an agent level and an organisation–control level. At the agent level, the J–MOISE+ (sub–)framework provides a way to program agents to enact roles in a MOISE+ organisation. At the organisation level, the S–MOISE+ [125] (sub–)framework provides an interface for agents to join a MOISE+ organisation. Through the S–MOISE+ interface organisational constraints are regimented on agents as hard constraints such that agents are forced to comply. MOISE+ is an agent–organisation framework focussed on programming agents and organisations, there are many aspects relevant to institutions that are not considered (e.g. constitutive rules, abstraction and rule change).\nOperA [61] is a framework providing an organisation design methodology and formal organisational reasoning. Conceptually, an organisation in OperA is analogous to a human organisation. An organisation comprises a social structure defining organisation objectives, agent roles and relations between roles; an interaction structure describing scenes for agents to play roles in and landmark objectives for the organisation to achieve; a normative structure describing the norms agents must abide by when fulfilling roles and interacting in scenes; and a communicative structure describing the communicative acts agents can make. An organisational logic formalises OperA organisations. The logic combines deontic logic and temporal logic to define normative reasoning for the norms agents adopt when enacting roles and reasoning about the responsibilities and capabilities endowed on agents for enacting those roles. The logic also determines when organisational landmarks are achieved. The formal theory provided by OperA is implemented with the Operetta tool [5] for checking organisational properties. In OperA organisations are the formal counterpart to human organisations and a formal semantics provides organisational reasoning, but OperA lacks many aspects found in the legal/institutional sphere (again, constitutive rules, abstraction and rule change).\nOperA+ [133] by Jiang builds on the OperA framework with additional organisation design concepts and methodology, and novel computational mechanisms for organisational reasoning. Enhancing OperA’s organisation design methodology, OperA+ proposes multiple levels of abstraction. The most abstract level comprises organisational objectives. From here, the design process enters a contextual level where the organisation design is concretised by decomposing the organisation objectives into sub–domains or situations. Jiang uses a top–level objective of train maintenance as an example where in this case the sub– domains are planned and unplanned maintenance. Such sub–domains are then concretised further at a solution level, by instantiating the sub–domains as social structures and normative structures. Like in OperA, the social structures comprise roles agents play and the normative structure comprises norms. Unlike OperA, OperA+ also includes constitutive rules for establishing institutional actions from brute facts. Opera+ also introduces an operational level, comprising groups of agents enacting roles represented as group preferences for particular actions. OperA+ organisations are operationalised using Coloured Petri Nets (CPNs), a graph–based formalism for describing distributed systems and computing their states over time. Norms are represented as CPN graphs, akin to an evaluative norm representation. Since norms have an evaluative representation, it is unclear how to extend OperA+’s representation and reasoning to norms governing other norms. Other aspects missing from OperA+ but focussed on in the dissertation you are reading now include a semantic definition of links between concrete and abstract norms and governing rule change.\n2.5. PRACTICAL FORMAL GOVERNANCE 39\n2.5.2. INSTITUTIONAL FRAMEWORKS Institutional frameworks in MAS can be understood as analogous to their informal counterparts (e.g. legislation). Typical elements are constitutive rules, norms, and the ability for the institution to evolve from one institutional state to the next according to the change of brute facts and the institution’s constitutive rules. Research on institutional reasoning falls largely into two spheres, legal reasoning (e.g. for legislation) and open multi–agent systems (e.g. artificial markets). We describe three frameworks in what is by no means an exhaustive overview, instead we focus on the frameworks that are closest to what this dissertation is trying to achieve.\nOCeAN [78, 81, 82] (Ontology CommitmEnts Authorizations Norms) is a high– level institution specification language and an operationalisation in the discrete event calculus. In OCeAN an ontology specifies institutional actions, events and roles agents play (hence there is an organisational flavour to OCeAN). OCeAN adopts constitutive rules (“A counts–as B in a context C”) in order to define an agent communication language. Here, the communicative act ‘A’ counts–as an institutional action in a context where the communicative agent is playing a role that authorises that agent to realise the institutional action. For example, an auctioneer telling everyone the auction is open counts–as opening the auction, where playing the role of auctioneer represents the agent’s authorisation. OCeAN also contains a normative component, adopting the usual deontic modalities in a modal representation. OCeAN’s focus is on ontologies, social commitments and organisational concepts such as roles.\nTMDL [98, 103] (Temporal Modal Defeasible Logic) is a non–monotonic logic for reasoning about institutions over time. The institutional concepts captured are the deontic modalities, constitutive rules, normative power (the ability for an agent to establish a norm through a communicative act), and positive and negative rights. The logic is temporal in the sense that propositions (including modal statements) hold at points in time when they are initiated by an action according to a rule, and persist in holding (inertia) until they are terminated. The logic’s modus operandi is defeasibility, the idea that a proposition is defeasibly proven but a proof to the contrary defeats the proposition and makes it disproven. In TMDL there are three types of rule in horn–clause form. Firstly, strict rules φ0, ...,φn → ψ where the consequent is strictly provable when the antecedent is provable and cannot be disproven if the antecedent is proven. Secondly, defeasible rules φ0, ...,φn ⇒ ψ where proving the antecedent means the consequent is defeasibly proven, but proving contrary propositions from the consequents of other rules defeats ψ or the rule’s defeasible premises and makes ψ disproven. Thirdly, defeater rules φ0, ...,φn ψ, which do not make their conclusion proven, but rather defeat contrary premises and conclusions of other rules that are defeasibly proven. To determine which rules can defeat other rules, a superiority relation between rules is specified.\nDefeasible logic, such as TMDL, defines a proof procedure that can be implemented in Prolog [13]. The idea is that a derivation asserts the conclusion of a rule, then all the ways to attack the derivation and its conclusion are found, all the attacks of the attacks are found, and so on. This process continues until no more attacks can be applied and it is determined whether there remain any undefended attacks of the original assertion, in which case it is not proven, and otherwise it is proven. TMDL, through its proof procedure, makes it possible to reason about exceptions as found in the law and also exceptions to exceptions\n40 2. BACKGROUND\netcetera. InstAL [42, 43] (INSTitution Action Language) is a framework for temporal institutional reasoning. An institution specification in InstAL comprises events that can occur and fluents that can hold in the institution, as well as constitutive rules. The events can be observable corresponding to a brute fact, or institutional such as ‘payment’ or denoting a norm is violated. Fluents represent institutional facts about a domain, the deontic statements of obligation and permission in a modal–form, and institutional empowerment denoting an event is empowered to affect the institution. In InstAL, anything not permitted is prohibited and hence a prohibitive society is reasoned about. The constitutive rules ascribe institutional events from observable events (corresponding to the notion of a brute fact changing) and other institutional events. The constitutive rules also ascribe the effects of institutional events on the institution’s state, causing institutional fluents to be initiated or terminated from one state to the next. Regulations are represented as constitutive rules where the consequents are the initiation or termination of obligation, permission and empowerment fluents.\nInstAL’s semantics are defined with a formal framework based on set theory and mathematical functions. Complementing the formal framework is a computational framework that executes institution specifications in response to a trace of observable events. The computational framework uses Answer–Set Programming (ASP), a non–monotonic logic programming language [91, 92] based on the stable model semantics [93]. The output of the framework is a state–transition system. Each state contains fluents representing institutional facts and normative positions (obligations and permissions). Transitions between states are the events produced by observable events and the transitive closure of constitutive institutional event generation rules. Fluents persist by default from one state to the next unless terminated, capturing the common–sense law of inertia using Event–Calculus–like constructs. InstAL is complemented with a framework for finding rule changes to meet certain properties, in this case resolving inconsistencies between norms, based on Inductive Logic Programming in ASP [154, 157].\n2.6. KNOWLEDGE GAPS AND APPROACH In this section we compare the frameworks described previously, depicted in table 4.7, in terms of their support for PARAGon’s objective of institutional design and enactment governance reasoning. The comparison is split between foundational representation and reasoning requirements for our formalisation aims, and the necessary conceptual building blocks (shown in bold) we require to formalise institutional design and enactment governance. We also denote those frameworks with a corresponding implementation, although the degree to which there exists an implementation varies from one framework to another (see the previous discussion).\nThe foundational representation and reasoning constructs for this dissertation are modal norms, since they can be extended to nested modal norms and therefore regulations governing regulations; a temporal setting for real–world relevance and the reasoning about rule–change over time; and constitutive rules for reasoning about institutions operating at different levels of abstraction. The conceptual building blocks we require are: rule– modifying constitutive rules for ascribing which rules an agent can modify and when; temporal rule modifications; regulations governing regulations for reasoning about multi–level"
    }, {
      "heading" : "2.6. KNOWLEDGE GAPS AND APPROACH 41",
      "text" : "governance; norm abstraction or concretisation based on constitutive rules for interpreting institutions in multi–level governance; and automatic rule change for compliance in order to help institution designers in multi–level governance enact institutions whilst avoiding punishment for non–compliance. As we can see, the foundational components are adequately supported by some frameworks, however the conceptual building blocks are not and hence it is those building blocks which the PARAGon framework addresses.\nOrganisation frameworks support some necessary foundational institutional reasoning constructs, such as norms and potentially constitutive rules. However, they lack the semantics for the governance of institutional design and change. In the case of the HarmonIA"
    }, {
      "heading" : "42 2. BACKGROUND",
      "text" : "framework, whilst significant attention is paid to norm concretisation it is done by way of example and not with a general semantics. The same is true for the other aspects of HarmonIA. What HarmonIA does offer, is an indication of on what basis norm abstraction should be reasoned about. Namely, constitutive rules. In fact, that is the same intuition this dissertation takes, albeit we provide a formal semantics for reasoning about abstracting rather than concretising norms using constitutive rules. MOISE+, OperA and OperA+ all offer some foundational aspects that could potentially be built on by this dissertation. However, the institutional reasoning frameworks, focussing on institutions as we do, offer further institutional reasoning foundations suitable for our aims.\nAs for the institutional reasoning frameworks – OCeAN, TMDL and InstAL all share institutional concepts such as norms, constitutive rules and institutional empowerment. Some differences are that OCeAN also comprises organisation concepts, TMDL incorporates defeasible reasoning and InstAL has been used as a basis for Inductive Logic Programming based norm revision. In all of these frameworks norms are specified at a single level of abstraction, constitutive rules establish an institutional reality but not rule changes, and detecting and rectifying compliant institution designs is not captured. Hence, all frameworks provide necessary formal foundations, but do not close the knowledge gap this dissertation addresses.\nThe question arises as to the suitability of these frameworks for our purposes. In this dissertation InstAL is used as a basis for the institutional reasoning we contribute. The main reason is that in InstAL, due to having an ASP computational framework, it is already possible to apply existing ASP–based Inductive Logic Programming techniques in order to resolve problems with institutions. In the case of [157] the problems resolved are normative conflicts. In this dissertation we seek to resolve non–compliance in multi–level governance and hence Inductive Logic Programming techniques are used and developed towards our aims.\nThe following summarises how the PARAGon framework fills the gap in the knowledge. Determining compliance according to institutional design governance in multi–level governance requires: regulations governing regulations, and norm abstraction or concretisation based on constitutive rules, and is addressed with a formal framework in Chapter 3 and a computational framework in Chapter 4. Automatically resolving non–compliant institution designs to support designers in avoiding punishment requires automatic rule change for compliance and is addressed with a computational framework in Chapter 5. Determining when rule changes are legally made requires rule–modifying constitutive rules and temporal rule modifications, and is addressed with a formal framework in Chapter 6.\n2.7. DISCUSSION In this chapter we began with an overview of the informal concepts behind multi–agent systems, institutions, governance and governing governance. Two aspects stand out. First, there are many parallels between the need to govern agents (due to their autonomy and liability to deviate from the ideal), and governing institution designers (for the same reason, since institution designers are also agents). Second, the informal work looked at in the area of institutions is, in fact, fairly formal (e.g. in the case of Searle’s counts–as rules). On the other hand, work on governing governance appears distinctly informal, where we largely drew on work in political science and examples from real–world legislation."
    }, {
      "heading" : "2.7. DISCUSSION 43",
      "text" : "These aspects led us to identifying the main notions that the PARAGon framework needs to formalise. First, we elicited the foundational notions to formalise (institutions, norms). Then, we identified the building blocks required to formalise governing governance. For example, we elicited the need to rely on modal norms over evaluative norms to reason about regulations governing regulations. Likewise, we argued that it is clear constitutive rules play an important role in governing of governance both for providing links between concrete and abstract concepts and governing institutional enactment of new rules or changes to existing rules. What was unclear at this point was to what extent existing approaches provided the foundations or the building blocks required.\nHence, we provided a comparison between existing formal approaches. We paid particular attention to where the gaps in the existing knowledge lie that need to be filled. Based on this analysis we selected the InstAL framework from which we can use various foundational formal components on which to build the PARAGon framework this dissertation contributes.\n3 FORMALISING COMPLIANCE IN\nMULTI–LEVEL GOVERNANCE\nFor a large class of cases–though not for all–in which we employ the word “meaning” it can be defined thus: the meaning of a word is its use in the language[239, Sect. 43]\nLudwig Wittgenstein\nThis chapter is based on the following papers: King, T. C., Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & van Riemsdijk, M. B. (2016, July). Automated Multi–level Governance Compliance Checking. Journal of Autonomous Agents and Multiagent Systems (JAAMAS). International Foundation for Autonomous Agents and Multiagent Systems. (In Submission) Which extends the following paper: King, T. C., Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2015). A Framework for Institutions Governing Institutions. In Proceedings of the 2015 International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2015) (pp. 473–481). Istanbul, Turkey: International Foundation for Autonomous Agents and Multiagent Systems. [144]\n45"
    }, {
      "heading" : "46 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "In this chapter we look at soft constraints placed on institution designers, which prescribe the institution designs they should enact. The contributions of this chapter are:\n• A formal representation language for institutions governing other institution designs in multi–level governance.\n• A formal semantics for determining when institutions are compliant in multi–level governance, accounting for concrete regulations at lower–levels of governance, governed by increasingly abstract regulations at higher–levels of governance.\nInstitutions (e.g. legislation) govern societies towards ideal and coordinated behaviour with rules and regulations coupled with the means to detect compliance and issue rewards and punishments. Increasingly, institutional reasoning is formalised and computerised with automated normative and institutional reasoning frameworks (see [12] for a review). Such frameworks can support governing bodies in punishing agents and support agents in understanding their legal duties.\nHowever, typical institutions are not written in a vacuum. Rather, institutions are constrained and regulated by higher–level institutions. This is what is called multi–level governance [121]. In multi–level governance, institution designers design institutions comprising rules and regulations, but whose design is also subject to regulation. In 2006 the European Union issued the Data Retention Directive [71] for harmonising member states’ data retention regulations, in 2009 the UK implemented the directive with the Data Retention Regulations [226] in order to avoid fines. Yet, in 2014 the European Court of Justice ruled [70] that the directive was non–compliant with the Charter of Fundamental Rights [72], and annulled the directive. Legislating in multi–level governance exposes institution designers to risks of punishment and wasted legislating time and burdens a judiciary with checking compliance.\nSo far, institutional reasoning frameworks have focussed on single–levelled societal governance. Typically, automated institutional reasoning deals with regulations operating at the level of institutions governing agents and/or corporations. For example, the UK’s Data Retention Regulations [226] obliges communications providers to store communications metadata. There lacks reasoning for cases where regulations themselves are regulated by higher–level institutions in multi–level governance. For example, how EU directives govern national legislation but where EU directives are in turn governed by human rights charters. In this chapter we look at how institutions themselves are regulated by higher– level institutions.\nIn particular, we look at increasingly abstract regulations at higher–levels of governance that govern more concrete regulations at lower–levels of governance. Such abstraction sets multi–level governance apart from single–levelled governance of societies. In multi–level governance at the highest–level, such as human rights charters, regulations are intentionally abstract and open to interpretation. Such abstract regulations provide many ways in which to (non–)comply. At a lower–level, such as EU directives, regulations are more concrete and less open to interpretation. At the lowest level, such as national or sub–national legislation, regulations are concrete and the least ambiguous. Despite the differences in abstraction between levels, each level’s institution design must somehow be demonstrated to be compliant with relatively more abstract regulations at higher–levels.\n47\nTo give an example, the European Charter of Fundamental Rights [72] contains vague regulations requiring that people’s private and family life is respected. The EU’s data retention directive [71] contains a more concrete regulation requiring communications service providers (e.g. ISPs and telephonic companies) to store people’s communications metadata (e.g. a phonecall’s time and place) within a fixed time frame. The directive’s communications metadata regulation must be shown to be compliant with the Charter of Fundamental Right’s more abstract right to a private and family life, or else the directive will be annulled. In fact, the directive was annulled due to violating privacy [70]. At the same time, the directive itself governs the design of institutions – member state’s legislation. Member states must implement the directive in a compliant way in order to avoid fines. The directive gives some scope for member states to implement a compliant institution differently, allowing the data retention period to be between 6 and 24 months. The UK’s data retention regulations [226] are more concrete and must be shown to ensure communications metadata is stored within the required time frame, no shorter and no longer. In fact, they do just that, concretely requiring communications metadata is stored for 13 months which complies with the abstract requirement of the directive to store data between 6 and 24 months. The UK’s institution must be shown to be compliant with the more abstract regulation of the directive in order to avoid fines. In turn, the data retention directive must be shown to be compliant with the more abstract charter of fundamental rights in order to avoid annulment.\nTo this end, this chapter contributes two main formal building blocks that together contribute a system for detecting non–compliance in multi–level governance. These novel elements are:\n• A way to represent and reason about regulations governing regulations – specifically, combining norms about agents’ actions with norms that oblige and prohibit the imposition of other norms in different social contexts. In this chapter we look explicitly at norms, rules that state what should occur and when. In particular, we look at norms that state what the effects of other norms should be.\n• Abstraction based on constitutive rules – specifically, taking concrete norms at lower– levels of governance and defining a semantics that re–interprets those concrete norms by abstracting them to the same level of abstraction the higher–levels of governance govern them at. The semantics define an abstracting relation between concrete norms and their abstract definitions based on context–sensitive links provided by constitutive rules between concrete and abstract concepts. For example, the European Data Retention Directive [71] requires member states to store communications metadata. The semantics determine that storing communications metadata without someone’s consent is, abstractly, unfair data processing.\nThis chapter is written to be as self–contained as possible. Thus, we start by describing the individual components of institutions and the approach we take to reasoning about them in Section 3.1. The representation we use is given in Section 3.2. The formal reasoning is presented in Section 3.4. We describe related work in Section 3.5. Conclusions are presented in Section 3.6.\n48 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE\n3.1. APPROACH In this section we describe the approach we take to automatically determining compliance in multi–level governance. Since we are reasoning about institutions in multi–level governance, we build on an existing institutional reasoning framework. Our proposal requires representation and reasoning for: constitutive rules, modal regulatory rules, higher–order norms, connections between institutions and reasoning about regulation abstraction. The InstAL (Institution Action Language) framework [42, 43] provides constitutive rules and modal regulatory rules. Hence, we base our proposal on the InstAL framework and extend it to multi–level governance with higher–order and abstract norm representation and reasoning. We also modify the InstAL reasoning from being about prohibitive societies (where anything not permitted is forbidden) to permissive societies (everything is permitted unless explicitly prohibited), adding explicit prohibitions and removing explicit permissions. Whilst in InstAL brute facts are observable events or properties which hold in a state (fluents), we only consider brute facts to be observable events. For simplicity, all properties which hold in a state are institutional and not brute in our framework. Based on InstAL [42, 43], an institution in our framework specifies six elements.\nFirstly, following InstAL, events. Events can represent observable changes to reality, corresponding to the notion of brute fact. Events can represent changes to the social reality, corresponding to the notion of institutional fact. For example, the brute fact we call storing metadata is an observable event, whilst storing metadata and storing personal data are institutional events.\nSecondly, following InstAL, fluents which describe institutional facts holding in a social reality and are subject to changing over time. For example, a user consenting to processing their data causes a fluent to hold stating they have consented, which is removed if they revoke their consent. Some fluents represent the deontic positions that hold. The deontic positions denote institutional empowerments, and obligations and prohibitions. Empowerments represent that an institutional event is empowered to affect the institution, meaning an institutional event can occur in the institution. For example, “storing communications metadata is empowered to occur”. Empowerments represent hard constraints on the events that can (in general) occur (for further discussion see [42, 43]). Fluents representing obligations and prohibitions are normative fluents. For example, “an obligation to pay a fine”. Higher–order normative fluents can also be specified, for example an obligation to oblige paying a fine. We deal with institutions in a temporal setting, so the various deontic positions (normative fluents) express that something should be done before a deadline. For example, an obligation to pay a fine within one month.\nThirdly, following InstAL, constitutive rules which cause institutional events to occur when observable or other events occur in a given context. For example, “the observable event of storing metadata counts–as the institutional event of storing metadata”. An example of institutional events causing further institutional events to occur is “storing personal data counts–as unfair data processing in the context that a user has not consented”.\nFourthly, following InstAL, constitutive rules which initiate and terminate fluents in holding due to institutional events. For example, “a user consenting to storing their data counts–as initiating the fluent stating the user has consented”. Constitutive rules establishing what we call normative fluents are norms. For example, “a user using a communications device counts–as initiating an obligation for their communications’ metadata to be stored”."
    }, {
      "heading" : "3.1. APPROACH 49",
      "text" : "Higher–order norms impose higher–order normative fluents. Once a fluent is initiated by such a rule it holds until it is terminated by another rule. That is, these rules initiate and terminate inertial fluents.\nModal norms, which are regulative rules, are constitutive rules which initiate and terminate fluents due to institutional events. For example “a user using electronic communications initiates an obligation for the communications provider to store their communications metadata”. Thus, norms are not a distinctive element of institutions, but rather a type of constitutive rule.\nFifthly, extending InstAL, constitutive rules which derive fluents from other fluents in a particular context. For example, “an obligation to store personal data non–consensually derives (counts–as) unfair data processing in all social contexts”. Viewed as counts–as rules, these rules ascribe a special meaning B to a fluent A in a context C. For example, an obligation to store personal data non–consensually has the special meaning of being unfair data processing. So long as the fluent ‘A’ holds in a context ‘C’ then its special meaning ‘B’ also holds. But, unlike constitutive rules which initiate and terminate fluents the special meaning ‘B’ does not hold until terminated, rather, it holds when ‘A’ holds in the context ‘C’. That is the ‘Bs’ in these types of rule are non–inertial fluents, since the Bs do not persist from over time by default until terminated (i.e. they do not possess inertia). Unlike the previous rules, constitutive rules which derive fluents from other fluents are not present in the InstAL framework.\nSixthly, following InstAL, a set of initial inertial fluents which hold in the institution’s first state and continue to hold until terminated. The set of initial inertial fluents can be the empty set. To summarise, an institution specifies events, fluents and constitutive rules which ascribe institutional events or institutional fluents.\nMulti–level governance is operationalised with a semantics. This semantics defines how each institution evolves from one state to the next in response to a trace of observable events. These events can be real events occurring in the MAS, or hypothetical events if a pre–runtime check for compliance is performed. An institution’s evolution is schematically depicted in Figure 3.1 and described as follows.\nThe institution starts in an initial state in which its initial set of inertial fluents holds. State transitions are driven by observable events occurring in the MAS (potentially hypothetically). During a state transition, further events occur in an institution according to its constitutive rules, building up an institutional interpretation of reality based on the observable events that have occurred. Further events signifying there is (non–)compliance also occur, for example if there is an obligation to store communications’ metadata within one month and the data is not stored within one month, then a norm violation occurs. If it is prohibited to oblige storing communications’ metadata, then a higher–order norm violation occurs. That is, norm violations are institutional events denoting non–compliance. A newly transitioned to state can contain different fluents from the previous state, based on each institution’s constitutive rules variously initiating and terminating fluents from one state to the next. Thus, each institution evolves over time from one state to the next transitioned by events.\nBut, how are concrete regulations imposed at lower levels of governance determined to be (non–) compliant with abstract regulations at higher levels of governance? The approach we take is to firstly, link each institutional level such that concrete normative fluents\n50 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE\nholding in lower level institutions are ‘passed up’ to the corresponding state in higher level institutions. For example, an obligation to oblige storing communications metadata in the EU–DRD is ‘passed up’ to the EU–CFR. Likewise, so too are norm compliance events. Then, in each institutional state of a higher level institution the concrete normative fluents coming from lower level institutions are re–interpreted and abstracted.\nIn order to abstract concrete normative fluents, we use constitutive rules on which to base the abstraction. Recall that constitutive rules establish links between concrete and abstract concepts, from which we can determine links between concrete and abstract norms. For example, the obligation to oblige storing communications metadata is re–interpreted as an obligation to oblige non–consensual data processing. In turn, from these abstractions any further abstractions are also derived. For example, the obligation to oblige non–consensual data processing is abstracted simply to being unfair data processing. Thus, each institutional state contains concrete normative fluents from lower levels and the state contains the closure of all abstractions on these concrete normative fluents based on constitutive rules.\nGiven that normative fluents are abstracted, they can be determined for compliance with abstract higher–order normative fluents that govern them. For example, whether the abstract obligation to oblige storing data non–consensually is in itself prohibited, or perhaps has an even more abstract meaning (e.g. unfair data processing) which is prohibited/obliged. So, concrete normative fluents from lower levels are re–interpreted as more abstract normative fluents at higher levels to determine whether in their abstract incarnation they cause non–"
    }, {
      "heading" : "3.1. APPROACH 51",
      "text" : "compliance. An example is depicted in Figure 3.2 based on the running case study. In the EU– DRD’s first state there is an obligation to oblige storing communications’ metadata, which is passed up to the EU–CFR. As described, concrete normative fluents are abstracted based on whether the prescribed event counts–as a more abstract event in a context entailed by the state. Storing metadata counts–as storing personal data. Storing personal data counts–as non–consensual data processing in the context where an agent has not consented. In the EU–CFR’s first state the obligation to oblige storing metadata is abstracted to an obligation to oblige storing personal data. Then, to an obligation to oblige processing data without consent. An obligation to oblige processing data non–consensually is abstracted further to ‘unfair data processing’. Unfair data processing is prohibited and thus a norm violation event occurs in the transition to the EU–CFR’s next state.\nIn the EU–CFR institution the next state lacks an obligation to oblige processing data without consent because a user has consented. So, unfair data processing also does not hold. That is, the abstract meaning of concrete normative fluents evolves as the context evolves. Consequently, compliance of normative fluents is context sensitive because normative flu-\n52 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE\nobl(a,d) pro(a,d)\nobl(obl(a,d),d ′)\nDischarges if ≤ d ′\nobl(pro(a,d),d ′)\nDischarges if ≤ d ′\npro(obl(a,d),d ′)\nViolates if < d ′\npro(pro(a,d),d ′)\nViolates if < d ′\nents’ abstraction is context sensitive. To summarise, our semantics for multi–level governance defines the evolution of each institution over time in response to a sequence of events. Specifically, whether concrete normative fluents imposed by lower level institutions have an abstract interpretation in higher level institutions. Moreover, whether these abstract interpretations of concrete norms violate abstract higher–order norms in higher level institutions. Such non–compliance can be determined by inspecting the sequence of events in higher level institutions for higher– order norm compliance events. The semantics provide a mechanism acting as a kind of legal monitor for multi–level governance.\n3.2. FORMAL REPRESENTATION In this section we present the syntax for representing multi–level governance. We begin with representing normative fluents. These are fluents which represent temporal obligations and prohibitions, meaning they have an aim which should be achieved before a deadline. In contrast, InstAL considers at temporal obligations and non–temporal permissions, where anything not permitted is prohibited (a prohibitive society). We look at temporal obligations and temporal prohibitions, where anything not prohibited is permitted (a permissive society).\nObligation and prohibition fluents are respectively represented as obl(aim, deadline) and pro(aim, deadline). The aims and deadlines can be events, fluents or other normative fluents to represent higher–order normative fluents. Two special events are used in aims and deadlines, now and never. The event ‘now’ occurs immediately to represent something should (not) be done immediately. For example, obl(aim, now) means the aim should occur"
    }, {
      "heading" : "3.2. FORMAL REPRESENTATION 53",
      "text" : "‘now’. Our representation is inspired by the formalisation of instantaneous norms in a variant of dynamic logic [60], which similarly use ‘now’ to refer to the present state. An aim or deadline event never represents that the aim/deadline never occurs, potentially meaning the normative fluents lasts indefinitely. For example pro(aim, never) means it is always prohibited for the aim to occur or in other words the aim should ‘never’ occur.\nThe informal semantics for normative fluents’ is described in terms of when obligations/prohibitions are discharged and violated, overviewed in Figure 3.3. An obligation fluent, of the form obl(aim, deadline), represents that the aim should occur/hold before or at the same time as the deadline to discharge the obligation (fulfil all duties). If the deadline occurs/holds strictly before the aim then the obligation is violated. Prohibition fluents, of the form pro(aim, deadline), are the inverse of obligations. Prohibitions represent that the aim should not occur/hold strictly before the deadline. When a normative fluent n is discharged it causes the event disch(n) to occur. If n is violated then the event viol(n) occurs.\nHigher–order norms impose higher–order normative fluents. A higher–order normative fluent obliges/prohibits another normative fluent is imposed before a deadline. The deadline is an event or another normative fluent. Compliance–focussed higher–order norms can also be expressed, which oblige/prohibit compliance with a norm (norm discharge – disch(n)) or violation (viol(n)) occurs before/after an event occurs or another normative fluent is imposed (e.g. it is obliged a norm is violated before a fine is imposed).\nA grammar to specify normative fluents is formalised as:\nDefinition 1. Normative Fluents Let P be a set of propositions denoting events with typical element p. The set of normative fluents N |P is the set of all normative fluents n expressed as:\naim ::= p | n | now | never | disch(n) | viol(n) deadline ::= p | n | now | never | disch(n) | viol(n) n ::= obl(aim,deadline) | pro(aim,deadline)\nWe give some examples concerning two agents, a law enforcement officer called Charles and an internet communications user called Ada, and an internet communications provider colloquially called an ISP. The UK–DRR implements the EU–DRD. They state that if a law enforcement official (e.g. charles) requests the data stored by a communications provider (e.g. isp) of a user (e.g. ada) then the communications provider is obliged to provide the data within one month (m1):\nobl(provideData(isp, charles, ada), time(m1))\nInstantaneous normative fluents express that something should (not) be done or a normative fluent should (not) be imposed now. One way an institution designer might use instantaneous norms is to express that as soon as something happens a normative fluent should be imposed. For example, as soon as a norm is violated it is obliged that there is an obligation to punish the violator. The EU–DRD as we formalise it, requires that any implementing institution should impose punishment as soon as regulations are violated. Thus, when there is a violation it imposes a normative fluent obliging an obligation to punish the violator is imposed immediately:\n54 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE\nobl(obl(punish(isp), time(m6)), now)\nCompliance–focussed normative fluents can be used to express that an agent should discharge/violate a normative fluent before another normative is imposed that rewards/punishes the agent. For example, in our previous work [145], an obligation expressed “it is obliged that a norm is violated before a fine is imposed”. Such compliance focussed normative fluents do not state that a normative fluent being discharged should cause a reward/punishment. Rather, they state that discharge/violation should occur before the reward/punishment is imposed. Following this chapter’s case–study – it is obliged that the communications provider isp violates the obligation to provide charles with data which concerns ada before any obligation to punish the communications provider isp is imposed.\nobl(viol(obl(provideData(isp, charles, ada), time(m1))), obl(punish(isp), time(m6)))\nNormative fluents can also be explicitly first–order, but implicitly higher–order by obliging/prohibiting fluents that abstractly represent other normative fluents. Recall that various obligations in the EU–DRD can abstractly be interpreted as unfair data processing. Hence, the following is an example of an abstract first–order norm that indirectly governs other norms. The EU–CFR states that it is prohibited to process Ada’s data unfairly (indefinitely):\npro(unfairDataProcessing(ada), never)\nWe now proceed to representing individual institutions. In short, institutions are specified as a tuple, extending the formal specification of an institution in the InstAL framework [43]. Generally, speaking, an individual institution describes the things that can occur (events) and hold (fluents) in the institution as well as the institution’s rules causing events to occur and fluents to hold. An institution’s constitutive rules – cause institutional events to occur in response to other events (“an event A counts–as an event B in context C”), fluents to hold in response to events (“an event A counts–as establishing/removing a fluent B in context C”), and further, more abstract, fluents to be derived from other fluents (“a fluent A counts–as a fluent B in context C”). Rules stating fluents are derived are not present in InstAL but we introduce them since they provide an abstracting relation between fluents and thus contribute to our goal of reasoning about abstraction in multi–level governance. Regulative rules are just modal norms represented as constitutive rules which establish normative fluents, “an event A counts–as establishing an obligation/prohibition in context C”.\nSpecifically, institutions comprise the following elements:\nEvents – a set of propositions (E ) denoting events that can occur in the institution, s.t. now,never 6∈ E , meaning the institution cannot define when the brute events now and never occur. The set of events comprises:\n– Observable events (Eobs) that are exogenous to the institution corresponding to the notion of a brute fact denoting an event.\n– Internal institutional events (Einst) representing an institutional description of reality."
    }, {
      "heading" : "3.2. FORMAL REPRESENTATION 55",
      "text" : "– Compliance events (Enorm = {disch(n),viol(n) | n ∈Fcnorm∪Fanorm}) indicating a normative fluent (in the set of concrete and abstract normative fluents Fcnorm∪ Fanorm) has been discharged or violated.\nFluents – a set of propositions (F ) denoting fluents which can hold in the institution, comprising:\n– Domain fluents (Fdom) providing an institutional description of the state of reality (e.g. an agent has consented to their data being processed). – Empowerment fluents (Fpow ⊆ {pow(e) | e ∈ Einst}) denoting an event is recognised by the institution in a state and has the power to affect the institution (i.e. is empowered). – Normative fluents (Fnorm =Fcnorm ∪Fanorm) comprising mutually disjoint sets of concrete normative fluents (Fcnorm ⊆N |E∪Fdom ) and abstract normative fluents (Fanorm ⊆N |E∪Fdom ): ¦ Concrete normative fluents denote obligations and prohibitions imposed\nby the institution about events or domain fluents. These normative fluents are concrete in the sense of being explicitly imposed by an institutional norm, rather than being abstract interpretations of other normative fluents that have been imposed. ¦ Abstract normative fluents denote obligations and prohibitions imposed by the institution about events or domain fluents. These are abstract in the sense of not being imposed by the institution, but rather represent an abstract interpretation of other more concrete normative fluents. For example, an obligation to store personal data is a more abstract interpretation of an obligation to store communications metadata.\n– Inertial and non–inertial fluents, We assume that fluents are either inertial or non–inertial represented as mutually disjoint sets of inertial fluents (Finert) and non–inertial fluents (Fninert) such that F =Finert∪Fninert and Finert∩Fninert = ;. Institutions define fluents which can be initiated by the institution’s state consequence function and then persist from one state to the next by default until they are terminated. That is, some fluents are inertial. Other fluents hold due to constitutive rules stating more abstract fluents are derived from more concrete fluents. These abstract fluents hold whenever the concrete fluents hold and do not persist from state to state by default. That is, they are non–inertial fluents. Concrete normative fluents are inertial, since an institution explicitly imposes them by initiation and termination according to the state consequence function (Fcnorm ⊆ Finert). Abstract normative fluents are non–inertial since they are derived from other normative fluents and do not persist from state to state by default (Fanorm ⊆Fninert).\nContexts – these characterise a condition on a state and denote the social context each rule is conditional on. A context is a set of positive and weakly negative fluents, which holds in a state if all the positive fluents hold and none of the negative fluents hold. Formally, the set of all contexts is X = 2F∪¬F s.t. ¬F = {¬ f | f ∈F } is the set containing the negation of all elements in the set F ."
    }, {
      "heading" : "56 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "State change rules (C : X ×E → 2Finert × 2Finert ), described as a state consequence function. They specify that due to the occurrence of events conditional on a context holding in a state, inertial fluents are initiated and terminated from one state to the next. State change rules can be descriptive (e.g. a user consenting to their data being stored initiates a fluent stating that they have consented) and regulative rules by initiating and terminating normative fluents (e.g. someone using electronic communications initiates an obligation for the communications provider to store their communications’ metadata).\nEvent generation rules – (G : X ×E → 2Einst ), described as an event generation function. These rules are only descriptive. They specify that when an exogenous or institutional event occurs conditional on a context holding in a state another institutional event occurs.\nFluent derivation rules – (D : X ×F → 2Fninert ), described as a fluent derivation function. These rules state that a fluent holding in a state derives a non–inertial fluent holding in the same state, conditional on a social context.\nAccording to these notions, an individual institution is formally defined as:\nDefinition 2. Individual Institution An institution is a tuple I = 〈E ,F ,C,G,D,∆〉 such that:\n• E = Eobs ∪Einst ∪Enorm is the set of events.\n• F =Fdom ∪Fnorm is the set of fluents.\n• C : X ×E → 2Finert ×2Finert is the state consequence function.\n• G : X ×E → 2Einst is the event generation function.\n• D : X ×F → 2Fninert is the fluent derivation function.\n• ∆ ⊆ Finert is a set of inertial fluents which hold in the institution’s initial state and persist from one state to the next if they are not terminated.\nSome further useful constructs are:\n• Σ= 2F to denote the set of all states for I .\n• Given a context X ∈ X and an event e ∈ E we denote the result of the consequence function as C(X ,e) = 〈C↑(X ,e),C↓(X ,e)〉 s.t. the set of initiated fluents is C↑(X ,e) and the set of terminated fluents is C↓(X ,e).\n• For readability if an institution is denoted with a superscript, such as id then all its elements have the same superscript, such as I id = 〈E id,F id,C id,G id,Did,∆id〉, the set of states being Σid and the set of contexts being X id."
    }, {
      "heading" : "3.2. FORMAL REPRESENTATION 57",
      "text" : "We exemplify using institutional specification fragments where for clarity we use a superscript denoting the name of each institution. The EU–CFR [72, Art. 8.2] states that a person’s data must be processed fairly. For an agent called ‘ada’, the set of inertial fluents initially holding in the EU–CFR institution includes:\npro(unfairDataProcessing(ada), never) ∈∆cfr\nA communications provider, called ‘isp‘, storing metadata is by default an event empowered to affect the Data Retention Regulations:\npow(storeData(isp, ada, metadata)) ∈∆drd\nAccording to the European Court of Justice’s (ECJ) judgement [70] on the EU–DRD, with respect to the EU–CFR, storing communications metadata counts–as storing personal data. If an agent’s, Ada’s, metadata is stored in any context (the empty set) then the event of storing the agent’s, Ada’s, personal data is generated. Additionally, if Ada’s personal data is stored in the context that Ada has not consented then the event of non–consensually processing Ada’s data occurs. The following rules are a part of the EU–CFR, incorporating the ECJ’s judgement.\nGcfr(;,storeData(isp, ada, metadata)) 3 storeData(isp, ada, personal)\nGcfr({¬consentedDataProcessing(ada, isp)},storeData(isp, ada, personal)) 3 nonConsensualDataProcessing(ada)\nThe EU–DRD [71, Art. 8] requires data concerning people is transmitted to authorities on request before any undue delay. A fluent initiation rule is conditional on an agent, Charles, requesting the data from a communications provider, ISP, of another agent, Ada. In the context that Charles is a law enforcement official the rule initiates an obligation to immediately oblige that ISP provides Charles with data concerning Ada before any undue delay.\nCdrd↑({is(charles, lawEnforcement)},requestData(ada, isp, charles)) 3 obl(obl(provideData(isp, charles, ada), undue_delay), now)\nAccording to the ECJ’s interpretation of the EU–DRD [70] with respect to the EU–CFR. Obliging that personal data is processed non–consensually counts–as unfair data processing. We represent the ECJ’s interpretation as a fluent derivation rule in the EU–CFR institution. It states that obliging an agent, Ada’s, personal data is processed without consent in any social context (the empty set) derives the fluent of (counts–as) unfair data processing.\nDcfr(obl(nonConsensualDataProcessing(ada), now),;) 3 unfairDataProcessing(ada)\nIn multi–level governance, institutions are related in the sense that institutions designed at lower levels of governance are governed by institutions designed at higher levels of governance. In our approach, this means that if a lower level institution imposes an obligation or a prohibition, then the same obligation/prohibition holds in any higher level institution"
    }, {
      "heading" : "58 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "which governs it. Institutions are linked in this way in what we call a multi–level governance institution, where institutions are ordered by the level they operate at and linked with a relation between lower level and higher level institutions. The relations linking institutions are expressed as a set of directed edges R between lower level institutions and higher level institutions they are governed by. Each relation is restricted such that higher levels cannot be governed by lower levels, such that collectively the relations are always acyclic. Formally, a multi–level governance institution is:\nDefinition 3. Multi-level Governance Institution A Multi-level Governance Institution is a directed graph 〈T ,R〉. The vertices are represented as a tuple T = 〈I1, ...,In〉 of institutions. The arrows are a set of pairs R = 2[1,n]×[1,n] of institution indexes in T such that ∀〈i , j 〉 ∈ R : i < j .\nAccording to these definitions, we can represent the three main aspects of multi–level governance we focus on in this chapter. Firstly, regulations which regulate other regulations in higher level institutions with higher–order normative fluents in prescriptive rules. Secondly, the links between lower level institutions governed by higher level institutions by composing multi–level governance institutions. Thirdly, the interpretation of concrete concepts and normative fluents as more abstract concepts and normative fluents.\nIn our framework abstraction can occur in a multi–level governance institution in two ways. Firstly with constitutive rules which state a concrete concept counts–as a more abstract concept in a particular context. These abstracting constitutive rules are represented as the event generation function – a concrete event counts–as a more abstract event in a particular social context; the state consequence function – a concrete event counts–as initiating/terminating a fluent that abstractly describes the social reality in a particular context; and the fluent derivation function – a concrete fluent counts–as a more abstract fluent in a particular social context. The second method of abstraction is implicit abstraction of concrete normative fluents regulating concrete concepts to more abstract normative fluents regulating abstract concepts. Normative fluent abstraction is defined semantically, based on constitutive rules between concrete and abstract concepts, and requires no explicit representation.\n3.3. CASE STUDY FORMALISATION To demonstrate the representation in full, our case study and its formalisation in the formal framework are subsequently summarised. We look at three legal institutions. These institutions operate at different levels of abstraction. Higher–levels interpret the regulatory effects of lower–levels in terms of more abstract normative fluents and concepts based on constitutive rules. Providing the constitutive rules to reinterpret and abstract regulations are the interpretations provided by courts. For example, the lower–level Data Retention Directive’s interpretation by the European Court of Justice (ECJ) with respect to the higher–level Charter of Fundamental Rights. We view constitutive rules provided by court interpretations of a lower–level institution as being a part of the higher–level institution which governs the lower–level. For example, the Charter of Fundamental Rights comprises its rules and regulations set out in writing and also the interpretations of the Data Retention Directive’s concepts provided by the ECJ."
    }, {
      "heading" : "3.3. CASE STUDY FORMALISATION 59",
      "text" : "Formally, the multi–level governance institution is the tuple ML= 〈T ,R〉 where the institutions are T = 〈Idrr,Idrd,Icfr〉 and the governance relation is R = {〈drr,drd〉,〈drd,cfr〉}. Each of the institutions are formalised in tables 3.1, 3.3 and 3.4 where for brevity we leave out empowerment fluents and upper–case terms represent variables acting as shorthand for their ground instantiations. For clarity, we use labels rather than indexes for each institution. Each institution is described and formalised as follows.\nThe EU Charter of Fundamental Rights [72] (EU–CFR, Formalised in Table 3.1), a third–level institution which through the most abstract regulations governs the Data Retention Directive. The specific fragments of legislation we look at are:\n– Article 7 – “Everyone has the right to respect for his or her private and family life, home and communications.” (rule CFRC.2, and CFRIS.1)\n– Article 8 – “Everyone has the right to the protection of personal data concerning him or her.” (rule CFRC.3, and CFRIS.1) and “Compliance with these rules shall be subject to control by an independent authority.” (rule CFRC.5, and CFRIS.1)\nPartly based on the European Court of Justice’s interpretation of the Data Retention Directive [70] we also take the following legal interpretations as holding in the EU– CFR:\n– Storing communications content or metadata counts–as storing personal data (rules CFRG.1 and CFRG.2).\n– Storing personal data if the person it concerns has not consented counts–as non– consensual data processing. (rule CFRG.3).\n– There is unfair data processing whenever there is an obligation for there to be non–consensual data processing (rule CFRD.1).\n– Data is unprotected if there is an obligation to store data in the context that the data is not anonymised (rule CFRD.4).\n– Privacy is disrespected when there is an obligation to store personal data (rule CFRD.8).\nIt is interesting to note that the Charter of Fundamental Rights regulates regulations but in an implicit manner, that is, nowhere does it state that the regulations regulate other regulations. That is, not obliging and prohibiting obligations or prohibitions, but rather obliging and prohibiting abstract concepts which can represent obligations and prohibitions. For example, rather than prohibiting obligations for data to be processed unfairly, the EU–CFR prohibits unfair processing itself. In this chapter, we assume that whenever the EU–CFR governs an abstract concept, such as unfair data processing, then it views obliging that abstract concept as counting–as that abstract concept. For example, processing data unfairly has many interpretations, one of which is obliging data is processed unfairly. Following this idea, if the EU–CFR prohibits processing data unfairly, then an obligation to process data unfairly is reduced to the abstract concept of unfair data processing itself, which violates the EU–CFR’s prohibition. Through transitivity, it follows that an obligation to oblige unfair data"
    }, {
      "heading" : "60 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "processing is also reduced in the same way resulting in a violation of a prohibition to process data unfairly. Interpreting abstract normative fluents as the abstract concepts they oblige/prohibit is realised with fluent derivation rules:\n– Obliging unfair data processing counts–as unfair data processing (rule CFRD.2).\n– Obliging data is anonymised counts–as data being anonymised (rule CFRD.3).\n– Obliging data is unprotected counts–as data being unprotected (rule CFRD.5).\n– Obliging privacy is disrespected counts–as privacy being disrespected (rule CFRD.7).\n– Obliging data is processed counts–as data being processed (rule CFRD.9)."
    }, {
      "heading" : "3.3. CASE STUDY FORMALISATION 61",
      "text" : "Dcfr({¬dataAnonymised(CommSerProv0, Agent0)}, obl(storeData(CommSerProv0, Agent0, Data0), now) 3 obl(dataUnprotected(Agent0, CommSerProv0), now))\n(CFRD.4)\nDcfr(;,obl(dataUnprotected(Agent0, CommSerProv0), now) 3 dataUnprotected(Agent0, CommSerProv0)\n(CFRD.5)\nDcfr(;, {obl(storeData(CommSerProv0, Agent0, personal), now)}) 3 privacyDisrespected(Agent0)\n(CFRD.6)\nDcfr(;, {obl(privacyDisrespected(Agent0), now)}) 3 privacyDisrespected(Agent0)\n(CFRD.7)\nDcfr(;,obl(storeData(CommSerProv0, Agent0, personal), now)) 3 dataProcessed\n(CFRD.8)\nDcfr(;,obl(dataProcessed, now)) 3 dataProcessed (CFRD.9) Dcfr({¬pro(storeDataOutsideEU, never)},dataProcessed) 3 uncontrolByIndepAuth (CFRD.10)\n∆cfr = {pro(privacyDisrespected(Agent), never), pro(dataUnprotected(Agent0, personal), never), pro(unfairDataProcessing(Agent0), never), pro(uncontrolByIndepAuth, never), is(charles, lawEnforcement)}\n(CFRIS.1)\nThe EU Data Retention Directive [71] (EU–DRD) is a second–level institution. It consists of less abstract regulations than the Charter of Fundamental Rights which governs it. On the other hand, it has more abstract regulations than the institution it governs, the UK’s implementation of the EU–DRD called the UK’s Data Retention Regulations. Whilst both the EU–CFR and the EU–DRD govern regulations, a directive by nature is written specifically for that purpose as a regulation regulating legal institution. Consequently, for the EU–DRD we adopt an explicit form for regulations governing regulations.\nThe specific fragments of the Data Retention Directive that we formalise are:\n– Article 5 – “Member states shall ensure that the following categories of data are retained under this Directive:” (paraphrased) the data necessary to trace and identify the source, destination, date, time and duration, and type of a communication. Also, the users’ communication equipment and its location (rule DRDC.1, and DRDD.2) and “No data revealing the content of the communication may be retained pursuant to this Directive” (DRDD.2).\n– “Member States shall ensure that the categories of data specified in Article 5 are retained for periods of not less than six months and not more than two years from the date of the communication” (rule DRDC.2)."
    }, {
      "heading" : "62 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "– Article 8 – “Member States shall ensure that the data specified in Article 5 are retained in accordance with this Directive in such a way that the data retained and any other necessary information relating to such data can be transmitted upon request to the competent authorities without undue delay” (rule DRDC.3).\n– Article 13 (clause 1) – “[...]sanctions are fully implemented with respect to the processing of data under this Directive.” (rule DRDC.4).\nWe also take the following legal interpretations as holding in the EU–DRD:\n– Something happening after one month counts–as undue delay (rule DRDG.1).\n– Paying a fine counts–as being punished (rule DRDG.2).\n– Data retention is ensured for a period of between six and twenty–four months whenever there is a prohibition on deleting the data before 12 months and an obligation to delete it after 13 months (rules DRDD.1 and DRDD.2)."
    }, {
      "heading" : "3.4. SEMANTICS 63",
      "text" : "Cdrr↑(;,useElectronicCommunication(Agent0, CommProv0)) 3 obl(storeData(CommProv0, Agent0, metadata), now)\n(DRRC.1)\nCdrr↑(;,storeData(CommProv0, Agent0, metadata))) 3 pro(deleteData(CommProv0, Agent0, metadata), time(m12))\n(DRRC.2)\nCdrr↑(;,storeData(CommProv0, Agent0, metadata)) 3 obl(deleteData(CommProv0, Agent0), time(m13))\n(DRRC.3)\nCdrr↑({is(Agent0, lawEnforcement)}, requestData(Agent0, CommProv0, Agent1, metadata)) 3 obl(provideData(Agent0, CommProv0, Agent1, metadata), time(m1))\n(DRRC.4)\nCdrr↑(;,viol(obl(provideData(CommProv0, Agent0, Agent1), time(Length0)))) 3 obl(payFine(CommProv0, secrOfState), time(m6)) (DRRC.5)\n∆drr = {pro(storeData(CommProv0, Agent0, content), never), is(charles, lawEnforcement)}\n(DRRIS.1)\n3.4. SEMANTICS In this section we present the formal semantics for multi–level governance. Given a multi– level governance institution specification the semantics define a model, comprising for each institution states transitioned between by events, in response to a supplied trace of observable events. The key idea behind the semantics, depicted in figure 3.4 is to transition from one state to another, driven by generated events, by initiating and terminating inertial fluents. Then each state is closed by deriving non–inertial fluents according to an institution’s fluent derivation function and abstracting concrete fluents to non–inertial abstract normative fluents according to normative fluent abstraction. Given a multi–level governance institution model it can be determined whether individual institutions are compliant with the institutions that govern them in different contexts. The formal semantics provide a mechanism for automated compliance–checking in multi–level governance."
    }, {
      "heading" : "64 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "In order to reduce repetition the following definitions are with respect to several common objects. First, a multi–level governance institution ML= 〈T ,R〉 where T = 〈I1, ...,In〉 is a tuple of institutions with typical elements being ∀i ∈ [1,n] : I i = 〈E i ,F i ,C i ,G i ,Di ,∆i 〉. Second, a tuple of states, representing the state of each institution for a single point in time j – 〈S1j , ...,Snj 〉. Third, a tuple of event sets, representing the events occurring in each institution for a single point in time j – 〈E 1j , ...,E nj 〉.\nSTATE CONDITIONS Institutions in a multi–level governance specification contain rules which are conditional on states and the occurrence of events. Therefore, determining if a rule is ‘fired’ requires determining in part if its state condition, a social context, holds in a state. We begin by defining when contexts are modelled by (hold in) a state.\nInformally, a state formula is modelled by a state if for each positive fluent in the formula there is an equivalent fluent that is a member of the state and for each negative fluent in the formula there is not an equivalent fluent that is a member of the state. Rather than defining modelling a state formula in terms of whether the positive/negative fluent is in the state, we use equivalence. This is because two normative fluents can have an equivalent meaning whilst being syntactically different – this is not unusual, in ‘Standard Deontic Logic’ [234] forbidden X is defined as obliged not X and likewise for much subsequent work.\nIn our case, we define equivalences between two fluents based on whether they are are syntactically identical and two normative fluents based on whether their discharge and violation coincide. Referring again to Figure 3.3, an event/fluent a is obliged to occur/hold before or at the same time as some d by the obligation fluent obl(a, d) and is prohibited to occur/hold strictly before d by the prohibition fluent pro(a,d). Given two normative fluents obl(a, d) and pro(a′,d ′) where a is equivalent to d ′ and d is equivalent to a′, the obligation’s"
    }, {
      "heading" : "3.4. SEMANTICS 65",
      "text" : "and prohibition’s discharge and violation coincide, and therefore they are equivalent. The equivalences (≡) of obligations and prohibitions according to their discharge and violation is summarised as obl(a,d) ≡ pro(a′,d ′) if a ≡ d ′ and d ≡ a′, a definition that generalises to higher–order normative fluents.1\nAccordingly, we define modelling a state formula as:\nDefinition 4. State Formulae Let f ∈F i be a fluent. We define ≡ and |= for all contexts X ∈X i as:\nf ≡ f obl(a,d) ≡ pro(a′,d ′) ⇔ a ≡ d ′ and d ≡ a′\nSi |= f ⇔ ∃ f ′ ∈ Si : f ≡ f ′ Si |= ¬ f ⇔ Ø f ′ ∈ Si : f ≡ f ′\nSi |= X ⇔ ∀x ∈ X : Si |= x\nEVENTS In this section we semantically define the events occurring in an institution, in response to other events in specific contexts. Precisely, an event generation operation GRi defines for an institution I i in a multi–level governance institution which events occur in a state Si in response to a set of events E i . An event occurs in an institution if it is generated by the institution’s event generation function G i , or if it represents the discharge/violation of a discharged/violated normative fluent holding in the institution’s state or that of a lower– level institution the institution governs. The event generation operation is formalised below and explained subsequently:\nDefinition 5. Event Generation Operation The event generation operation GRi :Σi×2E i → 2E i is defined for each institution I i w.r.t. the tuple of multi–level governance states 〈S1j , ...,Snj 〉 and event sets 〈E 1j , ...,E nj 〉. The operation is defined as GRi (Si ,E i ) = E ′ iff E ′ minimally (w.r.t. set inclusion) satisfies all of the following conditions:\nnow ∈ E ′ (D37.1) E i ⊆ E ′ (D37.2) ∃X ∈X i ,e ∈ E ′,e ′ ∈G i (X ,e) : Si |= X ∧Si |= pow(e ′) ⇒ e ′ ∈ E ′ (D37.3) Si |= obl(a,d)∧ (a ∈ E ′∨Si |= a) ⇒ disch(obl(a,d)) ∈ E ′ (D37.4) Si |= obl(a,d)∧ (d ∈ E ′∨Si |= d)∧disch(obl(a,d)) 6∈ E ′ ⇒ viol(obl(a, d)) ∈ E ′ (D37.5) Si |= pro(a,d)∧ (d ∈ E ′∨Si |= d) ⇒ disch(pro(a,d)) ∈ E ′ (D37.6) Si |= pro(a,d)∧ (a ∈ E ′∨Si |= a)∧disch(pro(a,d)) 6∈ E ′ ⇒ viol(pro(a,d)) ∈ E ′ (D37.7) ∃〈h, i 〉 ∈ R,e ∈ Ehnorm ∩E inorm ⇒ e ∈ E ′ (D37.8)\nIn more detail:\n• D37.1 – the event of now always occurs.\n1An example of higher–order equivalence generalisation is obl(obl(a,d),d ′) ≡ obl(pro(d , a),d ′) ≡ pro(d ′,obl(a,d)), etc."
    }, {
      "heading" : "66 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "• D37.2 – events that have already occurred still occur (monotonicity).\n• D37.3 – an event generated by the institution’s event generation function in response to another event, conditional on a social context modelled by the state and the event being empowered to occur.\n• D37.4 to D37.7 – a compliance event occurring signifying a normative fluent is discharged or violated in a state, by an obliged/prohibited event, fluent or another normative fluent. Compliance events do not need to be empowered in order to occur.\n• D37.8 – norm compliance events occurring in lower level institutions linked to this institution, also occur in this institution.\nNote that GRi is increasingly monotonic and a well–defined partial function. The function GRi is partial if there is a fault in the institutional specification or the set of events passed are inconsistent. Specifically, if an institution is defined such that violating a normative fluent causes an event that discharges the same normative fluent via the event generation function G (either directly or transitively).\nDERIVED FLUENTS In this section we semantically define deriving fluents from other fluents in a given state. We define a fluent derivation operation FDi which, operating on an institutional state, extends the state to include derived fluents based on fluent derivation rules of the form “fluent A derives fluent B in context C” described by the fluent derivation function Di . These derived fluents are the ‘Bs’ from fluent derivation rules where the context ‘C’ holds and the fluent ‘A’ is modelled by the state. By deriving fluents from other fluents in a state, it is possible further fluents should be derived. Thus, the fluent derivation operation FDi is defined to close a state by producing an extended state which includes all derived fluents with respect to the extended state itself. The fluent derivation operation is formally defined as:\nDefinition 6. Fluent Derivation Operation The fluent derivation operation FDi : Σi → Σi is defined for each institution I i and a state Si ∈Σi such that FDi (Si ) = S′ iff S′ minimally (w.r.t. set inclusion) satisfies all of the following conditions:\nSi ⊆ S′ (D6.1) ∃X ∈X , f ∈ S′, f ′ ∈Di (X , f ) : S′ |= X ⇒ f ′ ∈ S′ (D6.2)\nIn more detail:\n• D6.1 – Closure of the state does not remove any fluents from the input state.\n• D6.2 – A fluent derived from another fluent conditional on a social context modelled by the state according to the institution’s fluent derivation function is a member of the closed state.\nNote that the fluent derivation operation is undefined if an institution’s fluent derivation function has an output that is inconsistent with its input. For example D({¬B}, A) 3 B\n3.4. SEMANTICS 67\nobl(a0,d) counts-as obl(b,d)\nobl(a1,d) counts-as obl(b,d)\n... obl(an ,d) counts-as obl(b,d)\npro(a0,d), pro(a1,d), ... and pro(an ,d) counts-as pro(b,d)\na0 counts-as b a1 counts-as b ... an counts-as b\nDeontological counts-as between normative fluents based on ai counting as b\nAn event, fluent or normative fluent ai counts-as an event, fluent or normative fluent b in a state according to event generation, derived fluents and deontological counts-as functions\nFigure 3.5: Overview for deontological counts–as semantics between concrete and abstract normative fluents, based on counts–as relations between the elements they prescribe holding in a context entailed by a single state.\nor in words “A counts–as B in the context that B does not hold”. In other cases, the fluent derivation operation is multi–valued if at least two rules defined by the institution’s fluent derivation function are mutually inconsistent. For example D({¬B2}, A) 3 B1 and D({¬B1}, A) 3 B2, or in words “A counts–as B1 in the context that B2 does not hold” and vice versa “A counts–as B2 in the context that B1 does not hold”. The occurrence of these issues indicates an institution design problem, which should be resolved by the institution designer.\nABSTRACTING NORMATIVE FLUENTS This section presents a semantics for abstracting concrete normative fluents. The basic idea, depicted in Figure 3.5, is to establish new counts–as relations between concrete normative fluents and abstract normative fluents, based on the concrete concepts they prescribe counting–as more abstract concepts. In other words, counts–as relations between concrete and abstract normative fluents are based on other counts–as relations between the concrete and abstract concepts they prescribe. Before we go into the actual semantics for abstracting concrete normative fluents, we describe the intuition and general semantics, then give numerous examples and finally the formalisation.\nWe call the relation between concrete and abstract normative fluents deontological counts–as and derive it based on three types of counts–as rules (referring again to figure 3.5). Firstly, based on counts–as between events according to an institution’s event generation function. Here, we derive relations stating concrete normative fluents about events count–as an abstract normative fluent about an event. Secondly, based on counts–as between fluents according to an institution’s fluent derivation function. Here, we derive relations stating concrete normative fluents about fluents count–as an abstract normative fluent about a fluent. Thirdly, based on counts–as between normative fluents themselves"
    }, {
      "heading" : "68 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "according to the deontological counts–as relation we define. Here, we derive relations stating higher–order concrete normative fluents prescribing normative fluents count–as a more abstract higher–order normative fluent prescribing a normative fluent. So, a deontological counts–as relation between concrete and abstract normative fluents is derived from primitive ontological counts–as relations according to an institution’s event generation and fluent derivation functions, and deontological counts–as itself in order to derive deontological counts–as between higher–order normative fluents.\nHow the deontological counts–as relations between concrete and abstract normative fluents are derived is described as follows. The intuition is that concrete normative fluents count–as a more abstract normative fluent if and only if complying with the concrete normative fluents (i.e. discharging or not violating) by causing an event to occur or fluent to hold counts–as a certain institutional event or fluent to hold which guarantees the abstract normative fluent is also complied with (i.e. discharged or not violated).\nFollowing this intuition, we start by describing deontological counts–as for obligations. In reference to figure 3.5, whenever any of a0 to an occur or hold we are guaranteed b occurs/holds. If there is a concrete obligation imposed on one of a0, ..., an to occur/hold before a deadline d , then it is guaranteed that complying with the concrete obligation (discharging or not violating) means a more abstract obligation for b to hold before the same deadline d is also guaranteed to be discharged or not violated. Therefore, we derive a deontological counts–as relation stating that a concrete obligation on any of a0, ..., an before d counts–as a more abstract obligation for b to occur before d .\nProhibitions are different. If a0, ..., an count–as b, then unlike obligations we cannot apply modus ponens and say that prohibiting a0 before d counts–as prohibiting b before d . The reason being, a0 not occurring/holding does not mean b does not occur/hold. Thus, prohibiting a0 on its own does not mean b should not occur. In other words. discharging or not violating a prohibition on a0 before d does not guarantee that a prohibition on b before d is discharged or not violated. The reason is b can occur due to any of a1, ..., an occurring/holding (all counting–as b) and thus violate a prohibition on b before d . We might be tempted to apply modus tollens and say that b not occurring/holding means a0, ..., an do not occur/hold, therefore prohibiting b before d counts–as prohibiting a0, ..., an before d . However, this would be concretisation since a0, ..., an are more concrete than b (recall that concrete concepts count–as abstract concepts, and a0, ..., an count–as b). On the other hand, we are interested in abstraction. To summarise, unlike obligations modus ponens is inappropriate to base counts–as between prohibitions on, whilst modus tollens is inappropriate since it concretises rather than abstracts.\nInstead, we derive a deontological counts–as relation between prohibitions stating that prohibiting all of a0, ..., an from occurring/holding before d counts–as a prohibition on a more abstract event/fluent b occurring/holding before d . This is based on the fact that counts–as is ascriptive defining all ways an abstract institutional concept can occur/hold when more concrete concepts occur/hold. Since the institutional events/fluents are ascribed by an institution’s counts–as relations, if none of a0, ..., an occur/hold then b is not ascribed and therefore does not occur/hold. Thus, complying with (discharging or not violating) all prohibitions on a0, ..., an occurring/holding before d guarantees that a prohibition on b before d is also complied with (discharged or not violated).\nThese informal semantics abstract concrete normative fluents with different concrete"
    }, {
      "heading" : "3.4. SEMANTICS 69",
      "text" : "aims to an abstract normative fluent with a more abstract aim. Normative fluents’ deadlines are also abstracted. However, as we observed when defining equivalences between normative fluents, the aim of an obligation is by definition obliged, whilst the deadline is prohibited and vice versa for prohibitions. Thus, the abstraction of obligation fluents’ deadlines should be under the same semantics as prohibitions’ aims and vice versa for prohibitions. So, given that a0 counts–as b, a prohibition for z to occur before a0 counts–as a prohibition for z to occur before b. Alternatively, we can just apply the equivalences between normative fluents such that we have an obligation for a0 to occur before z which counts–as an obligation for b to occur before z, which is equivalent to a prohibition for z to occur before b. Since a state with a prohibition fluent also models an equivalent obligation fluent and vice versa, we define deontological counts–as based on the normative fluents a state models and obtain the abstraction of normative deadlines ‘for free’.\nThis summarises the intuition behind deontological counts–as. More formally, deontological counts–as is defined as the function DCi : Σi → 2F inorm ×F inorm. The function specifies for a state (S) a relationship (〈N ,n〉 ∈ DC(Si )) between sets of relatively concrete normative fluents (N ) that count–as an abstract normative fluent (n) in the state Si .\nWe exemplify the deontological counts–as function using our running case study. We focus on the EU–DRD’s prescriptions formalised as an institution Idrd. Counts–as between events according to the EU–DRD’s event generation G function state that a communications provider (isp) storing the content of a user’s (ada) communications data (storeData(isp, ada, content)) counts–as (causes the institutional event of) storing personal data (storeData(isp, ada, personal)). Likewise, storing communications’ metadata (storeData(isp, ada, metadata)) counts–as storing personal data.\nStoring metadata or content data counts–as storing personal data. Thus, obliging metadata or obliging content data is stored immediately counts–as obliging personal data is stored immediately, since if a communications provider stores metadata or content data then it also stores personal data:\n〈{obl(storeData(isp, ada, content), now)}, obl(storeData(isp, ada, personal), now)〉 ∈DCi (Si )\n〈{obl(storeData(isp, ada, metadata), now)}, obl(storeData(isp, ada, personal), now)〉 ∈DCi (Si )\nProhibiting storing both content and metadata indefinitely counts–as prohibiting storing personal data indefinitely:\n〈{pro(storeData(isp, ada, content), never), pro(storeData(isp, ada, metadata), never)},\npro(storeData(isp, ada, personal), never)〉 ∈DCi (Si ) Higher–order normative fluents are abstracted using the same intuitions as first–order normative fluents, but with abstraction based on deontological counts–as. According to our case study, obliging an obligation to store content data counts–as obliging an obligation to store personal data. Likewise, obliging an obligation to store metadata counts–as obliging an obligation to store personal data."
    }, {
      "heading" : "70 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "〈{obl(obl(storeData(isp, ada, content), now), now)}, obl(obl(storeData(isp, ada, personal), now), now)}〉 ∈ DCi (Si )\n〈{obl(obl(storeData(isp, ada, metadata), now), now)}, obl(obl(storeData(isp, ada, personal), now), now)}〉 ∈ DCi (Si )\nLikewise, but for prohibitions, prohibiting storing metadata and prohibiting storing content data counts–as prohibiting storing personal data. Thus, obliging to immediately prohibit storing metadata and obliging to immediately prohibit content data counts–as obliging to immediately prohibit storing personal data. Only obliging to prohibit storing content data, does not mean it is obliged to prohibit storing personal data:\n〈{obl(pro(storeData(isp, ada, content), never), now), obl(pro(storeData(isp, ada, metadata), never), now)},\nobl(pro(storeData(isp, ada, personal), never), now)〉 ∈DCi (Si ) Higher–order prohibition abstraction semantics generalises the intuition of deontological counts–as for first–order prohibitions, but based on deontological counts–as itself. Prohibiting all concrete normative fluents that count–as a more abstract normative fluent, counts–as prohibiting the more abstract normative fluent.\nAccording to our case study, indefinitely prohibiting obliging storing content data and prohibiting to oblige storing metadata, counts–as indefinitely prohibiting obliging storing personal data. Likewise, for prohibiting prohibitions.\n〈{pro(obl(storeData(isp, ada, content), now), never), pro(obl(storeData(isp, ada, metadata), now), never)},\npro(obl(storeData(isp, ada, personal), now), never)}〉 ∈DCi (Si ) 〈{pro(pro(storeData(isp, ada, content), never), never),\npro(obl(storeData(isp, ada, metadata), never), never)},\npro(pro(storeData(isp, ada, personal), never), never)〉 ∈DCi (Si ) Abstracted normative fluents can also be further abstracted. To give an example, in the EU–DRD the event of storing personal data without someone’s consent counts–as a non– consensual data processing event. Hence in the context that the agent Ada has not consented (S |= ¬consentedDataProcessing(ada)) we have the following deontological counts–as relation. It states the EU–DRD is effectively obliging an obligation for data to be processed non–consensually:\n〈{obl(obl(storeData(isp, ada, personal), now), now)}, obl(obl(nonConsensualDataProcessing(ada), now), now)}〉 ∈ DCi (Si )\nDeontological counts–as relations are also derived from the fluent derivation function Di . To exemplify, we take the previous example where we have an abstract obligation obliging Ada’s data is stored non–consensually. Loosely speaking, the ECJ judged [70] that the"
    }, {
      "heading" : "3.4. SEMANTICS 71",
      "text" : "EU–DRD, by obliging an obligation for non–consensual data processing, violated the EU– CFR’s prohibition on unfair data processing (e.g. pro(unfairDataProcessing(ada), never)). But how do we go from a second–order obligation for data to be processed non–consensually to violating a first–order prohibition on unfair data processing? One possibility is that the EU–CFR’s fluent derivation function (Dcfr) states that obliging non–consensual data processing counts–as unfair data processing, such that Dcfr(;,obl (nonConsensualDataProcessing(ada)), now)) 3 unfairDataProcessing(ada). Thus we have the following relation stating the second–order obligation for non–consensual data processing deontologically counts–as, more abstractly, obliging data is processed unfairly:\n〈{obl(obl(nonConsensualDataProcessing(ada)), now), now)}, obl(unfairDataProcessing(ada), now)〉 ∈DCi (Si )\nHowever, obliging data is processed unfairly does not violate the EU–CFR prohibition on unfair data processing, pro(unfairDataProcessing(ada), never). This is unsurprising, the EU–CFR does not impose an explicit second–order prohibition, or contain any explicit higher–order norms for that matter (both in reality and in our formalisation). Unfair data processing is somehow derived from an obligation to oblige non–consensual data processing. One possibility is as follows: 1. according to the fluent derivation function obliging non–consensual data processing counts–as unfair data processing, thus 2. obliging an obligation to process data non–consensually counts–as obliging unfair data processing. 3. The EU–CFR considers whether data is processed unfairly or obliged to be processed unfairly as irrelevant, both are viewed as unfair data processing. 4. Thus, an obligation to process data unfairly counts–as unfair data processing according to the fluent derivation function, Dcfr(;,obl (un f ai r Dat aPr ocessi ng (ad a)),now)) 3 unfairDataProcessing(ada). That is, normative fluents about abstract concepts are reduced to (ascribed as) those abstract concepts, in this way first–order norms can indirectly govern other norms.\nThe idea here does not mean what ought to be the case is the case (unfair data processing). Rather, unfair data processing is an abstract concept which has many meanings, including obliging unfair data processing itself. Note that this means not only is an obligation to process data unfairly reduced to unfair data processing, but so is a second–order obligation, a third–order obligation, etcetera. Formally:\n〈{obl(obl(unfairDataProcessing(ada), now), now)}, unfairDataProcessing(ada)〉 ∈DCi (Si )\n〈{obl(obl(obl(unfairDataProcessing(ada), now), now), now)}, unfairDataProcessing(ada)〉 ∈DCi (Si )\n...\nFollowing this discussion, we formally define deontological counts–as, based on counts– as relations which hold in a state according to the event generation function, fluent derivation function and deontological counts–as itself. For convenience, we collect the event generation and fluent derivation counts–as relations into a single set Ai which form the function’s base cases. Since deontological counts–as is also defined based on its own counts–as"
    }, {
      "heading" : "72 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "relations (in order to generalise to higher–order normative fluents), deontological counts–as is also defined recursively. Formally, deontological counts–as is defined as:\nDefinition 7. Deontological Counts–as Given a state Si , the deontological counts–as function DCi :Σi → 2F inorm ×F inorm is defined for the state Si ∈Σi such that DCi (Si ) is the minimal (w.r.t. set inclusion) set of all pairs 〈N ′,n′〉 where N ′ 6= ; that satisfy the following:\nN ′ = {obl(a,d) | a ∈ A}s.t .〈A,b〉 ∈Ai (Si )∪DCi (Si )∧n′ = obl(b,d) ∈F ′norm or (D7.1) N ′ = {pro(a,d) | 〈A,b〉 ∈Ai (Si )∪DCi (Si )∧a ∈ A}∧n′ = pro(b,d) ∈F inorm (D7.2)\nWhere the set of abstracting counts–as relations Ai (Si ) for the state Si is defined as: A(Si ) ={〈{a},b〉 | X ∈X i , a ∈ E i ,b ∈G i (X , a)∧Si |= pow(b)}∪ (D7.3)\n{〈{a},b〉 | X ∈X i , a ∈F i ,b ∈Di (X , a)} (D7.4)\nA state closed under deontological counts–as function is the function DC i\n: Σi → Σi , such that S′ = DCi (Si ) iff it minimally (w.r.t. set inclusion) satisfies all of the following conditions:\nSi ⊆ S′ (D7.6) ∃〈N ′,n′〉 ∈DCi (Si ) : N ′ ⊆ S′∧n′ ∈F ianorm ⇒ n′ ∈ S′ (D7.7)\nIn more detail. Concrete obligations count–as a more abstract obligation according to D7.1. Concrete prohibitions count–as a more abstract prohibition according to D7.2. These counts–as relations are derived from relations between concrete concepts counting–as an abstract concept defined by the event generation function and fluent derivation function according to D7.3 – D7.4 (the base cases) and with respect to deontological counts–as itself since it is defined recursively.\nDeontological counts–as does not describe whether normative fluents in a state Si are abstracted, but rather whether they could be. Closing a state under deontological counts–as is according to the operation DC i . Condition D7.6 ensures any fluents already in the state remain in the state. Condition D7.7 ensures if concrete normative fluents, should they hold in a state are abstracted to a normative fluent, and they do indeed hold, then the abstracted normative fluent also holds. Note that in D7.7 it is ensured only normative fluents which belong to the abstract set of normative fluents can hold in a state due to being derived from concrete normative fluents. Consequently, deontological counts–as only adds non–inertial abstract normative fluents to a state.\nNote that DC i\nis a partial function if there is a fault in the institutional specification. For example, if an institution obliges an event a to occur in some state, and the event a generates the event b in that state, then b is also obliged to occur in that state. However, if a generates the event b conditional on b not being obliged then there is a problem. We have that b is obliged since a is obliged. But, if b is obliged then a does not count–as b, thus obliged a does not count–as obliged b and so there is no obligation for b to occur. Again, in principle there is nothing wrong with the possibility of this paradox occurring since it is an institutional design fault. If we have DC i (S) =⊥ then we have detected an institutional design problem for the institution designer to rectify."
    }, {
      "heading" : "3.4. SEMANTICS 73",
      "text" : "MODELS In this section we define a model which describes how each institution in a multi–level governance institution evolves from one state to the next, driven by observable events which generate institutional events in state transitions. A model is defined in response to a trace of observable (exogenous) events.\nThe approach we take is to put together all the previous operations according to the following description. An institution starts at an initial state which includes the institution’s initial set of inertial fluents (∆i ), and the state closed under the fluent derivation and deontological counts–as operations. The institution transitions between states with a set of events generated by the event generation operation in response to an observable event in the event trace. Each state transitioned to contains the fluents that held in the previous state that were not terminated, any newly initiated fluents as well as closing the state under the fluent derivation and deontological counts–as operations. Additionally, an institution’s evolution is affected by the evolution of other institutions it governs. This means that a higher level institution’s state includes normative fluents from lower level institutions it governs. These normative fluents are ‘passed up’ to the higher level institution in order to abstract the lower levels normative fluents and determine if they are compliant in their abstract interpretation.\nWe begin by defining the initial state of each individual institution. Formally and described subsequently:\nDefinition 8. Initial States The initial state Si0 for each individual institution I i w.r.t. ML = 〈T ,R〉 and a tuple of initial states 〈S10, ...,Sn0 〉 is the set Si0 if and only if Si0 minimally (w.r.t. set inclusion) satisfies the following:\nSi0 ⊆∆i (D8.1) ∃〈h, i 〉 ∈ R,n ∈ (Fhcnorm ∪Fhanorm)∩F ininert : n ∈ Sh0 ⇒ n ∈ Si0 (D8.2) Si0 =FDi (Si0) (D8.3) Si0 =DC i (Si0) (D8.4)\n• D8.1 – an institution’s initial set of inertial fluents is included in the institution’s initial state.\n• D8.2 – if the institution governs a lower level institution then it contains any normative fluents holding in that lower level institution’s initial state.\n• D8.3 – the initial state is closed under the fluent dependency operation, such that all derived fluents are included.\n• D8.4 – the initial state is closed under deontological counts–as such that all abstracted normative fluents are included.\nNow we define which fluents are initiated and terminated from one state to the next in response to a generated set of events (i.e. by the event generation operation). The set of fluents that are initiated (INITi ) and terminated (TERMi ) from one state to the next are formally defined as and subsequently described:"
    }, {
      "heading" : "74 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "Definition 9. Fluent Initiation and Termination The sets of all initiated and terminated fluents for I i are respectively defined with the functions INITi :Σi ×2E i → 2F i and TERMi : Σi ×2E i → 2F i :\nINITi (Si ,E i ) = { f | ∃e ∈ E i ,∃X ∈X i : f ∈ C i↑(X ,e)∧Si |= X } (D9.1.1)\nTERMi (Si ,E i ) = { f | ∃e ∈ E i , X ∈X i :Si |= f ∧ f ∈ C i↓(X i ,e)∧Si |= X or (D9.2.1)\nSi |= f ∧ (viol( f ) ∈ E i ∨disch( f ) ∈ E i )} (D9.2.2)\nCondition D9.1.1 specifies the set of initiated inertial fluents according to the institution’s consequence function. An inertial fluent is initiated by the state consequence function conditional on an event occurring and a social context holding in the state. Conversely, D9.2.1 specifies the set of terminated inertial fluents includes any inertial fluents terminated according to the institution’s consequence function. Condition D9.2.2 states any discharged or violated inertial (concrete) normative fluents are also terminated, meaning discharged/violated normative fluents do not persist by default2.\nA state transition operation (TRi (Si ,E i )) produces a new institutional state based on the previous state (Si ) due to the occurrence of events (E i ). The new state includes any inertial fluents that held in the previous state and have not been terminated, any newly initiated fluents, normative fluents holding, and the state’s closure under the fluent derivation and deontological counts–as operations. It is formally defined as and subsequently described:\nDefinition 10. State Transitions The state transition operation TRi : Σi ×2E i → Σi is defined for each institution I i , a state Si and a set of events E i w.r.t. the states of other institutions 〈S1j , ...,Snj 〉 holding at the same time and ML= 〈T ,R〉, such that TRi (E i Si ) = S′ iff S′ minimally (w.r.t. set inclusion) satisfies all of the following conditions:\n∀ f ∈ (Si ∩F iinert)\\TERMi (Si ,E i ) ⇒ f ∈ S′ (D10.1) ∀ f ∈ INITi (Si ,E i ) ⇒ f ∈ S′ (D10.2) ∃〈h, i 〉 ∈ R,n ∈ (Fhcnorm ∪Fhanorm)∩F ininert : n ∈ Shj ⇒ n ∈ S′ (D10.3) S′ =FDi (S′) (D10.4) S′ =DCi (S′) (D10.5)\n• D10.1 – non–terminated inertial fluents persist from one state to the next, following the common sense law of inertia.\n• D10.2 initiated fluents hold in the next state.\n2Meaning, if you discharge or violate an obligation you are no longer obliged and likewise for prohibitions. In some cases, it can make sense for a discharged/violated normative fluent to persist. For example, if you violate a prohibition on murder, it is still usually the case that you are still prohibited from committing murder. For an extensive discussion on when it does and does not make sense for obligations and prohibitions to persist after discharge/violation see [98]."
    }, {
      "heading" : "3.4. SEMANTICS 75",
      "text" : "• D10.3 a higher level institution’s state contains all normative fluents that hold in the same state of a lower level institution the higher level governs.\n• D10.4 the newly transitioned to state includes all normative fluents that can be derived according to the fluent derivation operation.\n• D10.5 the newly transitioned state contains all normative fluent abstractions according to deontological counts–as.\nWe now proceed to event traces. The trace a model defined in response to is a sequence of observable events recognised by the institutions involved in a multi–level governance relationship. That is, it is a trace of only those events that can affect the institutions involved, driving their evolution and the multi–level governance institution’s evolution as a whole. Each event in a trace needs to be recognised by at least one institution to drive its evolution over time. We call such a trace, a composite event trace, formally:\nDefinition 11. Composite Event Trace Let ML = 〈T ,B〉 be a multi–level governance institution where T = 〈I1, ...,In〉. ctr = 〈e0, ...,ek〉 is a composite trace for ML iff ∀ j ∈ [0,k],∃i ∈ [n] : e j ∈ E iobs\nSynchronisation issues can arise between institutions. These issues occur if a composite trace includes an event recognised by one institution, therefore driving its state forward, but not recognised by another meaning its state does not evolve. If an event in a composite trace is not recognised by an institution, then the institution should still transition to a new state to ensure it is evolving at the same rate as other institutions. We replace unrecognised events by the event of no change, the null event, in a synchronised trace for each institution derived from a composite trace. Formally:\nDefinition 12. Synchronised Trace Let I be an institution, and ctr = 〈e0, ...,ek〉 be a composite event trace. A trace str = 〈se0, ...,sek〉 is a synchronised trace of ctr for I iff ∀i ∈ [0,k] : if ek ∈ Eobs, sek = ek and sek = enull otherwise.\nWe now define a multi–level governance institution model. A model comprises sequences of states (S) and events (E). One state sequence for each individual institution (Si ) and one sequence of event sets for each individual institution (E i ) driving its state transitions. A model is defined in response to a composite trace such that the corresponding synchronised trace for each institution drives its evolution over time, causing events to occur and driving state transitions forward. Each state and set of transitioning events is defined for each institution assuming the states and set of transitioning events exist for every other institution. Formally:\nDefinition 13. Multi–level Governance Institution Model Let M = 〈M 1, ..., M n〉 be a tuple of state and event sequence pairs for each institution I i with typical element M i = 〈Si ,E i 〉 where Si = 〈Si0, ...,Sik+1〉 and E i = 〈E i0, ...,E ik〉. Let ctr be a composite trace for ML = 〈T ,R〉 and stri = 〈sei0, ...,seik〉 be a synchronised trace of ctr for each institution I i . Let ∀i ∈ [1,n],∀ j ∈ [0,k] : GRi (Sij ,E ij ) be the event generation operation for I i w.r.t. 〈S1j , ...,Snj 〉 and 〈E 1j , ...,E nj 〉. Let ∀i ∈ [1,n],∀ j ∈ [0,k] : TRi (Sij ,E ij ) be the state transition operation for"
    }, {
      "heading" : "76 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "each institution I i w.r.t. 〈S1j , ...,Snj 〉. The tuple M is a model of ML w.r.t. ctr if and only if:\n∀i ∈ [1,n] : Si0 is the initial state of each institution I i w.r.t. 〈S10, ...,Sn0 〉 (D13.1) ∀i ∈ [1,n],∀ j ∈ [0,k] : E ij =GRi (Sij , {seij }) (D13.2) ∀i ∈ [1,n],∀ j ∈ [0,k] : Sij+1 = TRi (Sij ,E ij ) (D13.3)\n• D13.1 – the initial state of each individual institution, which is defined with respect to the initial state of every other institution (meaning a higher–level institution includes normative fluents from a lower–level institution).\n• D13.2 – each institution’s set of events transitioning to a new state comprises all events generated from the corresponding event in the synchronised trace and the previous state according to the event generation operation. The event generation operation is also defined with respect to the states and events from every other institution, such that norm compliance events are ‘passed up’ between governance levels.\n• D13.3 – the next state transitioned from the previous state by the set of transitioning events. The state transition operation is also defined with respect to the states and events from every other institution, such that normative fluents are ‘passed up’ between governance levels.\nThis concludes multi–level governance institution semantics.\nCOMPLIANCE MONITORING A multi–level governance institution model monitors the compliance of other institutions’ regulations and their outcomes. A model determines if the concrete regulatory effects of one institution are non–compliant with the more abstract regulations of a higher level institution in a particular context. This is by ‘passing up’ any concrete normative fluents from a lower level institution to the higher level institution which governs it. Then, abstracting those concrete normative fluents in the higher level institution according to the higher level institution’s abstracting constitutive rules (i.e. under the semantics of deontological counts–as). Then, taking the more abstract interpretation of the lower levels’ concrete normative fluents, generating any discharge and violation events of the higher level institution’s higher–order norms that oblige/prohibit the abstracted lower level institution’s concrete norms. All that is needed to determine if there is non–compliance is to collect a set of violation events from the multi–level governance model for each institution. Formally, the set of sets of violation events for each individual institution denoting non–compliance is:\nDefinition 14. Multi–level Governance Violations Let ML= 〈T ,R〉 be a multi–level governance institution and M = 〈M 1, ..., M n〉 a model of ML w.r.t. a composite trace ctr such that ∀i ∈ [n] : M i = 〈Si ,E i 〉,Si = 〈Si0, ...,Sik+1〉,E i = 〈E i0, ...,E ik〉. The tuple V = 〈V1, ...,Vn〉 is the set of multi–level governance violations for ML w.r.t. ctr if and only if:\n∀i ∈ [1,n] : Vi = {e | ∃ f , j : f ∈F icnorm ∪F ianorm, j ∈ [k]∧viol( f ) ∈ E ij ∧e = viol( f )} (D14.1)"
    }, {
      "heading" : "3.5. RELATED WORK 77",
      "text" : "Non–compliance is found if the set of violation events is not the empty set. For an institution governing a society this implies the society is non–compliant (either in reality if compliance checking is performed before run–time or hypothetically if not). For a higher level institution governing a lower level institution non–compliance denotes the regulatory effects are non–compliant if the violated norms belong to the higher level institution. Such non–compliant regulatory effects can be due to having a more abstract, non–compliant, meaning.\n3.5. RELATED WORK In this chapter we presented a formal framework for reasoning about multi–level governance. Specifically, determining compliance where higher–level institutions which impose abstract regulations governing lower–level institutions which impose concrete regulations. The purpose of this chapter is to contribute a rigorous formalisation, with particular attention paid to the philosophical aspects. Closely related works contribute formalisms for reasoning about hierarchical governance and abstract regulations.\n3.5.1. HIERARCHICAL GOVERNANCE There appears to be little on hierarchical governance and the regulation of regulations. In [159] Lopez and Luck propose a framework for reasoning about norms governing agents, created from a top–down governance perspective. Their framework, based on the Z specification language, gives a precise specification language of a normative system/institution rather than like ours a specification language and operationalisation (semantics). Like our framework, theirs offers similar expressivity with temporal norms, rewards, punishments, etcetera. In particular Lopez and Luck formalize what they call legislative norms which are special norms filling the role of, viewing norms as being dynamic and subject to creation, deletion and modification, governing the act of norm changes. This still presents a substantial difference to the method of hierarchical governance and regulation governing regulations we propose, since we use higher–order norms that govern the outcome of other norms from which (non–)compliance is determined (typically pre–runtime). Lopez and Luck’s legislative norms on the other hand govern the changes to the norms (rules) themselves.\nBoella and van der Torre [26] offer a conceptual formalisation of hierarchical normative systems in Input/Output Logic (a logic aimed at studying conditional norms [165]). Like our formalisation, they formalise governance hierarchies, but their formalised concepts have nuanced differences with ours. One of their foci is the role of permissions in hierarchical normative systems. They look at permissions from two perspectives: firstly permissions in static normative systems where authorities do not change norms, secondly permissions in dynamic normative systems where authorities are liable to change norms. In the first case of static normative systems, permissions are issued by higher authorities (e.g. existing in higher level institutions) and act to derogate (except) obligations to the contrary (prohibitions) issued by lower level authorities. Conversely, a higher-level authority issuing an obligation is essentially preventing a lower-level authority from issuing a permission that derogates the obligation. In the second case of dynamic normative systems, permissions issued by higher-level authorities act to enable lower-level authorities to change the"
    }, {
      "heading" : "78 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "normative system in some way, such as permitting a norm to be implemented. The same goes for obligations and prohibitions, a higher-level authority may prohibit a lower-level from implementing a permission that derogates other norms. In contrast, we do not look at derogation, similar concepts would require a kind of defeasibility, which as discussed in the relation to defeasible logic is left for future work. In terms of norms that enable/disable changes to a dynamic normative system, we do not look at dynamics of norms in this chapter, but later in Chapter 6 we formalise counts-as conditionals that regulate norm change in a temporal setting.\nSubsequent work by Boella and van der Torre [29] formalises higher-order norms in the context of security policies. A security governance hierarchy involves global policy makers obliging/permitting/prohibiting local policy makers to/from obliging/permitting/prohibiting individual agents to/from sharing information and knowledge. In the formalisation agents impose norms by ascribing violations to the actions of other named agents. For example, if agent A prohibits agent B from doing x then agent A ascribes, according to an internal rule, a violation on B for doing x. Hence, the general approach is to adopt Anderson’s [9] reduction of deontic logic to alethic modal logic, where the modalities are replaced by rules with violation as the necessary consequent of prohibited actions/states of affairs. In order to impose higher-order norms, agents ascribe nested violations. So for example agent C prohibiting agent A from prohibiting B to do x, is reduced to an ascription by agent C to the action of agent A ascribing a violation to B doing x (a violation violates a norm). The formalisation is in contrast to ours. A higher-order norm according to Boella and van der Torre’s reduction to ascribed violations, is violated only when the norm it prescribes is violated. Consequently, if there are no violations of first-order norms then there are no violations of higher-order norms, owing to one focus being on the enforcement of norms which requires violations being ascribed to agents. In contrast, higher-order norms in our formalisation are discharged/violated by the mere imposition of obligations and prohibitions by lower-level institutions, although we show examples where violations themselves are obliged/prohibited, moreover we specifically address the different level of abstractions norms operate at.\nAside from these different approaches and foci, Boella and van der Torre’s formalisation in [29] provides an argument for von Wright’s “transmission of will” principle requiring norms of all orders are enforced. As we discussed briefly in the background section (specifically 2.2.3), it is shown in formalised scenarios that von Wright’s ‘transmission of will’ [236] does not merely involve an obligation to oblige being fulfilled, but also the lower-order obligation being enforced. Moreover, higher-order norms should be enforced, or else lower authority agents acting in their own self interests may (not) impose certain norms that contravene higher-order norms. Central to demonstrating these two enforcement requirements is the use of violations being ascribed to agents’ actions (including the action of ascribing violations). In our formalisation, it is grammatical for higher-order norms to be enforced but in our context of institutions governing institutions higher-order norm enforcement is meaningless. That is, in our formalisation violation occurs as a part of a pre-runtime check (e.g. to check whether national legislation implements an EU directive before a particular deadline) and hence it makes no sense to enforce higher-order norms when violations occur. Rather we assume rewards/punishments for (non-)compliant institution designs are imposed by some kind of external process or logic after a pre-runtime check"
    }, {
      "heading" : "3.5. RELATED WORK 79",
      "text" : "has determined (non-)compliance of the institution design as a whole. In comparison, since Boella and van der Torre are dealing with agents imposing norms on other agents, enforcement of higher-order norms is meaningful. As for transmission of will requiring obliged lower-order norms to be enforced, we do not have a general formalisation of this requirement. However, we do formalise a specific component the EU Data Retention Directive, which that when obliged obligations are violated then it is obliged there is an obligation for an offender to be punished. In summary, our work agrees with Boella and van der Torre’s that both higher and lower-order norms should be enforced, but in the former case we assume an external process handles enforcement and in the latter case we formalise specific scenarios but provide no generalised reasoning for the transmission of will.\n3.5.2. ABSTRACTING NORMS As we discussed in the background section, there has already been a reduction of Standard Deontic Logic [234] to a logic of counts–as conditionals representing evaluative norms [9] (as studied in [106, 112]). For example, ‘B counts–as a violation in a context C’. Following this idea, Aldewereld et al. [4] propose implemented reasoning for concretising abstract norms. This is by representing abstract norms as counts–as statements such as ‘B counts– as a violation in a context C’ and so B is forbidden in C. Then, making use of the fact that more concrete concepts count–as more abstract concepts (e.g. ‘A counts–as B in context C’). Finally, applying transitivity to concretise abstract norms (e.g. ‘A counts–as a violation in context C’, since A counts–as B and B counts–as a violation). Alderwereld et al. provide a computational approach to the normative reasoning with a rule–based computational language. The same warning against this approach for multi–level governance that we make in the background, applies to what differentiates it from our work. Specifically, by ignoring deontic modalities it is difficult to describe and reason about higher–order norms. Although concretisation of norms is possible, higher–order normative reasoning (regulation governing regulations) is not and neither is the abstraction of higher–order norms.\nA description–logic based mechanism for reasoning about abstract institutional concepts is also proposed by Grossi et al. [108]. Unlike in our work, Grossi et al. do not propose abstraction of norms themselves (in fact, they propose concretising concepts), since normative reasoning is not a part of their proposal. Rather, they offer guidance on how normative reasoning can be incorporated, either by the reduction of norms to counts– as, which like us they acknowledge does not support nesting of deontic modalities and therefore higher–order norms. They also offer an alternative path to normative reasoning. Namely, assigning different descriptive concepts a ‘role’ of ideal thereby designating their normativity together with axioms for normative reasoning. The idea being, norms can then be nested and normative statements concretised. However, this part of the proposal is not formalised. Furthermore, our work still differs in that we are interested in abstracting rather than concretising norms in a temporal setting.\nIn comparison a series of papers by Fornara and Colombetti [79], Fornara [77] and Fornara, Okouya and Colombetti [80] combine the semantic–web focussed description logic OWL2DL with normative reasoning. In their proposal obligations are about events with a time–indexed deadline. Time is not integrated within the underlying logic, rather it is reasoned using an external process which adds facts to the knowledge–base (e.g. that an action has occurred, time has passed, etc.). Like our proposal and many others, the dead-"
    }, {
      "heading" : "80 3. FORMALISING COMPLIANCE IN MULTI–LEVEL GOVERNANCE",
      "text" : "line of an obligation occurring before the aim triggers violations and potentially causes punishing obligations to be imposed. In comparison to the work of Grossi et al. they do explicitly look at representing and reasoning about norms in description logic but do not aim to reason about the relationship between concrete and abstract concepts or the concretisation/abstraction of norms. The same differences apply when compared to our own work with the additional difference that we do not restrict norms to being about events. Rather, in our proposal normative fluents can be higher–order and about events or other fluents.\nCriado et al. [49] look at agent reasoning for fulfilling agent desires about abstract institutional concepts. Such desires may come about due to the presence of regulative norms (e.g. an obligation to be married), but their focus is on the concretisation of these abstract institutional concepts (e.g. if an agent wants to get married, what are the brute facts that need to be realised?). In relation to our work, Criado et al. also view counts–as, as providing interpretive primitives in which abstract institutional concepts can be reasoned about. However, they do not explicitly look at how to transform abstract norms into concrete ones, or as we do concrete (higher–order) norms into abstract ones to check compliance. Rather, their focus is on the interpretation of the abstract concepts in order to fulfil agents’ desires.\nTo summarise, work proposing ways to reason about abstract and concrete norms or using techniques that can be extended to do so is quite different from our own. Whilst some work does look at the concretisation of abstract norms, there is apparently no work that looks at the abstraction of concrete, potentially higher–order, norms. Furthermore, the aforementioned work that explicitly looks at concretisation is not in a temporal setting. Rather, our proposal focuses on the temporal aspects where as the institutional context evolves so does the abstract meaning of concrete norms and thus their compliance with abstract norms at higher governance levels.\n3.6. DISCUSSION In this chapter, we answered the question “How can we formalise compliance in multi– level governance?” with a formal framework. The general answer being that a lower–level institution is compliant in multi–level governance when the effects of its regulations (obligations and prohibitions) are compliant with higher–order regulations at higher–levels of governance. In particular, taking into account the fact that lower–level institutions operate at a different levels of abstraction to higher–levels. Accommodating for this fact, compliance is determined based on the abstract meaning of concrete regulations. We adopted the usual notion of counts–as between concrete and abstract institutional concepts. Based on the counts–as ontological primitive we semantically defined the abstraction of norms, first and higher–order, with the notion of deontological counts–as. Under the semantics, concrete regulations from lower–level institutions are abstracted to the same level of abstraction in higher–level institutions. In their abstract form, the effects of concrete regulations (obligations and prohibitions) are determined for compliance with abstract regulations in higher–level institutions. It is important to note that the abstract meaning of concrete regulations is context–sensitive. Therefore, whether concrete regulations are compliant depends on the contexts they are applied in. To summarise, institutions are compliant in multi–level governance if in different social contexts the abstract meaning of their concrete regulations is compliant with abstract higher–order norms at higher–levels of governance."
    }, {
      "heading" : "3.6. DISCUSSION 81",
      "text" : "The strength of the semantics is in formalising the abstraction of concrete norm effects (obligations and prohibitions), potentially abstracting higher–order concrete norm effects. By paying particular attention to the norm abstraction semantics, with lengthy discussion and the application to our case study, we argued the semantics correctly abstract concrete normative fluents. However, in general the semantics proposed in this section are not without their weaknesses. In particular, as we discussed multiple times, many of the operations are undefined for cases where an inconsistent institution design causes contradiction. Arguably, the fault is with the institution design and not the semantics. On the other hand, inconsistent information is a fact of life. In this chapter, we do not propose an inconsistency tolerant semantics. But, it is important for future work to address this weakness. Particular attention should be paid to resolving inconsistencies arising under the novel semantics provided by deontic abstraction (whereas current work in the literature deals with inconsistency occurring according to a semantics where abstraction is not modelled).\n4 COMPUTATIONAL\nMULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING\nScience is knowledge which we understand so well that we can teach it to a computer; and if we don’t fully understand something, it is an art to deal with it.\nDonald Knuth\nThis chapter is based on the following papers: King, T. C., Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & van Riemsdijk, M. B. (2015, May). Automated Multi–level Governance Compliance Checking. Journal of Autonomous Agents and Multiagent Systems (JAAMAS). International Foundation for Autonomous Agents and Multiagent Systems. (In Submission) Which extends the following paper: King, T. C., Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2015). A Framework for Institutions Governing Institutions. In Proceedings of the 2015 International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2015) (pp. 473–481). Istanbul, Turkey: International Foundation for Autonomous Agents and Multiagent Systems. [144]\n83"
    }, {
      "heading" : "84 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "This chapter makes the following contributions:\n• A computational framework for representing institutions in multi–level governance and automatically detecting compliance in multi–level governance.\nThe previous chapter gave a formal definition for when institutions are compliant in multi–level governance. Special attention was paid to the increasing abstraction of regulations at higher–levels of governance that govern the relatively concrete regulations of lower– levels of governance. Hence, one objective of this dissertation was achieved. Namely, to formalise the informal notions of compliance in multi–level governance.\nIn this chapter the focus moves from formalising compliance to automated compliance checking with a computational framework that corresponds to the formal framework. The approach we take is to represent institutions and their semantics as Answer–Set Programming (ASP) programs. By using ASP we can produce models of a multi–level governance institution for a trace of events. Thus we can automatically determine compliance by inspecting the generated models for non–compliant lower–level institutions. This follows the approach of InstAL [42, 43], which provides a representation in Answer–Set Programming for individual institutions governing MAS. However, we need to provide a novel representation for institutions governing other institutions in multi–level governance institutions. Thus, we need to provide a corresponding Answer–Set Program for reasoning about abstract norms governing more concrete norms.\nTo this end, this chapter contributes the following novel elements for practical reasoning about compliance in multi–level governance:\n• Regulations governing regulations computational reasoning. By taking a formal representation of multi–level governance institutions and producing, through a transformation, a set of answer–set programming rules. These rules capture norms governing norms’ representation and reasoning. The previous chapter contributed a representation and semantics for norms governing norms. This chapter contributes the implementation, such that in our computational framework when a norm at a higher–level of governance is violated this indicates that the regulatory effects (imposed obligations and prohibitions) of lower–levels are non–compliant.\n• Norm abstraction reasoning. By taking a formal representation of multi–level governance institutions and producing through a transformation a set of answer–set programming rules. These rules capture the semantics for abstracting concrete norms based on whether the concrete prescribed concepts count–as more abstract concepts.\n• A computational framework based on answer–set programming, including the two aforementioned representations, which corresponds to the formal framework. That is, firstly an answer–set program such that for every answer–set program it produces there is an equivalent model in the formal framework for the same multi–level governance institution (soundness). Secondly, an answer–set program such that for every model in the formal framework there is an equivalent answer–set produced by the answer–set program for the same multi–level governance institution (completeness).\nIn addition to these contributions, the following application is contributed:"
    }, {
      "heading" : "4.1. PRELIMINARIES – ANSWER SET PROGRAMMING 85",
      "text" : "• An implementation of the aforementioned transformations as a parser and compiler, extending the InstAL implementation. The implementation provides a high–level representation language for representing multi–level governance institutions and outputs an answer–set programming for checking compliance in those institutions. In this chapter the contributions are applied to an extensive formalisation of EU law for assessing compliance in our running case study.\nIn the rest of this chapter we begin by introducing Answer–Set Programming (ASP) in 4.1. We describe the overall approach we take to representing multi–level governance institutions in answer–set programming in 4.2. We give the representation in ASP in 4.3. We demonstrate the proposed computational framework we have implemented as a compiler which takes a high–level description of a multi–level governance institution. The output is an ASP program that operationalises a multi–level governance institution. We give an overview of the implementation and results of executing the resulting ASP program for our running case study in 4.4. To show that the computational framework provides a practical implementation of the formal framework we provide soundness and completeness properties between the two frameworks in section 4.5. The properties are proven in appendices. We finish with conclusions in section 4.7.\n4.1. PRELIMINARIES – ANSWER SET PROGRAMMING Answer–Set Programming is a non–monotonic logic–programming language [17, 93], for declaring problems according to the syntax of AnsProlog as a set of first–order rules. AnsProlog is fully declarative in the sense that the ordering of logical formulae (horn clauses) makes no semantic difference. Executing an AnsProlog program solves the declared problems by first running a grounder which grounds all rules, replacing variables with ground terms, and then running a solver against the ground program. A solver computes the set of answer–sets, where each answer–set is a model of the AnsProlog program and a solution to the problem declared. Answer–sets are computed according to the stable– model semantics [93].\nWe use AnsProlog for two main reasons. Firstly, it provides a natural representation of individual and multi–level governance institutions, where institutions’ functions are represented as AnsProlog rules. Secondly, it supports meeting the goal of our framework: automatically checking different contexts, or traces of exogenous events, for whether lower– level institutions are non–compliant. Using AnsProlog, a single trace of events can be supplied to check for compliance, but we can also specify a partial trace and that all variants of that trace must be used to check compliance or even all possible traces up to a specific length must be checked for compliance. It is also possible to declare that each answer–set produced must have a particular property, such as ‘there must be at least one violation of a norm in a higher level institution’. In this case the property implies that if no answer–sets are produced then there is full compliance for all traces up to a certain length. In summary, Answer–Set Programming provides a natural representation of multi–level governance institutions and an easy way to perform a contextual search for compliance.\nThere are many answer–set solvers available (e.g. [67, 91]). We briefly reintroduce the main definitions to give context for what follows, focussing on the syntax of the CLINGO [91] grounder and solver making use of a number of its unique constructs. In more detail, an"
    }, {
      "heading" : "86 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "AnsProlog program is built from atoms and predicates. Predicates can be ground, such as lays_eggs(slinky) or non–ground predicates containing variables representing the ground instance schemas, such as bird(X). Atoms and predicates can be weakly negated, such as not. 1 A rule r is typically of the form p_0 :- p_1, ..., p_n comprising a head atom denoted H(r ) and a set of body literals denoted B(r ), which can be delineated into the positive body atoms B+(r ) and atoms appearing negated in the body B−−(r ). A rule r can also be a fact by having an empty body such that B(r ) = ; containing only a single head atom such as lays_eggs(slinky). To give an example adapted from [17], the following program declares that a bird is an animal that lays eggs which is not a reptile, a reptile is an animal that lays eggs that is not a bird and slinky is an animal that lays eggs:\nbird(X) :- lays_eggs(X), not reptile(X). reptile(X) :- lays_eggs(X), not bird(X). lays_eggs(slinky).\nA (total) interpretation of an answer–set program is a truth–assignment to literals, comprising a set of the atoms assigned the value of ‘true’. An answer–set is a minimal interpretation containing all atoms that are justified in being true. Precisely, for a rule r , the head atom denoted H(r ) is justified in being true if all positive body atoms, denoted B+(r ), are true, and none of the weakly negated body atoms, denoted B−−, are true. This implies facts are always justified in being true (e.g. lay_eggs(slinky)). Looking at the previous example there can be more than one answer–set. If bird(slinky) is in an interpretation then reptile(slinky) cannot be in the interpretation for it to be an answer–set, and vice versa. These answer–sets are:\n• { bird(slinky), lays_eggs(slinky) }\n• { reptile(slinky), lays_eggs(slinky) }\nDetermining if an interpretation is an answer–set requires knowing which atoms are justified according to the program’s rules. In the presence of weak negation this means we should only consider the rules that do not contain weakly negated atoms that are in the answer–set. Furthermore, for those rules that remain we do not need to consider their weakly negated literals to determine if the head is justified. Removing all rules in a program with weakly negated literals that are in an interpretation and all weakly negated literals from the remaining rules is called the reduct of the program, formally from [92]:\nDefinition 15. Reduct Let Π be an Answer–Set Program and X an interpretation of Π, the reduct denoted ΠX is the set:\n{H(r ) ← B+(r ) | r ∈Π and B−−(r )∩X =;}\nWe want to determine for a reduct and a set of atoms, whether that set of atoms is closed under the program (containing all justified atoms) and whether it is minimal (containing no atoms that are not justified). To give an example, if we have a reduct Π= { lays_eggs(slinky). bird(slinky) :- lays_eggs(slinky). }, 1we ignore the case of strong negation since it is unnecessary in our use of AnsProlog."
    }, {
      "heading" : "4.2. APPROACH 87",
      "text" : "then the set {lays_eggs(slinky), bird(slinky), some_atom} is closed since lays_eggs(slinky) and bird(slinky) are justified but it is not minimal due to the presence of some_atom. Formally adapted from [92]:\nDefinition 16. Let Π be a reduct and X a set of atoms. The set of atoms X is closed under ΠX if for all r ∈ ΠX , we have H(r ) ∈ X iff B+(r ) ⊆ X . The smallest set of atoms closed under ΠX is denoted Cn(ΠX ).\nAn answer–set is simply a minimal interpretation of a reduct of the program for the interpretation:\nDefinition 17. Answer–Set Let Π be an Answer–Set Program and X be an interpretation of Π and ΠX be the reduct of Π w.r.t. X . X is an answer–set of Π iff X =Cn(ΠX ).\nIn addition to the Answer–Set Programming semantics given above we use three concise ways to represent useful constructs present in CLINGO [91]. Namely, constraints, choice rules and conditional literals. Constraints are a special type of rule of the form : −b1, ...,bn. representing a rule with falsity in the head such that if all of b1 to bn are true in an interpretation then there is a contradiction and therefore the interpretation is not an answer–set. Choice rules are of the form {a1, ...,an} : −b1, ...,bn., meaning that any atom in a1, ...,an can arbitrarily be picked for inclusion in an answer–set if b1, ...,bn. is true. Aggregates are present in the body of rules and are of the form l{b1; ...;bn}u where l and u are positive integers meaning that at least l and at most u elements of b1, ...,bn must be true for the aggregate to be true. Omitting l or u removes the respective constraint. Finally, conditional literals can be contained in the body of a rule and are of the form b1 : b2, ...,bn. They follow the semantics of material implication; conditional literals are true if the head is true or the body is false. Note that there are no conditional literals in a strict sense, however an aggregate of the form l{b1 : b2, ...,bn}u means that b1 is counted as being true when restricted to the domain of b2, ...,bn. Without variables this simply means that b1 is counted as true when b2, ...,bn is true and hence operates similarly to conditional literals.\n4.2. APPROACH In this section we describe the overall approach we take to reasoning about multi–level governance institutions using answer–set programming. The general idea is to take a formal representation of a multi–level governance institutions. Then, to produce a corresponding representation of that formal description as a set of answer–set programming rules. Moreover, to also provide a corresponding set of answer–set programming rules which capture multi–level governance institution’s formal semantics.\nThe ASP representation for multi–level governance institutions comprises facts representing the signature of each institution’s formal representation (events and fluents) and their initial states. Furthermore, the ASP representation comprises rules, which represent each individual institution’s rules described by their functions (event generation, consequence and fluent derivation).\nEach ASP rule, representing an institution rule, comprises an antecedent and a consequent. The antecedent corresponds to the parameters the functions take. For the event generation and state consequence functions, the corresponding ASP rules’ antecedents comprise the occurrence of events and the state conditions. For the fluent derivation function,"
    }, {
      "heading" : "88 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "expressing constitutive rules of the form “fluent A derives (counts–as) fluent B in context C” the corresponding ASP rules’ antecedents comprise conditions on the state modelling the fluent A and the context C. The consequence of a rule corresponds to the effect of the function’s returned value on a multi–level governance institution model. This is an event caused to occur according to G, the initiation and termination of fluents according to C, and non–inertial fluents holding in a state according to a fluent derivation function D.\nMulti–level governance institution semantics is represented in ASP as more general rules. For example, stating that if an inertial fluent is initiated then it holds until it is terminated. Finally, composite traces are mapped to a corresponding ASP representation as sets of facts, each stating that an event has been observed at a particular point in time.\nThe mapping to an ASP program makes use of the same common predicates used previously in work extending InstAL to settings with multiple institutions [154–156]. In turn these bear similarities to constructs used in the Event Calculus [150]. To give context for what follows, the predicates are summarised in their non–ground form:\n• holdsat(F,In,I) denotes that the fluent F holds in the institution In at time I.\n• observed(E,In,I) denotes that the event E is observed by the institution In at time I corresponding to the exogenous event that has occurred in the synchronised trace for the institution.\n• occurred(E,In,I) denotes that the event E occurs in the institution In at time I.\n• initiated(F,In,I) denotes that the fluent F is initiated in the institution In at time I.\n• terminated(F,In,I) denotes that the fluent F is terminated in the institution In at time I.\n• instant(I) denotes I is a time instant.\n• start(I) denotes I is the first time instant.\n• final(I) denotes I is the last time instant.\n• next(I,J) denotes J is a time instant that is strictly after I such that there is no time instant between I and J.\nThe aforementioned predicates are used in both antecedents and consequents of rules. Such as, stating conditional on particular fluents (not) holding in a state and an event occurring, then an event occurs. This means events in function parameters correspond to occurred/3 whilst state conditions correspond to sets containing positive and negative holdsat/3 predicates. An empty state condition (the empty set) is always true and replaced with the special atom #true.\nIn more detail, the translation for representing a multi–level governance institution, comprising a set of ASP rules, is split into two parts containing the translation of the individual institutions and the translation of the links between them. For example in the Charter of Fundamental Rights, cfr, exConsent is an exogenous event, consent is an institutional event and consentedDataProcessing(ada,isp) is an inertial fluent:"
    }, {
      "heading" : "4.2. APPROACH 89",
      "text" : "1 evtype(exConsent,cfr,ex). 2 evtype(consent,cfr,in). 3 ifluent(consentedDataProcessing(ada,isp),cfr).\nAn event generation function is translated to rules. Each rule contains an occurred/3 atom in the head representing the event that is caused to occur. Each rule’s body comprises an occurred/3 atom representing the causal event, and positive and negative holdsat/3 atoms representing the rule’s condition on the state. For example, the following rule states that non–consensual data processing occurs if Ada’s personal data has been stored, but she has not consented and non–consensual data processing is empowered to occur:\n1 occurred(nonConsensualDataProcessing(ada),cfr,I) :- 2 occurred(storeData(isp,ada,personal),cfr,I), 3 holdsat(pow(cfr,nonConsensualDataProcessing(ada)),cfr,I), 4 not holdsat(consentedDataProcessing(ada,isp),cfr,I), instant(I).\nA consequence function is translated to ASP rules, using initiated/3 and terminated/3 atoms in the head for the initiation and termination of fluents. Each fluent initiation and termination rule’s body comprises an occurred/3 atom representing the event causing a fluent to be initiated/terminated, and positive and negative holdsat/3 atoms representing the context in which the fluent initiation/termination is conditional on. For example, in the Charter of Fundamental Rights institution the fluent stating that Ada has consented to data processing is initiated if she consents. In the Data Retention Directive institution the obligation to oblige metadata is stored is initiated (i.e. imposed) when Ada uses electronic communications:\n1 initiated(consentedDataProcessing(ada,isp),cfr,I) :- 2 occurred(consent(ada,isp),cfr,I), instant(I). 3 initiated(obl(obl(storeData(isp,ada,metadata),now),now),drd,I) :- 4 occurred(useElectronicCommunication(ada,isp),drd,I), instant(I).\nThe fluent derivation function is represented as ASP rules with holdsat/3 atoms in the head and body. For example, in the cfr institution ‘unfair data processing’ is derived from an obligation to process data non–consensually:\n1 holdsat(obl(nonConsensualDataProcessing(ada),now),cfr,I) :- 2 holdsat(unfairdataprocessing(ada),cfr,I), instant(I).\nThe links between institutions are also represented as rules. Generally, a link from a lower–level institution institution L to a higher–level institution H which governs L comprises rules with occurred and holdsat atoms in the head. The occurred rules state a norm dischargement/violation event occurs in the institution H when it occurs in the institution L. Likewise, a normative fluent holds in H when it holds in L. All of these rules are produced such that only the dischargement/violation events occurring in L and consequently in H are about normative fluents L imposes. Likewise, rules state only normative fluents hold in H when they hold in L for those normative fluents that L itself imposes. Thus, if L receives norm dischargement/violation events or normative fluents from another institution, these do not get passed up to H from L."
    }, {
      "heading" : "90 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "To give an example, the following rule states that when the prohibition on deleting data before 12 months holds in the UK’s Data Retention Regulations, drr, then it also holds in the EU’s Data Retention Directive for checking compliance.\n1 holdsat(pro(deleteData(isp, ada, metadata),time(m12)),drd,I) :- 2 holdsat(pro(deleteData(isp, ada, metadata),time(m12)),drr,I), 3 instant(I).\nAbstraction according to deontological counts–as is also represented as rules, where the head is a holdsat atom representing the abstract normative fluent conditional on some concrete normative fluents holding.\nFinally, the semantics are represented as more general rules. For example, the following rules state that an inertial fluent holds in a state if it is initiated or if it held in the previous state and was not terminated (capturing the common–sense law of inertia):\n1 holdsat(P,In,J) :- holdsat(P,In,I), 2 not terminated(P,In,I), next(I,J), ifluent(P, In). 3 holdsat(P,In,J) :- initiated(P,In,I), next(I,J), ifluent(P, In).\n4.3. COMPUTATIONAL FRAMEWORK In this section we detail the computational framework in full. We provide translations from multi–level governance institution’s representation and semantics in the formal framework to an ASP program. The transformation provides an ASP program which is sound and complete with respect to the formal framework, that is, the transformation produces a corresponding ASP program. By executing the ASP program we can determine compliance of lower–level institutions with higher–level institutions in a multi–level governance institution.\n4.3.1. MULTI–LEVEL GOVERNANCE INSTITUTION ASP REPRESENTATION We begin with a convenient translation between a state condition as it appears in an event generation or consequence function and its representation in ASP as a set of positive and negative holdsat/3 atoms. That is, we translate a state condition Exp for an institution I accordingly:\nDefinition 18. Expression Translation Let literals be denoted xi for i ∈N. The translation of an expression Exp for an individual institution I with the label In is defined as:\nEX(Exp, I) =  #true if Exp = ; holdsat(p,In,I) if Exp = p not holdsat(p,In,I) if Exp =¬p\nEX(x0,I), ...,EX(xn ,I) if Exp ={x0, ..., xn}\nIndividual institutions are translated according to a set of rules for translating each individual institution in a multi–level governance institution from their formal representation to a corresponding ASP representation. Formally and subsequently described in more detail:"
    }, {
      "heading" : "4.3. COMPUTATIONAL FRAMEWORK 91",
      "text" : "Definition 19. Multi–level Governance Institution ASP Translation Let ML = 〈T ,R〉 be a multi–level governance institution s.t. T = 〈I1, ...,In〉. The program Πinsts is the multi–level governance institutions program obtained for ML according to the following translation: ∀i ∈ [1,n](I i = 〈E i ,F i ,C i ,G i ,Di ,∆i 〉) :\nI i ⇔ inst(Ini ). (D19.1) e ∈ E iobs ⇔ evtype(e,Ini ,ex). (D19.2)\ne ∈ E iinst ⇔ evtype(e,Ini ,inst). (D19.3)\nf ∈F iinert ⇔ ifluent(f,Ini ). (D19.4)\nf ∈F ininert ⇔ nifluent(f,Ini ). (D19.5)\ninitiated(p,Ini ,I) : − ∃X ∈X i ,e ∈ E i , p ∈ C i↑(X ,e) ⇔ occurred(e,Ini ,I ),\nnot holdsat(p,Ini ,I), (D19.6)\nEX(X,I i ),instant(I).\nterminated(p,Ini ,I) : − ∃X ∈X i ,e ∈ E i , p ∈ C i↓(X ,e) ⇔ occurred(e,Ini ,I),EX(X,I i ), (D19.7)\nholdsat( f ,Ini ,I),instant(I).\noccurred(e ′,Ini ,I) : − ∃X ∈X i ,e ∈ E i ,e ′ ∈G i (X ,e) ⇔ occurred(e,Ini ,I), (D19.8)\nholdsat(pow(e ′),Ini ,I),\nEX(X,I i ), instant(I).\n∃X ∈X i , f ∈F i , f ′ ∈Di (X , f ) ⇔ holdsat( f ′,Ini ,I) : − (D19.9) holdsat( f ,Ini ,I), EX(X,I i ), instant(I).\nf ∈∆i ⇔ holdsat( f ,Ini ,I): −start(I). (D19.10)\n∃〈h, i 〉 ∈ R,n ∈ (Fhanorm ∪Fhcnorm)∩F ininert ⇔ holdsat(n,Ini ,I) : − (D19.11) holdsat(n,Inh ,I)."
    }, {
      "heading" : "92 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "∃〈h, i 〉 ∈ R,e ∈ Ehnorm ∩E inorm ⇔ occurred(e,Ini ,I) : − (D19.12) occurred(e,Inh ,I).\n∀ f , f ′ ∈Fcnorm ∪Fanorm : f ≡ f ′ ⇔ holdsat(f,Ini ,I) : − (D19.13) holdsat(f′,Ini ,I), instant(I).\nThe translation is described as follows for an individual institution. The first translation D19.1 ensures the unique label of the institution is a fact. Translations D19.2 to D19.5 add facts corresponding to the signature of the institution for representing exogenous events, institutional events, inertial fluents and non–inertial fluents. Translations D19.6 and D19.7 add ASP rules corresponding to the consequence function, ensuring fluents are initiated and terminated if a condition on a state holds and an event occurs. Translation D19.8 adds rules for producing events according to the event generation function conditional on a state and another event occurring. Translation D19.9 adds rules for ensuring non–inertial fluents hold if they hold according to the fluent derivation function. The initial set of inertial fluents is added to the institution’s initial state with transformation D19.10. If the institution governs a lower–level institution, then any normative fluents which hold in the lower–level institution are ‘passed up’ (if they are non–inertial fluents in the higher–level institution) D19.11. Likewise for norm dischargement and violation events D19.12. Finally, transformation D19.13 ensures any normative fluent that is equivalent to another normative fluent that holds in a state, also holds in that state. This concludes the transformations providing specific rules for a multi–level governance institution describing when events occur and fluents are initiated and terminated.\n4.3.2. DEONTOLOGICAL COUNTS–AS ASP REPRESENTATION The formal semantics for deontological counts–as, which abstracts concrete norms, is represented as a set of ASP rules for each individual institution. The formal semantics for deontological counts–as is a general function defined for any state describing which relatively concrete normative fluents if they hold cause another, more abstract normative fluent to hold. This is based on concepts the concrete fluents prescribe count–as more abstract concepts in a particular state. This is according to the event generation function, fluent derivation function, and counts–as between normative fluents according to deontological counts–as itself. The semantics for deontological counts–as are defined in a general way based on whether concrete concepts could cause a more abstract concept to occur/hold in a state. This general definition is based on inspecting the input and output of the functions representing counts–as rules. In other words, the formal semantics are defined by inspecting the left and right hand side of “A counts–as B in a context C” rules for whether the context C holds in a state and therefore deducing whether A could cause B to occur/hold."
    }, {
      "heading" : "4.3. COMPUTATIONAL FRAMEWORK 93",
      "text" : "However, such a general definition is not possible in ASP. This is because counts–as rules are represented as ASP rules. It is not possible to inspect the left and right hand–side of ASP rules and determine whether, for a counts–as rule “A counts–as B in a context C”, if A could cause B. We address the problem of having no foreseeable way to represent the formal deontological counts–as semantics as general ASP rules. That is by translating from individual institutions’ formal representation to specific rules that provide the same effects as deontological counts–as in a flattened form.\nEach of these specific rules for deontological counts–as causes a specific abstract normative fluent to hold in the head. They are conditional on specific concrete normative fluents holding in the body depending on the context. Deontological counts–as is context– sensitive, an obligation to store personal data counts–as an obligation to process data non– consensually only if a user has not consented. This means it is only necessary for certain concrete normative fluents to hold in specific contexts for abstraction to take place, obliging personal data is only abstracted if a user has not consented. In different contexts the concrete normative fluents required for abstraction to take place are potentially different or no abstraction takes place. If a user has consented then an obligation to store personal data is not abstracted to non–consensual data processing. So, the body states in which contexts the concrete normative fluents necessarily hold for abstraction to take place and that at least one concrete normative fluent must be eligible for abstraction in order for abstraction to take place.\nTo give an example for abstracting obliging storing personal data to obliging non– consensual data processing in the Charter of Fundamental Rights interpretation of the Data Retention Directive:\n1 holdsat(obl(obl(nonConsensualDataProcessing(ada),now),now), 2 cfr, I) :- 3 holdsat(obl(obl(storeData(CommServProv0,Agent0,personal),now), 4 now), cfr, I): 5 not holdsat(consentedDataProcessing(ada,isp),cfr,I); 6 1{holdsat(obl(obl(storeData(isp,ada,personal),now),now),cfr,I): 7 not holdsat(consentedDataProcessing(ada,isp),cfr,I)}, 8 holdsat(pow(cfr,nonConsensualDataProcessing(ada)),cfr,I), 9 instant(I).\nThe head atom is the more abstract normative fluent obliging an obligation for data to be stored non–consensually. In the body, holdsat(obl(obl( storeData(CommServProv0,Agent0,personal),now),now),cfr,I): not holdsat(consentedDataProcessing(ada,isp),cfr,I), represents that in the context that Ada has not consented to data processing the concrete obligation to oblige storing personal data must hold in order to be abstracted to obliging an obligation to store data non–consensually. At least one context in which abstraction can take place must hold in order for abstraction to actually take place according to 1{holdsat(obl(obl(storeData (isp,ada,personal),now),now),cfr,I): not holdsat(consentedDataProcessing(ada,isp),cfr,I)}. In other words, if Ada has consented to data processing, then no abstraction can take place.\nSuch specific rules to represent deontological counts–as are formally defined as and"
    }, {
      "heading" : "94 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "subsequently described in detail:\nDefinition 20. Deontological Counts–as Translation Let ML = 〈T ,B〉 be a multi–level governance institution s.t. T = 〈I1, ...,In〉. The program Πabstr is the deontic abstraction program obtained for ML according to the following translation: ∀i ∈ [1,n](I i = 〈E i ,F i ,C i ,G i ,Di ,∆i 〉) :\nobl(b,d) ∈F ianorm,b ∈ E i holdsat(obl(b,d),Ini ,I) : − a ∈ E i , X ∈X ,b ∈G i (X , a) ⇔ CN,C , (D20.1)\nCN= {EX(obl(a,d), I i ):EX(X, I i );} holdsat(pow(b),Ini ,I), C = 1{CN} instant(I).\npro(b,d) ∈F ianorm,b ∈ E i holdsat(pro(b,d),Ini ,I) : − CN= {EX(pro(a,d),I i ):EX(X, I i ); |⇔ CN,C, (D20.2)\na ∈F i , X ∈X ,b ∈G i (X , a)} holdsat(pow(b),Ini ,I), CN 6= ;, C = 1{CN} instant(I).\nobl(b,d) ∈F ianorm,b ∈ E i holdsat(obl(b,d),Ini ,I) : − a ∈F i , X ∈X ,b ∈Di (X , a) ⇔ CN,C , (D20.3)\nCN= {EX(obl(a,d), I i ):EX(X, I i );} C = 1{CN}\npro(b,d) ∈F ianorm,b ∈ E i holdsat(pro(b,d),Ini ,I) : − CN= {EX(pro(a,d),I i ):EX(X, I i ); |⇔ CN,C, (D20.4)\na ∈F i , X ∈X ,b ∈Di (X , a)}, instant(I). CN 6= ;, C = 1{CN}\nobl(b,d),b ∈F ianorm,\nr ∈Πabstr(H(r ) = holdsat(b,Ini ,I)), CN= {EX(obl(a,d), I i ):c; | holdsat(obl(b,d),Ini ,I) : − (D20.5)\nholdsat(a,Ini ,I) :c; ∈B(r )} ⇔ CN,C ,POWS, POWS=EX({pow(e) | instant(I).\nholdsat(pow(e),Ini ,I) ∈B(r )},I i ), CN 6= ;, C = 1{CN}\n4.3. COMPUTATIONAL FRAMEWORK 95\npro(b,d),b ∈F ianorm, R = {r ∈Πabstr : H(r ) = holdsat(b,Ini ,I)}, holdsat(pro(b,d),Ini ,I) : −\nCN= {EX(pro(a,d), I i ):c; | r ∈ R, ⇔ CN,C ,POWS, (D20.6) holdsat(a,Ini ,I) :c; ∈ B(r )} instant(I).\nPOWS=EX({pow(e) | holdsat(pow(e),Ini ,I) ∈B(r )},I i ),\nCN 6= ;, C = 1{CN} ∈ B(r )\nIn more detail, the first two translations D20.1 and D20.2 produce ASP rules for abstracting first–order norms. Abstraction is based on rules of the type “A counts–as B in context C” according to the event generation G i function. The second two translations D20.3 and D20.4 are, like the first, for producing first–order norm abstraction but this time based on the fluent derivation function Di . For all four translations D20.1 to D20.4 the resulting rules are of the type “obliging/prohibiting A(s) counts–as obliging/prohibiting B(s) in context(s) C(s)”. These new abstracting counts–as rules act as base cases for producing further abstracting counts–as rules for higher–order norms by translations D20.5 and D20.6. That is, translations D20.5 and D20.6 provide rules which abstract concrete higher– order normative fluents to abstract higher–order normative fluents based on whether the prescribed lower–order normative fluents count–as abstract lower–order normative fluents according to deontological counts–as itself.\nTo give further examples, the rules for abstracting first–order obligations are provided by the translation according to D20.1 and D20.3. The translation is conditional on there being an event/fluent a counting–as a more abstract event/fluent b in a context X . This counts–as relation is according to the event generation and fluent dependency functions. The result is a rule that states if a concrete obligation fluent about an event/fluent a holds in a state and that state entails the context X (in which a counts–as b) then a more abstract obligation fluent prescribing b to occur/hold also holds. In the Charter of Fundamental Rights two rules cause an abstract obligation to store personal data to hold if either metadata or content data are obliged to be stored in any context (denoted with #true):\n1 holdsat(obl(storeData(commServ,user,personal),now), cfr, I) :- 2 holdsat(obl(storeData(commServ,user,content),now), cfr, I): 3 #true; 4 1{ holdsat(obl(storeData(commServ,user,content),now), cfr, I): 5 #true; }, 6 holdsat(pow(storeData(commServ,user,personal)), cfr, I), 7 instant(I). 8 holdsat(obl(storeData(commServ,user,personal),now), cfr, I) :- 9 holdsat(obl(storeData(commServ,user,metadata),now), cfr, I):\n10 #true;"
    }, {
      "heading" : "96 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "11 1{ holdsat(obl(storeData(commServ,user,metadata),now), cfr, I): 12 #true; }, 13 holdsat(pow(storeData(commServ,user,personal)), cfr, I), 14 instant(I).\nRules for abstracting first–order prohibitions are provided by the translations according to D20.2 and D20.4. The translation is conditional on there being events/fluents a which in different contexts X count–as an abstract event/fluent b. This counts–as relation is according to the event generation and fluent dependency functions. The result is a rule that specifies for events/fluents a(s) that count–as an event/fluent b in contexts X entailed by a state, if all the events/fluents a are prohibited (before the same deadline) then a more abstract prohibition on b also holds (with the same deadline). The rule is conditional on at least one context X in which an a counts–as a b holds. The following is an example rule produced in the Charter of Fundamental Rights institution based on storing content data or storing metadata unconditionally counting–as storing personal data:\n1 holdsat(pro(storeData(commServ,user,personal),never), cfr, I) :- 2 holdsat(pro(storeData(commServ,user,content),never), cfr, I): 3 #true; 4 holdsat(pro(storeData(commServ,user,metadata),never), cfr, I): 5 #true; 6 1{ holdsat(pro(storeData(commServ,user,content),never), cfr, I): 7 #true; 8 holdsat(pro(storeData(commServ,user,metadata),never), cfr, I): 9 #true; },\n10 holdsat(pow(storeData(commServ,user,personal)), cfr, I), 11 instant(I).\nHigher–order obligation abstraction rules are provided by the translation according to D20.5. In more detail, the translation is conditional on there being a rule that states concrete normative fluents a(s) count–as an abstract normative fluent b in contexts X . The result is a rule that is similar, albeit abstracting higher–order obligations. The new rule states that obliging a(s) before the same deadline counts–as an abstract obligation b before the same deadline in contexts X , so long as one of the contexts for an a to count–as a b holds. To give an example for the Charter of Fundamental Rights as before, albeit this time a rule that abstracts obligations on prohibitions to store content and metadata to an obligation to prohibit storing personal data:\n1 holdsat(obl(pro(storeData(commServ,user,personal),never), now), 2 cfr, I) :- 3 holdsat(obl(pro(storeData(commServ,user,content),never), now), 4 cfr, I): #true; 5 holdsat(obl(pro(storeData(commServ,user,metadata),never), now), 6 cfr, I): #true; 7 1{holdsat(obl(pro(storeData(commServ,user,content),never), now), 8 cfr, I): #true; 9 holdsat(obl(pro(storeData(commServ,user,metadata),never), now),\n10 cfr, I): #true;}, 11 holdsat(pow(storeData(commServ,user,personal)), cfr, I),"
    }, {
      "heading" : "4.3. COMPUTATIONAL FRAMEWORK 97",
      "text" : "12 instant(I).\nHigher–order prohibition abstraction rules are provided by the translation according to D20.6. In more detail, the translation is conditional on there being rules expressing that concrete normative fluents as count–as an abstract normative fluent b in contexts X . The result is a rule that states prohibiting normative fluents as before the same deadline in the contexts X counts–as prohibiting normative fluent b before the same deadline, so long as one of the contexts for an a to count–as a b holds. To give an example for the Charter of Fundamental rights, a rule causes an abstract prohibition on prohibiting storing personal data to hold if prohibiting prohibitions to store content and metadata hold (in all contexts, since content and metadata count–as personal data unconditional on a state).\n1 holdsat(pro(pro(storeData(commServ,user,personal),never), never), 2 cfr, I) :- 3 holdsat(pro(pro(storeData(commServ,user,content),never), never), 4 cfr, I): #true; 5 holdsat(pro(pro(storeData(commServ,user,metadata),never), 6 never), cfr, I): #true; 7 1{holdsat(pro(pro(storeData(commServ,user,content),never), 8 never), cfr, I): #true; 9 holdsat(pro(pro(storeData(commServ,user,metadata),never),\n10 never), cfr, I): #true;}, 11 holdsat(pow(storeData(commServ,user,personal)), cfr, I), 12 instant(I).\nThis concludes our presentation of the ASP representation for deontological counts–as, as a set of specific rules which flatten the general formal deontological counts–as semantics.\n4.3.3. MULTI–LEVEL GOVERNANCE SEMANTICS ASP REPRESENTATION Now we present the final component of the computational framework, the general semantics of multi–level governance represented as ASP rules. These semantics comprise two ASP programs, Πtrace(n) representing a composite event trace and Πbase(n) containing general rules to produce a multi–level governance model for a trace of composite events represented in ASP. We begin with the translation from the formal representation of a composite trace, to a corresponding ASP representation, comprising facts representing an event that is observed at each point in time:\nDefinition 21. Composite Trace Translation Let ctr= 〈e0, ...,ek〉 be a composite trace. The program Πtrace(k) is the ASP trace program for ctr comprising the following set of rules:\n{compObserved(ei, i). | i ∈ [n]} (D21.1)\nWe now present the ASP program Πbase(k) comprising general rules for producing sequences of states transitioned between by sets of events for a composite trace, that is, a multi–level governance institution model. Formally and subsequently described:\nDefinition 22. Multi–level Governance Semantics ASP Translation The program Πbase(k)"
    }, {
      "heading" : "98 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "is the base multi–level governance ASP program:\nholdsat(P,In,J) : −holdsat(P,In,I),not terminated(P,In,I),next(I,J), ifluent(P,In). (D22.1)\nholdsat(P,In,J) : −initiated(P,In,I),next(I,J),ifluent(P,In). (D22.2) occurred(now,In,I) : −instant(I),inst(In). (D22.3) occurred(E,In,I) : −evtype(E,In,ex),observed(E,In,I). (D22.4) occurred(null,In,I) : −not evtype(E,In,ex),observed(E,In,I). (D22.5) {compObserved(E,J)} : −evtype(E,In,ex),instant(J),\nnot final(J),inst(In). (D22.6)\n: −compObserved(E,J),compObserved(F,J),instant(J),evtype(E,InX,ex), evtype(F,InY,ex),E! = F,inst(InX;InY). (D22.7)\nobs(I) : −compObserved(E,I),evtype(E,In,ex). (D22.8) : −not obs(I),not final(I),instant(I). (D22.9) observed(E,In,I) : −compObserved(E,I),inst(In). (D22.10) occurred(disch(obl(A,D)),In,I) : −holdsat(obl(A,D),In,I),\n1{occurred(A,In,I), holdsat(A,In,I)}. (D22.11)\noccurred(viol(obl(A,D)),In,I) : −holdsat(obl(A,D),In,I), not occurred(disch(obl(A,D)),In,I),\n1{occurred(D,In,I),holdsat(D,In,I)}. (D22.12)\noccurred(disch(pro(A,D)),In,I) : −holdsat(pro(A,D),In,I), 1{occurred(D,In,I),\nholdsat(D,In,I)}. (D22.13)\noccurred(viol(pro(A,D)),In,I) : −holdsat(pro(A,D)),In,I), 1{occurred(A,In,I),holdsat(A,In,I)},\nnot occurred(disch(pro(A,D)),In,I). (D22.14)\nterminated(N,In,I) : −1{occurred(viol(N),In,I), occurred(disch(N),In,I)},\nifluent(N,In),holdsat(N,In,I). (D22.15)\nfinal(k). start(0). instant(0..T) : −final(T). next(T,T+1) : −instant(T). (D22.16)\nThe common–sense law of inertia is captured with the first rule, D22.1. This states an inertial fluent held in the previous state and it has not yet been terminated, then it continues to hold. Initiated fluents hold in the state after they are initiated due to rule D22.2. The event of ‘now’ occurs in every time instant according to D22.3. Collectively, D22.4 and D22.5 ensure there is a synchronised trace for each institution for a given composite trace. If an event is observed and an institution recognises it as an exogenous event, then that event"
    }, {
      "heading" : "4.4. EXECUTED CASE STUDY 99",
      "text" : "occurs in the institution according to D22.4. If there is no event recognised by an institution that is observed, then the null event occurs in that institution D22.5. Rule D22.6 gives an arbitrary choice to include an observed event in the composite trace, which, together with rules D22.7 to D22.10 ensures there is a complete composite trace of length k and that no two observable events occur at the same time. Rules D22.11 to D22.14 ensure relevant compliance events occur when normative fluents that hold are discharged/violated. Rule D22.15 ensures discharged and violated normative fluents are terminated. Finally, facts and rules in D22.16 ensure the model and composite trace is of length k, that there are facts representing time instants between zero and k, and that the time instants are strictly ordered according to next/2.\nThis concludes our presentation of the ASP programs which comprise the computational framework, thus, allowing multi–level governance institutions and their semantics to be executed and consequently compliance checks performed.\n4.4. EXECUTED CASE STUDY We have written the case study in the high–level computational framework specification language. By compiling from the specification language to an AnsProlog representation we are able to assess compliance in our case study’s multi–level governance institution. This is by executing the resulting AnsProlog program together with a trace of events.\nThe case study is instantiated for a domain comprising four types. Firstly the agents acting in the system (ada and charles). Secondly, we specify various types of role, since we need to distinguish between the agents/organisations and their social status. The case study differentiates between citizens and law enforcement officials as well as Internet Service Providers (ISPs) thus we have the roles lawEnforcement and isp. Thirdly, we distinguish between different data types (content, metadata and personal).\nThe case study is run against an observable event trace. We chose an observable event trace which shows the framework’s context–sensitivity to abstract norm reasoning. This is by testing the use of electronic communications and ISP’s fulfilment of metadata storage obligations in different social contexts. Namely, the context that an agent, Ada, has not consented and the context that she has. The trace is given below:\n1 observed(exUseElectronicCommunication(ada, isp), 0). 2 observed(exStoreData(isp, ada, metadata), 1). 3 observed(exRequestData(charles, isp, ada), 2). 4 observed(exConsent(ada, isp), 3). 5 observed(exUseElectronicCommunication(ada, isp), 4). 6 observed(exStoreData(isp, ada, metadata), 5).\nFirst the agent Ada uses electronic communications provided by the service provider ISP. Then, the service provider, ISP, stores Ada’s communications metadata. An agent, Charles, requests data from ISP concerning Ada. Ada consents to her data being stored (after it is stored). Ada uses ISP’s electronic communications again. Finally, ISP stores Ada’s metadata again. In the first half of this observable event trace Ada’s data is stored without her consent, in the latter half Ada’s data is stored after she has given consent.\nThe resulting multi–level governance institution model is depicted in Figure 4.1, for brevity edited to just containing those fluents that are relevant to the discharge and violation"
    }, {
      "heading" : "100 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "fluents according to the fluent derivation and deontological counts–as (norm abstraction) operations. Norm discharge and violation events are highlighted.\nof norms. The model is described subsequently. We first look at the interaction between the UK–DRR and the EU–DRD which governs the UK–DRR. Accordingly:\n• State S0 – Contains fluents stating the agent charles is playing the role of lawEnforcement in the UK–DRR and EU–DRD. The EU–DRD obliges that it is prohibited for isp to store the content of ada’s data. The UK–DRR does indeed prohibit isp from storing the content of ada’s communications data. Thus, the obligation to prohibit storing content data in the EU–DRD is immediately discharged as denoted by the discharge event occurring in the transition to the next state. The"
    }, {
      "heading" : "4.4. EXECUTED CASE STUDY 101",
      "text" : "S4\nconsent(ada, isp): cfr disch(obl(obl(provideData( charles, ada), undue_delay), now)) : cfr, drd\n1) is(charles, lawEnforcement): drd, drr 2) obl(deleteData(isp, ada, metadata), time(m13)): drd, drr 3) pro(deleteData(isp, ada, metadata), time(m12)): drd, drr 4) obl(provideData(isp, charles, ada), time(m1)): drd, drr 5) pro(dataUnprotected(ada, personal), never): cfr 6) pro(privacyDisrespected, never): cfr 7) pro(storeData(isp, ada, content), never): cfr, drd, drr 8) pro(uncontrolByIndepAuth, never): cfr 9) pro(unfairDataProcessing(ada), never): cfr 10) ensure_data_retention_period( ada, isp, metadata, m6, m24) : drd from 2 and 3 11) + consentedDataProcessing( ada, isp): cfr\nS5\nuseElectronicCommunication(ada, isp): cfr, drd, drr\n1) is(charles, lawEnforcement): drd, drr 2) pro(dataUnprotected(ada, personal), never): cfr 3) pro(privacyDisrespected, never): cfr 4) pro(uncontrolByIndepAuth, never): cfr 5) consentedDataProcessing(ada, isp): cfr 6) obl(provideData(isp, charles, ada), time(m1)): drd, drr 7) obl(provideData(isp, charles, ada), undue_delay): drd 8) pro(dataUnprotected(charles, personal), never): cfr 9) pro(unfairDataProcessing(ada), never): cfr 10) pro(storeData(isp, charles, content), never): cfr, drd, drr 11) + obl(deleteData(isp, ada, metadata), time(m13)): drd, drr 12) pro(deleteData(isp, ada, metadata), time(m12)): drd, drr 13) – + obl(storeData(isp, ada, metadata), now): cfr, drd, drr 14) – + obl(obl(storeData(isp, ada, metadata), now), now): cfr, drd 15) ensure_data_retention_period( ada, isp, metadata, m6, m24) : drd from 11 and 12 16) – + obl(obl(storeData(isp, ada, personal), now), now) : cfr from 14 17) – + obl(privacyDisrespected, now): cfr from 16 18) – + obl(dataProcessed, now): cfr from 16 19) – + obl(dataUnprotected(ada, personal), now): cfr from 16 20) + dataUnprotected(ada, personal) : cfr from 18 21) + privacyDisrespected : cfr from 17 22) + uncontrolByIndepAuth : cfr from 18\nS6\nstoreData(isp, ada, metadata): cfr, drd, drr\ndisch(obl(obl(storeData( ada, metadata), now), now)) : cfr, drd\ndisch(obl(storeData(i ada, metadata), now)) : cfr, drd, drr\ndisch(obl(obl(storeData( ada, metadata), now), now)) : cfr, drd\ndisch(obl(storeData(i ada, metadata), now)) : cfr, drd, drr viol(pro(uncontrolByIndepAut never)) : cfr viol(pro(privacyDisrespecte never)) : cfr viol(pro(dataUnprotected(a personal), never)) : cfr\n1) is(charles, lawEnforcement): drd, drr 2) obl(provideData(isp, charles, ada), time(m1)): drd, drr 3) obl(provideData(isp, charles, ada), undue_delay): drd 4) pro(dataUnprotected(ada, personal), never): cfr 5) pro(privacyDisrespected, never): cfr 6) pro(storeData(isp, ada, content), never): cfr, drd, drr 7) pro(uncontrolByIndepAuth, never): cfr 8) pro(unfairDataProcessing(ada), never): cfr 9) consentedDataProcessing(ada, isp): cfr 10) obl(deleteData(isp, ada, metadata), time(m13)): drd, drr 11) pro(deleteData(isp, ada, metadata), time(m12)): drd, drr 12) ensure_data_retention_period( ada, isp, metadata, m6, m24): drd from 10 and 11 13) – + obl( ensure_data_retention_period( ada, isp, metadata, m6, m24), now): cfr, drd\nS7\ndisch(obl(ensure_data_retention_period(ada, isp, metadata, m6, m24), now)) : cfr drd\nFigure 4.1 (cont.)\ntransition to the next state also includes the event of ada using electronic communications provided by isp, due to the occurrence of the exogenous event in the timeline program stating the same.\n• State S1 – Includes new fluents. Firstly, the EU–DRD imposes an obligation on the UK–DRR to oblige isp to store ada’s communications’ metadata. Secondly, the UK–DRR imposes an obligation for isp to store ada’s communications’ metadata. The UK–DRR’s first–order obligation to store metadata discharges the EU–DRD’s second–order obligation to oblige an obligation to store metadata. The transition to state S2 includes the event of ada’s communications’ metadata being stored by isp, driven by the corresponding exogenous event, and consequently the discharge of the"
    }, {
      "heading" : "102 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "obligation from the UK–DRR for isp to store Ada’s communications metadata.\n• State S2 – The EU–DRD, which governs the UK–DRR, obliges data retention to be ensured for between 6 and 24 months. In comparison, the UK–DRR, both obliges that Ada’s communications metadata is deleted before 13 months and prohibits deletion before 12 months. Hence, the UK–DRR requires that metadata is stored for between 12 and 13 months, which is abstractly interpreted in the EU–DRD as ensuring data is retained between 6 and 24 months (ensure_data_retention_period(ada, isp, metadata, m6, m24) discharging the EU–DRD’s obligation for data to be stored within this timeframe. In the transition to state S3 charles requests Ada’s data from isp.\n• State S3 – Since charles is playing the role of lawEnforcement, this causes the EU–DRD to oblige that isp is obliged to provide the data before any undue_delay. Meanwhile, the UK–DRR obliges isp to provide charles with the data within one month (m1). According to the EU–DRD anything occurring before one month counts–as the event of undue_delay. Thus the EU–DRD interprets the obligation to provide data within one month as the abstract obligation to provide data before any undue delay. This causes discharge of the obligation to oblige data is provided before any undue delay.\n• States S4 to S6 follow largely the same pattern. In the transition to the next state S4 ada consents to her data being stored, which has no affect on the UK–DRR or the EU–DRD. Transitioning to state S5 ada uses electronic communications, then ada’s data is stored, causing the same obligations and prohibitions to be imposed by the UK–DRR and EU–DRD as when these events occurred previously.\nIn conclusion, for this trace of events the UK–DRR is compliant with the EU–DRD. All of the EU–DRD’s normative fluents it imposes are discharged and none are violated. In comparison, the EU–DRD is non–compliant with the EU–CFR as we will see:\n• State S0 – the EU–CFR prohibits the EU–DRD’s regulations from being uncontrolled by an independent authority. What this means is that data retention should be within the EU jurisdiction. Likewise, the EU–CFR also prohibits data from being unprotected (i.e. stored without anonymisation), privacy from being disrespected (i.e. personal data being stored) and data being processed unfairly (i.e. personal data being stored without an agent’s consent).\n• State S1 – a number of the EU–CFR’s prohibitions are violated:\n– Violation of the CFR’s prohibition on regulations not being controlled by an independent authority (meaning, compliance with the EU–CFR’s data protection rights must be observable by an independent authority, such as by ensuring data is retained within the EU). The EU–DRD obliges the UK–DRR to oblige ada’s communications’ metadata is stored. According to the EU–CFR obliging storing data (of any type) counts–as data being processed, hence an obligation to oblige storing metadata is abstracted to an obligation to process"
    }, {
      "heading" : "4.4. EXECUTED CASE STUDY 103",
      "text" : "data, which is abstracted further to processing data. The EU–CFR views processing data without a prohibition on it being stored outside of the EU counting– as regulations not being controlled by an independent authority. Hence, the prohibition on regulations being uncontrolled by an independent authority is violated.\n– Violation of the CFR’s prohibition on unfair data processing. The EU–CFR interprets storing metadata as storing personal data, thus it determines that there is an abstract obligation to oblige personal data is stored. In the EU–CFR, storing personal data in the context that an agent has not consented counts–as non– consensual data processing (nonConsensualDataProcessing(ada)). Thus the EU–CFR determines that there is an obligation to oblige non–consensual data processing of ada’s data. According the EU–CFR an obligation to store data non–consensually counts–as unfair data processing, hence an obligation to oblige non–consensual data processing is abstracted to an obligation to process data unfairly. An obligation to process data unfairly in turn, counts–as unfair data processing (i.e. from the perspective of the EU–CFR it does not matter if data is actually processed unfairly or just obliged, both are unfair data processing). This causes the EU–CFR’s prohibition on processing data unfairly to be violated.\n– Violation of the CFR’s prohibition on disrespecting privacy. The obligation to oblige storing metadata imposed by the EU–DRD is abstracted to an obligation to oblige storing personal data. In the EU–CFR obliging storing personal data counts–as the non–inertial fluent for privacy to be disrespected. Hence, obliging an obligation to store personal data is further abstracted to obliging privacy is disrespected which also counts–as simply disrespecting privacy. Hence the EU–CFR’s prohibition on disrespecting privacy is violated.\n– Violation of the CFR’s prohibition on data being unprotected. The obliges an obligation for Ada’s metadata to be stored (according to the an obligation to oblige personal data to be stored) even in the context that it is not anonymised. The EU–CFR views an obligation to oblige storing personal data as being the same thing as processing data, which in the context that the data is not anonymised is abstractly the same thing as data being unprotected. Hence, the EU–CFR’s prohibition on data being unprotected is violated.\nEach violated prohibition in the EU–CFR is initiated in the next state.\n• States S2 and S3 contain nothing of interest from the perspective of the EU–CFR. In the transition to state S4 Ada consents to her personal data being stored.\n• State S4 contains a fluent stating Ada has consented to her personal data being stored.\n• State S5 also contains prohibitions in the EU–CFR which are violated by the EU– DRD, as in state S1, with one difference:\n– The CFR’s prohibition on data being processed unfairly is not violated. The EU–DRD, from the perspective of the EU–CFR, obliges an obligation"
    }, {
      "heading" : "104 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "to store personal data. However, since Ada has consented the obligation to oblige personal data being stored is not abstracted to an obligation to oblige non–consensual data processing and not subsequently abstracted to ‘unfair data processing’. Hence, in state S5, unlike in state S2 the EU–CFR’s prohibition on unfair data processing is not violated since the context is different (Ada has consented to her data being stored). Meanwhile, the rest of the EU–CFR’s prohibitions are violated (for the second time).\nFrom this case study we can see the UK–DRR is compliant with the EU–DRD (i.e. the UK’s legislation correctly implements the directive). On the other hand, the EU’s data retention directive is non–compliant with the EU–CFR. In particular, the EU–DRD was found to be non–compliant in a particular social context with particular prohibitions issued by the EU–CFR. In different contexts the same prohibitions might not be violated. As we saw in the context that Ada had consented to her personal data being processed, the directive did not the violate the prohibition on unfair data processing. This is because the directive’s normative fluents were not interpreted by the charter as more abstractly counting–as unfair data processing. Hence, whether there is compliance depends on the context which determines the abstract meaning of normative fluents. A full compliance check examines all possible social contexts by checking all possible traces of events that result in unique answer–sets (or in our formal framework, models).\n4.5. COMPUTATIONAL FRAMEWORK SOUNDNESS AND COMPLETENESS\nWe now demonstrate that the computational framework provides an executable implementation of the formal framework. This is with theorems stating the computational framework is sound and complete with respect to the formal framework (proofs are provided in the appendices). We begin by packaging, for convenience, the aforementioned ASP programs into a single ASP program ΠML(k).\nDefinition 23. Multi–level Governance ASP Program Let ML= 〈T ,R〉 be a multi–level governance institution. Let ctr be a composite trace for ML of length n. Let Πinsts and Πabstr be the institutions and deontic abstraction programs obtained for ML. Let, Πtrace(n) be the trace program obtained for ctr and let Πbase(n) be a multi–level governance base program. A multi–level governance institution ASP program for ML and a composite trace ctr is:\nΠML(n) =Πbase(n) ∪Πtrace(n) ∪Πabstr ∪Πinsts\nThe first property we present gives the set of of events that are maximally in the set of events according to the event generation operation.\nLemma 1. If GRi is the event generation operation for an institution I i with respect to a"
    }, {
      "heading" : "4.5. COMPUTATIONAL FRAMEWORK SOUNDNESS AND COMPLETENESS 105",
      "text" : "tuple of events E and a tuple of events S, and E ′ =GRi (Si ,E i ) w.r.t. S and E then ∀e ′ ∈ E ′:\ne ′ = now or (T1.1) e ′ ∈ E i or (T1.2) ∃X ,e : X ∈X ∧e ∈ E ∧Si |= X ∧e ′ ∈G(X ,e)∧Si |= pow(e ′) or (T1.3) e ′ = disch(obl(a,d))s.t.∃obl(a,d) : Si |= obl(a,d)∧ (a ∈ E ′∨Si |= a) or (T1.4) e ′ = viol(obl(a, d))s.t.∃obl(a,d) : Si |= obl(a,d)∧ (d ∈ E ′∨Si |= d)∧ disch(obl(a,d)) 6∈ E ′ or (T1.5) e ′ = disch(pro(a,d))s.t.∃pro(a,d) : Si |= pro(a,d)∧ (d ∈ E ′∨Si |= d) or (T1.6) e ′ = viol(pro(a,d))s.t.∃pro(a,d) : Si |= pro(a,d)∧ (a ∈ E ′∨Si |= a)∧ disch(pro(a,d)) 6∈ E ′ or (T1.7) ∃〈h, i 〉 : 〈h, i 〉 ∈ R,e ∈ Ehnorm ∩E inorm (T1.8)\nProof. Immediately follows from Definition 37.\nThe second property we present gives the set of fluents that are maximally in the closure of deontological counts–as.\nLemma 2. If DCω is the closure of the deontological counts–as function for an institution I = 〈E ,F ,C,G,D,∆〉, a state S ∈Σ for I and S′ =DCω(S) then ∀ f ′ ∈ S′ :\nf ′ ∈ S or (T2.1) ∃〈N ′, f ′〉 ∈DC(S′) : N ′ ⊆ S′ (T2.2)\nProof. Immediately follows from Definition 7.\nWe now give the soundness property for the deontic abstraction representation in ASP with respect to the formal definition of deontological counts–as. In doing so, we demonstrate that we have provided a transformation that flattens the deontological counts–as function described in the formal framework to an executable set of ASP rules. The property states that a state in the answer–set for a multi–level governance answer–set program is equivalent to the same state in the formal model for the formal framework with the deontic counts–as function DCiω applied.\nLemma 3. Let ML= 〈T ,R〉 be a multi–level governance institution s.t. T = 〈I1, ...,In〉, and ctr be a composite trace of length k. Let ∀i ∈ [1,n] Ini be a unique label for I i . Let ΠML(k) be the multi–level governance ASP program for ML and ctr. Let MP be an answer–set for the program P∗ = ground(ΠML(k)). Given a set Sij such that\n∀i ∈ [1,m],∀ j ∈ [k] : MP |= holdsat( f ,Ini , j ) ⇒ f ∈ Sij\nthen Sij =DCiω(Sij ).\nProof. See the appendices."
    }, {
      "heading" : "106 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "The next property we are interested in is soundness for the translation to an ASP program as a whole. Specifically, the property states any answer–set for a multi–level governance ASP program for a given trace of events corresponds to a multi–level governance institution model in the formal framework for the same trace of events.\nTheorem 1. (Soundness) Given a multi–level governance institution ML = 〈T ,R〉 s.t. T = 〈I1, ...,In〉. Let ctr = 〈e0, ...,ek〉 be a composite trace for ML. Let ΠML(k) be the multi–level governance ASP program for ML and ctr. Let ∀i ∈ [1,n] : stri = 〈sei0, ...,seik〉 be a synchronised trace for I i w.r.t. ctr. Let MP be an answer–set for the program P∗ = ground(ΠML(k)). Then M = 〈M 1, ..., M n〉 with ∀i ∈ [n] : M i = 〈Si ,E i 〉,Si = 〈Si0, ...,Sik+1〉,E i = 〈E i0, ...,E ik〉 such that:\n∀h ∈ [1,n],∀ j ∈ [k], : MP |= holdsat( f ,Inh , j ) ⇒ f ∈ Shj (T1.1) ∀h ∈ [1,n],∀ j ∈ [k],∀e 6= null : MP |= occurred(e,Inh , j ) ⇒ e ∈ E hj (T1.2) ∀h ∈ [1,n],∀ j ∈ [k] : MP |= occurred(null,Inh , j ) ⇒ enull ∈ E hj (T1.3)\nis the model of ML w.r.t. ctr.\nProof. See the appendices.\nThe next property we are interested in is completeness. This states that for any model of a multi–level governance institution in the formal framework, for a trace of events, the multi–level governance ASP program produces a corresponding answer–set for the same trace of events.\nTheorem 2. (Completeness) Given a multi–level governance institution ML= 〈T ,R〉 s.t. T = 〈I1, ...,In〉. Let ctr = 〈e0, ...,ek〉 be a composite trace for ML. Let ∀i ∈ [1,n] : stri = 〈stri0, ...,strik〉 be a synchronised trace for I i w.r.t. ctr. Let M = 〈M 1, ..., M n〉 be the multi– level governance institution model ML w.r.t. ctr where ∀i ∈ [1,n] : M i = 〈Si ,E i 〉,Si = 〈Si0, ...,Sik+1〉,E i = 〈E i0, ...,E ik〉. Let ΠML(k) be the multi–level structure ASP program for"
    }, {
      "heading" : "4.6. RELATED WORK 107",
      "text" : "ML and a composite trace ctr. Let MP be the set of atoms:\n∀i ∈ [1,n],∀ j ∈ [k +1] : Sij |= f ⇒ MP |= holdsat( f ,Ini , j ) (T2.1) ∀i ∈ [1,n],∀ j ∈ [k] : e ∈ E ij ⇒ MP |= occurred(e,Ini , j ) (T2.2)\n∀i ∈ [1,n],∀ j ∈ [1,k] : f ∈ (S j \\S j−1)∩F iinert ⇒ MP |= initiated( f ,Ini , j −1) (T2.3) ∀i ∈ [1,n],∀ j ∈ [1,k] : f ∈ (Sij \\Sij+1)∩F iinert ⇒ MP |= terminated( f ,Ini , j +1) (T2.4)\n∀i ∈ [1,n],∀ j ∈ [k] : e = ctr j ⇒ MP |= observed(e,Ini , j ), MP |= compObserved(e, j ),\nMP |= obs( j ) (T2.5) ∀i ∈ [1,n],∀ j ∈ [k] : e = strij 6= enull ⇒ MP |= occurred(e,Ini , j ) (T2.6) ∀i ∈ [1,n],∀ j ∈ [k] : enull = strij ⇒ MP |= occurred(null,Ini , j ) (T2.7)\n∀i ∈ [1,n],∀e ∈ E iobs : MP |= evtype(e,Ini ,ex) (T2.8) ∀i ∈ [1,n],∀e ∈ E iinst : MP |= evtype(e,Ini ,inst) (T2.9)\n∀i ∈ [1,n],∀ f ∈F iinert : MP |= ifluent(f,Ini ) (T2.10) ∀i ∈ [1,n],∀ f ∈F ininert : MP |= nifluent(f,Ini ) (T2.11)\n∀i ∈ [1,n] : MP |= inst(Ini ) (T2.12) ∀i ∈ [k] : MP |= instant(i ) (T2.13)\nMP |= start(0) (T2.14) ∀i , j ∈ [k] : j = i +1 ⇒ MP |= next(i , j ) (T2.15)\nMP |= final(k) (T2.16)\nThen, MP is an answer set of P∗ = ground(ΠML(k)). Proof. See the appendices.\nThis concludes the demonstration of the soundness and completeness of the formal and computational frameworks, with respect to each other.\n4.6. RELATED WORK In this chapter we presented a computational framework for reasoning about multi–level governance. That is, we focussed on the practical side. Whilst there are many practical institutional reasoning frameworks, we find none which contribute automated reasoning for determining compliance in multi–level governance. We discuss the related work in more detail as follows.\nThere have been many different approaches proposed to reason about institutions, normative systems and organisations which we split into three broad types. Firstly, those proposing a high–level institution specification language (e.g. [63, 159, 160]) for institution designers to precisely specify an institution’s software implementation. Secondly,"
    }, {
      "heading" : "108 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING",
      "text" : "those proposing or studying formal logics of norms and other institutional rules (e.g. [26, 58, 110, 111, 165, 229]). Thirdly, those contributing frameworks for formally representing and reasoning about institutions and normative systems, with an aim for practical implementations using an algorithmic or logic–programming based approach (e.g. [42, 43, 98, 103, 130, 154]). Our work most closely relates to the latter practical frameworks, which we discuss in more detail.\nThe most closely related framework, on which we build, is the Institutional Action Language, InstAL, first proposed by Cliffe et al. [42, 43]. Li et al. have made developments on InstAL for detecting conflicts between norms [156], in particular in interacting institutions [155] and cooperating institutions [154]. In the work of Li et al. institutions are linked with special bridge institutions such that events occurring in one can cause events to occur in another and likewise for fluents being initiated or terminated. Such bridge institutions have a similar role to our links between different levelled institutions. The difference is that bridge also operate as a king of institution, evolving from one state to the next such that the bridges (links) between institutions can change over time. In contrast, we use institutional links which remain static over time. Further developments on InstAL were realised by Pieters et al. [194, 195] for reasoning about institutions as a means to police and enforce security policies. In their work, Pieters et al. [194, 195] extend InstAL with rules for non– inertial fluents which (in our own words) state “when context C holds then so does fluent B”. These bear similarity to our fluent derivation rules of the form “fluent A derives fluent B in context C”. But, in our case we view fluent derivation rules as firstly ascribing a special meaning to a concrete fluent ‘A’ (hence they have a different form) and secondly serving as a basis for abstracting normative fluents. Our work is also related to our previous work which was loosely based on InstAL [144, 145] for reasoning about multi–tier institutions and higher–order norms.\nThe main differences between these developments and this chapter is we have extended InstAL for representation and reasoning about multi–level governance. In more detail, there are differences in reasoning about permissive societies (where anything not prohibited is permitted), instantaneous and indefinite norms, bridged versus linked institutions, non–inertial fluent rules versus fluent derivation rules, and our main focus in this chapter: combining higher–order normative reasoning and norm abstraction. We summarise all of these differences in Table 4.7.\nAlso relevant are practical approaches for reasoning about normative social commitments (e.g. contracts, promises) [113, 243], using the Event Calculus [150]. These bear similarity to our own approach since we use EC–like constructs (initiation and termination of fluents driven by events) and reasoning. Commitments have been formalised with ‘lifecycle’ elements not present in our notion of norms, such as the creation and deletion of the commitment/rule (e.g. through an utterance) which in turn imposes obligations in particular circumstances. Higher–order commitments are grammatical in these approaches but do not coincide with our notion of higher–order norms. In our case, a higher–order norm represents a statement such as ‘the outcome of your rules should not be an obligation to do X in context C’, where X can be a concrete or abstract notion. On the other hand, nested commitments represent ‘you have promised to me that you will not make a commitment towards person X to do Y in context C’, here the nesting simply represents that a rule of a specific form should not be created, regardless of the rule’s effects and the abstract meaning"
    }, {
      "heading" : "4.6. RELATED WORK 109",
      "text" : "of those effects. Consequently, nested commitments, come from a fundamentally different perspective and are not aligned with our formalisation of regulations which govern other regulations nor do they capture abstraction.\nAnother practical institutional reasoning approach is temporal defeasible deontic logic. Defeasible logic is a non–monotonic logic designed to be implemented in Prolog [13, 183]. There are three rules types in defeasible logic, strict rules (→) whose conclusion is true so long as the antecedent is true, defeasible rules (⇒) whose conclusion is true unless the rule is rebutted by another rule, and defeating rules ( ) whose conclusion is never true but if the antecedent is true rebuts other rules with a contradictory conclusion. Defeasible logic comprises a proof procedure where rule conclusions are tested for whether they are true by first asserting them as an argument, then finding all counter–arguments which rebut them by applying defeating rules, and then recursively counter–attacking all rebuttals with further arguments, terminating by constraints on non–repeatability of arguments (e.g. [200]). Defeasible temporal deontic logics proposed by Governatori et al. [98, 103] extend defeasible logic with rule types and proof procedures for obligations and temporalised outcomes. In these proposals various legal concepts are formalised, including constitutive rules and norms. But as far as we know there have been no developments on these approaches towards norms governing norms and/or norm abstraction, such as for reasoning about compliance in multi–level governance.\n110 4. COMPUTATIONAL MULTI–LEVEL GOVERNANCE COMPLIANCE CHECKING\n4.7. DISCUSSION In this chapter, we answered the question “how can institutional design compliance in multi–level governance be computationally verified?” with a computational framework. In doing so, we provided a practical way to reason with the semantics proposed in the previous chapter. We assessed our proposal along two fronts. Firstly, with a comprehensive case study based on three–levelled governance in EU law where abstraction and context– sensitivity are important in determining non–compliance. Secondly, by proving that the practical implementation in Answer–Set Programming, the computational framework, is indeed sound and complete with respect to the formal framework showing the two correspond. We used the fact that the formal framework corresponds to the computational framework to implement the proposal by extending the InstAL compiler, thereby offering users a high–level language in order to specify multi–level governance and the means to automatically detect (non–)compliance. To summarise, this chapter provides both a practical way to determine compliance in multi–level governance and also a way to assess the previous chapter’s proposed semantics with a real–world case study and its execution.\nThe main weakness of this chapter’s contributions is that it is heavily dependent on Answer–Set Programming. In one sense this is not a problem, since the previous chapter proposed a semantics which ‘stand on their own’. In another sense, this chapter aims to provide practical reasoning, whilst certain limitations of answer–set programming have practical implications. Specifically, due to answer–set programming’s limitations, this chapter was unable to provide general rules for all of the semantics proposed in the previous section. In particular, the deontological abstraction semantics, characterised as a function in the previous section, are represented as a flattened function in the form of ASP rules in this section. What this means is that any time an institution design is changed and we wish to check its compliance, then the high–level description of an institution needs to be newly compiled in its entirety to an Answer–Set Program. If deontological abstraction’s semantics had a general set of ASP rules, then only the changed rules in the changed institution would need a new corresponding ASP representation. To address this weakness, future work should investigate different representation results. Possible ways to achieve this include a corresponding representation in Prolog (e.g. as for defeasible logic [13]) or an embedding in a higher–order logic theorem prover where the higher–order logic could act as a meta–language in which to represent the semantics from the previous section (e.g. as in [18]).\n5 EXPLANATORY\nRECTIFICATIONS FOR NON–COMPLIANT\nINSTITUTIONS\nPlurality is never to be posited without necessity.\nWilliam of Ockham\nWhenever possible, substitute constructions out of known entities for inferences to unknown entities.\nBertrand Russell\nThis chapter is based on the following paper: King, T. C., Li, T., Vos, M. De, Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2016). Revising Institutions Governed by Institutions for Compliant Regulations. Coordination, Organizations, Institutions, and Normes in Agent Systems XI: COIN 2015 International Workshops, COIN@ AAMAS, Istanbul, Turkey, May 4, 2015, COIN@ IJCAI, Buenos Aires, Argentina, July 26, 2015, Revised Selected Papers., 9628, 191 – 208. [145]\n111"
    }, {
      "heading" : "112 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "This chapter makes the following contributions:\n• An application of Inductive Logic Programming (ILP) in ASP, demonstrated with an implementation, to provide a mechanism that successfully revises rules of a non– compliant institution to ensure it is compliant.\n• A revision mechanism that ensures institution revisions are minimal in their regulatory effects through adding, deleting and modifying rules, thereby keeping as closely as possible to the designer’s original intentions.\nIn chapters 3 and 4 we presented a formal and computational framework for determining compliance in multi–level governance. The contributions can be used by a judiciary to determine punishments for non–compliance or by a legislature to avoid enacting non– compliant legislation. However, at this point in the dissertation it is unclear how a legislature should address non–compliance by changing an institutional design. In this chapter we return to the issue of rule change, but this time asking the question, how can we mechanically find ways in which legislation can be modified to ensure it is compliant?\nOn the one hand, an institution designer wishes to avoid punishment for non–compliant institution designs. On the other hand, an institution designer designed the non–compliant institution with the aim of meeting particular societal outcomes. At the same time, it is important not to just rectify non–compliance but also find the simplest explanation for non– compliant institution designs in order to support a legislator in avoiding making the same mistakes.\nIt is an arduous task to determine non–compliance, but even more arduous to rectify it in a way that keeps as closely as possible to the legislature’s original intentions. Firstly because different rule modifications, namely addition, deletion and changes to the antecedent, must be tried to determine if they result in compliance in various contexts and therefore find a possible explanation for non–compliance. Secondly, they must be compared to alternative revisions that result in compliance to see if one makes fewer changes to the rules than another, in order to find the simplest and most general explanation for non–compliance. Thirdly, because different revisions must also be optimised for keeping as closely as possible to the designer’s original intentions by still producing the same legal effects (e.g. obligations and prohibitions) that do not result in the institution design being non–compliant. Clearly, this is a mechanical task ripe for computation.\nThe idea is to test different changes to an institution design in order to rectify non– compliance and therefore find possible explanations for non–compliance. Then, to take the simplest explanation, which minimally changes an institution’s outcomes and rules, and apply it as a remedy. In this chapter we address the burden on the institution designer in revising to be compliant with a computational mechanism which also minimise the changes to the outcomes of the institution design.\nThis chapter builds on the previous chapters’ formal and computational frameworks. However, this chapter deals with a simplified version of the formal and computational framework. We discuss this simpler framework, its application to a new case study and the approach we take in 5.1. Then, we present the computational mechanism for successfully and minimally revising an institution for compliance in section 5.2. We finish this chapter by comparing to other mechanisms for revising institutions and sets of rules in 5.3 and conclude with discussion on limitations and wider implications in section 5.4.\n5.1. APPROACH 113\n5.1. APPROACH In this chapter, we look at revising rules for compliance. As we saw in the previous chapter, individual institutions which are governed by other institutions (in that case, within multi– level governance), can be represented as ASP rules. Building on that idea, the approach we take to revising an institution to be compliant is to revise its representation as ASP rules, using ASP itself to try various rule modifications.\nHowever, as we discussed at the end of the preceding chapter, there is a limitation of the approach taken due to two contributing factors. Firstly, because whenever a constitutive rule is changed in an institution, then the abstract meaning of concrete normative fluents, which is derived from the constitutive rules, also changes. Secondly, because normative fluent abstraction is represented in ASP as specific ASP rules (rather than a general semantics as in our formal framework). Taking these two factors together, this means whenever a constitutive rule is changed in ASP then potentially other ASP rules must also be changed representing the abstraction of a normative fluent. Consequently, if we use the framework presented in the preceding section which includes ASP rules for abstracting normative fluents, then the process of changing rules involves firstly, changing the rules, secondly determining all other normative fluent abstraction rules which need to be changed or added. This is a complex process and consequently we look at a simpler problem where we change rules in institutions governed by institutions, where each governance level operates at the same level of abstraction.\nTo address this simpler problem, we first re–introduce a simpler version of our framework. In this version of the framework, we define multi–tier institutions, first presented in [144], which defines a tiering of institutions, each institutional tier governing the tier below, where norms are not abstracted. We overview the simpler framework in subsection 5.1.1, then introduce the formal representation in subsection 5.1.2, then we provide the operational semantics in ASP in subsection 5.1.4. Finally, we describe the main technique we use, Inductive Logic Programming (ILP) theory revision, in subsection 5.1.6.\n5.1.1. MULTI–TIER INSTITUTIONS We begin by providing an overview of individual and multi–tier institutions, schematically depicted in figure 5.1. To recap the main concepts, an individual legal institution acts as a mechanism to guide the behaviour of the system it governs. Institutions define a set of constitutive and regulative rules which respectively establish an institutional description and prescription of reality (see Searle’s counts–as relation [215]). Constitutive rules describe the system governed through creating institutional facts that can represent events caused by other events (e.g. entering a location which is private counts–as entering a private location), or they can represent changes to the institutional state (e.g. entering a private location causes an agent to be at a private location). Regulative rules prescribe what properties should hold/events should occur in a system by creating obligations and prohibitions in states (e.g. when requested an agent is obliged to share their location). An institution’s regulative rules regulate over a social interpretation of reality constructed from brute facts by constitutive rules.\nConceptually, a multi–tier institution extends the notion of an individual institution governing an MAS to institutions governing institutions in a tiered structure. Each institutional tier governs the tier below. The first–tier imposes norms on what occurs and holds in an"
    }, {
      "heading" : "114 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "MAS (first–order norms), the second–tier norms on the norms imposed by the first (norms about first–order norms, i.e. second–order norms), and so on. When a lower–tier imposes a normative fluent which is non–compliant with a higher–tier, events denoting a higher–order norm violation occur.\nThe operational semantics of a multi–tier institution, first presented in [144], allow such non–compliance to be determined by checking a multi–tier institution model for norm violations. Depicted in Figure 5.1, the model describes how each i th–tier institution evolves over time, as an event–state sequence, in response to the evolution of the tier below. The first–tier evolves in response to a trace of observable events that could occur in an MAS (i.e. produced for a pre–runtime check). Each tier above the first evolves in response to the event–state sequence of the institution they govern (i.e. the tier below). States contain domain fluents describing the MAS and normative fluents prescribing the events that should occur and fluents that should hold in the tier below (including other normative fluents). Each state transition is caused by events occurring in the institution from the previous state, which are in turn driven by the events and states from the tier below. If a normative fluent in a state is violated by an event or fluent in the tier below (including another normative fluent) a norm violation event occurs in the transition to the next state. Thus, model–checking can be used to compliance–monitor one institution with another by checking for higher–order norm violation events.\nDiffering from previous chapters 3 and 4 on multi–level governance institutions, in this chapter multi–tier institutions restrict each i th tier in regulating the tier below i th–order norms. Moreover, each institutional state does not include the abstraction of any concrete normative fluents.\n5.1. APPROACH 115\n5.1.2. FORMAL REPRESENTATION In this section we provide the formal representation of institutions and multi–tier institutions from [144] as follows. We start with the representation for normative fluents, which oblige/prohibit an event occurring or another fluent holding (the aim) before an event occurs or fluent holds (the deadline). The language of normative fluents is over a set of propositions denoting fluents and events describing the system being governed. If the set of propositions includes only non–normative events and fluents, then only first–order normative fluents can be expressed. If, however, the set of propositions contains first–order normative fluents, then second–order normative fluents can be expressed and so on. Such higher–order normative fluents are categorised as: obliging/prohibiting a normative fluent holds before an event or non–normative fluent holds, obliging/prohibiting an event or non–normative fluent before a normative fluent holds, and obliging/prohibiting a normative fluent to hold before another normative fluent holds.\nDefinition 24. Normative Fluents Let P be a set of propositions denoting fluents and events, a be the norm’s aim, d the deadline and a,d ∈ P . The set of normative fluents N |P is the set of all norms n expressed as:\nn ::= obl(a,d) | pro(a,d)\nInstitutions in this chapter share many common characteristics of institutions presented earlier. Formally, an institution is defined as and described subsequently:\nDefinition 25. Individual Institution An institution is a tuple I |P = 〈E ,F ,C,G,∆〉, restricted to the set of propositions P , given Eobs,Einstact,Fdom ⊆ P , I |P is defined as:\n• Fnorm ⊆N |P is a set of normative fluents. • F =Fdom ∪Fnorm is a set of fluents. • Enorm = {disch(n),viol(n) | n ∈Fnorm} • Einst = Einstact ∪Enorm where Einstact and Enorm are disjoint. • E = Eobs ∪Einst. • C : X ×E → 2F ×2F is a state consequence function. • G : X ×E → 2Einstact is an event generation function. • ∆⊆F is the initial institutional state. In more detail, an institutional specification gives the signature of events (E ) that can occur and fluents (F ) that can hold in the institution. The signature is specified from a set of propositions P to which the institution I |P is restricted to (just I is used if P is unimportant). The events E is the set of observable events (Eobs), and the set of institutional events (Einst). The set of institutional events (Einst) consists of events signifying something unrelated to a norm has happened (Einstact), or a norm has been discharged/violated (Enorm). The set of an institution’s fluents (F ), describe the state of a domain (Fdom) such as that being governed (e.g. an agent is at a location), and the normative fluents (Fnorm) that can hold"
    }, {
      "heading" : "116 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "in the institution. Each institution starts at an initial state (∆). An institution evolves from one state to the next in response to observable events, where, an institutional state is a set of fluents that are true at that point in time, Σ= 2F denoting the set of all possible institutional states. Describing the events and state changes that occur are an event generation function and state consequence function. Both functions’ arguments are a condition on a state, describing the things that must and must not hold in a state to cause the events/state change, and a set of events. A condition on a state is described with state formulae, X = 2F∪¬F denoting the set of all state formulae, where ¬F = {¬ f | f ∈ F } is the weak negation of all fluents denoting they do not hold. The event generation function (G : X ×E → 2Einst ) states when, conditional on a state, one event counts–as another. The consequence function (C : X ×E → 2F ×2F ) provides the fluents that are initiated and terminated by events from one state to the next. As previously, we use C(X ,e) = 〈C↑(X ,e),C↓(X ,e)〉 to denote the consequence function’s result, where C↑(X ,e) is the set of fluents initiated and C↓(X ,e) is the set of fluents terminated by the event e when the state entails the state condition X .\nThe approach we take to representing a multi–tier institution is to restrict each i th–tier institution such that it can contain events and fluents from all the tiers below for monitoring, but can only govern the tier directly below by imposing i thorder norms. This restriction is defined by, starting with a set of propositions P which describe the MAS’ events and fluents, the first–tier I1|P 1 imposes normative fluents over the events and fluents of the MAS (i.e. first–order normative fluents) such that P 1 = P . Then, each i th–tier above the first I i |P i can contain the normative fluents and events (dischargement and violation) from the tiers below for monitoring (P i = P i−1 ∪N |P i−1 ∪E i−1norm), but each i th–tier is restricted in only initiating and terminating normative fluents over these (i.e. i thorder norms). This means, an institution can potentially also impose norms about the dischargement and violation of norms in the tier below. We leave this to the discretion of the designer, since in some cases it can make sense, for example obliging a norm is violated before an obligation to pay a fine is imposed. For monitoring, we will later define using ASP rules how each tier is linked, such that each i th–tier contains the normative events and normative fluents produced/imposed by the tier below. Formally, a multi–tier institution is defined as:\nDefinition 26. Multi–tier Institution Let P be a set of propositions denoting the domain, a multi–tier institution is a tuple T = 〈I1|P 1 , ...,In |P n 〉 where:\n• Each element of T is an individual institution s.t. ∀i ∈ [n] : I i |P i = 〈E i ,F i ,C i ,G i ,∆i 〉,X i = 2F\ni∪¬F i , Σi = 2F i\n• P 1 = P and ∀i ∈ [2,n], P i = P i−1 ∪N |P i−1 ∪E i−1norm – each i th–tier can contain the events and fluents that can be defined in the tier below and normative fluents over these.\n• ∀i ∈ [2,n],∀S ∈X i ,∀e ∈ E i : C i↑(S,e)∩N |P i−1 =;,C i↓(S,e)∩N |P i−1 =; – the i th– tier can only initiate and terminate i thorder norms.\nThis concludes the representation for individual and multi–tier institutions.\n5.1. APPROACH 117\n5.1.3. CASE STUDY Now, we introduce our case study and demonstrate the multi–tier institution representation by formalising it. Our case study is in the context of a system for crowdsourcing audio data from users using specialised cellphone apps, called a soundsensing system [162]. Our case study is for a tier–1 soundsensing institution (SS) which governs users contributing audio data using cellphone apps, and for the tier–2 governmental institution (GI) which regulates the regulations of the soundsensing system away from placing unacceptable limits on user’s rights. The case study is formalised in table 5.1 and table 5.3. We follow the convention that upper–case symbols stand for variables. For brevity we leave out the set of events and fluents for each institution. Both institutions consist of rules describing the domain (e.g. an agent entering a new location causes the agent to be at that location) and consider the location ‘street b’ to be private and the agent ‘Bertrand’ to be a child (see the initial states).\nThe soundsensing institution is described as follows and formalised in Table 5.1: Soundsensing Tier–1 Institution\n• Entering a new location causes an agent to leave the previous location (SSIG.1).\n• In general when a norm is violated a generic norm violation event occurs (SSIG.2, SSIG.3 and SSIG.4).\n• Due to a designer error, leaving a location also causes a generic norm violation event (SSIG.5).\n• A user entering a location which is private counts–as entering a private location (SSIG.6).\n• Likewise, leaving a location which is private counts–as leaving a private location (SSIG.7).\n• Entering a new location causes a user to be at that location (SSICI.1).\n• Likewise, leaving a location means the user is no longer at their previous location (SSICT.1).\n• When a user turns 14 years of age, they are no longer considered a child (SSICT.2) as defined in real–world regulations pertaining to the retention of children’s data[227].\n• Users are obliged to provide their location on request to give the collected data location context (SSICI.2).\n• If a user violates a norm they are obliged to pay a fine (SSICI.3).\n• Users are forbidden from turning their microphone off to ensure data is collected continuously (SSIIS).\nIn turn, the soundsensing institution is governed by a tier–2 governmental institution designed to meet different aims (e.g. maintaining agents’ rights). It is formalised in table 5.3 and described as follows:\nGovernmental Tier–2 Institution"
    }, {
      "heading" : "118 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "• Entering a new location causes an agent to leave the previous location (GGI.1).\n• When a first–order norm is violated a generic norm violation event occurs (GGI.2 and GGI.3).\n• Entering a location causes an agent to be at that location (CIGI.1).\n• Likewise, leaving a location causes an agent to no longer be at that location (CTGI.1).\n• If someone turns 14 years of age then they are no longer a child (CTGI.2), again, based on real–world regulations pertaining to the retention of children’s data[227].\n• It is obliged that fines are only imposed on users after they violate a norm. In the initial state (GIIS) there is an obligation for a norm violation to occur before an obligation to pay a fine is imposed. Naturally, the obligation for a norm violation to occur first does not hold once a fine is imposed. If there is an obligation to pay a fine and that obligation is discharged (i.e. the fine is paid), then the obligation for a norm to be violated before a fine is imposed is reinstated (CIGI.2).\n• When a user is in an area that forbids audio recording (i.e. a private area), it is forbidden to forbid them from turning their microphone off (CIGI.3).\n• It is forbidden to oblige children (users under the age of 14) to share their location (GIIS). Similar regulations can be found in the United States Government’s Child Privacy and Protection Act [227].\nThis concludes the formalisation of our case study. In the next section we will introduce the computational framework we use in this chapter and present the results of using the computational framework to check the compliance of the soundsensing institution with the governmental institution."
    }, {
      "heading" : "5.1. APPROACH 119",
      "text" : "GGI({at(Loc0,Ag0)},enter(Loc1,Ag0)) 3 leave(Loc0,Ag0) (GGI.1) GGI(;,viol(obl(share_location(Ag0), leave(Ag0, Loc0)))) 3\nnorm_violation(Ag0) (GGI.2)\nGGI(;,viol(pro(microphone_off(Ag0),leave_soundsensing(Ag0)))) 3 norm_violation(Ag0)\n(GGI.3)\nCG I↑(;,enter(Loc0, Ag0)) 3 at(Ag0, Loc0) (CIGI.1) CG I↑(;,disch(obl(pay_fine(Ag0),leave_soundsensing(Ag0)))) 3\nobl(norm_violation(Ag0), obl(pay_fine(Ag0),leave_soundsensing(Ag0)))\n(CIGI.2)\nCG I↑({private(Loc0)},enter(Loc0)) 3 pro(pro(microphone_off(Ag0),leave_soundsensing(Ag0)),\nleave(Loc0)) (CIGI.3)\nCG I↓(;, leave(Loc0, Ag0)) 3 at(Loc0, Ag 0) (CTGI.1) CG I↓({child(Ag0)},birthday(Ag0, 14)) 3 child(Ag0) (CTGI.2) ∆GI = {obl(norm_violation(Ag0),\nobl(pay_fine(Ag0),leave_soundsensing(Ag0)), pro(obl(share_location(bertrand),leave(Ag0, Loc0)),\nbirthday(bertrand, 14))}∪∆SS (GIIS)"
    }, {
      "heading" : "120 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "5.1.4. MULTI–TIER INSTITUTION OPERATIONALISATION IN ASP The formal representation for multi–tier institutions is complemented by a corresponding ASP operationalisation, much like in chapter 4, for automatic compliance checking of lower–tier institutions with higher–tier institutions. The ASP program, comprises rules using the familiar initiated(p, In, I), terminated(p, In, I), occurred(e, In, I), holdsat(f, In, I), start(I ) and instant(I ) literals outlined previously, as well as the set of state formula literals EX(X, In, I).\nThe ASP program comprises several components which we refer to later in this chapter. Firstly, programs presented in the preceding chapter:\n• A program representing a trace of observable events used as input for producing multi–tier models, the timeline program Πtrace(k) given previously in definition 21.\n• an implementation of the operational semantics, the reasoning programΠbase(k) given previously in definition 22.\nSecondly, two new types of ASP program:\n• Programs ΠI i\nfor each individual institution I i in the multi–tier institution M according to the translation given in the subsequent definition 27.\n• A program Πmtreas, given in subsequent definition 28. It represents the filtering functions linking the individual institutions in a multi–tier institution, thereby ensuring normative fluents and norm compliance events are passed from lower–tiers to higher– tiers.\nThe new types of ASP program are defined as follows. First, the programs ΠI i\nfor representing each individual institution in a multi–tier institution in ASP. Defined and described subsequently as:\nDefinition 27. Multi–tier Institution ASP Translation Let T = 〈I1|P 1 , ...,In |P n 〉 be a multi–tier institution. The programs ΠI i are defined for each individual institution I i according to the following translation: ∀i ∈ [1,n], (I i = 〈E i ,F i ,C i ,G i ,∆i 〉):\nI i ⇔ tier(In,i).inst(In). ∈ΠI i (IT.1) e ∈ E iobs ⇔ evtype(e,In,ex). ∈ΠI i (IT.2)\ne ∈ E iinstact ⇔ evtype(e,In,in). ∈ΠI i\n(IT.3)\nf ∈F i ⇔ ifluent(f,In). ∈ΠI i (IT.4) C i↑(X ,e) = P ⇔ ∀p ∈ P : initiated(p,In,I) : −\noccurred(e,In,I), (IT.5)\nEX(X, In, I). ∈ΠI i"
    }, {
      "heading" : "5.1. APPROACH 121",
      "text" : "C i↓(X ,e) = P ⇔ ∀p ∈ P : terminated(p,In,I) : − occurred(e,In,I ), (IT.6)\nEX(X, In, I). ∈ΠI i\nG i (X ,e) = E ⇔ ∀e ′ ∈ E : occurred(e ′,In,I) : − occurred(e,In,I), (IT.7)\nEX(X, In, I). ∈ΠI i\nf ∈∆i ⇔ holdsat( f ,In,I) : −start(I). ∈ΠI i (IT.8)\nIn more detail, the tier each institution operates at is declared as a fact (IT.1). Events and fluents are declared as facts as usual (IT.2 to IT.4). Fluents are initiated (IT.5) and terminated (IT.6) as usual according to the state consequence function. Likewise, events occur as usual according to the event generation function (IT.7). Finally, the initial state is represented with holdsat/3 atoms (IT.8).\nThe links between tiers, for ‘passing up’ normative fluents and norm compliance events from lower–tiers to higher–tiers for compliance checking are defined as the following ASP program:\nDefinition 28. Multi–tier Links ASP Program The program Πmtreas is the following ASP program:\noccurred(disch(obl(A,D)),HIn,I) : −occurred(disch(obl(A,D)),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1. (MTS.1)\noccurred(disch(pro(A,D)),HIn,I) : −occurred(disch(pro(A,D)),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1. (MTS.2)\noccurred(viol(obl(A,D)),HIn,I) : −occurred(viol(obl(A,D)),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1. (MTS.3)\noccurred(viol(pro(A,D)),HIn,I) : −occurred(viol(pro(A,D)),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1. (MTS.4)\nholdsat(obl(A,D),HIn,I) : −holdsat(obl(A,D),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1,start(I). (MTS.5)\nholdsat(pro(A,D),HIn,I) : −holdsat(pro(A,D),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1,start(I). (MTS.6)\n122 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS\ninitiated(obl(A,D),HIn,I) : −initiated(obl(A,D),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1,start(I). (MTS.7)\ninitiated(pro(A,D),HIn,I) : −initiated(pro(A,D),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1,start(I). (MTS.8)\nterminated(obl(A,D),HIn,I) : −terminated(obl(A,D),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1,start(I). (MTS.9)\nterminated(obl(A,D),HIn,I) : −terminated(obl(A,D),LIn,I), tier(LIn,I1),tier(HIn,I2),\nI2 == I1 +1,start(I). (MTS.10)\nThis concludes our short introduction of multi–tier institution operationalisation in ASP.\n5.1.5. EXECUTED CASE STUDY In this section we execute our case study, comprising the soundsensing institution which is governed by a governmental institution, formalised as a multi–tier institution. That is by executing the multi–tier institutions’ corresponding ASP programs, ΠI SS , ΠI GI , together with the program linking them Πmtreas, the base semantics program Πbase(k) and an observable trace program Πtrace(k), in the last two cases for a trace of observable events of length k. In our case, the trace program comprises an event sequence with three elements, represented as the following ASP facts:\n1 compObserved(ex_enter(ada, street_b), 0). 2 compObserved(ex_request_location(ada), 1). 3 compObserved(ex_request_location(bertrand), 2).\nIn this short trace, first Ada enters a new location, street_b, then Ada’s location is requested and finally Bertrand’s location is requested. For this short trace, three cases of non–compliance of the soundsensing institution with the governmental institution are discovered, as depicted in figure 5.2.\nFirstly, when Ada enters a new location due to an erroneous rule in the soundsensing institution (a designer error), a generic norm violation event occurs in the soundsensing institution (the first state transition). Due to the generic norm violation event occurring, the soundsensing institution imposes an obligation for Ada to pay a fine in state S1. However, the governmental institution only recognises actual norm violation events as causing a generic norm violation event and obliges an actual norm is violated before an obligation to pay a fine is imposed. Consequently, the governmental institution’s higher–order norm for there to be a norm violation before an obligation to pay a fine is imposed is violated in the transition from S1 to S2.\nSecondly, in the soundsensing institution agents are unconditionally prohibited from turning their microphone off, however the governmental institution prohibits such a prohibition when an agent enters a private location. When Ada enters a private location (street_b)"
    }, {
      "heading" : "5.1. APPROACH 123",
      "text" : "Violated second–order norms in the second–tier governmental institution are highlighted .\nthere is still a prohibition on her from turning her microphone off. Consequently, the prohibition on prohibiting Ada from turning her microphone off when she is in a private location is violated during the transition from state S1 to S2.\nThirdly, when an agent is requested to provide their location the soundsensing institution obliges them to do so, but this is forbidden by the governmental institution if the agent is a child, such as Bertrand. In state S3 the soundsensing institution obliges Bertrand, a child, to share his location. Consequently, in the final state transition the governmental institution’s prohibition on obliging Bertrand to share his location is violated. This concludes our presentation of non–compliance for the case study in this chapter. In the final part of this section we will discuss the approach we take to automatically resolving non–compliance, by using Inductive Logic Programming."
    }, {
      "heading" : "124 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "5.1.6. INDUCTIVE LOGIC PROGRAMMING: A BRIEF OVERVIEW We view the problem of revising lower–tier institutions to be compliant with higher–tier institutions as a theory revision (TR) problem which can be solved using Inductive Logic Programming (ILP). ILP [180] is a machine learning technique concerned with the induction of logic theories that generalise (positive and negative) examples with respect to a prior background knowledge. In non–trivial problems it is crucial to define the search space accurately. This is done by a language bias, that can be expressed using the notion of mode declarations [180], describing the structure of the elements in the target theory. In the case presented here, we want to find the ASP rules that contain certain elements in the head and body. So we will have head and body mode declarations.\nAn ILP theory revision task is a tuple 〈P,B , M〉 where P is a set of conjunctions of literals, called properties, B is a normal program, called the background theory, M is a set of mode declarations describing the form that rules in the revised theory can take and s(M) is the set of rules adhering to M . A theory H , called a hypothesis, is an inductive solution for the task 〈P,B , M〉, if (i) H ⊆ s(M), and (ii) P is true in all the answer sets of B ∪H .\nOur approach to revising a lower–tier institution in a multi–tier institution to be compliant is based on the introduction of new rules, and deleting and revising existing ones. As discussed in [45], non–monotonic inductive logic programming can be used to revise an existing theory. The key concept is that of minimal revision. In general, a TR system is biased towards the computation of theories that are similar to a given revisable theory. The difference between two programs T and T ′ is denoted as c(T,T ′).\nThe theory T ′, called a revised theory, is a TR solution for the task 〈P,B ,T, M〉 with distance c(T,T ′), iff (i) T ′ ⊆ s(M), (ii) P is true in all the answer sets of B ∪T ′, (iii) if a theory S exists that satisfies conditions (i) and (ii) then c(T,S) ≥ c(T,T ′), (i.e. minimal revision).\n5.2. REVISING INSTITUTIONS FOR COMPLIANCE In this section we give the details of this chapter’s main contribution: a system for revising a lower–tier institution to be compliant with a higher–tier institution in a multi–tier institution. In particular, we are interested in revising the institution which the system user (an institutional designer) has the power to effect change. We call this institution to be revised a mutable institution. We are interested in revising a mutable institution to meet two properties:\n• Success meaning that a formerly non–compliant institution for an event–trace is compliant for the same event trace after being revised. This means when normative fluents are obliged to be imposed they are, and conversely any prohibited normative fluents are not imposed.\n• Minimality is a requirement for any revision to minimise the change in consequences of the new institution compared to the old one. That is, following changes to the institution the institution’s states are as close as possible to the states prior to the change(s) for a trace of events. To give an example, the soundsensing institution prohibits agents to turn their cellphone microphone off, whilst the governmental institution prohibits such a prohibition in areas deemed ‘private’. In this case, an institution"
    }, {
      "heading" : "5.2. REVISING INSTITUTIONS FOR COMPLIANCE 125",
      "text" : "revision can be successful by removing the soundsensing institution’s prohibition altogether, but only successful and minimal by removing the prohibition in just those cases where an agent is at a private location.\nWe instantiate the problem of revising a mutable institution as an ILP theory revision task in Section 5.1.6. Then, we take a computational approach to solving the ILP theory revision task by performing inductive search in ASP [47]. Inductive search is achieved by transforming the mutable institution represented in ASP to an ASP representation encoding the space of ILP theory revisions and enabling different revisions to be tried. We describe our computational approach using ASP in Section 5.2.2, and the implementation and revision results for our case study in Section 5.2.3.\n5.2.1. REVISING INSTITUTIONS TO BE COMPLIANT IS AN ILP THEORY REVISION TASK INSTANCE In this section, we define the revision for compliance task as an ILP revision task according to the revision for compliance requirements outlined previously. We begin by formally defining the search space of possible revisions with mode declarations. Mode declarations define the literals that can appear in the head and body of rules. In the case of revising a mutable institution in a multi–tier institution, the mode declarations describe the valid rules for: generating non–normative institutional events, initiating and terminating domain fluents, and given the mutable institution is the i th–tier, initiating and terminating i thorder normative fluents (i.e. restricted to only initiating/terminating a normative fluent f if it is not in the language of norms N |Pri−1 of the tier i −1 below).\nDefinition 29. Mode Declarations. Let I i = 〈E i ,F i ,G i ,C i ,∆i 〉 be a mutable institution for which In is a unique label. The mode declarations for I i are a pair M = 〈M h , M b〉 where M h is the set of head mode declarations and M b the set of body mode declarations, defined as:\nM h = {initiated( f ,In,I),terminated( f ,In,I) : f ∈F \\ N |Pri−1 }∪ {occurred(e,In,I) : e ∈ E iinstact} M b = {holdsat( f ,In,I),¬holdsat( f ,In,I) : f ∈F i }∪ {occurred(e,In,I) : e ∈ E i }\nThe set of compatible rules with the head and body mode declarations are also required to contain one and only one event in the body. The compatible rules are defined as:\nDefinition 30. Compatible Rules. Let M = 〈M h , M b〉 be the mode declarations for a mutable institution I i = 〈E i ,F i ,G i ,C i ,∆i 〉. An ASP rule l0 : − l1, ...,ln. where n ∈N is compatible with M iff l0 ∈ M h , ∀i ∈ [1,n] : li ∈ M b and |{l1, ..., ln}∩ {occurred(e,In,I) : e ∈ E i }| = 1. The set of all compatible rules with M is s(M).\nHaving described the search space of revisions, a theory revision task TR needs to be instantiated with the properties P that a solution must meet. These properties are typically positive examples (formulae that are true following a revision) and negative examples (formulae that are false following a revision). In our case we are only interested in supplying"
    }, {
      "heading" : "126 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "negative examples, stating that non–compliance is eradicated in a solution to TR. The negative examples in P are represented as ASP integrity constraints requiring a revised mutable institution is compliant with all higher–order norms it can violate – including those it does not violate before revision – ensuring revision does not cause further non–compliance.\nDefinition 31. Compliance Properties. Let I i be a mutable institution and I i+1 = 〈E i+1,F i+1,C i+1,G i+1,∆i+1〉 be the institution with unique name Ini+1 governing I i where i ∈N. The compliance properties for I i is the set of constraints:\nP = {: − occurred(viol(n),Ini+1,I),instant(I). : n ∈F i+1norm}\nWe can now instantiate an ILP theory revision task, as a compliance theory revision task in a multi–tier institution according to the previous definitions:\nDefinition 32. Compliance Theory Revision Task. Let I i be a mutable institution in the multi–tier institution M. An ILP theory revision task TR = 〈P,B ,T, M〉 is a compliance theory revision task for I i iff: (a) P is a set of compliance properties for I i , (b) B is the normal program comprising (i) a multi–tier reasoning program Πmtreas, (ii) the timeline programΠtrace(k) and (iii) the institution representation programΠI j for each institution I j in M apart from the mutable institution I i , (c) T is the institution representation program ΠI i for the mutable institution I i , and (iv) M is the set of mode declarations for I i .\nAs outlined previously, we require solutions to theory revision to minimise the revision cost in order to remain as close to an institution designer’s original intentions as possible. More precisely, the requirement is that the changed, mutable, institution’s model for a composite trace contains as many similarities between states compared to before the changes were made (i.e. minimising the changes to consequences). We derive the cost of revision from the changes in consequences rather than the number of rule changes – as used in [154] – since due to non–monotonicity, as the changes in consequences between two versions of a mutable institution increases, the number of rule changes does not necessarily monotonically increase. The changes in consequences are the number of added and deleted fluents in the answer set for B ∪T compared to the answer–set B ∪T ′ for some revised institution T ′ (i.e. the symmetric set difference between the answer–sets for B ∪T and for B ∪T ′). Definition 33. Theory Revision Cost Let TR= 〈P,B ,T, M〉 be a compliance theory revision task for a mutable institution I with unique label In, T ′ be a solution to TR, ans be the answer–set for B ∪T and ans′ be the answer–set for B ∪T ′ and ⊕ be the set symmetric difference operation. The cost c(T,T ′) is defined as:\nc(T,T ′) = ∣∣{ f = holdsat(p,In, i ) : i ∈N, f ∈ ans⊕ans′ }∣∣ Thus, a solution to an ILP theory revision task, instantiated as revision for compliance, TR = 〈P,B ,T, M〉 is a search problem. The search space consists of all possible revised versions of a mutable institution theory (normal program) and a solution T ′ to the theory revision task is one which ensures the mutable institution is now compliant for a particular trace (meets the properties in P) and minimal such that there is no revised theory S which is ‘more minimal’ (c(T,S) ≥ c(T,T ′)). This requires searching all possible solutions and"
    }, {
      "heading" : "5.2. REVISING INSTITUTIONS FOR COMPLIANCE 127",
      "text" : "comparing them. In order to perform this search we need a way to try different changes to T and find optimal solutions. In the next subsection we show how we can use ASP to perform this search.\n5.2.2. SOLVING ILP INSTITUTION REVISION IN ASP Based on [154] we use inductive search in ASP to solve an ILP theory revision task TR = 〈P,B ,T, M〉 instantiated as institutional revision for compliance. The approach we take is to transform the theory to be revised T (a mutable institution) into an ASP program where different changes to the theory can be tried (body literal and rule addition and deletion) that fit into the space of possibilities s(M). This is by redefining certain predicates in rules as undefined, rather than being a necessary element of a rule. Such undefined predicates are called abducibles.\nWe call this program, with previously fully–defined predicates now defined as abducibles, the revision program Πrev. The background theory B remains unchanged and provides both the unchangeable parts of the multi–tier institution and multi–tier reasoning. The background theory allows the effects of different revisions to be determined. The properties to be met, P , constrain any revisions found by the ASP program Πrev to result in a compliant institution. The cost measure between a revisable T and revised theory T ′, c(T,T ′) is encoded as an ASP optimisation statement. Computing the answer–sets for these components as a single ASP program explores the search space, with each answer– set representing an outcome (revised theory) that meets the properties P and with those that minimise the difference (changes in consequences) ranked highest and presented to the user for selection. The advantage of this approach is that the representation and reasoning for the non–revisable portions of the multi–tier institution are encoded as the same ASP programs for the computational and revision framework requiring no re–implementation.\nIn order to go from a revisable theory T representing a mutable institution to a revision program Πrev, we need to alter T in some way such that adding new rules and changing existing rules can be tried by the new program with each answer–set corresponding to different revised theories. The approach we take, as in [47, 154], is to introduce abducible predicates which represent the different revision operations and are selected by the program for inclusion in answer–sets. If an abducible is selected for answer–set inclusion then the effect is to perform the revision operation the abducible represents. The abducibles have the form rev(In,i,details(...)) conveying to the user the revision operation described in details(...) (e.g. a rule deletion operation) is carried out on a rule with label i in institution In. To give a simple example the rule l0 : − l1. cannot be selected for deletion by an ASP program, but we can modify it to become l0 : −l1,not rev(In,i,details(rDel)). meaning if the abducible r ev(In, i ,details(rDel)) is included by the program in an answer–set the effect is to delete the rule i by ensuring the body is never true. The selection of revision tuples for inclusion in an answer–set is encoded in the ASP revision program using the ASP choice construct of the form {rev(In,i,details(...))}.\nEach type of revision operation (rule and body literal addition and deletion) requires a different abducible and set of rules in the ASP revision program Πrev. In Table 5.6 we describe the details of the different rules for trying revisions and the transformation from a revisable theory T to a revision program Πrev using In to represent an institution’s name, i to represent a rule identifier (e.g. an integer) and B+− (l ) to represent whether a literal l is"
    }, {
      "heading" : "128 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "positive or negative. Finally, the cost c(T,T ′) between two theories is encoded as an ASP optimisation constraint causing the ASP program to only present answer–sets that are minimal in the changes to consequences between T ∪B and T ′∪B , which we also extend with a secondary prefer-"
    }, {
      "heading" : "5.2. REVISING INSTITUTIONS FOR COMPLIANCE 129",
      "text" : "ence for revisions that generalise the institution (deleting body literals and rules) rather than specialising (adding new body literals and rules). The optimisation statement is given below where X @n represents the priority n of minimising the numerical value X , difference/1 measures the difference between the states in the answer–set for the institution before and after revision (in terms of added and removed fluents for each state), rAdd/1 counts the rule additions, bAdd/1 the body additions, bDel/1 the body deletions and rDel/1 the rule deletions.\n1 #minimize {D@5: difference(D); RA@4: rAdd(RA); BA@3: bAdd(BA); 2 BD@2: bDel(BD); RD@1: rDel(RD)}.\n5.2.3. IMPLEMENTATION AND RESULTS A prototype system for revising a lower–tier institution to be compliant with a higher–tier is implemented according to the description in the preceding sections.1 The implementation is a compiler written in Java which, as depicted in Figure 5.3, takes as input the mutable institution the institution designer has the power to effect change represented in ASP (the mutable institution program ΠI i ) and outputs a revision program Πrev. The revision program is then put together with compliance properties to be met by revisions, revision cost minimisation optimisations and the background theory to remain unchanged (the non– mutable institutions, the timeline program and the multi–tier institution reasoning). An answer–set solver applied to the composition of these programs then produces minimal revision suggestions for compliance (answer sets). The suggestions are passed to a user who selects and applies a set of revisions, resulting in a compliant institution represented as an ASP program.\nIn addition to the system presented in this chapter, the ASP compiler also addresses an apparent lack of re–usability of institutions (e.g. using the same institution for different sets of agents) due to their propositional nature. Rather than taking just propositional institutions as input, the compiler also takes first–order institution theories containing variables in the head and body of rules, together with bindings and monadic predicates to denote types. To give an example, agent(ada) denotes ada is of type agent and agent(X) denotes the variable X is any ground term of type agent. Thus, a designer does not need to write a new propositional institution for the case where a new agent, Charles, joins the institutionalised society with all the norms and domain fluents that are about Charles. Instead, a fact agent(charles) can be added stating Charles is of type agent. In turn, the compiler takes these more re–usable first–order institution theories as input and outputs a first–order institution revision program that tries different variable bindings between head and body literals’ variables of the same type.\nFor our case study, we have used our prototype compiler to produce a revision program for sub–sets of the compliance problem. That is, dividing the program up into smaller parts and resolving one case of non–compliance at a time for tractability, and testing all revision suggestions together at the end to confirm they are consistent. Some of the minimal and successful revisions found are given below (we keep to those we find most intuitive).\nThe first change suggested addresses the issue of non–compliance due to an obligation\n1The prototype, multi–tier reasoning in ASP and the examples used in this chapter can be found at https: //sourceforge.net/projects/multitierinstitutionlearning/files/."
    }, {
      "heading" : "130 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "to pay a fine being imposed by the tier–1 soundsensing institution when an agent enters a new area. Non–compliance occurs, because an agent entering a new area triggers a norm violation event in the first tier institution regardless of whether a norm has been violated, whilst the second tier obliges that a norm is genuinely violated before a fine is imposed. The revision suggestion is to delete the rule in the first–tier soundsensing institution causing a norm violation event to occur when an agent enters an area:\n1 occurred(norm_violation(Agent0), soundsensing, I) :- 2 agent(Agent0), instant(I), 3 occurred(enter(Agent0, Location0), soundsensing, I), 4 location(Location0).\nThe second issue is that children (people under the age of 14) are obliged to share their location when requested, but this is prohibited by the tier–2 governmental institution. The following suggestion is one of several minimal changes found to ensure the non–compliant obligation is not imposed on children. An additional constraint is placed that an agent, Agent2, is not a child and the variable Agent2 is bound to the variable Agent0 denoting the agent who would be obliged to share their location. This means that the obligation can not be imposed on a child. The new variable Agent2 is introduced since the implementation relies on using unique variables for all literals and then systematically trying different optional bindings between the variables (or no bindings). The new rule is:\n1 initiated(obl(share_location(Agent0), 2 leave(Agent0, Location0)), soundsensing, I) :- 3 occurred(request_location(Agent1), soundsensing, I), 4 holdsat(at(Agent1, Location0), soundsensing, I), 5 not holdsat(child(Agent2), soundsensing, I), Agent0 = Agent1,"
    }, {
      "heading" : "5.3. RELATED WORK 131",
      "text" : "6 Agent0 = Agent2, agent(Agent0), agent(Agent1), agent(Agent2), 7 location(Location0), instant(I).\nFinally, the tier–2 governmental institution prohibits a prohibition on an agent to turn their microphone off when they are in a private area. Yet, the tier–1 soundsensing institution always prohibits turning a microphone off until the agent leaves the system (the prohibition exists in the initial state). The revisions found are not to delete the rule initiating a prohibition in the tier–1 soundsensing institution’s initial state, but instead, to terminate the prohibition when an agent enters a private area and then initiate it again when they leave. Although the revision adds two rules, it is minimal in the outcome of the tier–1 soundsensing institution since there is still a prohibition on turning the microphone off in all other cases where it is allowed by the tier–2 governmental institution:\n1 terminated(pro(microphone_off(Agent0), leave_soundsensing(Agent0)), 2 soundsensing, I) :- 3 occurred(enter_private(Agent2), soundsensing, I), 4 agent(Agent2), agent(Agent0), Agent0=Agent2, instant(I). 5 initiated(pro(microphone_off(Agent0), leave_soundsensing(Agent0)), 6 soundsensing, I) :- 7 occurred(leave_private(Agent2), soundsensing, I), agent(Agent2), 8 agent(Agent0), Agent0=Agent2, instant(I).\n5.3. RELATED WORK There has been much work on norm change in normative systems, however, as far as we are aware we are the first to propose a way to revise institutions to be compliant with other institutions in a multi–tier institution.\nThe most closely related work is by Li et al. [154, 155] who also uses inductive search in ASP to resolve an ILP theory revision task. Unlike us, their focus is on resolving norm conflicts between multiple institutions governing a group of agents (e.g. when an agent is prohibited to perform an action by one institution and obliged by another) and later the general case of debugging ASP programs [157]. In comparison, we focus on revising non– compliance between lower–tier and higher–tier institutions in a multi–tier institution. Our proposal is based on Li et al. and extended to revising an i th–tier institution by adding new rules or modifying/deleting pre–existing rules to impose i th–order norms. We also extend the work to revising with minimal changes in the consequences of a revised institution (as opposed to changed rules), finally we look at the creation and deletion of existing rules which in our case study provides more minimal changes in the consequences compared to rule modification.\nVasconcelos et al. [231] have proposed a technique for revising conflicting norms based on first–order unification. Their proposal provides a fine–grained way to revise obligation/permission/prohibition predicates’ terms. For example, an obligation to be in an area that overlaps with a prohibited area is revised by changing the obliged/prohibited areas for an agent to be in. In contrast to our work, their focus is on modifying the obligation/permission/prohibition predicates and not with adding/removing/modifying rules to meet a particular property (compliance between institutions in our case).\nGovernatori and Rotolo [102] propose a way to use a defeasible logic to modify legal"
    }, {
      "heading" : "132 5. EXPLANATORY RECTIFICATIONS FOR NON–COMPLIANT INSTITUTIONS",
      "text" : "systems by introducing new norms which derogate, abrogate and annul norms using defeasible rules. Central to their proposal is the idea of a legal system being versioned and having two timelines: the versioning timeline and the timeline of the legal system’s evolution (i.e. which norms are imposed and when). We only consider the latter timeline, the evolution of an institution (in our case during pre–runtime model checking) and focus on diagnosing causes of non–compliance between institutions rather than assuming it is known what the new information (rules) is.\nFinally, on the more conceptual and theoretical side, Boella et al.[25] look at how to classify different systems of norm change by investigating a set of rational norm change postulates. Specifically, they look at normative system change to incorporate new conditional norms in input/output logics and they investigate the set of consistent postulates for different input/output logics. Again, this work also presupposes which conditional norms should be added to the normative system/institution, thus any system meeting these postulates is quite different from our proposal.\n5.4. DISCUSSION In this chapter we contributed an implemented automated system for revising a lower–tier institution’s regulations to be compliant with the regulations of a higher–tier institution it is governed by. The proposal addressed a problem created by pervasive legal artefacts in the social world, where on the one hand institutions are used to govern other institutions in a vertical governance structure we call multi–tier institutions, creating the potential for non– compliant regulations. On the other hand, revising institutions’ regulations to be compliant is non–trivial due to their inherent complexity.\nOur proposal takes our previous formal and computational framework [144] for determining the compliance of institutions in multi–tier institutions. Then, viewing the problem of revising an institution to be compliant as an instance of an ILP (Inductive Logic Programming) theory revision task, we use inductive search in ASP based on [154] to solve the ILP theory revision task for compliance. Inductive search in ASP is performed by translating, using an implemented compiler, from an ASP representation of an institution that needs to be revised to be complaint where revisions cannot be tried and searched for, to an ASP representation where revisions can be tried and thus revisions for compliance determined. Then, our system goes about finding revisions that are successful in resolving non–compliance and minimal in the changes to the institution’s consequences thus keeping the changed institution as close as possible to the institution designer’s original intentions.\nThe system for revising institutions, for tractability, considers a fragment of the search space of revisions: modifying and deleting existing rules and extending a single mutable institution with a limited number of rules. The successful and minimal revisions that do exist (if any) within the space explored are guaranteed to be found. However, there may be more minimal revisions that result in a well–formed institution (according to our representation of institutions) outside of this space, but this space is bigger and takes longer to explore.\nWe consider this a problem that is important to address. Firstly with formal analysis of the complexity of the full problem. Secondly, by studying the applicability of various heuristics to the full search problem (e.g. genetic algorithms) that cannot guarantee a minimal solution is found (i.e. in the case of genetic algorithms instead converging on local optima) but can help resolve tractability issues. As yet, it is unclear which heuristics are"
    }, {
      "heading" : "5.4. DISCUSSION 133",
      "text" : "appropriate and how they can be incorporated into ILP revision as abducible search in ASP, presenting an interesting challenge for future work.\n6 FORMALISING INSTITUTIONAL\nENACTMENT VALIDITY\nOne of the major problems encountered in time travel is not that of becoming your own father or mother. There is no problem in becoming your own father or mother that a broad–minded and well–adjusted family can’t cope with. [...] The major problem is simply one of grammar.\nDouglas Adams, The Restaurant at the End of the Universe\nThis chapter is based on the following paper: King, T. C., Dignum, V., & Jonker, C. M. (2016). When Do Rule Changes Count–as Legal Rule Changes? In Proceedings of the 22nd European Conference on Artificial Intelligence (ECAI 2016). Frontiers in Artificial Intelligence and Applications. Vol 285. (pp. 3 – 11). IOS Press. http://doi.org/10.3233/978–1–61499–672–9–3 [143]\n135"
    }, {
      "heading" : "136 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "Previously, Chapter 3, Chapter 4 and Chapter 5 covered soft constraints for institutional design governance and how to comply with these soft constraints. In this chapter we look at hard institutional constraints for institutional enactment governance, which make the social actions of enacting institutional changes possible. This chapter makes the following contributions:\n• A novel representation of institutions for which changes can be enacted according to secondary legal rules regulating rule change. In particular, secondary legal rules represented as counts–as rule that make rule change possible and are conditional on an extended notion of social context that includes conditions on past and present states, institution versions and hypothetical effects of rule change.\n• A novel semantics for reasoning about rule changes ascribed by rule–modifying counts–as rules.\nThis chapter looks at institutional governance from the can perspective, in terms of which rule changes can be enacted in which contexts and by whom. Specifically, we look at the kinds of rules found in administrative law, which describes the procedures that must be followed for rule change to take place and specifies what types of rule change are possible. These are hard institutional constraints on rule enactment, in the sense that they make rule changes (im)possible.\nWhilst constitutive counts–as rules ascribe a social reality and how it changes over time, they themselves are also subject to evolving over time when they are modified, such as by a legislative body. Rule–modifying counts–as rules regulate changes to counts–as rules themselves, “A counts–as modifying a rule in context C”, describing the legislative procedure and the possible modification types. Rule–modifying counts–as rules are also modifiable according to the rule modification regulations. In ([100, 102]) a defeasible logic formalises legal rule change over time but not rule change regulation. In ([28]) counts–as rules that regulate rule modifications are formalised, but not in a temporal setting. However, thus far there has been no attention paid to formalising rule change regulated by counts–as rules in a temporal setting.\nThis raises the question, in a temporal setting “how can we formalise practical reasoning to determine when institutional rule changes count–as legally valid rule change enactments? should we define when rule changes count–as legal and valid rule changes?” To give some examples:\n• Based on ([204, Art. 71]) parliament voting to enact a bill counts–as enacting it within one month. Rule change affects institutional states (e.g. enacting a bill obliging fences to be painted white, or changing what counts–as parliament); rule changes are conditional on the institutional state (e.g. whether a body constituting parliament has voted).\n• The UK government voted to retroactively require UK residents in a business partnership abroad to pay tax ([192, Sec. 58]), criminalising people in the past. Criminalising retroactive modifications are not possible according to the European Convention of Human Rights ([48, Art. 7]). Rule change affects institutional states (e.g. criminalising people in the past); rule change is conditional on how it would change"
    }, {
      "heading" : "6.1. COMPARISON WITH INSTAL 137",
      "text" : "institutional states (e.g. if the change would criminalise people in the past then the change is not possible).\n• A monarch or parliament can enact and repeal laws. The monarch enacts a law obliging all fences are painted white. The parliament retroactively repeals the power for the monarch to enact laws, reversing the fence–painting law enactment. Retroactive rule change affects past rule–modifying counts–as rules; past rule modifications can be unravelled due to a retroactive modification.\nAn interdependency exists between the counts–as rules that construct a social reality and rule–modifying counts–as rules. Changing counts–as rules affects the past/present/future institutional context and can change the modifications which happened in the past up until the present; rule modifications are conditional on the past/present/future institutional context and the hypothetical rule change effects. Whether a rule change counts–as a legal rule change requires assessing the context in which the change takes place – comprising both the present state of affairs and the potential rule change effects affecting whether a rule change is legal in the first place.\nIn this chapter we address the question “how can we formally define when legally valid institutional change enactments occur?”. The question is addressed by contributing the first formalisation of rule change ascribed by counts–as rules accounting for the aforementioned cases in a temporal setting. We introduce the notion of temporal rule–modifying counts–as rules, “A counts–as modifying a rule in the past/present/future in context C”, which ascribe rule changes. To account for institutions dually evolving from one social reality to the next built by counts–as rules, as well as from on counts–as rule set to another, we adopt social reality (state) and institution version timelines. We enhance context from referring to a built social reality, to also a past social reality in different institution versions and the hypothetical effects of rule change. Rule modifications can potentially affect past modifications by changing the social context or contradicting previous modifications, we posit that the most recent modifications are prioritised and can override past modifications.\nThe rest of this chapter is organised as follows. We begin by comparing what follows with the InstAL framework which we use as a basis for our novel formalisation, and the formalisation used in the previous chapters in 6.1. Then we present the formal representation 6.2. The novel formal semantics are given in 6.3. We apply our framework to real case studies and examples used to test difficult edge cases in 6.4. Finally, we compare with closely related work in 6.4.1 and conclude with wider implications and directions for future work in 6.5.\n6.1. COMPARISON WITH INSTAL In this chapter we extend institutions first formalised in the InstAL (Institution Action Language) framework ([42, 43]) where rules cannot be modified and rule change cannot be regulated, to be modifiable and modification–regulating. In InstAL an institution is a signature comprising events, fluents and regulatory rules. An event is either institutional providing a social interpretation (e.g. a person paying tax) of other institutional events and observable events or is observable and exogenous to the institution corresponding to brute facts (e.g. the event we call a person paying tax). Fluents describe/prescribe the domain (e.g. a person"
    }, {
      "heading" : "138 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "is a business partner who is obliged to pay tax). We view all rules as “A counts–as B in context C”, stating an event (the ‘A’) in a social context (‘C’) causes further institutional events to occur or different fluents to hold in the next state (the ‘B’s’). An InstAL institution contains rules regulating its evolution from one social reality (state) to the next, but the rules remain static.\nWe extend institutions comprising counts–as rules to counts–as rules which are modifiable and ascriptively regulate rule changes. Rule modifications activate and deactivate rules in the past/present/future, analogous to enacting regulatory changes. Rule modifications are regulated with counts–as rules, “an event A counts–as a rule–modifying event B in context C”, which ascribes the actions counting–as past/present/future rule modifications in a particular context.\nImportantly, unlike in InstAL, institutions with modifiable rules do not just evolve from one state to the next according to their own counts–as rules. Rather, institutions evolve along two timelines, from one version comprising rules to another version comprising different rules. Each version evolves over time from state to state according to its rules. When a rule change occurs according to rule–modifying counts–as rules in one version, the institution evolves to the next version potentially comprising different (active) counts–as rules at different times. For example, if in one institution version on Wednesday a rule is retroactively added on the preceding Monday then that version’s past does not change. Instead, the institution evolves to a new version where the rule is active from the Monday potentially causing the version to evolve differently from then onwards. Institutions evolve from version to version where one versions can evolve from one state to another differently according to different rules.\nContexts in counts–as rules are also extended. Contexts can be conditional on the present state but also past institution versions and states. This allows testing potential retroactive rule modification effects. For example, a retroactive rule change is ascribed by a government voting for the change in the context that it does not criminalise people in the past compared to the previous version’s past. To summarise we extend institutions to evolve along rule version and state timelines according to counts–as rules conditional on contexts comprising past versions and states, and potential rule change effects.\nIn comparison to Chapter 3, Chapter 4 and Chapter 5 we are only interested in institutions ascribing non–deontic social facts. For example, social actions such as voting in parliament or enacting a rule change, and states of affairs such as someone being a tax payer. In other words, we are interested in the hard institutional constraints that make social actions possible according to counts–as rules. We are not interested in obligations and prohibitions which prescribe the ideal social actions and states of affairs. Consequently, unlike in the previous chapters we provide no specific representation for deontic positions nor a semantics to determine when they are violated. Moreover, we do not consider whether the effects of regulatory rules (i.e. the obligations and prohibitions they impose) are good or bad and hence we do not capture higher–order norms. We use counts–as rules, but unlike in Chapter 3 and Chapter 4 we do not capture links between concrete and abstract regulations according to counts–as rules. Rather, we capture the notion of governance in terms of counts–as rules making institutional change enactments regular and possible, hence deontic elements are not necessary.\n6.2. REPRESENTATION 139\n6.2. REPRESENTATION We begin with representing institutions which regulate their own temporal rule modifications.\nDefinition 34. Institution An institution is a tuple I = 〈E ,F ,C,G,∆〉. Institutions are distinguished with a superscript (e.g. Iuk = 〈Euk,F uk,Cuk,Guk,∆uk〉). Σ = 2F denotes all states for I .\nWhere:\n1. E = Eobs ∪Einst ∪Emod is a finite set of events comprising: • Observable events Eobs and institutional events Einst. • Rule modification events Emod = {mod(op, id, t) | op ∈ {act,deact}, id ∈ ID, t ∈ N} – a\nrule with the identifier id (the identifier set being ID) is activated/deactivated (op) at a time t .\n2. F =Fdom ∪Fract is a finite set of fluents describing the: • Domain Fdom. • Active rules Fract = {active(id) | id ∈ ID} identified as id.\n3. X is the set of all contexts ϕ expressible in the following grammar for fluents f ∈F : ϕ ::= > | f | ¬ϕ | ϕ∧ϕ | ϕ∨ϕ | ϕ→ϕ | P |\nPrS(ϕ) | PaS(ϕ) | PrV(φ) | PaV(φ) φ ::= ϕ |NS(ϕ)\nEach expression’s informal meaning is the usual for propositional logic symbols. The operators bear truth in the following cases: (a) P if the context is retroactive (i.e. the state in which P operates on is at a time before the version to which it belongs becomes the current version), and (b) if ϕ is true in: the previous state (PrS(ϕ)), all past states (PaS(ϕ)), the same state in the previous version (PrV(ϕ)), the same state in all past versions (PaV(ϕ)), and the next state (NS(ϕ)).The next state operator is restricted to past versions, meaning rules are never conditional on the actual future.\n4. G : X ×2E → 2Einst – is the event generation function where G(X ,E) is an event set caused by the events that occur (E) when the context X holds.\n5. C : X ×E → 2Fdom ×2Fdom is the state consequence function where for a context X ∈X and an event e ∈ E the consequence function’s result is notated C(X ,e) = 〈C↑(X ,e),C↓(X ,e)〉 s.t. the initiated fluent set is C↑(X ,e) and the terminated fluent set is C↓(X ,e)\n6. ∆⊆F is the initial institution state For example, the following rule states that if Ada is found guilty (g(ada)) then she becomes a criminal (crim(ada)). That is, the fluent crim(ada) is initiated by the event of being found guilty according to the consequence function (C↑).\nC↑(>,g(ada)) 3 crim(ada)"
    }, {
      "heading" : "140 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "A government rule change (gmod(act, id, t))) that does not retroactively criminalise people counts–as a legal rule change. The condition is in all past retroactive states someone is not a criminal (crim(ada)) if in the previous version (prior to rule change) they were not.\nG(PaS(P→PrV(¬crim(ada)) →¬crim(ada))), {gmod(act, id, t)}) 3 act(id, t)\nIn order to reason about modifying specific institutional rules, we tie rule identifiers to the institutional rules they represent. Specifically we map the inputs and single outputs of G and C to identifiers (i.e. not the whole set of events or initiated/terminated fluents).\nDefinition 35. Rule Identifier Function A rule identifier function for an event generation function G : X × 2E → 2Einst is ridG : X × 2E × Einst → ID. The rule identifier functions for a consequence function C : X ×E → 2Fdom ×2Fdom are ridC↑ : X ×E ×Fdom → ID and ridC ↓ : X ×E ×Fdom → ID.\nSo, the previous rule criminalising Ada has the ID crim0 = rid↑(>,g(ada),crim(ada)). Examples/case studies omit this function.\n6.3. SEMANTICS This section defines institution semantics, following InstAL’s method using just sets and functions, with the following considerations.\nObservable events cause an institution rule version to transition from state to state by generating transitioning events according to the event generation function G and initiating and terminating fluents according to the consequence function C. An institution transitions from one version of rules to another when rule modifying events are generated by the event generation function G.\nAn institutional interpretation represents this dual evolution as a tuple M = 〈R,V 〉 where: 1. V = 〈V0, ...,V j 〉 is a tuple of versions each comprising a state and event set sequence up to length k with typical element Vv = 〈Sv ,Ev 〉. The state sequence for v is Sv = 〈Sv :0, ...,Sv :k+1〉 with typical element Sv :i ∈Σ and the event set sequence (the events transitioning between states) is Ev = 〈Ev :0, ...,Ev :k〉 with typical element Ev :i ⊆ E . States denoted Sv :i and event sets Ev :t are denoted with the version v to which they belong and their time instant i . 2. R : [0,k] → [0, j ] is a function stating which institution version is the current version for a given time.\nR also represents when rule change events occurring in a version can change that version’s rules. Rule modification events only change version rules if the institution has not already evolved to a later version. For example, if on Monday a rule is added, then the institution evolves to a new current version where that rule is actually added on Monday. When the version evolves, previous versions become obsolete from then onwards (e.g. Monday) meaning their rules are not changeable. If R(i ) ≤ v then an event occurring in version v at time i can modify rules in v since the version is not yet obsolete.\nThe semantics are defined with respect to the interpretation M = 〈R,V 〉, an institution I = 〈E ,F ,C,G,∆〉, the set of all institutional interpretations I, and an observable event set trace et= 〈O0, ...,Ok〉 with typical element Oi ⊆ Eobs.\n6.3. SEMANTICS 141\n6.3.1. INSTITUTIONAL CHANGE Counts–as rules, causing institution state and version change, are conditional on a context being modelled by the state in an interpretation.\nDefinition 36. Modelling Context For all X ∈X and f ∈F , context models 〈M ,Sv :t 〉 |= X is defined for >, ∨ and → w.r.t. ¬ and ∧ as usual and for the other symbols as:\n〈M ,Sv :t 〉 |= f ⇔ f ∈ Sv :t (36.1) 〈M ,Sv :t 〉 |=¬ψ ⇔ 〈M ,Sv :t 〉 6|=ψ (36.2) 〈M ,Sv :t 〉 |=ψ∧φ ⇔ 〈M ,Sv :t 〉 |=ψ and 〈M ,Sv :t 〉 |=φ (36.3) 〈M ,Sv :t 〉 |=P ⇔ R(t ) < v (36.4) 〈M ,Sv :t 〉 |=PrS(ψ) ⇔ 〈M ,Sv :t−1〉 |=ψ (36.6) 〈M ,Sv :t 〉 |=PaS(ψ) ⇔ ∀t ′ ∈ [0, t −1] : 〈M ,Sv :t−1〉 |=ψ (36.7) 〈M ,Sv :t 〉 |=PrV(ψ) ⇔ 〈M ,Sv−1:t 〉 |=ψ (36.8) 〈M ,Sv :t 〉 |=PaV(ψ) ⇔ ∀v ′ ∈ [0, v −1] : 〈M ,Sv ′−1:t 〉 |=ψ (36.9) 〈M ,Sv :t 〉 |=NS(ψ) ⇔ 〈M ,Sv :t+1〉 |=ψ (36.10)\nSemantics are as usual for modelling a fluent (36.1), weak negation (36.2) and conjunction (36.3). A state is retroactive if at that time the version is not the current version but it will be in the future (36.4) – for example, if on a Wednesday the institution evolves to a new version, then anything occurring on the Monday is retroactive to the new version (i.e. occurring in the version’s past). States model formula as expected for a previous state (36.6), all previous states (36.7), the previous version (36.8), all past versions (36.9) and the next state (36.10).\nAn event ‘B’ occurs when transitioning to a new state in a version according to a rule – “A counts–as B in context C” (G) – if an event ‘A’ occurs, the context ‘C’ is modelled by the state and the counts–as rule itself is active in the version’s state. Events occurring in response to observable events E are formalised as an event generation operation.\nDefinition 37. Event Generation Operation The event generation operation GR :Σ×2E × I→ 2E is defined such that GR(Sv :t ,E , M) = E ′ iff E ′ only satisfies the following conditions:\nE ⊆ E ′ (37.1) ∃X ∈X ,e ⊆ E ,e ′ ∈G(X ,e)∩Einst : id= ridG (X ,e,e ′), 〈M ,Sv :t 〉 |= X ∧active(id)⇒ e ′ ∈ E ′ (37.2) ∃X ∈X ,e ⊆ E ,e ′ ∈G(X ,e)∩Emod : id= ridG (X ,e,e ′), 〈M ,Sv :t 〉 |= X ∧active(id),R(t ) 6= v ⇒ e ′ ∈ E ′ (37.3) ∃X ∈X ,e ⊆ E ,e ′ ∈G(X ,e)∩Emod : id= ridG (X ,e,e ′), 〈M ,Sv :t 〉 |= X ∧active(id),R(t ) = v ⇒ (e ′ ∈ E ′ or e ′ 6∈ E ′) (37.4)\nAny fixed point reached after iterative applications of GR is denoted as GRω(Sv :t ,E , M)."
    }, {
      "heading" : "142 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "Events that have occurred still occur (37.1). If an active rule states an event e causes an event e ′ in a context modelled by the state, then e can cause e ′ to occur depending on e ′’s type. Specifically, whether e ′ is a type that could cause an inconsistency (e.g. removing rules that ascribe rule modifications, for more on the paradox of rule change see [220]). An event e ′ always occurs if it is a non–rule–modifying institutional event (37.2) or occurs when the version is obsolete and it cannot modify rules (37.3). Rule modifying events in non–obsolete versions can cause rule changes and a potential paradox. So they optionally occur in a non–obsolete version where they can cause rule change and/or a paradox (37.4). Hence, GR is multi–valued.\nIterating the event generation operation until a fixed point is reached obtains all events which occur. At least one fixed point is guaranteed.\nLemma 4. For any set of events E ⊆ E , interpretation M and state Sv :t ∈ Σ there exists a fixed point GRω(Sv :t ,E , M).\nProof. GR always has a monotonically increasing value (w.r.t. set inclusion) and a finite domain.\nAn institution version transitions between states, driven by event occurrences, according to a state transition operation.\nDefinition 38. State Transition Operation The state transition operation TR :Σ×2E × I→ 2E is defined for a state Sv :t , a set of events Ev :t and an interpretation M as: TR(Sv :t ,Ev :t , M) =\n{ f | f ∈ Sv :t ∩TERM(Sv :t ,Ev :t , M) or (38.1) f ∈ INIT(Sv :t ,Ev :t , M)} (38.2)\nwhere: INIT(Sv :t ,Ev :t , M) =\n{ f |∃e ∈ Ev :t , X ∈X : id= ridC ↑ (X ,e, f ),\nf ∈ C↑(X ,e)∩Fdom,〈M ,Sv :t 〉 |= X ∧active(id) or (38.3) ∃t ′ ∈ [0,k],Øt ′′ ∈ [t ′,k] : id= ridC↑ (X ,e, f ), R(t ′) ≤ v,R(t ′′) ≤ v,mod(act, id, t) ∈ Ev :t ′ , mod(deact, id, t) ∈ Ev :t ′′ , f = active(id)} (38.4)\nTERM(Sv :t ,Ev :t , M) =\n{ f |∃e ∈ Ev :t , X ∈X : id= ridC ↓ (X ,e, f ),\nf ∈ C↓(X ,e)∩Fdom,〈M ,Sv :t 〉 |= X ∧active(id) or (38.5) ∃t ′ ∈ [0,k],Øt ′′ ∈ [t ′,k] : id= ridC↓ (X ,e, f ) R(t ′) ≤ v,R(t ′′) ≤ v,mod(deact, id, t) ∈ Ev :t ′ , mod(act, id, t) ∈ Ev :t ′′ , f = active(id)} (38.6)"
    }, {
      "heading" : "6.3. SEMANTICS 143",
      "text" : "Transitioning from one state to the next follows common–sense inertia – a fluent holds in a new state if it held in the previous state and was not terminated (38.1) or it was initiated in the previous state (38.2). A domain fluent is initiated/terminated if an event causes it to be according to a rule defined by the state consequence function C that is active in the current state with a condition (context) that is modelled in the state (38.3 for initiation and 38.5 for termination). A fluent denoting an active rule is initiated/terminated in a state if a rule activating/deactivating event occurs at a time when the version is not obsolete and no contradictory deactivation/activation event occurs at a later time when the version is not obsolete (38.4 for activating rules and 38.6 for deactivating rules). The most recent modifications in a version take precedent if they occur when the version is a non–obsolete version and simultaneous contradictory rule modifications are cancelled.\n6.3.2. MODELS Now we define when an interpretation is an institutional model for an observable event set trace. An institutional interpretation is, broadly speaking, an institutional model for an observable event set trace iff: 1. each version evolves according to the event generation and state transition operations, and 2. the institution evolves from one version to another when rules are modified. However, the event generation operation is multi–valued since rule modifications are optional. Thus, there are potentially multiple candidate event sets for transitioning between states and therefore multiple interpretations to select as models.\nWe want to maximise the rule modification events that are not self–contradicting (e.g. not applying modifications that retroactively remove a rule making retroactive rule removal possible). Interpretations are prioritised, denoted as <, based on maximising rule modifications. An interpretation has higher priority over another if at the earliest time in the earliest version in which the interpretation differ it contains a superset of rule modifying events compared to the ‘same’ set for the lower priority interpretation.\nDefinition 39. Prioritised Interpretation Let M 0 = 〈R0,V 0〉 ∈ I and M 1 = 〈R1,V 1〉 ∈ I be two interpretations for institution I where: V 0 = 〈V 00 , ...,V 0i 〉 with typical element V 0v = 〈E 0v ,S0v 〉 s.t. E 0v = 〈E 0v :0, ...,E 0v :k〉, and V 1 = 〈V 10 , ...,V 1j 〉 with typical element V 1v = 〈E 1v ,S1v 〉 s.t. E 1v = 〈E 1v :0, ...,E 1v :k〉. The ordering < is a relation between interpretations M 0 and M 1 such that:\nM 0 < M 1 ⇔ ∃t ∈ [0,k],Øt ′ ∈ [0, t-1] : v = R0(t ),E 0v :t ∩Emod ⊃ E 1v :t ∩Emod v ′ = R0(t ′),E 0v ′:t ′ 6= E 1v ′:t ′\nWe operationally characterise a model by constructing a ‘correct’ interpretation. That is, constructing versions comprising correct state transitions and generated events. We could construct each institution version by starting at an initial state and proceeding from one state to the next according to the event generation and state transition operations. However, this would require knowing which rule modification events happen in each version’s past, present and future.\nTo give an example for an observable event set trace 〈O0, ...,Ok〉. An institution starts at an initial state only comprising an active rule enabling a government to make retroactive"
    }, {
      "heading" : "144 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "modifications (∆= S0:0 = {active(gov0)}). First, a fence is observably built (O0 = {fb}, occurring during the first state transition fb ∈ E0:0 =GRω(S0:0,O0, M)). But, there is no active rule that causes the next state to be different (S0:1 = TR(S0:0,E0:0) = S0:0 = {active(gov0)}). Then, the government votes to retroactively activate a rule in state zero, stating building a fence initiates an obligation to paint it. Consequently, the second state which has already been determined, S0:1, seems wrong since it lacks the fence painting rule and its effects. In fact, the institution should transition to a new rule version V1. This new version should start at the same initial state S1:0 = ∆. But, crucially, transition to the next state (S1:0 = TR(S1:0,E1:0)) with the knowledge that in the future of the new version the fence painting rule will be retroactively added at state zero (S1:0) and become active in the second state (S1:1). State transitions are defined with respect to an interpretation comprising past/present/future rule modification events which might be unknown when each state and transitioning event set is constructed.\nWe define an interpretation successor operation which addresses the problem of constructing a ‘correct’ interpretation without the knowledge of each version’s past/present/future. The successor operation takes as input a preceding interpretation which supplies versions comprising a past/present/future on which each version in the new succeeding interpretation can be constructed according to TR and GR. That is, a new interpretation is produced using the version timelines of the previous interpretation, taking into account past/present/future rule modifications from the preceding interpretation’s version timelines.\nA succeeding interpretation might not be the same as the previous interpretation, since the previous interpretation might have been built without knowledge of its own past/present/future. That is, the new interpretation might differ in its temporal evolution (comparable version timelines in each interpretation being different). Consequently, the succeeding interpretation might have new, previously unknown, rule modification events that also need to be accounted for and thus another succeeding interpretation must be produced.\nThe idea is to iteratively apply the institution successor operation until a succeeding interpretation is produced that is the same as the previous interpretation. That is, until the operation reaches a fixed point, which is guaranteed according to lemma 6 we give later on. Intuitively, the fixed point characterises an interpretation that is built taking into account its own past/present/future modifications in each version (since it was built with respect to an identical preceding interpretation). Formally, the successor interpretation operation is:\nDefinition 40. Successor Interpretation Operation Let et = 〈O0, ...,Ok〉 be an observable event trace for I of length k. Let M ′ = 〈R ′,V ′〉 ∈ I be an interpretation such that V ′ = 〈V ′0, ...,V ′j ′〉 is a tuple of institution versions. The interpretation successor operation SUCC : I×ET→ I is defined for the interpretation M w.r.t. I and et such that SUCC(M ,et) = M ′ iff M ′ satisfies the following conditions:\n∀v ∈ [0, j ′] : S′v :0 =∆ (40.1) ∀v ∈ [0, j ′], t ∈ [0,k] : E ′v :t =GRω(S′v :t ,Ot , M) (40.2) ∀v ∈ [0, j ′], t ∈ [0,k] : S′v :t+1 = TR(S′v :t ,E ′v :t , M) (40.3)"
    }, {
      "heading" : "6.3. SEMANTICS 145",
      "text" : "R ′(t ) =  0, t = 0,E ′0:t ∩Emod =; 1, t = 0,E ′0:t ∩Emod 6= ; R ′(t-1), t > 0,E ′R(t-1):t ∩E ′mod =; R ′(t-1)+1, t > 0,E ′R(t-1):t ∩E ′mod 6= ;\n(40.4)\nGiven that V ′ = 〈V ′0, ...,V ′j ′〉,R ′(k) = j ′ (40.5)\nEvery institution version starts at the same initial state (40.1). Each state transition (an event set) in a version is produced by the event generation operation applied to the previous state and the observable events occurring at that time (40.2). The next state in a version is the state produced by the state transition operation applied to the previous state and the transitioning events occurring in that version with respect to the preceding institutional interpretation (40.3). That is, transitioning from one state to the next takes into account the rule modification events occurring in the past/present/future of the same version in the preceding interpretation. Rule modifications in the latest version cause the current version to evolve/increment to the next version. If no rule modification takes place the version remains the same or the zeroeth version for the zeroeth time instant (40.4). If a rule modification does take place in the latest version, then the current version at that time incremented by one, or is the first version for the zeroeth time point (40.4). The version sequence only goes up until the current version at the last time instant (40.5).\nAt least one fixed point for the successor interpretation operation, starting at any initial interpretation, is always guaranteed. A fixed point is denoted as SUCCω(M ,et ). To see why, the general idea is that there always exists a series of successive interpretations that monotonically increase which versions and states they agree on.\nThe following lemma is used to prove that there always exists a series of such interpretations and therefore that there always exists a fixed point. Informally, the lemma is conditional on there being two successors M ′ and M ′′ to any interpretation that agree with each other up until a particular time (h) in a version ( j ). The consequence is that the second interpretation M ′′ has the same events at time h and state transition at time h +1 in version j as if the event and state transitions were produced with respect to M ′′’s own past/present/future timeline.\nLemma 5. If I is an institution, M an interpretation and et an observable event trace of length k for I and there exists interpretations M ′ = SUCC(M, et) and M ′′ = SUCC(M ′,et) where ∃h ∈ [0,k], j ∈ [0, v ′],∀i ∈ [0,k] :\n〈V ′0, ...,V ′j−1〉 = 〈V ′′0 , ...,V ′′j−1〉 (A5.1) 〈S′j :0, ...,S′j :h〉 = 〈S′′j :0, ...,S′′j :h〉 (A5.2) mod(op, id, h) ∈ E ′v :i , R ′(i ) ≤ j ⇔ mod(op, id, h) ∈ E ′′j :i , R ′′(i ) ≤ j (A5.3)\nthen E ′′j :h =GRω(S′′j :h ,Oh , M ′′) and S′′j :h+1 = TR(S′′j :h ,E ′′j :h , M ′′)\nThe previous lemma’s assumptions can always be met starting from any interpretation M . Firstly, since in the worst case, from any interpretation we can obtain a successor starting at the institution’s initial state – so both successors agree at least on the initial state."
    }, {
      "heading" : "146 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "Secondly, by making the non–deterministic choice in the event generation operation to select the same rule modifications for both the successor and the successor to the successor (in the worst case, no rule modifications). We can continue to incrementally produce successive interpretations that monotonically increase the time point they agreed upon. Note that, this may mean backtracking by changing preceding interpretations (e.g. selecting no rule modifications).\nLemma 6. There exists a fixed point for the interpretation successor operation denoted SUCCω(M ,et ) for any M and et.\nIn fact, there can be multiple fixed points, as exemplified:\nExample 1. An institution I contains a legislative rule with the id leg0 ∈ ID stating that an agent, Ada, voting to activate a rule (votea(act, id, t) ∈ Eobs) counts–as activating the rule: G(>, {votea(act, id, t)}) 3 mod(act, id, t). In the initial state the legislative rule is active ∆= {active(leg0)}. In an observable event trace et= 〈O0〉 Ada votes to activate another rule with the id leg1 ∈ ID in the initial state O0 = {votea(act, leg1, 0)}.\nFrom an initial empty interpretation M we have the following successors and interpretations for example 1(differences are in bold):\nM2 = SUCC(M, et)= SUCCω(M, et) s.t. V 2 = 〈V 20 〉,R2(0) = 0,R2(1) = 0,\nS20:0 = {active(leg0)},S20:1 = {active(leg0)},E20:0 = {votea (act, leg1, 0)}\nM1 = SUCC(M, et)= SUCCω(M, et) s.t. V 1 = 〈V 10 ,V 11 〉,R1(0) = 1,R1(1) = 1,\nS10:0 = {active(leg0)},S10:1 = {active(leg0)},\nE10:0 = {votea (act, leg1, 0),mod(act, leg1 , 0)}\nS11:0 = {active(leg0)},S11:1 = {active(leg0)},E11:0 = {votea (act, leg1, 0)}\nM0 = SUCC(M, et)= SUCCω(M, et) s.t. V 0 = 〈V 00 ,V 01 〉,R0(0) = 1,R0(1) = 1,\nS00:0 = {active(leg0)},S00:1 = {active(leg0)},\nE00:0 = {votea (act, leg1, 0),mod(act, leg1 , 0)}\nS01:0 = {active(leg0)},S01:1 = {active(leg0),active(leg1)},\nE01:0 = {votea (act, leg1, 0),mod(act, leg1 , 0)}\nEach fixed point has different rule modifications. M 2 does not add the rule leg1. M 1 contains an attempt to add the rule in the version zero but not in version one. Finally, M 0 adds the rule in the version zero and version one, version one being the current version when the rule is added meaning the rule addition is successful. In fact, the following prioritisation holds M 0 < M 1 < M 2 meaning that M 0 maximises successful rule modifications.\nModels are interpretations which maximise successful rule modifications. Thus we characterise models by combining the successor interpretation fixed point and interpretation prioritisation. Given an empty interpretation we find a fixed point successor interpretation for a given event set trace (41.1). The fixed point is a model if there is no greater prioritised successor fixed point interpretation (41.2).\nDefinition 41. Models Let M = 〈R,V 〉 be an empty interpretation such that V = 〈V0〉, V0 = 〈E0,S0〉, E0 = 〈〉 and S0 = 〈〉. The interpretation M ′ = 〈R ′,V ′〉 is a model for I w.r.t. an"
    }, {
      "heading" : "6.4. CASE STUDIES 147",
      "text" : "observable event set trace et= 〈O0, ...,Ok〉 iff:\nM ′ = SUCCω(M ,et) and (41.1) There does not exist an M ′′ < M ′ meeting 41.1. (41.2)\nFrom lemma 6 and definition 41 we have the following property.\nLemma 7. There exists at least one model for any institution I w.r.t. an observable event set trace et.\nThese semantics operationalise answering “when does a rule change count–as a legal rule change?”. Generally, a physical or institutional actions counts–as the social action of a legal rule change if and only if the rule change is ascribed by secondary legal counts–as rules conditional on a social context, which can include hypothetical rule change effects, that holds before and after the rule change takes place. Models always contain ‘legal’ rule modifications, defined as fixed point interpretations which maximise rule modifications. So, ‘legal’ rule–changes occur in at least one model whilst illegal rule changes do not occur at all (the non–deterministic choice for a rule modification to occur in 37.4) and the institution continues to operate ‘as usual’, meeting our desiderata.\n6.4. CASE STUDIES Now we apply the framework to concrete case studies. For brevity we use variables to denote: all rule identifiers (id ∈ ID), all rule change operations (op ∈ {act, deact}), and all time instants (t ∈N). The first case concerns a simple rule change procedure. Case 6.4.1. An institution Isgov describes a simple government comprising two agents, Ada and Bertrand. Both Ada and Bertrand voting to activate or deactivate a rule in the context that neither are criminals (crim(ada),crim(bert) ∈ F sgovdom ) counts–as activating/deactivating the rule. The rule modifying counts–as rules are identified with leg0 ∈ ID and formalised as Gsgov(¬crim(ada)∧¬crim(bert), {votea(op, id, t),voteb(op, id, t)}) 3 mod(act, id, t). At time point one Ada and Bertrand vote to add a rule with id crim0, O1 = {votea(act, crim0, 1),voteb(act, crim0, 1)}. The rule identified as crim0 states that if Ada or Bertrand are found guilty of a crime (g(ada),g(bert) ∈ E sgovobs ) then they become criminals, formally – C↑(>,g(ada)) 3 crim(ada) and Csgov↑(>,g(bert)) 3 crim(bert). Next, Bertrand is found guilty of a crime O2 = {g(bert)}. Finally, Bertrand and Ada vote to deactivate the criminalising rule, O3 = {votea(act, crim0, 3),voteb(act, crim0, 3)}.\nFor clarity, models are represented graphically. The model for case 6.4.1 is shown in Figure 6.1. Lines represent when domain and active rule fluents hold. We distinguish between whether a fluent holds in a state Sv :t : 1. retroactively in the version’s past and not in the previous version, (i.e. R(t ) < v and 〈M ,Sv−1:t 〉 6|= f ), 2. when the version is the current version, ) (i.e. R(t ) = v), and 3. when the version is obsolete, (i.e. R(t ) > v). Time instants are marked if they have successful or non–successful rule modification events in versions where modifications can have an effect (i.e. non–obsolete versions): 1. denoting that all the rule modification events occurring in the previous version occur again (i.e. Ev :t ∩ Emod = Ev−1:t ∩ Emod). Meaning, the conditions (contexts)"
    }, {
      "heading" : "148 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "for the rule modifying events to be ascribed are consistent with the version and therefore with applying the rule modifications (the non–deterministic choice to include a rule modification in Ev :t according to 37.4 is always made) 2. denoting that at least one rule modification event which occurred in the previous version does not occur again (i.e. Ev :t ∩Emod 6= Ev−1:t ∩Emod). Meaning, the conditions (contexts) for rule modifying events to be ascribed are inconsistent with the version they occur in and therefore with applying the rule modifications (a non–deterministic choice according to 37.4 to not include a rule modification is made when building Ev :t ).\nFigure 6.1 shows case 6.4.1’s model. Throughout version zero the legislative rule (leg0) is active, stating Ada and Bertrand voting to add a rule counts–as adding a rule. When at time instant one Ada and Bertrand vote to add a new rule (crim0), stating people found guilty become criminals, the model succeeds to version one where the new rule is successfully added. At time instant three Bertrand becomes a criminal. When they vote again to modify a rule it is unsuccessful, since rule change is conditional on neither being criminals. Adding a criminalising rule altered the built social reality in version one’s future, changing what could be ascribed as a legal rule modification.\nThe next case presents an institution Iuk representing the UK’s legislation rules. The cases are based on past changes to a court decision on UK tax laws ([1]), and past changes to tax laws ([192]). The UK government can unconditionally enact any rules effective at any time. Observable events where the government activates/deactivates a rule (gmod(op, id, t)) count–as modifying the rule (mod(op, id, t). Legislative rules identified as leg0 ∈ ID cause rule activations Guk(>, {gmod(act, id, t)}) 3 mod(act, id, t) and legislative rules identified as leg1 ∈ ID cause rule deactivations Guk(>, {gmod(deact, id, t)}) 3 mod(deact, id, t). A model Muk = 〈Ruk,V uk〉 is produced for an observable event trace et= 〈O0,O1,O2,O3,O4〉 for Iuk. The model comprises four versions V uk = 〈V uk0 ,V uk1 ,V uk2 ,V uk3 〉. We begin the case: Case 6.4.2. A rule states that any UK resident (e.g. person a resides in the UK –r(a, uk)) in a business partnership in the UK (p(a, uk)) or elsewhere such as Jersey (p(a, jers)) in the first tax year month is obliged to pay tax (oblt). We have for all locations L ∈ {uk, jers} a tax rule Cuk↑(r(a, uk)∧p(a, L),mon1) 3 oblt identified as tax0 ∈ ID. Initially the legislative rules leg0 and leg1, and the tax rule tax0 are active (∆uk = {active(leg0),active(leg1),active(tax0)}). At time point one it is the first tax year month (O1 = {mon1}). Following a court challenge ([1]) the government retroactively replaces the tax rule with id tax0 with a new rule with id tax1 (O2 = {gmod(deact, tax0, 0),gmod(act, tax1, 0)}). The new rule, tax1, states that only people in a UK business partnership are obliged to pay tax – Cuk↑(r(a, uk)∧"
    }, {
      "heading" : "6.4. CASE STUDIES 149",
      "text" : "p(a, uk),mon1) 3 oblt.\nIn Figure 6.2 version zero (V uk0 ) obliges person ‘a’ to pay tax in state two. In state two (Suk0:2) the current institution version changes when the rule obliging UK residents to pay tax (tax0) is replaced with the rule obliging UK business partners to pay tax (tax0) (act(t1,0),deact(t0,0) ∈ Euk0:2) to version one (V uk1 s.t. Ruk(2) = 1). Due to this change, the version one (V uk1 ), does not oblige tax to be paid in its third state (S uk 1:2) since person a resides in the UK but is in a Jersey–based business partnership.\nCase 6.4.2 (continued). The government partially reverses the tax change at time point three. This is by retroactively replacing the rule obliging people in a UK business partnership to pay tax (tax1) with a new rule identified as tax2 (O3 = {gmod(deact, tax1, 0),gmod(act, tax2, 0)}). The new rule obliges UK residents in a business partnership to pay tax if it does not criminalise them retroactively (i.e. in a retroactive state an obligation to pay tax is initiated conditional on the obligation holding in the next state of the previous version). For all locations L ∈ {uk, jersey} the rule is Cuk↑((r(a, uk)∧p(a, L)) → (P) → PrV(NS(oblt))),mon1) 3 oblt. Next, it is the first tax year month again (O4 = {mon1}).\nIn Figure 6.2 version two (V uk2 ), like version zero, does not oblige ‘a’ to pay tax in the past. But, it does oblige them to pay tax after the second time the first tax year month occurs (mon1 ∈ Euk2:4). Case 6.4.2 (continued). The UK government decides to reverse the previous judgements going back to the original rule set (O5 = {gmod(deact, tax2, 0),gmod(act, tax0, 0)})."
    }, {
      "heading" : "150 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "In Figure 6.2, version three (V uk3 ) reverts to the original legislation. Thus we have the same situation as if the legislation in version zero had not been modified. That is, an obligation to pay tax after the first occurrence of the first tax year month (mon1 ∈ Euk3:1).\nThe next case is a variation on the previous describing an institution Ieuuk, incorporating EU human rights law.\nCase 6.4.3. The European Convention on Human Rights [48, Art. 7] (ECHR) blocks retroactive legislative modifications that criminalise formerly innocent people. The institution Ieuuk contains the same rules as Iuk with the same identifiers minus the legislative rules leg0 and leg1. Instead, legislative rules state that observable rule modifications count–as rule modifications conditional on the changes not retroactively criminalising people. In all states where rules are being applied retroactively, if there is not an obligation to pay tax in the previous version then there must not be an obligation to pay tax in the current version. We have rules with the identifier l2: Geuuk(PaS(P → PrV(¬oblt) →¬oblt)), {gmod(act, id, t)}) 3 act(id, t), and rules with the identifier l3: Geuuk(PaS(P → PrV(¬oblt) →¬oblt)), {gmod(deact, id, t)}) 3 deact(id, t). Initially, person ‘a’ is in a Jersey based business partnership (p(a,jersey)) and is a UK resident (r(a,uk)), and the first tax rule and the legislative rules conditional on being non retroactively criminalising are active such that ∆euuk = {p(a,uk),r(a,uk), tax0, l2, l3}. The same events occur as in case 6.4.2, et = 〈;, {mon1}, {gmod(deact, t0, 0), gmod(act, t1, 0)}, {gmod(deact, t1, 0), gmod(act, t2, 0)}, {mon1}, {gmod(deact, t2, 0), gmod(act, t0, 0)}〉.\nFigure 6.2 shows a model Meuuk for Ieuuk. The first three versions are identical to our previous case 6.4.2 (where the UK’s legislature was not constrained by EU rules blocking retroactively criminalising modifications), since the first two rule modifications do not criminalise people retroactively. Unlike in our previous case 6.4.2, the version two contains no tax rules. The reason being that tax rule two – “obliging uk residents in a business partnership to pay tax but on the condition that if it is retroactive then those people were obliged to pay tax in the previous version”, is deactivated since its deactivation does not criminalise retroactively. On the other hand, tax rule zero – “any UK resident in a business partnership in the first tax year month is obliged to pay tax” (Cuk↑(r(a, uk)∧p(a, L),mon1) 3 oblt) is not reactivated, even though it was reactivated in our previous case 6.4.2. Its reactivation would retroactively criminalise people if activated in version three, meaning its activation does not occur since legislative rule – l2: Geuuk(PaS(P → PrV(¬oblt) →¬oblt)), {gmod(act, id, t)}) 3 act(id, t) – has a condition that is not met.\nThe next cases look at modifying legislative rules themselves.\nCase 6.4.4. An institution Ip describes a parliament that can retroactively modify rules through a majority vote pvote(act, id, t) ∈ Eobs. The legislative rules are identified the id parl0 ∈ ID for activating rules Gp(>, {pvote(act, id, t)}) 3 mod(act, id, t) and with the id parl1 ∈ ID for deactivating rules Gp(>, {pvote(deact, id, t)}) 3 mod(deact, id, t). In the initial state all rules are active such that active(id) ∈ ∆. In an observable event set trace tr = 〈O0,O1〉 at time point one the parliament votes to retroactively remove the rule which ascribes retroactive modifications (O1 = {pvote(deact, parl1, 0)}.\nDepicted in Figure 6.3 a single model Mp = 〈Rp,V p〉 comprises two institution versions V p = 〈V p0 ,V p 1 〉. An event occurs in version zero at time instant one, where the parliament"
    }, {
      "heading" : "6.4. CASE STUDIES 151",
      "text" : "votes to retroactively modify a rule and the corresponding rule modification event occurs (Ep0:1 = {pvote(deact, parl1, 0),mod(deact, parl1, 0)}). Consequently the institution transitions to version one (Rp(1) = 1). Importantly, in version one, the same rule modifying event does not occur. The reason being, if the modification event did occur then the rule parl1 ascribing the modification event – Gp(>, {pvote(deact, id, t)}) 3mod(deact, id, t) – would be inactive in version one state one Sp1:1, and the deactivation could not occur in the first place (contradiction). This exemplifies how the formalism always guarantees a model, paradoxical rule modifications do not occur if they make the rule modifying event impossible in the first place.\nThe next case extends the previous case 6.4.4:\nCase 6.4.5. This case describes an institution Imp where a monarch and a parliament can retroactively modify rules, including all the rules from the previous case’s institution Ip. Additionally, a rule identified as fence0 ∈ ID states that if a fence is built fb ∈ Empobs it is obliged the fence is painted white oblpf ∈ Fmpinst – Cmp↑(>, fb) 3 oblpf. A rule identified as mon0 states the monarch issuing a rule change decree mdecree(act, id, t) ∈ Empobs to activate a rule counts–as activating the rule – Gmp(>, {mdecree(act, id, t)}) 3 mod(act, id, t). A rule identified as mon1 state the monarch issuing a decree to deactivate a rule counts– as deactivating the rule Gmp(>, {mdecree(deact, id, t)}) 3 mod(deact, id, t). All legislative rules are initially active, but the fence painting rule is not (s.t. active(fence0) 6∈ ∆mp). At time point one the parliament votes for the fence–painting obligation rule to be activated, (O1 = {pvote(act, fence0, 1)}), a fence is built (O2 = {fb}), the monarch issues by decree the fence–building rule to be retroactively deactivated at the time it was activated, cancelling its activation (O3 = {mdecree(deact, fence0, 1)}). Finally, the parliament votes to retroactively dis–enable the monarch from deactivating rules (O4 = {pvote(deact, mon1, 0)}).\nDepicted in Figure 6.4 the model Mmp = 〈Rmp,V mp〉 comprises four versions V mp = 〈V mp0 ,V mp 1 ,V mp 2 ,V mp 3 〉. At version zero time instant zero the parliament votes to add the rule obliging built fences to be painted white, causing a rule modification event (Emp0:1 = {pvote(act, fence0, 1),mod(act, fence0, 1)}) and the institution to transition to the version one (Rmp(1) = 1) where the same modification occurs (Emp1:1 = {pvote(act, fence0, 1),mod(act, fence0, 1)}). In the version one time instant two building a fence (fb ∈ Emp1:2) causes an obligation to paint the fence oblpf ∈ S mp 1:3. At time instant three the monarch retroactively deactivates the fence painting rule (mdecree(deact, fence0, 1) ∈ Emp1:3) causing the institution to transition to the version two"
    }, {
      "heading" : "152 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "(Rmp(3) = 2) where the modification takes effect (mdecree(deact, fence0, 1) ∈ Emp). Consequently, the fence painting obligation rule is deactivated and its effects (an obligation) no longer hold. When the parliament retroactively removes the ability for the monarch to deactivate rules the institution transitions to the final version three (Rmp(4) = 3) where the parliament’s retroactive rule removal takes effect (pvote(deact, mon1, 0),mod(deact, mon1, 0) ∈ Emp3:4) causing the monarch’s modifications to be unravelled (note that at the final version’s third time instant the monarch’s rule modification is unsuccessful even though it was successful in the previous version). Consequently, the fence painting obligation rule and its effects (an obligation) is reinstated by retroactively removing the ability to deactivate the fence painting rule.\n6.4.1. RELATED WORK In this chapter we contributed a framework for reasoning about the legality of rule changes. Key to our contribution is the idea of rule–modifying constitutive rules, which express things like “A counts–as modifying a rule in the past/present/future in context C”. The main idea is to contribute a formal framework for reasoning about the legality of rule change ascribed by constitutive rules. In particular, accounting for the fact that changing rules in the past/present/future affects which rule changes are possible in the first place. Moreover, reasoning about conditions on rule change that are dependent on the rule change effects, such as not criminalising people in the past that were previously innocent (non–retroactively criminalising). Broadly speaking, there are three competing formalisations which look at the legality of rule change. We compare these as follows.\nIn ([100, 102]) a defeasible logic is proposed for temporal rule modification operations."
    }, {
      "heading" : "6.5. DISCUSSION 153",
      "text" : "Operations include, in ([102]), complete rule removal (annulment) and removing immediate rule effects (abrogation). Meta–rules are used to introduce rule changes, which bear similarity to our rule–modifying counts–as rules. However, the meta–rules are only conditional on the social context at a single point in time. For comparison, we formalise richer conditions in rule–modifying constitutive rules. Specifically, rule change being conditional on the social reality in previous institution versions with previous rule–sets, previous institutional states and hypothetical rule changes required to capture a number of important examples we address (such as rule change being non–retroactively criminalising). The focus of these papers is on rule change operations found in the legal domain, rather than the relation between ascribing a social reality using constitutive rules and ascribing rule modifications with constitutive rules conditional on the social reality.\nIn ([159, 160]) electronic institutions are specified in the Z specification language where legislation norms restrict legislative actions. The conditions for legislation norms are less expressive than our proposal and the authors do not consider the interdependency between changing rules in the past/present/future and the built social reality.\nOn the other hand, in [28] rule modifications ascribed by counts–as rules are formalised where there is such a potential interdependency. The focus in [28] is on playing games in a setting where agents can act on the environment and also the rules which govern their actions. Most significantly, the main difference is that in [28] a static setting is formalised where institutions do not evolve over time from state to state or one set of rules to another. In our framework we explicitly look at these aspects not examined in [28].\nSlightly further afield, the MOISE+ organisational framework has been used to construct organisations that act to enact organisational changes, in this case applied to a football team case study [123]. The focus is on the structural organisational elements required to re–organise an organisation. For example, the organisational roles required to assess when a re–organisation is required and what direction the organisational design should take. In contrast to this chapter, the focus is not on constraints making the social actions of norm change possible (or in their case, organisational change). Nor is the meta–level, the change of the rules making rule change possible. Instead, the claim is that they propose an organisational architecture required to make organisational change effective, and their claim is supported with an empirical simulation using a Markov Decision Process to select appropriate organisational changes.\nMore generally, other work looks at the problem of normative system change. This body of research includes: 1. norm change postulates ([28]), 2. detecting and/or resolving norm inconsistencies ([46, 130, 133, 149, 154, 232]) and 3. temporal norm updates ([7, 148]). However, these frameworks do not look at rule change legality ascribed by constitutive rules over time.\n6.5. DISCUSSION This chapter answers the question “how should we define when rule changes count–as legal and valid rule changes?” with a novel formal framework. Our framework supports reasoning about institutional rule change over time, where rule changes are ascriptively regulated by counts–as rules. We presented a novel semantics defining how an institution evolves from one social reality to the next and from one version of rules to another. Under the proposed semantics counts–as rules define the past/present/future social reality. In"
    }, {
      "heading" : "154 6. FORMALISING INSTITUTIONAL ENACTMENT VALIDITY",
      "text" : "turn, rule modifications change counts–as rules in the past/present/future and therefore the constructed social reality. Rule modifications are in turn conditional on the built social reality and their potential effects. To summarise the general answer to the question “how should we define when rule changes count–as legal and valid rule changes?”, according to our formalisation a legal rule change occurs 1. if the rule change is ascribed by counts–as rules, conditional on a context taking into account the potential changes to the context the rule modification would make 2. taking into account past/present/future rule modifications effect on counts–as rules and thus the context in which rule changes are conditional on.\nIn chapters 3, 4 and 5 our Searlian notion of an institution is a social language that ascribes institutional facts, such as obligations and various social notions such as murder. If an institutional fact is ascribed by a brute fact that is an agentive observable event (i.e. an agent doing something) then we say the agent that performed the action had the legal power in the Hohfeldian sense to cause the institutional fact to occur or hold. That is, in previous chapters 3, 4 and 5 we were dealing with the legal power for agents to bring about institutional facts, including obligations when we are dealing with norms. In comparison, in this chapter it is the norms and other counts-as rules themselves that are ascribed from brute facts, or brought about by agents with sufficient legal power. Thus, unlike in previous chapters, this chapter goes beyond merely the notion of legal power to ascribe institutional facts in a limited sense. This chapter, when it talks about legality, is really talking about the legal power to ascribe norms and other counts-as rules themselves, which in turn give agents legal power to bring about further institutional facts and rules.\nIn terms of future work, there are two important formal and application–orientated avenues. From a formal perspective, we considered rule changes conditional on their potential effects in the past/present/future, but not whether affecting the past/present/future in general. Yet, some administrative laws explicitly block retroactive modifications (e.g. [221, Art. 1 Sec. 9 Cl. 3] “No Bill of Attainder or ex post facto Law shall be passed”). In our framework a weak notion of preventing retroactive modifications can be expressed as a lack of retroactive rule–modifying counts–as rules. A stronger notion cannot be expressed blocking rules that allow modifications in the past from being introduced. A natural representation is higher–priority rule modifying counts–as rules (e.g. from a higher authority), but requires a defeasible logic left for further investigation.\nIn principle, the framework’s fixed–point institution model characterisation can be implemented in any adequately expressive language. Future work should investigate if there is a suitable representation in declarative languages, well suited to rule–based reasoning. One candidate is Answer–Set Programming (ASP) [91, 93] as used in the InstAL framework [43]. The main obstacles are finding an adequate representation of the institutions presented in this chapter (i.e. rules that can be modified) and optimising for answer–sets that contain a superset of rule modifications over other answer–sets (thus corresponding to our notion of a model).\n7 APPLICATION\nIf you find that you’re spending almost all your time on theory, start turning some attention to practical things; it will improve your theories. If you find that you’re spending\nalmost all your time on practice, start turning some attention to theoretical things; it will improve your practice.\nDonald Knuth\nThis chapter is loosely based on the following papers: King, T. C., Liu, Q., Polevoy, G., Weerdt, M. de, Dignum, V., Riemsdijk, M. B. van, & Warnier, M. (2014). Request Driven Social Sensing (Demonstration). In A. Lomuscio, P. Scerri, A. Bazzan, & M. Huhns (Eds.), Proceedings of the 2014 International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2014) (pp. 1651 – 1652). Paris, France: International Foundation for Autonomous Agents and Multiagent Systems. [146] King, T. C., Riemsdijk, M. B. Van, Dignum, V., & Jonker, C. M. (2015). Supporting Request Acceptance with Use Policies. In Coordination, Organizations, Institutions, and Norms in Agent Systems X: COIN 2014 International Workshops, COIN@ AAMAS, Paris, France, May 6, 2014, COIN@ PRICAI, Gold Coast, QLD, Australia, December 4, 2014, Revised Selected Papers (pp. 114 – 131). Springer. [147]\n155"
    }, {
      "heading" : "156 7. APPLICATION",
      "text" : "In this dissertation each formal contribution has been developed and assessed against case studies. In this chapter, we describe an application and implementation in the context of the SHINE project under which this research was conducted. The SHINE project aims to provide suitable mechanisms that help obtaining detailed environmental data through user participation. The idea is to get users to participate in providing data by contributing the sensors they own together with any actions the user needs to take such as taking a photograph or ensuring a microphone is turned on. In return for donating their time, taking useful actions and contributing their resources, users are able to receive the valuable information provided by the participation of other users. In this scenario, institutions in the form of contracts require users to contribute their cellphone sensors, via cellphone apps, in order to collect and aggregate spatio–temporal weather data. Not all users will wish to accept these contracts if they are considered to be ‘bad’ in terms of how, when and for whom their cellphone sensors are used. Moreover, a contract might take away liberties the user wishes to maintain or not uphold highly–valued rights. Hence, we apply a version of the multi–level governance compliance checking framework (chapter 4 and 5) in order to automatically check whether these contracts are ‘good’ from the perspective of the user’s wishes over how, when and for whom their cellphone sensors are used.\nThe rest of this chapter begins by describing the application domain in section 7.1. Then we provide an example in section 7.1.1. An architectural overview is given in section 7.2 of how the reasoning framework is used in the context of crowdsensing and describe the implementation. We finish with discussion on benefits and limitations of the application in section 7.3.\n7.1. CONTRACTUALLY CROWDSENSING RAIN DATA The SHINE (Sensing Heterogeneous Information Network Environment) project brings the perspective that there are many existing unused sensors owned by various stakeholders. At the same time, detailed environmental data is required to support governments and citizens in making decisions affected by environmental conditions. Such decisions include determining where to go to avoid flooded areas or deciding how city water infrastructure can be improved based on its current effectiveness. One possibility to provide detailed data is to buy sensors, deploy them and then collect data for a single purpose. But this is costly. SHINE aims to overcome a costly single–minded buy–deploy–sense cycle by re–purposing the existing, unused, sensors owned by independent stakeholders.\nSHINE views the sensors as being heterogeneous and the stakeholders who own the sensors as being autonomous. Sensor heterogeneity means that the sensors’ stakeholders own operate differently. For example, even if we only consider cellphone microphone sensors, one stakeholder might own a cellphone which runs a different operating system and therefore needs to be configured differently (e.g. ensuring data transfer is enabled or recording a video with a cellphone camera) to another stakeholder’s cellphone. One way to address the heterogeneity of sensors is to ask stakeholders to ensure their sensors are configured correctly. Stakeholder autonomy means that we cannot force a stakeholder to donate the use of their sensors or to configure them in the correct way.\nIn SHINE stakeholder autonomy is addressed by contractually obliging stakeholders through bilateral agreement to ensure that they donate and configure their sensors to provide detailed data (e.g. rainfall locations). Specifically, in the context of this dissertation, SHINE"
    }, {
      "heading" : "7.1. CONTRACTUALLY CROWDSENSING RAIN DATA 157",
      "text" : "aims to enact contracts between stakeholders and sensor networks to crowdsource the use of the cellphone sensors stakeholders already own, also known as crowdsensing [87]. Crowdsensing involves crowdsourcing existing sensing devices as a means to cost–effectively acquire detailed data in a variety of domains. For example, crowdsourcing people’s cellphone battery sensors in order to obtain detailed temporal–spatial urban air temperatures [190], using microwave links in cellular networks to obtain detailed rainfall data [189] or using the cellphones in an area to form the wireless network to aggregate and transport the data [158]. The SHINE project uses contractual crowdsensing to acquire people’s cellphone sensors as a means to cost–effectively acquire detailed data in a variety of domains.\nWe look at crowdsensing people’s cellphones to obtain rain data with an implementation in a simulated prototype. In our case, rain data is obtained using a hypothetical cellphone app which uses the cellphone’s audio sensors or communications links between devices to determine rainfall. The hypothetical owner of a cellphone is a human user and as such they have autonomy to join the crowdsensing system, ensure the cellphone sensors are on (i.e. the microphone, GPS and communications links) and that cellphone apps are able to transmit mobile data. The crowdsensing system binds users with contracts (a type of legal institution [208]) for use of their cellphone devices and sensors by imposing various regulations on those users and their cellphones. For example, “a cellphone is obliged to collect rain data when at a specific location and the user is prohibited from turning the sensor off until the data is collected”. In return, a user might be promised access to the rain data obtained by the crowdsensing system. By requesting a large number of users to agree to such contracts and enough users agreeing to those contracts detailed data can be gathered through the crowdsourcing of sensors.\nHowever, if there are many contracts offered for the use of a user’s resource, it is unmanageable for a user to assess the details of each and every one. On the one hand, if a user agrees to a contract without reading the fine print, they are liable to engage in a ‘bad’ (e.g. unfair) contract. For example, a contract which requires the owner to keep audio sensors and data communications on even if the cellphone battery is depleted (i.e. below 10%). On the other hand, if contracts are rejected by default the user might miss out on the opportunity to obtain useful information (rain data). In the second case, the system is likely to not meet its aims if too many users reject contracts on the basis of not having the time to assess them. Consequently, feasibility demands the automation of contract acceptance and rejection. Yet, the automation must respect an owner’s desire to maintain autonomy over how, when and for whom their cellphone contributes data. Unfortunately, existing crowdsensing systems (e.g. [64, 126]) do not let users control how their resources are used. In other words, the user needs a way to specify a policy stating regulations a contract should and should not impose for using the user’s resource. We call such a policy a use policy. Conceptually, fitting with our earlier theoretical work, a contract is a first–level institution governing users in an MAS (the crowdsensing system), whilst the use policy specified by users is a second–level institution governing offered contracts. Hence, a contract sets the space of compliant behaviour required to ensure the collection of crowdsensed data. In comparison, a user’s use policy effectively states how, when and for whom their cellphone may be used, or what obligations and prohibitions a contract may impose.\nTaking a formalised use policy and contract offered to a user as input, software should automatically accept or reject the contract. Acceptance or rejection should be based on"
    }, {
      "heading" : "158 7. APPLICATION",
      "text" : "whether the contract places obligations and prohibitions on a user and their device that the user does not like in certain contexts (e.g. the context that the battery is depleted). We use a version of our computational framework from chapter 4 for checking compliance of lower– level institutions. We implemented an automated reasoner for contract acceptance/rejection based on compliance in a simulated crowdsensing prototype.\n7.1.1. EXAMPLE In the implemented contract reasoner contracts and use policies are specified in a high– level language. In principle, there are many possible contracts and use policies that can be specified. In order to exemplify the application we will present one contract and one use policy adapted from [147]. For simplicity of explanation, all institutions operate at the same level of abstraction and thus the norm abstraction reasoning from chapters 4 and 5 is not employed. In reality, the crowdsensing system owners can specify their own contracts to offer to users and users can specify their own use policies on the basis of which contracts are accepted or rejected.\nThe following contract and use policy is formalised using the institution syntax from chapter 4. The contract is a first–level institution Ic offered by the owner of the crowdsensing system, Ada, to a cellphone stakeholder called Bertrand for collecting data. The contract abstracts away from how the data is collected and sent, since this is dependent on the sensor. Data collection may or may not require user input, for example. The contract is formalised in table 7.1 and comprises the following rules:\n• Ada is interested in collecting rain data for a specific location, a square, and therefore the contract obliges Bertrand’s cellphone to gather rainfall data when he enters the square before leaving the square (rule Contr.1).\n• Once Bertrand’s cellphone has collected rain data he is obliged to send it within one minute (rule Contr.2).\n• If Bertrand enters the square then the contract states that he is forbidden to turn the cellphone’s sensors off until the data is collected (rule Contr.3).\nBertrand has specified a use policy, the institution Iup, formalised in table 7.2. It defines the following second–order norms:\n• Bertrand wishes to be paid for the use of his resource. Every time Bertrand discharges an obligation to send data, it is obliged that the counter–party, Ada, is obliged to pay Bertrand within two minutes where this obligation must be imposed immediately (rule UsePol.1).\n• When Bertrand’s cellphone battery is depleted (i.e. drops below 10%), he wishes to conserve it for more important tasks other than collecting rainfall data. Hence, when the battery becomes depleted it is forbidden to oblige Bertrand to keep the cellphone sensors on, until the battery is replenished sufficiently (rule UsePol.2).\n• Bertrand wishes to maintain the liberty to move freely, hence it is always forbidden to oblige Bertrand to collect data before leaving his location (initial state fluent UsePol.3)."
    }, {
      "heading" : "7.2. SYSTEM OVERVIEW 159",
      "text" : "demands payment for providing data, but Ada’s contract does not offer payment. Secondly, Bertrand wishes to be able to turn his cellphone sensors off when the cellphone battery is depleted, but Ada’s contract requires the sensors to be kept on when collecting data. Thirdly, Ada wants Bertrand to collect data before leaving his location, however, Betrand has stated that he wants the liberty of free movement. Hence, the automated reasoner in this case would reject Ada’s contract on the basis of violating the terms of Bertrand’s sensor use policy.\n7.2. SYSTEM OVERVIEW Reasoning about contracts and use policies, as exemplified previously, was implemented as a part of a simulated crowdsensing prototype. In the prototype a simulated cellphone app is instantiated for each simulated user. Each cellphone app combines reasoning for resource governance and data collection. The cellphone app’s architecture is depicted in figure 7.1 and described as follows in terms of interaction with the crowdsensing system as a whole and other user’s individual cellphone apps:\n1. Before a user’s cellphone is crowdsourced in providing sensing information, a contract is offered to the cellphone to provide rainfall sensing data. The contract is ongoing in the sense that it is not for a single data point but rather multiple data points requested on–demand by the system.\n2. A resource governance component, the multi–level governance compliance reasoning, accepts or rejects the contract based on whether it is compliant with a user’s use policy. Each user has a different use policy and different users may be engaged in different contracts, hence cellphones do not necessarily uniformly accept/reject a contract. If the contract is accepted, then the cellphone joins the crowdsensing system."
    }, {
      "heading" : "160 7. APPLICATION",
      "text" : "3. A cellphone which has accepted a contract is requested for data. When data is requested, the cellphone forms a cluster with nearby users that have also accepted a contract for crowdsourcing rain data in the vicinity. The cluster collectively decides how many and which users collect data, based on the granularity of data required according to the algorithms described by the authors of [158].\n4. Once the data is collected, it is sent using one of two methods. If data delivery speed is unimportant, the cellphone communicates with other cellphones that have accepted a contract to form an ad–hoc network to transmit the data whilst conserving energy (compared to using a traditional cellular network). In this case, users’ cellphones are also crowdsourced in helping to transport the data, where one cellphone receives data from other cellphones, (aggregates) packages it together and forwards it to the next cellphone in the ad–hoc network. If speed is more important, cellphones communicate using the cellular network.\n5. In either case, other users’ devices that are contracted in providing data also receive rain data as a part of the contractual agreement.\nThe prototype crowdsensing system is implemented in the NetLogo1 simulation environment. In our prototype simulation, the population of use policies assigned to each user is\n1http://ccl.northwestern.edu/netlogo/"
    }, {
      "heading" : "7.3. DISCUSSION 161",
      "text" : "configurable. Moreover, the contractual rules are also configurable. This is true both before and during runtime. Consequently, use policies can be edited dynamically to demonstrate their representation and how changing various second–order norms affects the acceptance and rejection of contracts. This supports policy makers (i.e. the owners of the crowdsensing system) in assessing the acceptability of contracts and the level of users likely to join the crowdsensing system before run time. However, the main point of the system is as a proof of concept rather than to conduct empirical research.\nThe visualisation of the prototype is shown in figure 7.2, where each cellphone owner that has accepted a contract and joined the crowdsensing system is depicted as a figure, a map represents the geographical area and rain clouds are represented with blocks in shades of black to light blue. Adjacent contracted sensing devices that have formed a cluster in order to select a single cellphone to collect data for a geographical area, share the same colour. Users that are crowdsourced into forming an ad–hoc network for delivering the data are linked with lines (a central station to which the data is eventually sent is denoted as a circle with alternating black and red inner circles).\n7.3. DISCUSSION In this chapter we have described a proof of concept for the application of the compliance checking system, contributed by chapters 3 and 4, to the contracted crowdsourcing of cellphone sensors for detecting rain levels. In principle, the same system can be used to automatically govern contracts for crowdsourcing other types of data, such as temperature, crowd levels or photographic weather reports. However, although this chapter illustrates the proof of concept, it does not assess the usability of the PARAGon framework and hence its applicability is in principle only. Future work should investigate whether users can adequately describe governance of socio–technical systems and the accuracy of the framework in correctly governing resources to meet user’s expectations. Consequently, this chapter only argued the case for multi–level governance automation’s applicability, in one case and a limited form, to SHINE–like systems.\nTo re–iterate, the main advantage of using the multi–level governance compliance check-"
    }, {
      "heading" : "162 7. APPLICATION",
      "text" : "ing components of the PARAGon framework is that it supports users in specifying how, when and for whom their devices are used. Users are able to state in which contexts specific obligations and prohibitions should (not) be placed on themselves and any counter–party. Moreover, a use policy, by containing temporal second–order norms, is able to declare temporal requirements for a contract to be accepted. For example, a user can specify that they should be paid in advance of being obliged to provide data, keep sensors turned on, etc. Moreover, the abstraction reasoning presented in chapter 3 and 4 was not implemented for this prototype, but in principle would support a user in defining a use policy using abstract terminology they understand. Hence, the PARAGon framework supports users in specifying use policies and automatically accepting or rejecting contracts governed by such use policies.\nThe main limitation of this approach is that a single occurrence of non–compliance in a certain social context is aggregated to the contract being non–compliant as a whole. In reality, contracts are neither always accepted nor rejected outright due to a single flaw from the perspective of one party nor are contracts binarily good or bad. Rather, to an individual there are many levels of preference in how good or bad (compliant) a contract is. Consequently, contracts are often negotiated in order to reach a compromise between two parties. The reasoning implemented does not support negotiating in terms of preferences for contracts for the main reason that use policies do not elicit a preference relation between offered contracts. Consequently, the formalism for compliance checking in multi–level governance would need to be extended to reasoning about different levels of ideality in order to form a partial–ordering between contracts. One way would be to adopt the approach in [230] where contrary–to–duty norms are used to represent different levels of ideality (e.g. you ought not murder, if you murder you ought to do so gently [83]). This approach is in a strictly non–temporal setting and so would need extending to reasoning about temporal norms. Another approach is to combine a temporal logic with a preference logic as in [21], describing preferences over temporal states of affairs (in our case, the obligations and prohibitions imposed by a contract) and do away with higher–order norms altogether. Adopting one of these approaches when combined with the norm abstraction reasoning presented earlier, would enable users to specify abstract temporal preferences over contracts as a use policy.\n8 CONCLUSIONS\nOf course, errors are not good for a chess game, but errors are unavoidable and in any case, a game without errors, or as they say ‘flawless game’ is colourless.\nMikhail Tal\nWhen you see a good move, look for a better one.\nEmanuel Lasker\n163"
    }, {
      "heading" : "164 8. CONCLUSIONS",
      "text" : "This dissertation contributed formal accounts of institutions involved in the governing of governance, which collectively comprise the PARAGon framework. The formalisations focussed on two governance types involved in the governing of governance. Namely, institutional design governance and institutional enactment governance. These governance types are found in the social world, where institution designers are governed in how institutions should be designed and when institutional changes can be enacted. Concerning how institutions should be designed, this dissertation formalised compliance in multi–level governance. Moreover, this dissertation contributed reasoning for diagnosing and rectifying the underlying causes of non–compliant institution designs. Concerning when institutional changes can be enacted, this dissertation formalised secondary legal rules defining the space of possible institutional change enactments. The primary objective, namely formalisation, was complemented with two practical objectives. Firstly, reasoning about realistic institution designs. Secondly, a practical means to reason about governance, which means a computational implementation or an obvious way to build a logical model. Whilst this dissertation contributed prescriptive research, it is nevertheless important to interrogate the intuitions involved. To this end, PARAGon was assessed against a number of real world and imagined institution designs. Together, these contributions aimed to extend the knowledge in the area of institutional reasoning by formalising a new aspect of institutions, in a practical way, and assessing the formalisation intuitions by way of case study.\nCentral to this dissertation’s results was a shift in perspective and a new view on the constitutive rules that comprise institutions. This dissertation’s perspective shifted from institutions guiding agent behaviour typically focussed on in the field, to institutions guiding and governing institutional design and enactment. This dissertation’s formalisations of institutions seen from this new perspective resulted in a new view of constitutive rules’ roles in institutions. Whilst much of the literature viewed the role of constitutive rules as making abstract social actions and other institutional facts possible, this dissertation enlarged the responsibility of constitutive rules. For institutional design governance, this dissertation expanded constitutive rules’ responsibility from defining abstract concepts to also indirectly defining the abstract meaning of concrete norms in multi–level governance. For institutional enactment governance, this dissertation expanded constitutive rules’ responsibility from making social actions and facts possible to making social actions of institutional change enactment possible. These two new views of constitutive rules are central to this dissertation, as we will discuss further in this chapter.\nThe rest of this chapter continues by concluding the dissertation with a discussion of results in Section 8.1, we discuss how the results can be applied to the SHINE project under which this research was conducted in Section 8.2, then we discuss future work in Section 8.3 and finally we reflect on the dissertation as a whole in Section 8.4.\n8.1. DISCUSSION OF RESULTS Whilst it might have appeared that much of governance already had strong logical foundations, in Chapter 1 and Chapter 2 we saw that governing governance was, until now, mostly formless in the literature. Hence, this dissertation aimed to provide precise definitions for institutional governing of governance in terms of institutional design and enactment governance. This lead to the following overarching research question:"
    }, {
      "heading" : "8.1. DISCUSSION OF RESULTS 165",
      "text" : "How can institutional design and enactment governance be supported with formal reasoning?\nThe overarching research question formed the basis for the sub–research questions presented in Chapter 1, which are listed as follows:\n• Sub research question 1: What is a suitable representation to specify institutional design and enactment governance?\n• Sub research question 2: How can we formalise compliance in multi–level governance?\n• Sub research question 3: How can institutional design compliance in multi–level governance be computationally verified?\n• Sub research question 4: How can non–compliant institution designs be explained in order to rectify non–compliance according to the institution designer’s objectives?\n• Sub research question 5: How can we formally define when legally valid institutional change enactments occur?\nIn the remainder of this section we discuss what we did to answer these research questions.\nWHAT IS A SUITABLE REPRESENTATION TO SPECIFY INSTITUTIONAL DESIGN AND ENACTMENT GOVERNANCE? In order to answer this question, we wanted a natural way to capture the representation for temporal institutions operating in the following two governance types identified in Chapter 1:\n• Institutional design governance: multi–level governance where abstract temporal regulations contained within higher–level institutions govern the regulatory effects of lower–level institutions comprising concrete temporal regulations.\n• Institutional enactment governance: the legality of institutional rule change according to secondary legal rules in a temporal setting.\nThe question was answered for both of these governance types by contributing a high– level representation for institutional design governance in Chapter 3 and in a limited form in Chapter 5, and for institutional enactment governance in Chapter 6. The notion of institution used in this dissertation was founded on Searle’s counts–as rules [215] of the form “A counts–as B in context C”. In our case, counts–as rules were used to represent an institution’s temporal dynamics and played a central role for both institutional design and enactment governance. In order to provide a uniform representation for counts–as rules, we based our institution representations on those first proposed by the InstAL framework [42, 43]."
    }, {
      "heading" : "166 8. CONCLUSIONS",
      "text" : "A representation specific to institutional design governance was contributed in Chapter 3 for multi–level governance, where counts–as rules both define which concrete concepts constitute abstract concepts and modal norms. The requirement for a natural representation specific to multi–level governance was met in three ways. Firstly, by offering the option to define explicit or implicit abstract norms governing concrete normative effects. Secondly, by adopting modal norms, which as we discussed in Chapter 3, provide a natural generalisation to higher–order norms for the explicit governance of concrete normative effects. Thirdly, by not requiring any explicitly represented links between concrete and abstract regulations and instead pushing the burden of determining relations between concrete and abstract regulations to a semantics. The temporal requirement was addressed by adopting temporal, immediate and indefinite norms. We showed how institutions defined according to our representation for multi–level governance have an, arguable, natural correspondence to the written law in Chapter 3. In some cases explicit, but controversial, rule formalisation choices were necessary in the case studies examined. Specifically, in order to collapse obligations/prohibitions to non normative social facts, which although we provided argumentation for in Chapter 3, due to having a controversial meaning is a representation choice.\nA representation specific to institutional enactment governance was contributed in Chapter 6. The central representation construct was counts–as rules used to represent Hart’s [117, p.96] secondary legal rules. As we discussed in Chapter 2, following the conceptualisation of Biagoli [20], secondary rules make the social action of changing rules possible in the same way counts–as rules make social actions in general possible. In our representation, we contributed rule–modifying counts–as rules, which ascribe rule modifications in the past, present or future conditional on a social context. The requirement for a natural representation was addressed in two ways. Firstly, by defining a richer social context to represent rule–modifying counts–as rules for real legal case studies. For example, to represent a condition, such as found in EU law [48, Art. 7], on past rule modifications only being possible if they would not, hypothetically, cause an innocent person to become criminalised in the past. Secondly, by not assuming any special representation to define secondary rules which modify other secondary rules, since there is no evidence supporting a special representation being required in the legal case studies we looked at. A number of real–world case studies in Chapter 6 were looked at to show an, arguable, natural morphism between the written law’s secondary rules and our formalisation of those rules in the representation we propose.\nIn summary, PARAGon contributed a representation which limits assumptions for the governance types looked at, by providing a representation which conforms to written or mental institution’s representation and court interpretations. Where necessary we offered a representation choice rather than making strong representation assumptions. There may be other ways to answer this research question with different representations. However, our requirement was for a natural representation for temporal institutions and hence a suitable representation without requiring any unnecessary constructs was contributed. That is, as far as we are able to tell for the case studies we looked at in Chapter 3, Chapter 4, Chapter 5 and Chapter 6, our representation requires no further simplification in order to be natural nor any further complication in order to represent real–world institutional design and enactment governance."
    }, {
      "heading" : "8.1. DISCUSSION OF RESULTS 167",
      "text" : "HOW CAN WE FORMALISE COMPLIANCE IN MULTI–LEVEL GOVERNANCE? In order to answer this question, PARAGon contributed a semantics for operationalising multi–level governance compliance in Chapter 3. The semantics defined when a lower– level governance institution imposing relatively concrete regulations has regulatory effects that are non–compliant with higher–level institutions’ abstract regulations.\nGenerally, the semantics assesses collective regulatory effects of lower–level institutions in different social contexts for whether they violate abstract regulations in higher– level institutions. Our semantics adopts the advice of David Makinson [164], “no logic of norms without attention to a system of which they form part”. That is, norms are understood in terms of the other constitutive rules contained in the same system. Constitutive norms are used to re–interpret the concrete regulatory effects in lower–level institutions for whether they have abstract meanings in higher–level institutions. The abstract meaning of a lower–level institution’s concrete normative effects (caused by its concrete norms), according to constitutive rules, determines if those concrete norms violate abstract obligations and prohibitions in higher–level institutions.\nThe abstract meaning of a lower–level institution’s concrete normative effects is heavily dependent on the social context lower–level institutions’ obligations and prohibitions are imposed in from the perspective of higher–level institutions. To return to a previous example, an obligation imposed by the UK’s Data Retention Regulations to store communications metadata is abstractly interpreted by the Charter of Fundamental Rights’ as unfair data processing in the context that the person who the data concerns has not consented. In turn, unfair data processing is prohibited by the Charter of Fundamental Rights, hence the UK’s Data Retention Regulations institution violates a prohibition on unfair data processing when it imposes an obligation to store communications metadata in the context that the person who the data concerns has not consented. Consequently, not only is the abstract meaning of a lower–level institutions normative effects context sensitive, but so is the compliance of a lower–level institution’s norms.\nSince social contexts are important, we chose to take into account their dynamics. That ism we chose to interpret institutions operating in multi–level governance as state–event transition systems where an institution evolves from one state to another, meaning social contexts also evolves over time. Consequently, our notion of compliance rejects a naïve static comparison between different regulations which would focus on individual rules, in favour of focusing on the combination of regulatory effects and social contexts they are applied in.\nWe contributed one definitional answer to the aforementioned research question, but there may be many more. Alternative definitions may vary significantly due to representation choices. For example, in our representation we adopted modal norms for the simplicity of representing higher–order norms. An alternative norm form, evaluative norms as discussed in Chapter 2, does not have explicit deontic modalities and hence in this case a notion of compliance in multi–level governance might be defined differently. Moreover, there may be regulations found in multi–level governance that are not captured by our formalism.\nTo summarise, we answered this research question by defining compliance in multi– level governance as follows. An institutional design is compliant in multi–level governance if and only if its concrete regulatory effects in different social contexts have compliant abstract meanings in higher–level institutions according to those higher–level institutions’"
    }, {
      "heading" : "168 8. CONCLUSIONS",
      "text" : "interpretive counts–as rules. This notion of compliance accounts for the different concrete and abstract ontological views between governance levels and the dynamic meaning of lower–level regulatory effects from the perspective of higher–levels.\nHOW CAN INSTITUTIONAL DESIGN COMPLIANCE IN MULTI–LEVEL GOVERNANCE BE COMPUTATIONALLY VERIFIED? In order to answer this research question, PARAGon contributed a computational framework for determining compliance in multi–level governance, presented in Chapter 4. The computational framework provided a mapping from the formal representation of institutions in a multi–level governance relationship and their semantics to a corresponding executable ASP program. Institutions were represented in the computational framework as rules in a similar fashion to their formal counterparts. The multi–level governance semantics were represented as general ASP rules to capture the temporal dynamics of institutions and specific ASP rules to represent the semantics for the abstraction of norms. Effectively, the ASP rules representing norm abstraction semantics flattened the deontological counts– as function, which defines how concrete normative effects are interpreted more abstractly, presented previously in the formal component of the framework for multi–level governance compliance (Chapter 3). Whist a non–flattened and more general form might have been preferable, we found it was not possible due to current limitations of ASP. Naturally, we contributed theorems and their proofs demonstrating that the computational framework is sound and complete with respect to the formal framework for multi–level governance compliance checking.\nThe computational framework was complemented with an implemented compiler. The compiler built on the InstAL framework’s [42, 43] implementation, which allows institutions in a multi–level governance relationship to be specified in a high–level non–procedural language and compliance to be automatically checked. As we saw, compliance in multi– level governance is highly dependent on social context. Consequently, keeping with the aim of practicality, this means through our implementation we can reveal to institution designers in which social contexts their regulations are non–compliant. If certain social contexts are unreachable in reality and therefore compliance for these contexts is irrelevant, a user can decide based on the presented contextual information whether to ignore these contexts. Since we used ASP, it is possible domain knowledge can be incorporated into the resulting ASP programs in order to constrain compliance checks to only reachable social contexts. Consequently, the practical benefits were realised with an implemented and corresponding computational framework, which provides automated and contextualised compliance checks to users.\nWe only contributed one answer to this research question. Other corresponding computational frameworks may be possible. For example, using a higher–order logic as a meta– language to provide an axiomatisation of our formal semantics and a higher–order logic theorem prover to act as the computational implementation. Such an approach has been used to embed other logics, such as modal logic [18]. Speculatively, this approach could yield greater benefits by potentially enabling a computational framework comprising general rules/axioms rather than a flattening of the deontological counts–as function, which requires re–compilation every time institutional rules are changed. An entirely different answer to the research question could be to not provide a computational implementation,"
    }, {
      "heading" : "8.1. DISCUSSION OF RESULTS 169",
      "text" : "but to instead investigate the computational aspects of the formal framework. For example, decidability and complexity. In effect, our implementation shows our formal semantics is decidable, since ASP is decidable for finite Herbrand universes [92] and we proved a correspondence between the ASP implementation and the formal framework. However, an alternative approach could have been to contribute a decision procedure, which would have removed the need for elaborate and recursive transformations between the formal representation and ASP–based implementation. Hence, there may be alternative and perhaps more elegant solutions to this research question.\nBy contributing a computational framework, we were able to formalise and execute a substantial portion of two related real–world multi–level governance legal cases. Specifically, the first case where the EU Data Retention Directive was enacted in 2006 [71] to coordinate EU member state legislation in requiring communications metadata was stored and where the UK’s implementation, its Data Retention Regulations [226] were enacted and found to be compliantly implement the directive in 2009. Moreover, the second case where in 2014 the Data Retention Directive was found to be non–compliant by the European Court of Justice [70] with the European Charter of Fundamental Rights [72].\nBy executing the case study, using interpretations provided by court judgements where possible, we were able to evaluate both our formal and computational multi–level governance compliance checking frameworks. One caveat is that the results for executing a case study can be highly dependent on how institutions are represented. Hence, we opted for a formalisation that arguably has a clear correspondence to the written law and court judgements. Bearing this in mind, we were able to see that we gained the same results as the real–world judgements of the European Court of Justice, using what we argue is a natural corresponding representation. Consequently, we contributed a computational implementation that demonstrates the formal definitions of compliance in multi–level governance are arguably ‘correct’ and provides practical benefits with automated compliance checking.\nHOW CAN NON–COMPLIANT INSTITUTION DESIGNS BE EXPLAINED IN ORDER TO RECTIFY NON–COMPLIANCE ACCORDING TO THE INSTITUTION DESIGNER’S OBJECTIVES? In order to answer this research question PARAGon contributed a formal definition of explanations for non–compliant institutional designs and a computational mechanism to induce those explanations in Chapter 5. That is, by generating explanations, treating those explanations as hypotheses for rectifying non–compliance and then testing those hypotheses for support over a trace of events and therefore multiple social contexts. The contribution means non–compliance can be automatically rectified by adopting the explanatory rectifications for non–compliance as institutional design changes.\nThe search for explanatory non–compliance rectifications was formalised as an Inductive Logic Programming (ILP) problem. We addressed the inconvenient idea that an institution designer prefers explanatory rectifications for non–compliance that keep an institution design as close to their original intentions, in order to ensure the proposal is of practical benefit. The idea being that our formal notion of explanatory rectifications for non–compliance are those that minimise changes to an institution’s constructed social realities. Thereby, explanations for non–compliance offer rectifications that keep as closely as possible to the designer’s original intentions, assuming those intentions were correctly captured by the"
    }, {
      "heading" : "170 8. CONCLUSIONS",
      "text" : "original institutional design. Moreover, we formalised the notion of explanations as also optimizing, to a secondary degree, institutional design change simplicity. This means explanations are preferred if they are more compact, in the sense of optimising fewer rule changes explaining greater instances of non–compliance. Overall we formalised explanations as comprising four types of rule change which can be combined: adding rules, removing rules, adding rule constraints and removing rule constraints. Hence, we formalised explanatory rectifications for non–compliance as changes to rules that adhere to an institution designer’s intentions, and are the simplest and most compact explanatory hypotheses.\nWe addressed explaining non–compliance from a practical perspective. That is, by implementing the search for the hypotheses that provide possible explanations and rectifications for non–compliance, as an ILP problem in ASP using existing embedding techniques. The implementation alleviates an otherwise arduous task of an institution designer in trying different institutional re–designs for the one which rectifies non–compliance in the best way according to our own optimisation criteria (closeness to the original design and simplicity). The general idea of the implementation is to take an ASP program defining a non–compliant institution and compile that program into another ASP program where hypotheses for rectifying non–compliance can be generated and tested for support. For an institution designer, the implementation provides flexibility in specifying for which social contexts rectifying non–compliance should be found and hence guide the process of finding explanatory rectifications.\nIn order to see how our formalisation of explanatory non–compliance rectifications behaved, we formalised a case study based on a fictional institution for a socio–technical system which in turn was governed by real–world and fictional laws. The system discovered a number of simple explanations for why the socio–technical system institution was non–compliant. These included the discovery of general design faults, which might potentially explain further issues the designer does not desire, removal of problematic rules and changes to existing rule constraints, and explanations comprising rule additions to ensure regulatory effects before rectification would still exist after rectification if they do not cause non–compliance.\nWe only contributed one possible answer to the aforementioned question based on the idea of inducing hypotheses for non–compliance. There may be other possible answers, such as by defining what constitutes an explanation differently. For example, rather than defining explanation as hypotheses comprising institutional rule changes, one possibility is to combine argumentation and abduction to provide explanations as causal stories (e.g. as proposed for legal cases [19]). In this approach, an explanation is a chain of inferences showing how abduced probable causes of a true proposition provide an explanation of that proposition. Hence, a narrative causal chain could instead be used in this way to provide explanations for non–compliance. We do not attempt to exhaust all the feasible ways to define explanations for non–compliance, but note formal argumentation could provide alternative answers.\nTogether, the formal notion of explanations for non–compliance and the implementation for finding such explanations complement each other. The formal aspect can be tested by the implementation with various case studies to determine if the formal notions give intuitive results. The practical aspect is supported by addressing the need to find those solutions for non–compliance which minimise design change and offer the simplest explanations for"
    }, {
      "heading" : "8.1. DISCUSSION OF RESULTS 171",
      "text" : "understandability. We tested both of these aspects using a case study combining fictional and real–world rules.\nHOW CAN WE FORMALLY DEFINE WHEN LEGALLY VALID INSTITUTIONAL CHANGE ENACTMENTS OCCUR? In order to answer this research question PARAGon contributed a semantics that defined when institutional change enactments are valid in Chapter 6. In this context, by institutional change enactment we mean changes to an institution’s rules over time. An institutional rule change is valid if it is ascribed by an institution’s secondary rules. These secondary rules were represented as a special type of counts–as rule of the form “A counts–as modifying a rule in the past/present/future in context C”, which ascribe modifications to counts–as rules including other secondary rules. The semantics defined when social actions of institutional counts–as rule changes are ascribed, including to other secondary rules, and how the institution transitions from one version to another when rule changes are validly enacted.\nThe formalisation gave meaning to secondary (counts–as) rules. The secondary counts– as rules we formalised include a condition on a richer social context not given any formalisation, as far as we are aware, previously. In particular, social contexts acting as conditions on past institutional states, past institution versions and hypothetical rule change effects. These conditions were used to represent cases such as institutional rule changes occurring conditional on those changes not criminalising formerly innocent people in the past. In order to deal with such expressivity we proposed a semantics that defines a rule change as occurring if the necessary conditions are met and all of the effects of the rule change are consistent with those necessary conditions.\nWe acknowledged that in reality secondary rules can make it possible for past, present and/or future rule changes to be made including to other secondary rules. Consequently, our semantics dealt with difficult cases where changes to secondary rules potentially cause other, previously established, rule changes at various points in time to be unravelled or potentially further rule changes to be made. Moreover, our semantics handled cases where complex interactions between rule changes would, in a classical setting, cause inconsistency. For example, the case where the only rule ascribing rule modifications ascribes its own removal. In our case, we took the perspective that if a rule change causes inconsistency with the conditions for its own ascription then the rule change is not legally ascribed (i.e. is invalid) and thus does not occur in the first place.\nWe tested our definition against a number of case studies based on EU and UK law, as well as edge cases where we would expect there to be issues with an incorrect definition. The real world case studies demonstrated that through a simple representation we were able to reason about difficult kinds of rule change governance. For example, hard constraints on there being no changes to criminalising laws in the past, requiring a form of hypothetical reasoning to classify rule change effects. From the edge cases we saw that complex cases where rule changes interact, which are conceivably difficult to reason about without a mechanical process, are arguably handled intuitively by our formal account.\nWe did not attempt to exhaustively answer the research question. Instead, we offered a single formalisation of when institutional rule changes occur according to secondary rules. Other formalisations may be possible and, indeed, they exist for rule modifications in non– temporal settings [28] and rule modifications in temporal settings [100, 102] but with less"
    }, {
      "heading" : "172 8. CONCLUSIONS",
      "text" : "expressive secondary rules. Moreover, an equivalent definitional answer could be given to this research question using a different formalisation. It’s possible our semantics could be defined on top of an existing logic, either at the meta–level or object level. For example, we could try to adopt or modify default logic [203] by viewing conditions on rule change being ascribed as defaults that must hold before and after rule change. In our case, we chose to contribute a formal definition with a semantics that stands on its own, requiring no understanding of pre–existing logics aside from some rudimentary notions of sets and functions.\nTo summarise, we contributed a formal definition to answer this research question. Informally, a rule change occurs if and only if it is ascribed by secondary legal counts–as rules conditional on a social context, which can include hypothetical rule change effects, that holds before and after the rule change takes place. Our account was assessed against a number of case studies, including edge cases to assess the intuitiveness of results.\n8.2. APPLYING THE RESEARCH TO THE SHINE PROJECT The research conducted in this dissertation was supported by the SHINE project of TU Delft. The project aimed to develop techniques for acquiring and coordinating large numbers of heterogeneous data resources that already exist in the environment (e.g. cellphone sensors, radars and people) in order to collect environmental data. This dissertation contributes techniques for formalising governing governance, which is arguably suitable for governance and coordination of ‘SHINE–like’ sensor systems.\nAn implemented application of the research was presented in Chapter 7 for a simulated prototype as a proof–of–concept. In this application automated compliance checking in multi–level governance was used to determine if contracts offered to individuals to crowdsource their cellphone sensors should be accepted on the basis of being compliant with use policies. These use policies would be, conceivably, specified by cellphone owners stating how, when and for whom their cellphone sensors may be used. In this setting, the research was applied to giving people control over how their sensors are contributed to crowdsourcing systems without requiring sensor owners to arduously read the fine–print of the offered contracts.\nThe research in Chapter 5 was also applied to a fictional institution used to govern a crowdsourcing system as a whole, which in turn was governed by external laws partially inspired by real–world legislation. In this application we demonstrated an automated system to find explanations for why the crowdsourcing system institution design was non– compliant with external laws.\nThe research on compliance in multi–level governance in Chapter 3 and Chapter 4 was applied to a real–world multi–level governance case study. In this case we showed how the PARAGon framework was able to represent and reason about the EU Data Retention Directive [71] and its non–compliance [70] with the EU Charter of Fundamental Rights [72] due to requiring the storage of people’s communications metadata without their consent, which took away the right to respect for private and family life. In this case, the relevance was showing how we can check the compliance of laws concerning the collection of data, in much the same way a SHINE institution, which aims to guide MAS participants in contributing data, might be found non–compliant with similar external human rights and liberties laws. Hence, we applied the framework to a simulated prototype and case studies"
    }, {
      "heading" : "8.3. FUTURE WORK 173",
      "text" : "concerning SHINE–systems and data collection. Outside of these realised applications, the multi–level governance compliance reasoning presented in Chapter 3 and Chapter 4 offers a potential way to contribute automated reasoning for an architecture applied to governing heterogeneous sociotechnical systems. SHINE is concerned with heterogeneous sensor systems, which comprise different types of sensors. Rather than attempting to apply a single institution to govern heterogeneous sensors, which due to different behaviours might be unsuitable, multi–level governance offers a way to treat heterogeneous groups of sensors (e.g. crowdsourced cellphone sensors, a group of weather radars, etc.) as separate homogeneous self–governing sensor sub–systems. The idea is that each sensor sub–system has its own institutional governance designed by the stakeholders of that sub–system (e.g. sensor owners). Then, a SHINE institution is designed to govern institutions governing each sensor sub–system towards over–arching aims with abstract regulations. Thereby, multi–level governance delegates the design of sensor sub–system institution designs, removes problems of a single ‘one–size–fits–all’ institution design and coordinates separate sub–system institution designs towards overarching data collection objectives. In this scenario, this dissertation supports governance of sensor sub– system institution designs with automated multi–level governance compliance checking, but further investigation is needed to determine if automating such governance can work for heterogeneous sensor ‘systems of sub–systems’ in practice.\nThe institutional enactment governance presented in Chapter 6 provides a potential way for stakeholders in SHINE sensor systems to specify flexible and automated governance of sensor systems’ institutional change enactment. This means, system stakeholders are able to use the formal reasoning to determine how institutional changes can be enacted according to an institution’s secondary rules when changing sensor aims require changed regulations. Moreover, stakeholders have flexibility in defining the rule change process for a given governed sensor system. The main benefit being, owing to heterogeneity between different sensor systems, alternative rule change processes for each sensor sub–system can be defined and reasoned about. For example, one system’s rule change process can be defined as a direct democratic vote with certain constraints (e.g. not removing the right to a democratic vote from participants in the past) and another as requiring elected technocrats to make a collective decision. Hence, although untested, our secondary rule formalisation potentially allows automated operationalisation for a diverse range of governance and regulatory change enactment styles to be defined for different sensor systems, in a way that enables those system’s regulations to adapt, as deemed appropriate, to new aims and needs.\nNone of this is to say that this dissertation contributes an exhaustive application to the governance of SHINE–like sensor systems. However, what has been shown is that in at least one area, the governance of contracts for crowdsourcing, the framework was applied in a prototype. Moreover, the framework has been applied to case studies relevant to sensor systems such as those envisaged by the SHINE project. Finally, there are potential avenues for future applications to SHINE–like systems.\n8.3. FUTURE WORK Future work is split into analysis of the formal frameworks contributed by this dissertation, improvements to this dissertation’s contributions and new research lines influenced by this dissertation’s contributions.\n174 8. CONCLUSIONS\n8.3.1. ANALYSIS The formalisms developed in this dissertation have been shown to meet various properties, such as there existing a sound and complete logic-programming implementation. Such properties were provided in order to demonstrate the expectations, set out in the introductions of the relevant chapters, have been met. However, there still remains work to be done on general properties that give a better understanding of how institutions behave under the defined semantics.\nThe formalism defining compliance in multi-level governance, in Chapter 3 could be analysed for properties relating to inconsistency, (non-)compliance and redundancy. Inconsistency can occur in two senses. The first type of inconsistency that should be investigated is, what we can call, non-deontic inconsistency where due to the operations defining the semantics being undefined in some cases (e.g. the event generation operation) there is consequently no model for those cases. The second type of inconsistency is what we call deontic inconsistency, where it is impossible to discharge all obligations/prohibitions, or worse that some obligations/prohibitions are necessarily violated no matter what event occurs. Properties that coincide with the dischargement and violation of abstract and higher-order norms should also be investigated. For example, if an abstract norm is violated then what concrete norms, if any, must also necessarily be violated and vice versa? Finally, an important aspect of an institution or normative system addressed in the literature is redundancy [22, 54] – when would removing a counts-as rule have no effect whatsoever on how the institution evolves over time (for all traces of observable events)? Whilst norm redundancy has already been formalised and investigated, it would be interesting to investigate given the novel semantics of the multi-level governance compliance formalisation if there are general properties that coincide with a rule being redundant. Investigating properties relating to inconsistency, (non-)compliance and redundancy for the formalisation of compliance in multi-level governance would give a better understanding of how the formalisation behaves, in particular given the novel abstraction semantics, and some useful properties for understanding how to improve an institution operating under those semantics.\nThe formalism defining the legality of rule change, in Chapter 6, could be analysed concerning (il)legal rule change, temporal dynamics and rationality. To recap the informal notion, a rule change is legal “1. if the rule change is ascribed by counts–as rules, conditional on a context taking into account the potential changes to the context the rule modification would make 2. taking into account past/present/future rule modifications effect on counts–as rules and thus the context in which rule changes are conditional on.” However, such informality still leaves future investigation of formal properties that coincide with (il)legal rule change. Moreover, in terms of temporal dynamics, it is important to analyse under which conditions changes occurring in the future can affect the past, including past states and also the legality of past rule changes. In particular, concerning both temporal dimensions of the formalism. On the one hand we showed future rule changes can make past changes in the same version become (il)legal and therefore potentially no longer occur. On the other hand we did not ascertain under which fragments of the language future rule changes are guaranteed to not affect the legality of rule changes in past versions. Further properties should be analysed concerning rationality. Famously, the AGM belief revision postulates [3] define a notion of rationality for belief revision operators and a related set of postulates has been proposed for norm revision [25]. It is important to analyse"
    }, {
      "heading" : "8.3. FUTURE WORK 175",
      "text" : "whether our formalisation of ascriptive legal rule change meets these postulates. However, since we are dealing with rules that ascribe the legality of changing other legal rules and not just ‘straightforward’ norm change, it is possible that the postulates are not met and moreover that a slightly different set of postulates may be more appropriate that do hold for our formalisation. Investigating properties relating to the legality of rule change, temporal dynamics and rationality would give a better understanding of what our formal definitions really mean at a deeper level.\nIn addition to analysing the behaviour of each individual formalisation, it is also important to formally compare with other formalisations. One possible way to do this would be to abstract the semantics. For example, by using Tosatto et al’s [223, 224] graph-based formalism where obligations, permissions and institutional facts are nodes and rules are edges between those nodes. The idea would be to take existing abstractions of formalisms using Tosatto et al’s abstraction and compare them to an abstraction of the formal semantics contributed by this dissertation. The benefit would be not just a formal comparison between the PARAGon framework and other frameworks, but also a comparison where patterns of reasoning and differences between them are visualised. However, this type of analysis requires further investigation since there, to the best of our knowledge, appears to be no work on abstracting systems of the ‘type’ we formalise. In particular in Chapter 6 where an institution evolves over two timelines and there can be complex interactions between past, present and future institutional facts. In order to analyse differences between our formalism and others, a means to abstract our semantics should be found, which is a significant undertaking and left for future work.\n8.3.2. IMPROVEMENTS PUTTING AUTOMATED MULTI–LEVEL GOVERNANCE INTO PRACTICE In Chapter 3 and Chapter 4 we looked at reasoning about compliance in multi–level governance. A focus was placed on reasoning about abstraction at different levels of governance. This aspect of the PARAGon framework was assessed against a real–world case–study for the governance of human societies and governments.\nAn avenue for future work is to determine if the same framework can be applied to artificial societies. This would result in an formalised and automated operationalisation of two proposals. First, the proposal of what Pitt et al. [197] call polycentric governance for socio–technical systems. Here, they argue that in complex artificial MAS a single one–size– fits–all institution is inadequate, since different localised parts of the MAS may need different regulations. Therefore, in our own wording, separate lower level institutions should be designed appealing to subsidiarity. These institutions should be compliant with overarching institutions abstractly prescribing what regulations should be implemented. Secondly, Dignum et al. propose the OMNI design methodology framework for institutions/organizations governing artificial MASs [62]. Here, the design methodology is focussed on a regulation abstraction hierarchy where at the most abstract level statutes comprising values, objectives and contexts should be designed. Then, abstract norms implementing these statutes. Implementing the abstract norms are concrete norms. In this methodology an assumed function that concretises abstract norms is used. PARAgon offers a semantics for reasoning about abstract norms that could potentially be used to weaken or remove the assumption of a concretising function. Future work should extend and apply the PARAGon"
    }, {
      "heading" : "176 8. CONCLUSIONS",
      "text" : "framework to further operationalise and develop the ideas presented in these papers.\nENHANCING INSTITUTION ABSTRACTION REASONING Another important future development is extending the semantics for abstract regulation reasoning presented theoretically in Chapter 3 to support ontological alignment of institutions. In our proposal lower–level institutions’ regulatory effects were re–interpreted at the abstract level defined by higher–level institutions. For example, obliging storing communications metadata in a lower level institution is abstracted to obliging storing personal data in a higher–level institution. In one sense, this means lower level institutions’ regulations were aligned with the abstractions defined by higher–level institutions.\nHowever, we assumed that the concrete terminology shared by lower and higher–level institutions have the same meaning and are already ontologically aligned. For example, storing metadata in the lower–level institution coincides with storing metadata in the higher– level institution. Thus, if the lower–level obliges storing metadata, and the higher–level views storing metadata as storing personal data, then from the higher–level institution’s perspective the lower–level is obliging that personal data is stored. In general, ontologically aligning institutions is an important problem that needs addressing for comparing regulations between institutions.\nAside from alignment, abstraction reasoning should also be improved to address further deontic concepts. We focussed on how to abstract obligations and prohibitions, based on counts–as rules describing the abstraction of events and fluents. However, there are many other deontic concepts, as described by Hohfeld [120], that play an important role in institutions. They include accounting for the concepts of right and liberty. For example, a right to life correlates with a prohibition on others to take life away. The liberty to choose who you love depends on there being no prohibition on choosing who you love. Each of these might be involved in multi–level governance in the form of obliged/prohibited rights and liberties, or rights and liberties represented in constitutions which require obligations/prohibitions to (not) be imposed in lower–level institutions. Such Hohfeldian notions of rights and liberties should be investigated for abstracting and governing.\nLikewise, concepts of legal power should also be accounted for. Legal power, is the ability to (legally) affect an institution according to ascriptions provided by constitutive rules [136, 163]. To give an example in a multi–level governance context, a higher–level institution governing a marriage institution could state that “it is obliged that newly weds have the power to annul their marriage”. From the perspective of this dissertation, an interesting aspect is determining from a relatively concrete lower–level institution (such as a marriage institution) whether concrete rules and regulations constitute an abstract power such as newly weds having the legal power to annul their marriage. Moreover, concepts related to power should also be accounted for. Namely, disability (the opposite of power), liability (you are only legally liable if you have legal power) and immunity (without liability you are immune from not fulfilling norms you have no legal power to do so).\nOne possibility to incorporate all of these concepts is to build on the logics of Hohfeldian rights and liberties [137–140], and institutional power [136]. That is, we could try to combine these formalisations of Hohfeldian legal concepts with multi–level governance formalisation in order to govern instances of Hohfeldian concepts."
    }, {
      "heading" : "8.3. FUTURE WORK 177",
      "text" : "PUTTING THE ASCRIPTION OF LEGAL RULE CHANGES INTO PRACTICE The formalisation in Chapter 6 provides a fixed point characterisation for ascribing legal and valid rule change. The fixed point characterisation provides the mechanism to find models, which can be implemented in any sufficiently expressive language. Yet, there remain practical concerns for the formalism to be usable in a real–world setting.\nAn obvious improvement is to address the lack of implementation and complexity analysis. Many of the constructs in the formalism are similar to Event Calculus constructs [150] (e.g. a fluent holds if it is initiated until it is terminated). An axiomatisation for an Event Calculus (version) exists in ASP [141]. Hence, one way to implement the formalism would be to provide an Event Calculus–like axiomatisation in ASP. A benefit of this approach is that there are already existing complexity results for ASP [66, 74] which can be used to assess the complexity of an axiomatisation.\nAnother problem that needs addressing is the assumption that, in the formal framework, all rules which can and/or will be added/removed from an institution are fully characterised by an institution’s event generation and state consequence functions. It makes more sense in practical terms to allow the functions describing rules or a database of rules to be updateable with new rules. Then, with new rules added to the database, rule enactment actions can be undertaken by agents to ensure the rules become a valid and recognised part of the institution. If an ASP approach is taken to implementing the formalism, then a logic program would need to be updateable with new rules during run–time. One possibility for updating a rule database is to build on recent advances in answer–set programming for dynamic domains [90].\nLEGAL INTERPRETATION In this dissertation we looked at the legality of institution designs and rule change but we did not investigate legal interpretation, which is closely related to the topics we did investigate as we will discuss. Legal interpretation is the act of courts deciding what various concepts mean, such as to determine the applicability of a rule or whether actions of an agent constitute legally obliged behaviour, even if the written law does not make explicit recommendations for such cases. Legal interpretation is important, since it allows legal norms to be adapted to unforeseen circumstances and changes to the understanding of various concepts by society not represented in the written law. For example, a categorical prohibition on storing private data might have previously meant preventing the storage of communications content between people, but as time went on it became clear that storing communications meta–data is also an infringement on privacy – hence a court would then update the notion of private data to include meta-data.\nAs Boella et al. show [23, 24] legal interpretation is, formally, a case of rule change. Specifically, whilst legislators have the legal power to change ontological and regulative rules at “design–time”, courts have the legal power to change only ontological rules at “run– time” (i.e. as cases are brought before the court). Boella et al. provide a formal mechanism for re–interpreting the ontological meaning of literals in the antecedent of regulations (the applicability of the rule) and the consequent (the obliged actions or state of affairs) based on interpreting the original goal of the legislator (i.e. the intention behind the law). Hence, legal interpretation is an important aspect of rule change that ensures laws, at run-time, can be correctly applied and understood according to the goals behind enacting those laws at design–time."
    }, {
      "heading" : "178 8. CONCLUSIONS",
      "text" : "Relating to these aspects, in this dissertation we contributed formalisms that can be used to reason about the effects of legal interpretation. In Chapter 3 and Chapter 4 we looked at interpreting the abstract meaning of detached deontological statements based on ontological interpretations provided by courts. But, the ontological interpretations were formalised a– priori as counts–as rules (e.g. meta–data count-as personal data) in the case study on EU multi-level governance.\nWe did, on the other hand, investigate the generation of hypotheses, using ILP, for explaining and rectifying non–compliant institution designs in Chapter 5. Effectively, ILP synthesised changes to ontological and deontological rules in order to ensure the regulatory effects of an institution do not violate the regulations of other institutions. Courts synthesise interpretations, which are effectively changes to the existing set of ontological rules. But, suitable legal interpretation ensures the law is applied and interpreted correctly with respect to its intention, which is different from our purpose of resolving non-compliant institution designs.\nLater, we investigated rule change legality and its effects on how an institution evolves in the past/present/future in Chapter 6. Since legal interpretation is a case of rule change, the formalisation of when rule changes are legal could be used, with some enhancements, to reason about when legal interpretations are legal. For example, if we want to reason about a statement such as “a court can introduce a new counts-as rule so long as it is not regulatory and by introducing that rule the goal of the law being interpreted is promoted”. By combining the work on interpreting the abstract meaning of regulations in Chapter 3 and Chapter 4 and the work on legal rule change in Chapter 6 we can potentially capture the effects of legally-valid legal interpretation, which is the addition of ontological rules ascribed by rule change regulating counts-as rules, on the abstract meanings of regulatory effects. Our work is related to reasoning about legal interpretation in terms of its effects and its legality when viewed as a type of rule change.\nHowever, this dissertation did not investigate how legal interpretations could be generated in order to support the original goal of a law when it is unsupported according to the run–time interpretation of legal concepts. Potentially, existing approaches by Boella et al. [23, 24], which use defeasible logic to interpret the law, could be adopted to provide a more complete system for reasoning about institutions, their interpretation and governance.\n8.3.3. NEW RESEARCH LINES SOCIAL COMMITMENTS Whilst this dissertation looks at prescriptions from the perspective of when institutional rule enactment and institution designs are legal, a similar type of prescription is social commitments. Social commitments, such as promises, emerge between agents. Social commitments establish relationships between parties and counter–parties and expectations between agents. In a social commitment, when one agent, called the debtor, commits to bring about X for the benefit of another agent, called the creditor, then the creditor has the expectation that X will be brought about for their benefit and the debtor knows that the creditor has such an expectation [36, 37]. The creditor, has flexibility and autonomy to bring about X in any way they choose including through delegation to another agent. To give an example from [243], a social protocol states whereupon a potential buyer requests a quote for electronic goods, the potential seller is committed to providing the quote and the"
    }, {
      "heading" : "8.3. FUTURE WORK 179",
      "text" : "buyer expects to receive a quote. Social commitments should be formalised since they provide a powerful and ubiquitous means for agents to cooperate in a flexible way on the basis of mutual understanding, which supports social interaction planning whilst preserving participants’ autonomy. Furthermore, social commitments allow social endeavours’ progress to be assessed with in–built key performance indicators (KPIs), such as ‘fulfilled’ and ‘violated’. Hence, social commitments have seen formal work in the normative reasoning sphere for creating new social protocols from existing commitment–based protocols [16, 94], planning the fulfilment of commitments on the basis of expectations and mutually held beliefs [243], addressing conflicting commitments [2], and converging on a mutual understanding of commitments and expectations [39], to name a few.\nIn this dissertation we looked at how to synthesise institution changes to rectify non– compliance and how to determine when rule changes are valid, such as to support planning valid legal rule changes. As we saw in Chapter 6, creating and altering rules makes it (im)possible to create and alter rules. This is just as true for social commitments. To give one example, in order to plan a larger project a project manager needs to get various project participants to commit to giving estimated work hours required for deliverables. When participants fulfil commitments, a project manager is able to plan further commitments. Or, to give another example, by creating a social commitment for the trading of goods and services it is possible for each participant to assess the trust they should place in the counter–party after the commitment is fulfilled or violated. Consequently, creating and fulfilling/violating social commitments makes it possible to determine whether further commitments should be created on the basis of new information or increased trust. However, whilst commitment creation and fulfilment is entwined with further commitment creation and planning, planning the synthesis of commitments has not been addressed taking into account this interdependence as far as we can see.\nThis dissertation offers ideas which can be built on to create such plans. Chapter 6’s formalism shows that rule creation (e.g. commitments) is non–trivial given pre–existing rules which ascribe rule changes, where rule changes enable/disable further rule changes. An ASP axiomatisation of Chapter 6’s formalism as outlined previously would potentially support planning rule changes. ILP applied to rule synthesis for compliant institution designs contributed by Chapter 5 can potentially be used as a basis for synthesising the right commitments for a given problem. But, the difficulty is determining how to synthesise commitments given that setting up expectations and/or agents fulfilling those expectations is necessary to build trust and meet sub–goals for further commitments to be planned for meeting an overarching social goal.\nFORMALISING THE SUBSIDIARITY PRINCIPLE IN MULTI–LEVEL GOVERNANCE This dissertation looked at formalising compliance in multi–level governance. Subsidiarity, the principle that what can be legislated at the local level should be left up to the local level, is also an aspect of multi–level governance. This dissertation contributes reasoning for abstract regulations which are used to realise subsidiarity, but this dissertation does not investigate subsidiarity itself.\nYet, subsidiarity is an important principle. Ostrom [185, p.90] argues that regulations must be based on local conditions. Whilst regulations should be coordinated across groups/jurisdictions (e.g. carbon emission targets), Wilson argues [238] implementation should"
    }, {
      "heading" : "180 8. CONCLUSIONS",
      "text" : "be left to the lowest–level jurisdiction where implementation is effective. By involving local lay knowledge, as opposed to a one–size–fits–all approach, policies are more effective by being enhanced with learning from past policy decisions [181, 193, 242]. In general, a one–size–fits–all approach is argued as resulting in failure [187], which the subsidiarity principle aims to address.\nThe same arguments in favour of subsidiarity for human society governance are made for the governance and design of sociotechnical systems, such as smart grids. Frey et al. [85] and Pitt et al. [198], propose a design/governance framework for socio–technical systems, where higher–levels provide over–arching aims but, adhering to the principle of subsidiarity, delegate to lower–levels for implementation or further delegation to even lower– levels. For example, Pitt et al. [198] talk about decentralised community energy systems. These are small residential communities comprising residences which both produce energy (e.g. with wind turbines) and consume energy, and supply energy to one another. Institutions regulate the communities to manage the appropriation of common energy resources. Scaling involves composing a system of decentralised community energy sub–systems, each sub–system demanding and supplying energy from one another. In order to govern a system of systems, hierarchical governance is proposed, where sub–system’s institutions are coordinated (e.g. to ensure energy is shared between sub–systems) but appealing to the principle of subsidiarity different sub–system institutions comprise different regulations as deemed appropriate for the community being governed (e.g. one operates a market economy and another operates a communal economy). Subsidiarity uses local lay knowledge to govern disparate societies or socio–technical systems towards a common aim.\nIn Chapter 3 and Chapter 4 we looked at the abstraction aspect of subsidiarity, where abstract regulations leave some institutional design decisions up to the local level. However, subsidiarity itself has not been formalised in terms of determining what should be left up to the local level. Nor does subsidiarity appear to have been given a precise measure. The question remains, subsidiarity is the principle that what can be done at the local level should be left up to the local level through delegation, but how far down should the delegation go and how much freedom should be given to lower–levels of institution designers? In particular, what level of subsidiarity is suitable taking into account a cross–institutional objective, and lower–level institution designer’s capabilities and local lay knowledge?\nArguably, the lack of formalisation is problematic since subsidiarity is a structural optimisation principle and therefore if not measured multi–level governance is not optimisable. We can conceive that if subsidiarity is not realised through over–delegation and overly– abstract regulations at higher–levels, then designers of lower–level institutions have too much room to design compliant institutions. Therefore, coordination between individual sub–systems/societies to meet a global aim is not guaranteed. Moreover, if subsidiarity is not realised due to too little delegation and too concrete regulations in higher–level institutions then lower–level institution designers have too little room to optimise regulations for local lay knowledge to meet global aims. Consequently, subsidiarity needs to be formalised, according to these assumed problems, in order to promote measurement, optimisation, compliance and therefore meeting global goals, and automation.\nThere are many aspects to address when formalising subsidiarity. A metric should be defined for the abstractness level a particular institution possesses at a certain governance level. In Chapter 3 and Chapter 4 we saw how abstract regulations can be complied with but"
    }, {
      "heading" : "8.4. CLOSING REMARKS 181",
      "text" : "did not define how abstract each level is in a qualitative or quantitative sense. Abstraction in this context is viewed as providing many ways with which to comply, the shortcoming of this measure is that compliance and therefore ‘abstractness’ is highly dependent on the ontology used. Consequently, a novel measure of abstractness is required that does not depend on the number of ways abstract concepts are ascribed.\nA metric should be defined to measure how disparate lower–level systems are and whether they should be viewed as separate systems in the first place, or whether there is a ‘one–size–fits–all’ institution for a particular goal and multiple jurisdictions. That is, we need a system disparity metric to calculate the level of abstractness each regulation and each governance level should be issued at. There already exist metrics for differences (inconsistencies) between propositions [151], knowledge bases [104] and separate agents’ beliefs [127]. But it is unclear whether techniques used for such metrics can be extended to assessing system disparity.\nFinally, it should be possible to determine what capability local levels have to regulate more appropriately than higher–levels using local lay knowledge for a particular objective. One possibility is to define reasoning about whether there is appropriate local–level knowledge such that lower–levels are more capable than higher–levels in regulating towards global aims. Such reasoning should be from the perspective of higher–levels that do not necessarily know exactly what the local knowledge is. However, how to extract information for whether local–level institution designers have appropriate knowledge is unclear. Abstractness, system disparity and local capabilities to self–govern appropriately should be measurable and combined to formalise a subsidiarity metric for a given objective, yet as we have speculated, each measurement is non–trivial to define.\n8.4. CLOSING REMARKS We finish with a few closing remarks regarding the aspects of governing governance this dissertation focuses on. This dissertation contributes formal and practical reasoning for governing institutional design and change with the PARAGon framework. The contribution is split into formalising institution design and enactment governance. Chapter 3, Chapter 4 and Chapter 5 contributed reasoning for how institutions should be designed. Chapter 6 contributed reasoning for how institutional change can be enacted. This raises the question, does institutional design and enactment governance involve deontic shoulds or alethic cans?\nFrom the should perspective, higher–level institutional rules prescribe the design of lower–level institutions in multi–level governance and are formalised as soft constraints in Chapters 3, Chapter 4 and Chapter 5. In our case, higher–level institutions comprise primary rules that abstractly prescribe lower–level institutional designs. Such primary rules preserve the autonomy of lower–level institution designers since they can be violated by designing a non–compliant institution.\nFrom the can perspective, institutional change enactment is governed by Hart’s secondary legal rules [117, p.81]. These secondary rules define how institutional rules are created and changed, formalised as hard institutional constraints, making (im)possible rule changes in an institution, in Chapter 6. Specifically, secondary rules were formalised as Searle’s constitutive rules. As discussed in the background section, constitutive rules constitute an institution. According to our conceptualisation an institution’s secondary rules constitute the ways in which the institutional rule changes can be enacted. The formalism"
    }, {
      "heading" : "182 8. CONCLUSIONS",
      "text" : "in Chapter 6 ensures only valid rule changes recognised by the institution can be made representing the actual state of an institution’s rules according to the its own secondary rules.\nParallels can be drawn between institutions governing social behaviour, such as formalised in the literature, and the notions of institutions that govern governance defined by this dissertation’s formalisations. In the institution of chess, according to Ricciardi [206], the rules constitute the game. Moves can be physically made outside of chess’ rules, but then the game of chess is not being played. In other words, you cannot cheat at chess. An institution comprising prescriptions (ought statements), such as the law, may be considered as ‘cheatable’ if cheating is defined as the act of violating those prescriptions. An instance of an institution formalised in this dissertation, focussing on institutions involved in governing governance, comprises rules that constitute that institution. Institution designers governed by instances of our institutions can ‘cheat’ with respect to the institutions governing them in one sense and not in another. In our formalisation, you can cheat at institution design in the sense of designing a non–compliant institution (Chapter 3, Chapter 4 and 5), but you cannot cheat at institution design in the sense of enacting rule changes invalidly (Chapter 6). This dissertation formalises both of these kinds of governance. This dissertation argues that it has formalised institutional governing of governance, where regulations regulate how institutions should be designed and how institutional change enactments can be made.\n9 APPENDICES\nAppendices are available online at http://www.thomascking.com/ dissertation/ThomasKingPhDAppendices.pdf (accessed at time of writing on 14-09-2016).\n183"
    }, {
      "heading" : "184 REFERENCES",
      "text" : ""
    }, {
      "heading" : "186 REFERENCES",
      "text" : "[28] Boella, G. and van der Torre, L. (2004b). Regulative and Constitutive Norms in Normative Multiagent Systems. In Proceedings of 9th International Conference on the Principles of Knowledge Representation and Reasoning (KR’04), pages 255–265. AAAI Press.\n[29] Boella, G. and van der Torre, L. (2006). Security policies for sharing knowledge in virtual communities. IEEE Transactions on Systems, Man, and Cybernetics - Part A: Systems and Humans, 36(3):439–450.\n[30] Börzel, T. A. and Risse, T. (2000). Who is Afraid of a European Federation? How to Constitutionalise a Multi-level Governance System. What Kind of Constitution for What Kind of Polity? Responses to Joschka Fischer, pages 45–60.\n[31] Bratman, M. E. (1987). Intention, Plans and Practical Reason. Harvard University Press.\n[32] Breuker, J., Valente, A., and Winkels, R. (1997). Legal ontologies: a functional view. In Proceedings of the 1st LegOnt Workshop on Legal Ontologies.\n[33] Broersen, J., Dignum, F., Dignum, V., and Meyer, J. (2004). Designing a deontic logic of deadlines. Deontic Logic in Computer Science, pages 43–56.\n[34] Bulling, N., Dastani, M., and Knobbout, M. (2013). Monitoring norm violations in multi-agent systems. In Proceedings of the 2013 International Conference on Autonomous Agents and Multi-agent Systems (AAMAS 2013), pages 491–498. International Foundation for Autonomous Agents and Multiagent Systems.\n[35] Castañeda, H.-N. (1970). On the semantics of the ought-to-do. Synthese, 21:449–468.\n[36] Castelfranchi, C. (1995). Commitments: from individual intentions to groups and organizations. Proceedings of the First International Conference on Multiagent Systems, ICMAS 1995, pages 41–48.\n[37] Castelfranchi, C. (1998). Modeling social actions for AI agents. Artificial Intelligence, 103(January 1997):157–182.\n[38] Chesani, F., Mello, P., Montali, M., and Torroni, P. (2012). Representing and monitoring social commitments using the event calculus. Autonomous Agents and Multi-Agent Systems (JAAMAS), 27(1):85–130.\n[39] Chopra, A. K. and Singh, M. P. (2015). Generalized Commitment Alignment. In Proceedings of the 14th International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2015), pages 453–461.\n[40] Chopra, A. K. and Singh, M. P. (2016). Custard: Computing Norm States over Information Stores. In Proceedings of the 15th International Conference on Autonomous Agents and MultiAgent Systems (AAMAS 2016), pages 1096–1105, Singapore. International Foundation for Autonomous Agents and Multiagent Systems.\nREFERENCES 187\n[41] Cialdini, R. B., Reno, R. R., and Kallgren, C. A. (1990). A Focus Theory of Normative Conduct: Recycling the Concept of Norms to Reduce Littering in Public Places. Journal of Personality and Social Psychology, 58(6):1015–1026.\n[42] Cliffe, O. (2007). Specifying and Analysing Institutions in Multi-Agent Systems Using Answer Set Programming. PhD thesis, University of Bath.\n[43] Cliffe, O., De Vos, M., and Padget, J. (2007). Answer Set Programming for Representing and Reasoning About Virtual Institutions. Computational Logic in Multi-Agent Systems, pages 60–79.\n[44] Conte, R. and Castelfranchi, C. (1995). Cognitive and Social Action. UCL Press.\n[45] Corapi, D., Ray, O., Russo, A., Bandara, A., and Lupu, E. (2009). Learning Rules from User Behaviour. Artificial Intelligence Applications and Innovations III, 296:459– 468.\n[46] Corapi, D., Russo, A., De Vos, M., Padget, J., and Satoh, K. (2011). Normative design using inductive learning. Theory and Practice of Logic Programming, 4-5(11):783–799.\n[47] Corapi, D., Russo, A., and Lupu, E. (2010). Inductive logic Programming as Abductive Search. In Proceedings of the International Conference on Logic Programming (ICLP), pages 54–63.\n[48] Council of Europe (1953). European Convention on Human Rights.\n[49] Criado, N., Argente, E., Noriega, P., and Botti, V. (2013). Reasoning about constitutive norms in BDI agents. Logic Journal of the IGPL, 22(1):66–93.\n[50] Criado, N., Black, E., and Luck, M. (2015). A coherence maximisation process for solving normative inconsistencies. Autonomous Agents and Multi-Agent Systems (JAAMAS), 30(4):640 – 680.\n[51] D’Altan, P., Meyer, J.-J. C., and Wieringa, R. J. (1996). An Integrated Framework for Ought-to-Be and Ought-to-Do Constraints. Artificial Intelligence and Law, 4:77–111.\n[52] Dastani, M. (2008). 2APL: A Practical Agent Programming Language. Autonomous Agents and Multi-Agent Systems (JAAMAS), 16(3):214–248.\n[53] Dastani, M., Grossi, D., Meyer, J.-J. C., and Tinnemeier, N. (2008). Normative multiagent programs and their logics. In Proceedings of Knowledge Representation for Agents and Multi-Agent Systems (KRAMAS’08), pages 236–243.\n[54] Dastani, M., van der Torre, L., and Yorke-Smith, N. (2015). Commitments and interaction norms in organisations. Autonomous Agents and Multi-Agent Systems (JAAMAS).\n[55] De Boer, F. S., Hindriks, K. V., Van Der Hoek, W., and Meyer, J.-J. C. (2000). Agent Programming with Declarative Goals. In Proceedings of the International Workshop on Agent Theories, Architectures, and Languages, pages 228–243.\n[56] Dennett, D. (1987). The Intentional Stance. Cambridge, MA: MIT Press."
    }, {
      "heading" : "188 REFERENCES",
      "text" : "[57] Diaconescu, A. and Pitt, J. (2014). Holonic Institutions for Multi-scale Polycentric Self-governance. Coordination, Organizations, Institutions, and Norms in Agent Systems X, Lecture Notes in Computer Science, 9372:19–35.\n[58] Dignum, F. (2002). Abstract Norms and Electronic Institutions. In International Workshop on Regulated Agent-Based Social Systems: Theories and Applications (RASTA’02), pages 93 – 104.\n[59] Dignum, F. and Kuiper, R. (1998). Specifying Deadlines with Dense Time Using Deontic and Temporal Logic. International Journal of Electronic Commerce, 3(2):67– 86.\n[60] Dignum, F., Weigand, H., and Verharen, E. (1996). Meeting the deadline: on the formal specication of temporal deontic constraints. International Symposium on Methodologies for Intelligent Systems, pages 243–252.\n[61] Dignum, V. (2003). A Model for Organizational Interaction: Based on Agents, Founded in Logic. PhD thesis, University of Utrecht, Utrecht, The Netherlands.\n[62] Dignum, V., Vázquez-Salceda, J., and Dignum, F. (2004). OMNI: Introducing Social Structure , Norms and Ontologies into Agent Organizations. In Programming MultiAgent Systems, pages 181–198. Springer Berlin Heidelberg.\n[63] D’Inverno, M., Luck, M., Noriega, P., Rodriguez-Aguilar, J. a., and Sierra, C. (2012). Communicating Open Systems. Artificial Intelligence, 186:3146–3150.\n[64] Dutta, P., Aoki, P. M., Kumar, N., Mainwaring, A., Myers, C., Willett, W., and Woodruff, A. (2009). Common sense: participatory urban sensing using a network of handheld air quality monitors. In Proceedings of the 7th ACM conference on embedded networked sensor systems, pages 349–350.\n[65] Eichener, V. (1997). Effective European problem-solving: lessons from the regulation of occupational safety and environmental protection. Journal of European Public Policy, 4(4):591–608.\n[66] Eiter, T., Faber, W., Fink, M., and Woltran, S. (2007). Complexity results for answer set programming with bounded predicate arities and implications. Annals of Mathematics and Artificial Intelligence, 51(2-4):123–165.\n[67] Eiter, T., Faber, W., Leone, N., and Pfeifer, G. (1999). The diagnosis frontend of the dlv system. AI Communications, 12(1):99–111.\n[68] Emerson, E. (1990). Temporal and modal logic. Handbook of Theoretical Computer Science, B:955–1072.\n[69] Emerson, E. A. and Halpern, J. Y. (1985). Decision procedures and expressiveness in the temporal logic of branching time. Journal of Computer and System Sciences, 30(1):1–24.\nREFERENCES 189\n[70] European Court Reports (2014). C-293/12 Digital Rights Ireland Ltd v Minister for Communications, Marine and Natural Resources; Minister for Justice, Equality and Law Reform; Commissioner of the Garda Síochána; Ireland; and The Attorney General and Others. C-594/12 Digital Rights Irela.\n[71] European Parliament and the Council of the European Union (2006). Directive 2006/24/EC of the European Parliament and of the Council of 15 March 2006 on the retention of data generated or processed in connection with the provision of publicly available electronic communications services or of public communications netwo.\n[72] European Union (2000). Charter of Fundamental Rights of the European Union 2000/C 364/01. Official Journal of the European Communities.\n[73] European Union (2008). Consolidated Version of the Treaty on the Functioning of the European Union.\n[74] Faber, W. and Leone, N. (2007). On the Complexity of Answer Set Programming with Aggregates. In Proceedings of the 9th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR’07), pages 97–109, Tempe, Arizona.\n[75] Faci, N., Modgil, S., Oren, N., Meneguzzi, F., Miles, S., and Luck, M. (2008). Towards a monitoring framework for agent-based contract systems. In Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), volume 5180 LNAI, pages 292–305.\n[76] Folsom, R., Lake, R. B., and Nanda., V. P. (1996). European Union Law After Maastricht: Practical Guide for Lawyers Outside the Common Market. Kluwer law international.\n[77] Fornara, N. (2011). Specifying and monitoring obligations in open multiagent systems using semantic web technology. Semantic Agent Systems, pages 25–45.\n[78] Fornara, N. and Colombetti, M. (2009). Specifying artificial institutions in the event calculus. Handbook of Research on Multi-Agent Systems: Semantics and Dynamics of Organizational Models, Information science reference, pages 335–366.\n[79] Fornara, N. and Colombetti, M. (2010). Representation and monitoring of commitments and norms using OWL. AI Communications, 23(4):341–356.\n[80] Fornara, N., Okouya, D., and Colombetti, M. (2012). Using OWL 2 DL for expressing ACL Content and Semantics. In European Workshop on Multi-Agent Systems, pages 97– 113.\n[81] Fornara, N., Viganò, F., and Colombetti, M. (2007). Agent communication and artificial institutions. Autonomous Agents and Multi-Agent Systems (JAAMAS), 14(2):121– 142.\n[82] Fornara, N., Viganò, F., Verdicchio, M., and Colombetti, M. (2008). Artificial institutions: A model of institutional reality for open multiagent systems. Artificial Intelligence and Law, 16(1):89–105."
    }, {
      "heading" : "190 REFERENCES",
      "text" : "[83] Forrester, J. W. (1984). Gentle Murder, or the Adverbial Samaritan. The Journal of Philosophy, 81(4):193–197.\n[84] Frankfurt, H. G. (1971). Freedom of the Will and the Concept of a Person. The Journal of Philosophy, 68(1):5–20.\n[85] Frey, S., Diaconescu, A., Menga, D., and Demeure, I. (2013). A holonic control architecture for a heterogeneous multi-objective Smart Micro-Grid. 7th IEEE international conference on self-adaptive and self- organizing systems, SASO 2013, pages 21–30.\n[86] Gabbay, D., Horty, J., Parent, X., van der Meyden, R., and van der Torre, L., editors (2013). Handbook of Deontic Logic and Normative Systems vol. 1.\n[87] Ganti, R., Ye, F., and Lei, H. (2011). Mobile crowdsensing: current state and future challenges. IEEE Communications Magazine, 49(11):32–39.\n[88] Gardner, J. (2001). Legal Positivism: 5 1/2 Myths. American Journal of Jurisprudence, 46(1):199–228.\n[89] Gauci, M., Chen, J., Li, W., Dodd, T. J., and Gross, R. (2014). Clustering objects with robots that do not compute. In Proceedings of the 2014 International Conference on Autonomous agents and multi-agent systems (AAMAS 2014), pages 421–428. International Foundation for Autonomous Agents and Multiagent Systems.\n[90] Gebser, M., Janhunen, T., Jost, H., Kaminski, R., and Schaub, T. (2015). ASP solving for expanding universes. In International Conference on Logic Programming and Nonmonotonic Reasoning, pages 354–367, Lexington, USA. Springer International Publishing.\n[91] Gebser, M., Kaufmann, B., and Kaminski, R. (2011). Potassco: The Potsdam answer set solving collection. AI Communications, 24(2):107 – 124.\n[92] Gelfond, M. (2008). Answer Sets. Foundations of Artificial Intelligence, 3:285–316.\n[93] Gelfond, M. and Lifschitz, V. (1988). The stable model semantics for logic programming. In Logic Programming: Proceedings of the Fifth International Conference and Symposium, pages 1070 – 1080.\n[94] Gerard, S. N., Telang, P. R., Kalia, A. K., and Singh, M. P. (2015). Positron: Composing Commitment-Based Protocols. In Proceedings of the 13th IEEE International Conference on Service-Oriented Computing (ICSOC), pages 19 – 35.\n[95] Ginet, C. (1990). On Action. Cambridge: Cambridge University Press.\n[96] Goldman, A. (1970). A Theory of Human Action. Englewood Cliffs, NJ: PrenticeHall.\n[97] Governatori, G. (2005). Representing business contracts in RuleML. International Journal of Cooperative Information Systems, 14(2-3):181–216.\nREFERENCES 191\n[98] Governatori, G., Hulstijn, J., and Rotolo, A. (2007). Characterising deadlines in Temporal Modal Defeasible Logic. In Proceedings of the 20th Australian Joint Conference on Artificial Intelligence, pages 486–496.\n[99] Governatori, G., Olivieri, F., Rotolo, A., and Scannapieco, S. (2013). Computing strong and weak permissions in defeasible logic. Journal of Philosophical Logic, 42(6):799–829.\n[100] Governatori, G., Palmirani, M., Riveret, R., Rotolo, A., and Sartor, G. (2005a). Norm modifications in defeasible logic. In Legal Knowledge and Information Systems (JURIX 2005), pages 13–22. IOS Press.\n[101] Governatori, G. and Rotolo, A. (2009). How Do Agents Comply with Norms? In Proceedings of the 2009 IEEE/WIC/ACM International Joint Conference on Web Intelligence and Intelligent Agent Technology, pages 488–491. IEEE Computer Society.\n[102] Governatori, G. and Rotolo, A. (2010). Changing Legal Systems: Legal Abrogations and Annulments in Defeasible Logic. Logic Journal of IGPL, 18:157–194.\n[103] Governatori, G., Rotolo, A., and Sartor, G. (2005b). Temporalised normative positions in defeasible logic. In Proceedings of the 10th international conference on Artificial intelligence and law, pages 25 – 34, New York, New York, USA. ACM Press.\n[104] Grant, J. and Hunter, A. (2016). Analysing inconsistent information using distancebased measures. International Journal of Approximate Reasoning.\n[105] Grossi, D. (2008). Pushing Anderson’s Envelope: The Modal Logic of Ascription. In 9th International Conference on Deontic Logic in Computer Science (DEON 2008), pages 263–277.\n[106] Grossi, D. (2011). Norms as ascriptions of violations: An analysis in modal logic. Journal of Applied Logic, 9(2):95–112.\n[107] Grossi, D., Aldewereld, H., and Dignum, F. (2007). Ubi lex, ibi poena: Designing norm enforcement in e-institutions. In Coordination, organizations, institutions, and norms in agent systems II, pages 101 – 114. Springer Berlin Heidelberg.\n[108] Grossi, D., Aldewereld, H., Vázquez-Salceda, J., and Dignum, F. (2006a). Ontological aspects of the implementation of norms in agent-based electronic institutions. Computational and Mathematical Organization Theory, 12:251–275.\n[109] Grossi, D. and Dignum, F. (2005). From abstract to concrete norms in agent institutions. In Formal Approaches to Agent-Based Systems, pages 12–29.\n[110] Grossi, D., Meyer, J.-J., and Dignum, F. (2005). Modal logic investigations in the semantics of counts-as. In Proceedings of the 10th international conference on Artificial intelligence and law (ICAIL ’05), pages 1–19. ACM."
    }, {
      "heading" : "192 REFERENCES",
      "text" : "[111] Grossi, D., Meyer, J.-J. C., and Dignum, F. (2006b). Counts-as: Classification or constitution? An answer using modal logic. Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 4048 LNAI:115–130.\n[112] Grossi, D., Meyer, J. J. C., and Dignum, F. (2008). The many faces of counts-as: A formal analysis of constitutive rules. Journal of Applied Logic, 6(2):192–217.\n[113] Günay, A. and Yolum, P. (2012). Detecting conflicts in commitments. Declarative Agent Languages and Technologies IX, pages 51–66.\n[114] Hansson, S. O. (2013). Formal Philosophy - A Guarded Defence. Theoria, 79(4):287–289.\n[115] Hardin, G. (1968). The Tragedy of the Commons. Science, 162(3859):1243–1248.\n[116] Harel, D., Tiuryn, J., and Kozen, D. (1984). Dynamic logic. In Gabbay, D. and Guenthner, F., editors, Handbook of Philosophical Logic, volume 2, chapter 10, pages 497–604. Reidel, Dordrecht.\n[117] Hart, H. L. A. (1961). The Concept of Law. Clarendon Press., Oxford.\n[118] Hewitt, C. E. (1986). Offices Are Open Systems. ACM Transactions of Office Automation Systems, 4(3):271–287.\n[119] Hindriks, K. V., de Boer, F. S., van der Hoek, W., and Meyer, J.-J. C. (2000). A Programming Logic for Part of the Agent Language 3APL, volume 78-89. Springer Berlin Heidelberg.\n[120] Hohfeld, W. N. (1913). Some Fundamental Legal Conceptions as Applied in Judicial Reasoning. The Yale Law Journal, 23(1):16 – 59.\n[121] Hooghe, L. and Marks, G. (2003). Unraveling the central state, but how? Types of multi-level governance. American political science review, 97(2):233–243.\n[122] Horty, J. F. and Belnap, N. (1995). The deliberative stit: A study of action, omission, ability, and obligation. Journal of Philosophical Logic, 24(6):583–644.\n[123] Hübner, J., Sichman, J., and Boissier, O. (2004). Using the Moise+ for a Cooperative Framework of MAS Reorganisation. In 17th Brazilian Symposium on Artificial Intelligence (SBIA’04), pages 506–515, Berlin.\n[124] Hübner, J., Sichman, J., and Boissier, O. (2007). Developing organised multiagent systems using the MOISE+ model: programming issues at the system and agent levels. International Journal of Agent-Oriented Software Engineering, 1(3):370–395.\n[125] Hübner, J. F., Sichman, J. S., and Boissier, O. (2005). S-Moise+ : A Middleware for developing Organised Multi-Agent Systems. Coordination, Organization, Institutions and Norms I. LNAI., 3913:64—-78.\nREFERENCES 193\n[126] Hull, B., Bychkovsky, V., Zhang, Y., Chen, K., Goraczko, M., Miu, A., Shih, E., Balakrishnan, H., and Madden, S. (2006). Cartel: a distributed mobile sensor computing system. In Proceedings of the 4th international conference on Embedded networked sensor systems, pages 125–138. ACM.\n[127] Hunter, A., Parsons, S., and Wooldridge, M. (2014). Measuring Inconsistency in Multi-Agent Systems. KI - Künstliche Intelligenz, 28(3):169–178.\n[128] Jensen, A. S., Dignum, V., and Villadsen, J. (2014). The AORTA architecture: Integrating organizational reasoning in Jason. In International Workshop on Engineering Multi-Agent Systems, pages 112–128. Springer International Publishing.\n[129] Jensen, A. S., Dignum, V., and Villadsen, J. (2015). A framework for organizationaware agents. In Proceedings of the 2016 International Conference on Autonomous Agents & Multiagent Systems (AAMAS 2016), pages 1133 – 1134. Springer US.\n[130] Jiang, J. (2015). Organizational Compliance: An Agent-based Model for Designing and Evaluating Organizational Interactions. PhD thesis, TU Delft, Delft University of Technology.\n[131] Jiang, J., Aldewereld, H., Dignum, V., and Tan, Y.-H. (2012). Norm Contextualization. In International Workshop on Coordination, Organizations, Institutions, and Norms in Agent Systems (COIN 2012), pages 141 – 157. Springer Berlin Heidelberg.\n[132] Jiang, J., Dignum, V., Tan, Y., and Overbeek, S. (2011). A Context-Aware Interorganizational Collaboration Model Applied to International Trade. In International Conference on Electronic Government, pages 308–319. Springer Berlin Heidelberg.\n[133] Jiang, J., Pitt, J., and Diaconescu, A. (2015). Rule Conflicts in Holonic Institutions. In 2015 IEEE International Conference on Self-Adaptive and Self-Organizing Systems Workshops, pages 49–54. IEEE.\n[134] Jones, A. J. I. and Sergot, M. (1992). Deontic logic in the representation of law: Towards a methodology. Artificial Intelligence and Law, 1(1):45–64.\n[135] Jones, A. J. I. and Sergot, M. (1993). On the Characterisation of Law and Computer Systems: The Normative Systems Perspective. In Deontic Logic in Computer Science: Normative System Specification, pages 275–307. John Wiley & Sons.\n[136] Jones, A. J. I. and Sergot, M. (1996). A Formal Characterisation of Institutionalised Power. Journal of IGPL, 4(3):427–443.\n[137] Kanger, S. (1971). New Foundations for Ethical Theory. Deontic Logic: Introductory and Systematic Readings, pages 36 – 58.\n[138] Kanger, S. (1972). Law and Logic. Theoria, 38:105 – 132.\n[139] Kanger, S. (1985). On Realization of Human Rights Kanger. Action, Logic and Social Theory, 38."
    }, {
      "heading" : "194 REFERENCES",
      "text" : "[140] Kanger, S. and Kanger, H. (1966). Rights and Parliamentarianism. Theoria, 32:85– 115.\n[141] Kim, T.-w., Lee, J., and Palla, R. (2009). Circumscriptive Event Calculus as Answer Set Programming. In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI 2009), pages 823 – 829.\n[142] King, T. C. (2015). Governing Government: A Framework for Multi-tier Institution Specification and Reasoning (Doctoral Consortium). In Proceedings of the 2015 International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2015), pages 2011 – 2012. International Foundation for Autonomous Agents and Multiagent Systems.\n[143] King, T. C., Dignum, V., and Jonker, C. M. (2016a). When Do Rule Changes Countas Legal Rule Changes? In Proceedings of the 22nd European Conference on Artificial Intelligence (ECAI 2016). Frontiers in Artificial Intelligence and Applications. Vol 285., pages 3 – 11. IOS Press.\n[144] King, T. C., Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., and Riemsdijk, M. B. V. (2015a). A Framework for Institutions Governing Institutions. In Proceedings of the 2015 International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2015), pages 473–481, Istanbul, Turkey. International Foundation for Autonomous Agents and Multiagent Systems.\n[145] King, T. C., Li, T., Vos, M. D., Jonker, C. M., Padget, J., and Riemsdijk, M. B. V. (2016b). Revising Institutions Governed by Institutions for Compliant Regulations. Coordination, Organizations, Institutions, and Normes in Agent Systems XI: COIN 2015 International Workshops, COIN@ AAMAS, Istanbul, Turkey, May 4, 2015, COIN@ IJCAI, Buenos Aires, Argentina, July 26, 2015, Revised Selected Papers., 9628:191 – 208.\n[146] King, T. C., Liu, Q., Polevoy, G., de Weerdt, M., Dignum, V., van Riemsdijk, M. B., and Warnier, M. (2014). Request Driven Social Sensing (Demonstration). In Lomuscio, A., Scerri, P., Bazzan, A., and Huhns, M., editors, Proceedings of the 2014 International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2014), pages 1651 – 1652, Paris, France. International Foundation for Autonomous Agents and Multiagent Systems.\n[147] King, T. C., Riemsdijk, M. B. V., Dignum, V., and Jonker, C. M. (2015b). Supporting Request Acceptance with Use Policies. In Coordination, Organizations, Institutions, and Norms in Agent Systems X: COIN 2014 International Workshops, COIN@ AAMAS, Paris, France, May 6, 2014, COIN@ PRICAI, Gold Coast, QLD, Australia, December 4, 2014, Revised Selected Papers, pages 114 – 131. Springer.\n[148] Knobbout, M., Dastani, M., and Meyer, J.-j. C. (2014). Reasoning about Dynamic Normative Systems. In European Workshop on Logics in Artificial Intelligence, pages 628–636.\n[149] Kollingbaum, M. J., Vasconcelos, W. W., García-Camino, A., and Norman, T. J. (2007). Managing conflict resolution in norm-regulated environments. In International\nREFERENCES 195\nWorkshop on Engineering Societies in the Agents World, pages 55 – 71. Springer Berlin Heidelberg.\n[150] Kowalski, R. and Sergot, M. (1986). A logic-based calculus of events. New Generation Computing, 4(1):67–95.\n[151] Lafage, C. and Lang, J. (2001). Propositional Distances and Preference Representation. In Symbolic and Quantitative Approaches to Reasoning with Uncertainty, ECSQARU’01, pages 48–59.\n[152] Lee, J., Padget, J., Logan, B., Dybalova, D., and Alechina, N. (2014). N-Jason: Runtime norm compliance in AgentSpeak(L). Engineering Multi-Agent Systems, 8758:367– 387.\n[153] Leibniz, G. W. (1685). The Art of Discovery.\n[154] Li, T. (2014). Normative Conflict Detection and Resolution in Cooperating Institutions. PhD thesis, University of Bath.\n[155] Li, T., Balke, T., De Vos, M., Padget, J., and Satoh, K. (2013a). Legal Conflict Detection in Interacting Legal Systems. In 1st International Jurix Doctoral Consortium and Poster Sessions, JURIX-DoCoPe 2013, in Conjunction with the 26th International Conference on Legal Knowledge and Information Systems, JURIX 2013.\n[156] Li, T., Balke, T., De Vos, M., Satoh, K., and Padget, J. (2013b). Detecting conflicts in legal systems. New Frontiers in Artificial Intelligence, pages 174 – 189.\n[157] Li, T., Vos, M. D., Padget, J., Satoh, K., and Balke, T. (2015). Debugging ASP using ILP. In Technical Communcations of International Conference of Logic Programming 2015.\n[158] Liu, Q., Dulman, S., and Warnier, M. (2013). AREA: an Automatic Runtime Evolutionary Adaptation mechanism for Creating Self-Adaptation Algorithms in Wireless Networks. In Spatial Computing, the 6th International Workshop, colocated with AAMAS 2013, pages 23 – 28, Saint Paul, MN.\n[159] López, F. L. Y. and Luck, M. (2003). Modelling Norms for Autonomous Agents. In Proceedings of The Fourth Mexican Conference on Computer Science, pages 238–245. IEEE Computer Society.\n[160] López, F. L. y., Luck, M., and D’Inverno, M. (2006). A normative framework for agent-based systems. Computational and Mathematical Organization Theory, 12(2- 3):227–250.\n[161] Lowe, E. (2008). Personal Agency: The Metaphysics of Mind and Action. Oxford: Oxford University Press.\n[162] Lu, H., Pan, W., Lane, N., Choudhury, T., and Campbell, A. (2009). SoundSense: scalable sound sensing for people-centric applications on mobile phones. In Proceedings of the 7th international conference on Mobile systems, applications, and services, pages 165–178."
    }, {
      "heading" : "196 REFERENCES",
      "text" : "[163] Makinson, D. (1986). On the Formal Representation of Rights Relations. Journal of Philosophical Logic, 15:403–425.\n[164] Makinson, D. (1999). On a Fundamental Problem of Deontic Logic. Norms, Logics and Information Systems. New Studies in Deontic Logic and Computer Science, pages 29–53.\n[165] Makinson, D. and van der Torre, L. (2003). What is input/output logic? Trends in Logic, 17:163–174.\n[166] Marks, G. (1993). Structural Policy and Multilevel Governance in the European Community.\n[167] Max Knobbout (2016). Logics for Modelling and Verifying Normative Multi-Agent Systems. PhD thesis, Utrecht University.\n[168] McNamara, P. (2014). Deontic Logic. In Zalta, E. N., editor, The Stanford Encyclopedia of Philosophy. The Metaphysics Research Lab Center for the Study of Language and Information, Stanford University Stanford, CA 94305-4115, winter 201 edition.\n[169] Mele, A. (2003). Motivation and Agency. Oxford: Oxford University Press.\n[170] Meneguzzi, F. and Luck, M. (2009). Norm-based behaviour modification in BDI agents. In Proceedings of the eighth International Joint Conference on Autonomous Agents and Multi-agent Systems (AAMAS 2009), pages 177–184.\n[171] Meneguzzi, F., Modgil, S., Oren, N., and Miles, S. (2012). Applying electronic contracting to the aerospace aftercare domain. Engineering Applications of Artificial Intelligence, 25(7):1471–1487.\n[172] Merriam-Webster Online. Compliance - www.merriam-webster.com. Accessed on 2016-06-25.\n[173] Miller, S. (2014). Social Institutions. In Zalta, E. N., editor, The Stanford Encyclopedia of Philosophy. The Metaphysics Research Lab Center for the Study of Language and Information, Stanford University Stanford, CA 94305-4115, winter 201 edition.\n[174] Mitchell., R. B. (1996). Compliance theory: an overview. Improving compliance with international environmental law, pages 3–28.\n[175] Modgil, S., Faci, N., and Meneguzzi, F. (2009). A framework for monitoring agentbased normative systems. In Proceedings of The 8th International Conference on Autonomous Agents and Multiagent Systems-Volume 1 (AAMAS 2009), pages 153–160. International Foundation for Autonomous Agents and Multiagent Systems.\n[176] Morales, J., López-Sánchez, M., and Esteva, M. (2011). Using experience to generate new regulations. In IJCAI’11 Proceedings of the Twenty-Second international joint conference on Artificial Intelligence, number 2011, pages 307–312. ACM.\nREFERENCES 197\n[177] Morales, J., Lopez-Sanchez, M., Rodriguez-Aguilar, J. A., Wooldridge, M., and Vasconcelos, W. (2013). Automated synthesis of normative systems. In Proceedings of the 12th International Conference on Autonomous Agents and Multi-agent Systems (AAMAS 2013), pages 483–490.\n[178] Morales, J., Lopez-Sanchez, M., Rodriguez-Aguilar, J. A., Wooldridge, M., and Vasconcelos, W. (2014). Minimality and Simplicity in the On-line Automated Synthesis of Normative Systems. In Proceedings of the 13th International Conference on Autonomous Agents and Multi-agent Systems (AAMAS 2014), pages 109–116.\n[179] Moretti, A. (2009). The Geometry of Logical Opposition. PhD thesis, University of Neuchâtel.\n[180] Muggleton, S. (1995). Inverse entailment and Progol. New generation computing, 13(3-4):245–286.\n[181] Newig, J. and Fritsch, O. (2009). Environmental governance: Participatory, multilevel - and effective? Environmental policy and governance, 19(3):197 – 214.\n[182] North, D. C. (1990). Institutions, institutional change and economic performance. Cambridge university press.\n[183] Nute, D. (1987). Defeasible logic. Handbook of Logic in Artificial Intelligence and Logic Programming, 3.\n[184] O’Connor, T. (2000). Persons and Causes: The Metaphysics of Free Will. Oxford: Oxford University Press.\n[185] Ostrom, E. (1990). Governing the commons: The evolution of institutions for collective action. Cambridge University Press, Cambridge, UK.\n[186] Ostrom, E. (2005). Understanding institutional diversity. Princeton University Press.\n[187] Ostrom, E. (2009). A general framework for analyzing sustainability of socialecological systems. Science (New York, N.Y.), 325(5939):419–22.\n[188] Ostrom, E. (2011). Thinking About Climate Change as a Commons. In 15th Annual Philip Gamble Memorial Lecture, pages 1–34, UMass Amherst.\n[189] Overeem, A., Leijnse, H., and Uijlenhoet, R. (2013a). Country-wide rainfall maps from cellular communication networks. Proceedings of the National Academy of Sciences of the United States of America, 110(8):2741–2745.\n[190] Overeem, A., R. Robinson, J. C., Leijnse, H., Steeneveld, G. J., P. Horn, B. K., and Uijlenhoet, R. (2013b). Crowdsourcing urban air temperatures from smartphone battery temperatures. Geophysical Research Letters, 40(15):4081–4085.\n[191] Oxford Dictionaries Online. Paragon - www.oxforddictionaries.com. Accessed on 2016-04-28.\n[192] Parliament of the United Kingdom (2008). Finance Act 2008, Chapter 9."
    }, {
      "heading" : "198 REFERENCES",
      "text" : "[193] Pellizzoni, L. (2003). Uncertainty and participatory democracy. Environmental Values, 12(2):195–224.\n[194] Pieters, W., Padget, J., and Dechesne, F. (2013). Obligations to enforce prohibitions: on the adequacy of security policies. In Proceedings of the 6th International Conference on Security of Information and Networks, pages 54–61.\n[195] Pieters, W., Padget, J., Dechesne, F., Dignum, V., and Aldewereld, H. (2015). Effectiveness of qualitative and quantitative security obligations. Journal of Information Security and Applications, 22:3 – 16.\n[196] Pinker, S., Bizzi, E., Brenner, S., Chomsky, N., Minsky, M., Partee, B. H., and Winston, P. H. (2016). The Golden Age – A Look at the Original Roots of Artificial Intelligence, Cognitive Science, and Neuroscience (partial transcript).\n[197] Pitt, J. and Artikis, A. (2015). The open agent society: retrospective and prospective views. Artificial Intelligence and Law, 23(3):241 – 270.\n[198] Pitt, J. and Diaconescu, A. (2015). Structure and Governance of Communities for the Digital Society. In IEEE International Conference on Autonomic Computing (ICAC), pages 279–284.\n[199] Pnueli, A. (1977). The Temporal Logic of Programs. In Foundations of Computer Science, 1977., 18th Annual Symposium on, pages 46–57. IEEE.\n[200] Prakken, H. and Sartor, G. (1996). A dialectical model of assessing conflicting arguments in legal reasoning. Artificial Intelligence and Law, 4:331–368.\n[201] Prakken, H. and Sergot, M. (1996). Contrary-to-duty obligations. Studia Logica, 57(1):91–115.\n[202] Rao, A. S. (1996). AgentSpeak(L): BDI Agents speak out in a logical computable language. In European Workshop on Modelling Autonomous Agents in a Multi-Agent World, pages 42 – 55. Springer Berlin Heidelberg.\n[203] Reiter, R. (1980). A logic for default reasoning. Artificial Intelligence, 13(1-2):81– 132.\n[204] Republic of Italy (1947). Constitution of the Italian Republic.\n[205] R.H.Bordini, J.F.Hubner, and M.Wooldridge (2007). Programming Multi-Agent Systems in AgentSpeak Using Jason. John Wiley & Sons.\n[206] Ricciardi, M. (1997). Constitutive rules and institutions. In meeting of the Irish Philosophical Club, Ballymascanlon.\n[207] Ross, A. Tû-Tû. Harvard Law Review (1956 - 1957), 70:812–825.\n[208] Ruiter, D. (1997). A basic classification of legal institutions. Ratio Juris, 10(4):357 – 372.\nREFERENCES 199\n[209] Ryu, Y. U. and Lee, R. M. (1994). Defeasible deontic reasoning: A logic programming model. In Deontic logic in computer science, pages 225–241. John Wiley and Sons Ltd.\n[210] Scharpf, F. W. (1997). Introduction: the problem-solving capacity of multi-level governance. Journal of European Public Policy, 4(4):520–538.\n[211] Schlosser, M. (2015). Agency. In Zalta, E. N., editor, The Stanford Encyclopedia of Philosophy (Fall 2015 Edition). The Metaphysics Research Lab Center for the Study of Language and Information, Stanford University Stanford, CA 94305-4115.\n[212] Searle, J. R. (1964). How to Derive “Ought” from “Is”. The Philosophical Review, 73(1):43–58.\n[213] Searle, J. R. (1969). Speech acts: An essay in the philosophy of language. Cambridge university press.\n[214] Searle, J. R. (1995). The Construction of Social Reality. The Free Press, New York.\n[215] Searle, J. R. (2005). What is an institution? Journal of Institutional Economics, 1:1–22.\n[216] Sergot, M. (1988). Representing legislation as logic programs. Oxford University Press.\n[217] Sergot, M. J. (1982). Prospects for representing the law as logic programs. Logic Programming, pages 33–42.\n[218] Shams, Z., Vos, M. D., Oren, N., and Padget, J. (2016). Normative Practical Reasoning via Argumentation and Dialogue. In Proceedings of the 25th International Conference on Artificial Intelligence. AAAI Press.\n[219] Smith, M. E. (2004). Toward a Theory of EU Foreign Policy Making: Multi-level Governance, Domestic Politics, and National Adaptation to Europe’s Common Foreign and Security Policy. Journal of European Public Policy, 11(4):740–758.\n[220] Suber, P. (1990). The Paradox of Self-Amendment: A Study of Law, Logic, Omnipotence, and Change. Peter Lang International Academic Publishers.\n[221] The United States of America. The United States Constitution.\n[222] Tinnemeier, N. A. M., Dastani, M. M., Meyer, J. J. C., and Van Der Torre, L. (2009). Programming normative artifacts with declarative obligations and prohibitions. Proceedings - 2009 IEEE/WIC/ACM International Conference on Intelligent Agent Technology, IAT 2009, 2:145–152.\n[223] Tosatto, S. C., Boella, G., van der Torre, L., and Villata, S. (2012a). Abstract Normative Systems: Semantics and Proof Theory. In Principles of Knowledge Representation and Reasoning: Proceedings of the Thirteenth International Conference, pages 358– 368."
    }, {
      "heading" : "200 REFERENCES",
      "text" : "[224] Tosatto, S. C., Boella, G., Van Der Torre, L., and Villata, S. (2012b). Visualizing normative systems: An abstract approach. In International Conference on Deontic Logic in Computer Science, pages 16–30. Springer Berlin Heidelberg.\n[225] Turing, A. M. (1936). On computable numbers, with an application to the Entscheidungsproblem. Proceedings of the London Mathematics Society, 42(2):230–265.\n[226] UK (2009). The Data Retention (EC Directive) Regulations 2009, No. 859.\n[227] United States Federal Law (1998). Children’s Online Privacy Protection Act.\n[228] van der Torre, L. (1997). Reasoning about obligations: defeasibility in preferencebased deontic logic. PhD thesis, Erasmus University Rotterdam.\n[229] van der Torre, L. and Tan, Y. (1998). The temporal analysis of Chisholm’s paradox. In Proceedings of the Fifteenth National Conference on Artificial Intelligence (AAAI’98), pages 650–655.\n[230] van der Torre, L. and Tan, Y. (1999). Contrary-to-duty reasoning with preferencebased dyadic obligations. Annals of Mathematics and Artificial Intelligence, 27 (1-4):49– 78.\n[231] Vasconcelos, W., Kollingbaum, M. J., and Norman, T. J. (2007). Resolving conflict and inconsistency in norm-regulated virtual organizations. In Proceedings of the 6th International Joint Conference on Autonomous Agents & Multiagent Systems (AAMAS 2007), pages 632–639, New York, New York, USA. IFAAMAS.\n[232] Vasconcelos, W. W., Kollingbaum, M. J., and Norman, T. J. (2008). Normative conflict resolution in multi-agent systems. Autonomous Agents and Multi-Agent Systems (JAAMAS), 19(2):124–152.\n[233] Vazquez-Salceda, J. (2003). The role of norms and electronic institutions in multiagent systems applied to complex domains. The HARMONIA framework. PhD thesis, Technical University of Catalonia.\n[234] von Wright, G. (1951). Deontic logic. Mind, 60(237):1–15.\n[235] von Wright, G. (1968). An essay in deontic logic and the general theory of action. Acta Philosophica Fennica, 21.\n[236] von Wright, G. H. (1983). Norms of Higher Order. Studia Logica, 42(119).\n[237] Wansing, H. (1998). Nested deontic modalities: Another view of parking on highways. Erkenntnis, 49(2):185–199.\n[238] Wilson, D. S., Ostrom, E., and Cox, M. E. (2013). Generalizing the core design principles for the efficacy of groups. Journal of Economic Behavior and Organization, 90.\n[239] Wittgenstein, L. (1958). Philosophical Investigations. Blackwell Publishers.\nREFERENCES 201\n[240] Wooldridge, M. (2002). An Introduction to Multi-Agent Systems. Wiley.\n[241] Wooldridge, M. and Jennings, N. R. (1995). Intelligent agents: theory and practice.\n[242] Yearley, S., Cinderby, S., Forrester, J., Bailey, P., and Rosen, P. (2003). Participatory modelling and the local governance of the politics of UK air pollution: A three-city case study. Environmental Values, 12(2):247–262.\n[243] Yolum, P. and Singh, M. (2004). Reasoning about commitments in the event calculus: An approach for specifying and executing protocols. Annals of Mathematics and Artificial Intelligence, 42(1-3):227–253.\n[244] Zuckerman, H. S. (1979). Multi-Institutional Systems: Promise and Performance. Inquiry, 16(4):291–314.\nACKNOWLEDGEMENTS\nThis dissertation came about through periods of frenzy and pauses for thought, apathy and persistence, ignorance and exploration, disorientation and discovery, and disagreement and acquiescence. I cannot say I found the process particularly easy. However, “omelets are not made without breaking eggs”. Although not something I completely agree with, the man who coined the phrase (François de Charette) was executed in 1796 for breaking too many eggs, I sympathise with short–term difficulties being necessary for certain ends.\nThose end results are not just papers, presentations and propositions, but also personal progress in acquiring more practical perspectives. One such perspective was becoming tolerant of my work being “naïve”, such as by not capturing all aspects of a particular concept. Naïve work can help our understanding, as the field of Deontic Logic has shown through decades of conceptual changes and refinements. The Japanese aesthetic of Wabi Sabi encapsulates such a view, where transience and imperfection are sought and not fought. That outlook extends to people, including myself, as much as it applies to technical work. Moreover, it may be that if the response to a difficult position is not fight then it is flight, persistently tolerating issues is important – perhaps this all sounds clichéd, but the grass is always greener on the other side. Acknowledging and eventually feeling that not every problem is to be (re)solved, meant that the final work and paper were a walk in the park.\nGetting to that point, it must be emphasised, was not a solitary effort. There are many people that, in ways small and big, shaped my personal and research outlook in constructive ways and helped to ensure that the outcome was overall positive. I would therefore like to segue to thanking some of those people that helped me along the way.\nFirstly, I would like to thank, in no particular order, my supervisory team comprising my promotor Prof. dr. Catholijn M. Jonker, and copromotors Dr. Birna van Riemsdijk and Dr. Virginia Dignum for their support, discussion and useful comments. Catholijn, thank you for giving me the opportunity to study at Interactive Intelligence – a research group that is both positively diverse in people and research topics – for having confidence when things were not going well, and for helping me with career advice and the next steps towards the end. Birna, thank you for giving me time to discover my research interests, putting together a diverse and open ended project, emphasising simplicity (but not too simple!) over complexity and helping me through the early stages of learning formal work. Virginia, thank you for helping me in understanding where and when to stop solving a large problem and start focussing on solving a small problem well, ensuring different aspects of my research were more modular than iterative, and especially, thank you for understanding and resolving seemingly insurmountable difficulties. Of course, there is more to thank for, but I feel these aspects were at the core of getting me to the end.\nMoreover, I would like to extend my thanks to my mentor, Dr. Klaas Pieter Hart. Although we met infrequently, Klaas listened during times of strife, gave practical advice and, much to my reassurance, validated my concerns.\nSpecial thanks to the examination committee: Prof. dr. Katie Atkinson, Prof. dr.\n203"
    }, {
      "heading" : "204 ACKNOWLEDGEMENTS",
      "text" : "Frances Brazier, Prof. dr. Jeremy Pitt and Prof. dr. Leon van der Torre. Thank you for reading my dissertation. Moreover, thank you Katie Atkinson for the remarks, they helped with clarification and it is good to know there is agreement on the dissertation’s contributions and shortcomings. Thank you Leon van der Torre for the detailed comments, they helped to better position the work and gave useful insights into nascent research topics.\nI would also like to thank Dr. Tingting Li, Dr. Julian Padget and Dr. Marina de Vos for the collaborative research and co–authorships. In particular, thank you for being so welcoming when I visited Bath, introducing me to your research on institutions and your overall approach. Our co–authorships greatly influenced my dissertation and research.\nI’d also like to thank everyone who was involved in the SHINE multi–disciplinary project under which this research was conducted. Especially, I’d like to thank the SHINE PhD/postdoc researchers – Qingzhi Liu, Dr. Paolo Palmieri, Gleb Polevoy, Venkat Roy and Sergio Velasco – for the enjoyable project meetings and finding ways to work together.\nI was between two departments during my PhD. First, I would like to thank all of my wonderful colleagues at the ICT section of TBM and the Interactive Intelligence group of EWI, there are too many to mention so thank you all. Both groups were diverse in research topics and people, so thank you for widening my personal and research perspectives.\nI would specifically like to thank my TBM office–mates: Jie Jiang and Janneke van der Zwaan for discussing common problems encountered, being so welcoming and thank you Jie for those early days explaining the area as a whole and what you thought I needed to do to get started. I would also like to thank Virginia’s latest PhD students (at the time of writing), Klara Pigmans and Rijk Mercuur for the interesting discussions about their own research and perspectives, which I look forward to continuing. I would also like to thank my II office mates: Alex Kayal for his anecdotes and banter, Marieke Peeters for listening to my cynicism and countering it with research rigour, and Wenxin Wang for conversing about family and showing it can coincide with work. Moreover, I would like to thank the following inspiring individuals for helping with the softer problems encountered: Reyhan Aydogan for her positivity and emphasis on work–life balance, Chris Detweiler for his dry humour and relateability, Maaike Harbers for her outgoing enthusiasm and compassion, Max Knobbout for his insightful knowledge and openness, Arman Noroozian for his academic enthusiasm and rational calmness, and Vanessa Vakili for her grounded outlook and sympathetic listening.\nMoreover, I would also like to thank from the II group Fawad Khan for helping with implementation, and Wouter Pasman with helping me to resolve code problems and for always having an alternative take on things. Thank you Anita Hoogmoed and Caroline de Wit for always being willing to help with organisational matters and maintaining a cheerful state. I’d like to thank Ruud de Jong and Bart Vastenhouw for happily assisting in technical matters (and also Ruud for the vast coffee supplies).\nMy long–time friend Sonal Sodha/Keay was there for me during the difficult times. Moreover, long long before I even embarked on my PhD she gave me a sharp push that helped me get to where I am now. Thank you, Sonal.\nFinally, I would like to thank my wonderful life partner, Ruta, for always being there for me, providing both joy and support. Thank you for all of the adventures helping me to get away from work and for being understanding when all I could do was work. Thank you for your love and support – I could not have done it without you Ruta, I love you insanely.\nCURRICULUM VITAE\nThomas C. King was born on June 18, 1987 in London, United Kingdom. He began studying for a Bachelors in Computer Science in 2008 at King’s College London (KCL). He postponed his Bachelors’ studies, after two years whereupon he worked as a software developer and architect for UBS. Thomas resumed his studies one year later during which he became interested in AI, in particular on logic based approaches to topics such as belief and change. He completed his Bachelors at KCL, First Class with Honours, and was awarded the best KCL Computer Science dissertation of 2012. He then decided to pursue his interests in AI further by undertaking a PhD. Having considered a PhD in sub–symbolic AI such as genetic algorithms or symbolic AI choosing symbolic AI, he chose the latter focusing on normative reasoning, having become interested in ascribing meaning with tangible and precise conceptualisations.\nHis PhD research was conducted from 2012 until 2016 at TU Delft, on formalising institutions, in the philosophical and legal sense (e.g. conventions, laws, contracts and promises), with a focus on institutions that ascribe and regulate the creation and behaviour of other institutional rules. Thomas enjoyed attending and presenting his work at numerous conferences and workshops, as well as making research visits to the University of Bath, gaining an interest in the combination of practical and conceptual work on normative reasoning as a result. Hence – in order to pursue the combination of practical and formal work further – from September 2016, Thomas started working at the School of Computing and Communications of Lancaster University, United Kingdom, as a post–doctoral Senior Research Associate researching social commitment reasoning as an abstraction for: databases, decentralising software and verifying potential agent interactions.\n205\nSIKS DISSERTATION SERIES\n2016-41 Thomas C King (TUD), Governing Governance: A Formal Framework for Analysing Institutional Design and Enactment Governance. 2016-40 Christian Detweiler (TUD), Accounting for Values in Design. 2016-39 Merijn Bruijnes (UT), Believable Suspect Agents; Response and Interpersonal Style Selection for an Artificial Suspect. 2016-38 Andrea Minuto (UT), MATERIALS THAT MATTER - Smart Materials meet Art & Interaction Design. 2016-37 Giovanni Sileno (UvA), Aligning Law and Action - a conceptual and computational inquiry. 2016-36 Daphne Karreman (UT), Beyond R2D2: The design of nonverbal interaction behavior optimized for robot-specific morphologies. 2016-35 Zhaochun Ren, Monitoring Social Media: Summarization, Classification and Recommendation. 2016-34 Dennis Schunselaar (TUE), Title: Configurable Process Trees: Elicitation, Analysis, and Enactment. 2016-33 Peter Bloem (UVA), Single Sample Statistics, exercises in learning from just one example. 2016-32 Eelco Vriezekolk (UT), Assessing Telecommunication Service Availability Risks for Crisis Organisations. 2016-31 Mohammad Khelghati (UT), Deep web content monitoring. 2016-30 Ruud Mattheij (UvT), The Eyes Have It. 2016-29 Nicolas Höning (TUD), Peak reduction in decentralised electricity systems -Markets and prices for flexible planning. 2016-28 Mingxin Zhang (TUD), Large-scale Agent-based Social Simulation - A study on epidemic prediction and control. 2016-27 Wen Li (TUD), Understanding Geo-spatial Information on Social Media. 2016-26 Dilhan Thilakarathne (VU), In or Out of Control: Exploring Computational Models to Study the Role of Human Awareness and Control in Behavioural Choices, with Applications in Aviation and Energy Management Domains. 2016-25 Julia Kiseleva (TU/e), Using Contextual Information to Understand Searching and Browsing Behavior. 2016-24 Brend Wanders (UT), Repurposing and Probabilistic Integration of Data; An Iterative and data model independent approach. 2016-23 Fei Cai (UVA), Query Auto Completion in Information Retrieval. 2016-22 Grace Lewis (VU), Software Architecture Strategies for Cyber-Foraging Systems. 2016-21 Alejandro Moreno Célleri (UT), From Traditional to Interactive Playspaces: Automatic Analysis of Player Behavior in the Interactive Tag Playground. 2016-20 Daan Odijk (UVA), Context & Semantics in News & Web Search. 2016-19 Julia Efremova (Tu/e), Mining Social Structures from Genealogical Data.\n207"
    }, {
      "heading" : "208 SIKS DISSERTATION SERIES",
      "text" : "2016-18 Albert Meroño Peñuela, Refining Statistical Data on the Web. 2016-17 Berend Weel (VU), Towards Embodied Evolution of Robot Organisms. 2016-16 Guangliang Li (UVA), Socially Intelligent Autonomous Agents that Learn from Human Reward. 2016-15 Steffen Michels (RUN), Hybrid Probabilistic Logics - Theoretical Aspects, Algorithms and Experiments. 2016-14 Ravi Khadka (UU), Revisiting Legacy Software System Modernization. 2016-13 Nana Baah Gyan (VU), The Web, Speech Technologies and Rural Development in West Africa - An. 2016-12 Max Knobbout (UU), Logics for Modelling and Verifying Normative Multi-Agent Systems. 2016-11 Anne Schuth (UVA), Search Engines that Learn from Their Users. 2016-10 George Karafotias (VUA), Parameter Control for Evolutionary Algorithms. 2016-09 Archana Nottamkandath (VU), Trusting Crowdsourced Information on Cultural Artefacts. 2016-08 Matje van de Camp (TiU), A Link to the Past: Constructing Historical Social Networks from Unstructured Data. 2016-07 Jeroen de Man (VU), Measuring and modeling negative emotions for virtual training. 2016-06 Michel Wilson (TUD), Robust scheduling in an uncertain environment. 2016-05 Evgeny Sherkhonov (UVA), Expanded Acyclic Queries: Containment and an Application in Explaining Missing Answers. 2016-04 Laurens Rietveld (VU), Publishing and Consuming Linked Data. 2016-03 Maya Sappelli (RUN), Knowledge Work in Context: User Centered Knowledge Worker Support. 2016-02 Michiel Christiaan Meulendijk (UU), Optimizing medication reviews through decision support: prescribing a better pill to swallow. 2016-01 Syed Saiden Abbas (RUN), Recognition of Shapes by Humans and Machines. 2015-35 Jungxao Xu (TUD), Affective Body Language of Humanoid Robots: Perception and Effects in Human Robot Interaction. 2015-34 Victor de Graaf (UT), Gesocial Recommender Systems. 2015-33 Frederik Schadd (TUD), Ontology Mapping with Auxiliary Resources. 2015-32 Jerome Gard(UL), Corporate Venture Management in SMEs. 2015-31 Yakup Koç (TUD), On the robustness of Power Grids. 2015-30 Kiavash Bahreini(OU), Real-time Multimodal Emotion Recognition in E-Learning. 2015-29 Hendrik Baier (UM), Monte-Carlo Tree Search Enhancements for One-Player and Two-Player Domains. 2015-28 Janet Bagorogoza (TiU), KNOWLEDGE MANAGEMENT AND HIGH PERFORMANCE; The Uganda Financial Institutions Model for HPO. 2015-27 Sándor Héman (CWI), Updating compressed colomn stores. 2015-26 Alexander Hogenboom (EUR), Sentiment Analysis of Text Guided by Semantics and Structure. 2015-25 Steven Woudenberg (UU), Bayesian Tools for Early Disease Detection. 2015-24 Richard Berendsen (UVA), Finding People, Papers, and Posts: Vertical Search Algorithms and Evaluation.\nSIKS DISSERTATION SERIES 209\n2015-23 Luit Gazendam (VU), Cataloguer Support in Cultural Heritage. 2015-21 Sibren Fetter (OUN), Using Peer-Support to Expand and Stabilize Online Learning. 2015-20 Loïs Vanhée (UU), Using Culture and Values to Support Flexible Coordination. 2015-19 Bernardo Tabuenca (OUN), Ubiquitous Technology for Lifelong Learners. 2015-18 Holger Pirk (CWI), Waste Not, Want Not! - Managing Relational Data in Asymmetric Memories. 2015-17 André van Cleeff (UT), Physical and Digital Security Mechanisms: Properties, Combinations and Trade-offs. 2015-16 Changyun Wei (UT), Cognitive Coordination for Cooperative Multi-Robot Teamwork. 2015-15 Klaas Andries de Graaf (VU), Ontology-based Software Architecture Documentation. 2015-14 Bart van Straalen (UT), A cognitive approach to modeling bad news conversations. 2015-13 Giuseppe Procaccianti(VU), Energy-Efficient Software. 2015-12 Julie M. Birkholz (VU), Modi Operandi of Social Network Dynamics: The Effect of Context on Scientific Collaboration Networks. 2015-11 Yongming Luo(TUE), Designing algorithms for big graph datasets: A study of computing bisimulation and joins. 2015-10 Henry Hermans (OUN), OpenU: design of an integrated system to support lifelong learning. 2015-09 Randy Klaassen(UT), HCI Perspectives on Behavior Change Support Systems. 2015-08 Jie Jiang (TUD), Organizational Compliance: An agent-based model for designing and evaluating organizational interactions. 2015-07 Maria-Hendrike Peetz(UvA), Time-Aware Online Reputation Analysis. 2015-06 Farideh Heidari (TUD), Business Process Quality Computation - Computing NonFunctional Requirements to Improve Business Processes. 2015-05 Christoph Bösch (UT), Cryptographically Enforced Search Pattern Hiding. 2015-04 Howard Spoelstra (OUN), Collaborations in Open Learning Environments. 2015-03 Twan van Laarhoven (RUN), Machine learning for network data. 2015-02 Faiza Bukhsh (UvT), Smart auditing: Innovative Compliance Checking in Customs Controls. 2015-01 Niels Netten (UvA), Machine Learning for Relevance of Information in Crisis Response. 2014-47 Shangsong Liang (UVA), Fusion and Diversification in Information Retrieval. 2014-46 Ke Tao (TUD), Social Web Data Analytics: Relevance, Redundancy, Diversity. 2014-45 Birgit Schmitz (OUN), Mobile Games for Learning: A Pattern-Based Approach. 2014-44 Paulien Meesters (UvT), Intelligent Blauw. Met als ondertitel: Intelligence-gestuurde politiezorg in gebiedsgebonden eenheden.. 2014-43 Kevin Vlaanderen (UU), Supporting Process Improvement using Method Increments. 2014-42 Carsten Eijckhof (CWI/TUD), Contextual Multidimensional Relevance Models. 2014-41 Frederic Hogenboom (EUR), Automated Detection of Financial Events in News Text."
    }, {
      "heading" : "210 SIKS DISSERTATION SERIES",
      "text" : "2014-40 Walter Omona (RUN), A Framework for Knowledge Management Using ICT in Higher Education. 2014-39 Jasmina Maric (UvT), Web Communities, Immigration, and Social Capital. 2014-38 Danny Plass-Oude Bos (UT), Making brain-computer interfaces better: improving usability through post-processing.. 2014-37 Maral Dadvar (UT), Experts and Machines United Against Cyberbullying. 2014-36 Joos Buijs (TUE), Flexible Evolutionary Algorithms for Mining Structured Process Models. 2014-35 Joost van Ooijen (UU), Cognitive Agents in Virtual Worlds: A Middleware Design Approach. 2014-34 Christina Manteli(VU), The Effect of Governance in Global Software Development: Analyzing Transactive Memory Systems.. 2014-33 Tesfa Tegegne (RUN), Service Discovery in eHealth. 2014-32 Naser Ayat (UvA), On Entity Resolution in Probabilistic Data. 2014-31 Leo van Moergestel (UU), Agent Technology in Agile Multiparallel Manufacturing and Product Support. 2014-30 Peter de Cock (UvT), Anticipating Criminal Behaviour. 2014-29 Jaap Kabbedijk (UU), Variability in Multi-Tenant Enterprise Software. 2014-28 Anna Chmielowiec (VU), Decentralized k-Clique Matching. 2014-27 Rui Jorge Almeida (EUR), Conditional Density Models Integrating Fuzzy and Probabilistic Representations of Uncertainty. 2014-26 Tim Baarslag (TUD), What to Bid and When to Stop. 2014-25 Martijn Lappenschaar (RUN), New network models for the analysis of disease interaction. 2014-24 Davide Ceolin (VU), Trusting Semi-structured Web Data. 2014-23 Eleftherios Sidirourgos (UvA/CWI), Space Efficient Indexes for the Big Data Era. 2014-22 Marieke Peeters (UU), Personalized Educational Games - Developing agent-supported scenario-based training. 2014-21 Kassidy Clark (TUD), Negotiation and Monitoring in Open Environments. 2014-20 Mena Habib (UT), Named Entity Extraction and Disambiguation for Informal Text: The Missing Link. 2014-19 Vinicius Ramos (TUE), Adaptive Hypermedia Courses: Qualitative and Quantitative Evaluation and Tool Support. 2014-18 Mattijs Ghijsen (UVA), Methods and Models for the Design and Study of Dynamic Agent Organizations. 2014-17 Kathrin Dentler (VU), Computing healthcare quality indicators automatically: Secondary Use of Patient Data and Semantic Interoperability. 2014-16 Krystyna Milian (VU), Supporting trial recruitment and design by automatically interpreting eligibility criteria. 2014-15 Natalya Mogles (VU), Agent-Based Analysis and Support of Human Functioning in Complex Socio-Technical Systems: Applications in Safety and Healthcare. 2014-14 Yangyang Shi (TUD), Language Models With Meta-information. 2014-13 Arlette van Wissen (VU), Agent-Based Support for Behavior Change: Models and Applications in Health and Safety Domains. 2014-12 Willem van Willigen (VU), Look Ma, No Hands: Aspects of Autonomous Vehicle\nSIKS DISSERTATION SERIES 211\nControl. 2014-11 Janneke van der Zwaan (TUD), An Empathic Virtual Buddy for Social Support. 2014-10 Ivan Salvador Razo Zapata (VU), Service Value Networks. 2014-09 Philip Jackson (UvT), Toward Human-Level Artificial Intelligence: Representation and Computation of Meaning in Natural Language. 2014-08 Samur Araujo (TUD), Data Integration over Distributed and Heterogeneous Data Endpoints. 2014-07 Arya Adriansyah (TUE), Aligning Observed and Modeled Behavior. 2014-06 Damian Tamburri (VU), Supporting Networked Software Development. 2014-05 Jurriaan van Reijsen (UU), Knowledge Perspectives on Advancing Dynamic Capability. 2014-04 Hanna Jochmann-Mannak (UT), Websites for children: search strategies and interface design - Three studies on children’s search performance and evaluation. 2014-03 Sergio Raul Duarte Torres (UT), Information Retrieval for Children: Search Behavior and Solutions. 2014-02 Fiona Tuliyano (RUN), Combining System Dynamics with a Domain Modeling Method. 2014-01 Nicola Barile (UU), Studies in Learning Monotone Models from Data. 2013-43 Marc Bron (UVA), Exploration and Contextualization through Interaction and Concepts. 2013-42 Léon Planken (TUD), Algorithms for Simple Temporal Reasoning. 2013-41 Jochem Liem (UVA), Supporting the Conceptual Modelling of Dynamic Systems: A Knowledge Engineering Perspective on Qualitative Reasoning. 2013-40 Pim Nijssen (UM), Monte-Carlo Tree Search for Multi-Player Games. 2013-39 Joop de Jong (TUD), A Method for Enterprise Ontology based Design of Enterprise Information Systems. 2013-38 Eelco den Heijer (VU), Autonomous Evolutionary Art. 2013-37 Dirk Börner (OUN), Ambient Learning Displays. 2013-36 Than Lam Hoang (TUe), Pattern Mining in Data Streams. 2013-35 Abdallah El Ali (UvA), Minimal Mobile Human Computer Interaction. 2013-34 Kien Tjin-Kam-Jet (UT), Distributed Deep Web Search. 2013-33 Qi Gao (TUD), User Modeling and Personalization in the Microblogging Sphere. 2013-32 Kamakshi Rajagopal (OUN), Networking For Learning; The role of Networking in a Lifelong Learner’s Professional Development. 2013-31 Dinh Khoa Nguyen (UvT), Blueprint Model and Language for Engineering Cloud Applications. 2013-30 Joyce Nakatumba (TUE), Resource-Aware Business Process Management: Analysis and Support. 2013-29 Iwan de Kok (UT), Listening Heads. 2013-28 Frans van der Sluis (UT), When Complexity becomes Interesting: An Inquiry into the Information eXperience. 2013-27 Mohammad Huq (UT), Inference-based Framework Managing Data Provenance. 2013-26 Alireza Zarghami (UT), Architectural Support for Dynamic Homecare Service Provisioning. 2013-25 Agnieszka Anna Latoszek-Berendsen (UM), Intention-based Decision Support. A"
    }, {
      "heading" : "212 SIKS DISSERTATION SERIES",
      "text" : "new way of representing and implementing clinical guidelines in a Decision Support System. 2013-24 Haitham Bou Ammar (UM), Automated Transfer in Reinforcement Learning. 2013-23 Patricio de Alencar Silva(UvT), Value Activity Monitoring. 2013-22 Tom Claassen (RUN), Causal Discovery and Logic. 2013-21 Sander Wubben (UvT), Text-to-text generation by monolingual machine translation. 2013-20 Katja Hofmann (UvA), Fast and Reliable Online Learning to Rank for Information Retrieval. 2013-19 Renze Steenhuizen (TUD), Coordinated Multi-Agent Planning and Scheduling. 2013-18 Jeroen Janssens (UvT), Outlier Selection and One-Class Classification. 2013-17 Koen Kok (VU), The PowerMatcher: Smart Coordination for the Smart Electricity Grid. 2013-16 Eric Kok (UU), Exploring the practical benefits of argumentation in multi-agent deliberation. 2013-15 Daniel Hennes (UM), Multiagent Learning - Dynamic Games and Applications. 2013-14 Jafar Tanha (UVA), Ensemble Approaches to Semi-Supervised Learning Learning. 2013-13 Mohammad Safiri(UT), Service Tailoring: User-centric creation of integrated ITbased homecare services to support independent living of elderly. 2013-12 Marian Razavian(VU), Knowledge-driven Migration to Services. 2013-11 Evangelos Pournaras(TUD), Multi-level Reconfigurable Self-organization in Overlay Services. 2013-10 Jeewanie Jayasinghe Arachchige(UvT), A Unified Modeling Framework for Service Design.. 2013-09 Fabio Gori (RUN), Metagenomic Data Analysis: Computational Methods and Applications. 2013-08 Robbert-Jan Merk(VU), Making enemies: cognitive modeling for opponent agents in fighter pilot simulators. 2013-07 Giel van Lankveld (UvT), Quantifying Individual Player Differences. 2013-06 Romulo Goncalves(CWI), The Data Cyclotron: Juggling Data and Queries for a Data Warehouse Audience. 2013-05 Dulce Pumareja (UT), Groupware Requirements Evolutions Patterns. 2013-04 Chetan Yadati(TUD), Coordinating autonomous planning and scheduling. 2013-03 Szymon Klarman (VU), Reasoning with Contexts in Description Logics. 2013-02 Erietta Liarou (CWI), MonetDB/DataCell: Leveraging the Column-store Database Technology for Efficient and Scalable Stream Processing. 2013-01 Viorel Milea (EUR), News Analytics for Financial Decision Support. 2012-51 Jeroen de Jong (TUD), Heuristics in Dynamic Sceduling; a practical framework with a case study in elevator dispatching. 2012-50 Steven van Kervel (TUD), Ontologogy driven Enterprise Information Systems Engineering. 2012-49 Michael Kaisers (UM), Learning against Learning - Evolutionary dynamics of reinforcement learning algorithms in strategic interactions. 2012-48 Jorn Bakker (TUE), Handling Abrupt Changes in Evolving Time-series Data.\nSIKS DISSERTATION SERIES 213\n2012-47 Manos Tsagkias (UVA), Mining Social Media: Tracking Content and Predicting Behavior. 2012-46 Simon Carter (UVA), Exploration and Exploitation of Multilingual Data for Statistical Machine Translation. 2012-45 Benedikt Kratz (UvT), A Model and Language for Business-aware Transactions. 2012-44 Anna Tordai (VU), On Combining Alignment Techniques. 2012-43 Withdrawn, N/A. 2012-42 Dominique Verpoorten (OU), Reflection Amplifiers in self-regulated Learning. 2012-41 Sebastian Kelle (OU), Game Design Patterns for Learning. 2012-40 Agus Gunawan (UvT), Information Access for SMEs in Indonesia. 2012-39 Hassan Fatemi (UT), Risk-aware design of value and coordination networks. 2012-38 Selmar Smit (VU), Parameter Tuning and Scientific Testing in Evolutionary Algorithms. 2012-37 Agnes Nakakawa (RUN), A Collaboration Process for Enterprise Architecture Creation. 2012-36 Denis Ssebugwawo (RUN), Analysis and Evaluation of Collaborative Modeling Processes. 2012-35 Evert Haasdijk (VU), Never Too Old To Learn – On-line Evolution of Controllers in Swarm- and Modular Robotics. 2012-34 Pavol Jancura (RUN), Evolutionary analysis in PPI networks and applications. 2012-33 Rory Sie (OUN), Coalitions in Cooperation Networks (COCOON). 2012-32 Wietske Visser (TUD), Qualitative multi-criteria preference representation and reasoning. 2012-31 Emily Bagarukayo (RUN), A Learning by Construction Approach for Higher Order Cognitive Skills Improvement, Building Capacity and Infrastructure. 2012-30 Alina Pommeranz (TUD), Designing Human-Centered Systems for Reflective Decision Making. 2012-29 Almer Tigelaar (UT), Peer-to-Peer Information Retrieval. 2012-28 Nancy Pascall (UvT), Engendering Technology Empowering Women. 2012-27 Hayrettin Gurkok (UT), Mind the Sheep! User Experience Evaluation & BrainComputer Interface Games. 2012-26 Emile de Maat (UVA), Making Sense of Legal Text. 2012-25 Silja Eckartz (UT), Managing the Business Case Development in Inter-Organizational IT Projects: A Methodology and its Application. 2012-24 Laurens van der Werff (UT), Evaluation of Noisy Transcripts for Spoken Document Retrieval. 2012-23 Christian Muehl (UT), Toward Affective Brain-Computer Interfaces: Exploring the Neurophysiology of Affect during Human Media Interaction. 2012-22 Thijs Vis (UvT), Intelligence, politie en veiligheidsdienst: verenigbare grootheden?. 2012-21 Roberto Cornacchia (TUD), Querying Sparse Matrices for Information Retrieval. 2012-20 Ali Bahramisharif (RUN), Covert Visual Spatial Attention, a Robust Paradigm for Brain-Computer Interfacing. 2012-19 Helen Schonenberg (TUE), What’s Next? Operational Support for Business Process Execution."
    }, {
      "heading" : "214 SIKS DISSERTATION SERIES",
      "text" : "2012-18 Eltjo Poort (VU), Improving Solution Architecting Practices. 2012-17 Amal Elgammal (UvT), Towards a Comprehensive Framework for Business Process Compliance. 2012-16 Fiemke Both (VU), Helping people by understanding them - Ambient Agents supporting task execution and depression treatment. 2012-15 Natalie van der Wal (VU), Social Agents. Agent-Based Modelling of Integrated Internal and Social Dynamics of Cognitive and Affective Processes.. 2012-14 Evgeny Knutov(TUE), Generic Adaptation Framework for Unifying Adaptive Webbased Systems. 2012-13 Suleman Shahid (UvT), Fun and Face: Exploring non-verbal expressions of emotion during playful interactions. 2012-12 Kees van der Sluijs (TUE), Model Driven Design and Data Integration in Semantic Web Information Systems. 2012-11 J.C.B. Rantham Prabhakara (TUE), Process Mining in the Large: Preprocessing, Discovery, and Diagnostics. 2012-10 David Smits (TUE), Towards a Generic Distributed Adaptive Hypermedia Environment. 2012-09 Ricardo Neisse (UT), Trust and Privacy Management Support for Context-Aware Service Platforms. 2012-08 Gerben de Vries (UVA), Kernel Methods for Vessel Trajectories. 2012-07 Rianne van Lambalgen (VU), When the Going Gets Tough: Exploring Agentbased Models of Human Performance under Demanding Conditions. 2012-06 Wolfgang Reinhardt (OU), Awareness Support for Knowledge Workers in Research Networks. 2012-05 Marijn Plomp (UU), Maturing Interorganisational Information Systems. 2012-04 Jurriaan Souer (UU), Development of Content Management System-based Web Applications. 2012-03 Adam Vanya (VU), Supporting Architecture Evolution by Mining Software Repositories. 2012-02 Muhammad Umair(VU), Adaptivity, emotion, and Rationality in Human and Ambient Agent Models. 2012-01 Terry Kakeeto (UvT), Relationship Marketing for SMEs in Uganda. 2011-49 Andreea Niculescu (UT), Conversational interfaces for task-oriented spoken dialogues: design aspects influencing interaction quality. 2011-48 Mark Ter Maat (UT), Response Selection and Turn-taking for a Sensitive Artificial Listening Agent. 2011-47 Azizi Bin Ab Aziz(VU), Exploring Computational Models for Intelligent Support of Persons with Depression. 2011-46 Beibei Hu (TUD), Towards Contextualized Information Delivery: A Rule-based Architecture for the Domain of Mobile Police Work. 2011-45 Herman Stehouwer (UvT), Statistical Language Models for Alternative Sequence Selection. 2011-44 Boris Reuderink (UT), Robust Brain-Computer Interfaces. 2011-43 Henk van der Schuur (UU), Process Improvement through Software Operation Knowledge.\nSIKS DISSERTATION SERIES 215\n2011-42 Michal Sindlar (UU), Explaining Behavior through Mental State Attribution. 2011-41 Luan Ibraimi (UT), Cryptographically Enforced Distributed Data Access Control. 2011-40 Viktor Clerc (VU), Architectural Knowledge Management in Global Software Development. 2011-39 Joost Westra (UU), Organizing Adaptation using Agents in Serious Games. 2011-38 Nyree Lemmens (UM), Bee-inspired Distributed Optimization. 2011-37 Adriana Burlutiu (RUN), Machine Learning for Pairwise Data, Applications for Preference Learning and Supervised Network Inference. 2011-36 Erik van der Spek (UU), Experiments in serious game design: a cognitive approach. 2011-35 Maaike Harbers (UU), Explaining Agent Behavior in Virtual Training. 2011-34 Paolo Turrini (UU), Strategic Reasoning in Interdependence: Logical and Gametheoretical Investigations. 2011-33 Tom van der Weide (UU), Arguing to Motivate Decisions. 2011-32 Nees-Jan van Eck (EUR), Methodological Advances in Bibliometric Mapping of Science. 2011-31 Ludo Waltman (EUR), Computational and Game-Theoretic Approaches for Modeling Bounded Rationality. 2011-30 Egon van den Broek (UT), Affective Signal Processing (ASP): Unraveling the mystery of emotions. 2011-29 Faisal Kamiran (TUE), Discrimination-aware Classification. 2011-28 Rianne Kaptein(UVA), Effective Focused Retrieval by Exploiting Query Context and Document Structure. 2011-27 Aniel Bhulai (VU), Dynamic website optimization through autonomous management of design patterns. 2011-26 Matthijs Aart Pontier (VU), Virtual Agents for Human Communication - Emotion Regulation and Involvement-Distance Trade-Offs in Embodied Conversational Agents and Robots. 2011-25 Syed Waqar ul Qounain Jaffry (VU)), Analysis and Validation of Models for Trust Dynamics. 2011-24 Herwin van Welbergen (UT), Behavior Generation for Interpersonal Coordination with Virtual Humans On Specifying, Scheduling and Realizing Multimodal Virtual Human Behavior. 2011-23 Wouter Weerkamp (UVA), Finding People and their Utterances in Social Media. 2011-22 Junte Zhang (UVA), System Evaluation of Archival Description and Access. 2011-21 Linda Terlouw (TUD), Modularization and Specification of Service-Oriented Systems. 2011-20 Qing Gu (VU), Guiding service-oriented software engineering - A view-based approach. 2011-19 Ellen Rusman (OU), The Mind ’ s Eye on Personal Profiles. 2011-18 Mark Ponsen (UM), Strategic Decision-Making in complex games. 2011-17 Jiyin He (UVA), Exploring Topic Structure: Coherence, Diversity and Relatedness. 2011-16 Maarten Schadd (UM), Selective Search in Games of Different Complexity. 2011-15 Marijn Koolen (UvA), The Meaning of Structure: the Value of Link Evidence for"
    }, {
      "heading" : "216 SIKS DISSERTATION SERIES",
      "text" : "Information Retrieval. 2011-14 Milan Lovric (EUR), Behavioral Finance and Agent-Based Artificial Markets. 2011-13 Xiaoyu Mao (UvT), Airport under Control. Multiagent Scheduling for Airport Ground Handling. 2011-12 Carmen Bratosin (TUE), Grid Architecture for Distributed Process Mining. 2011-11 Dhaval Vyas (UT), Designing for Awareness: An Experience-focused HCI Perspective. 2011-10 Bart Bogaert (UvT), Cloud Content Contention. 2011-09 Tim de Jong (OU), Contextualised Mobile Media for Learning. 2011-08 Nieske Vergunst (UU), BDI-based Generation of Robust Task-Oriented Dialogues. 2011-07 Yujia Cao (UT), Multimodal Information Presentation for High Load Human Computer Interaction. 2011-06 Yiwen Wang (TUE), Semantically-Enhanced Recommendations in Cultural Heritage. 2011-05 Base van der Raadt (VU), Enterprise Architecture Coming of Age - Increasing the Performance of an Emerging Discipline.. 2011-04 Hado van Hasselt (UU), Insights in Reinforcement Learning; Formal analysis and empirical evaluation of temporal-difference. 2011-03 Jan Martijn van der Werf (TUE), Compositional Design and Verification of ComponentBased Information Systems. 2011-02 Nick Tinnemeier(UU), Organizing Agent Organizations. Syntax and Operational Semantics of an Organization-Oriented Programming Language. 2011-01 Botond Cseke (RUN), Variational Algorithms for Bayesian Inference in Latent Gaussian Models. 2010-53 Edgar Meij (UVA), Combining Concepts and Language Models for Information Access. 2010-52 Peter-Paul van Maanen (VU), Adaptive Support for Human-Computer Teams: Exploring the Use of Cognitive Models of Trust and Attention. 2010-51 Alia Khairia Amin (CWI), Understanding and supporting information seeking tasks in multiple sources. 2010-50 Bouke Huurnink (UVA), Search in Audiovisual Broadcast Archives. 2010-49 Jahn-Takeshi Saito (UM), Solving difficult game positions. 2010-48 Withdrawn, . 2010-47 Chen Li (UT), Mining Process Model Variants: Challenges, Techniques, Examples. 2010-46 Vincent Pijpers (VU), e3alignment: Exploring Inter-Organizational Business-ICT Alignment. 2010-45 Vasilios Andrikopoulos (UvT), A theory and model for the evolution of software services. 2010-44 Pieter Bellekens (TUE), An Approach towards Context-sensitive and User-adapted Access to Heterogeneous Data Sources, Illustrated in the Television Domain. 2010-43 Peter van Kranenburg (UU), A Computational Approach to Content-Based Retrieval of Folk Song Melodies. 2010-42 Sybren de Kinderen (VU), Needs-driven service bundling in a multi-supplier setting - the computational e3-service approach.\nSIKS DISSERTATION SERIES 217\n2010-41 Guillaume Chaslot (UM), Monte-Carlo Tree Search. 2010-40 Mark van Assem (VU), Converting and Integrating Vocabularies for the Semantic Web. 2010-39 Ghazanfar Farooq Siddiqui (VU), Integrative modeling of emotions in virtual agents. 2010-38 Dirk Fahland (TUE), From Scenarios to components. 2010-37 Niels Lohmann (TUE), Correctness of services and their composition. 2010-36 Jose Janssen (OU), Paving the Way for Lifelong Learning; Facilitating competence development through a learning path specification. 2010-35 Dolf Trieschnigg (UT), Proof of Concept: Concept-based Biomedical Information Retrieval. 2010-34 Teduh Dirgahayu (UT), Interaction Design in Service Compositions. 2010-33 Robin Aly (UT), Modeling Representation Uncertainty in Concept-Based Multimedia Retrieval. 2010-32 Marcel Hiel (UvT), An Adaptive Service Oriented Architecture: Automatically solving Interoperability Problems. 2010-31 Victor de Boer (UVA), Ontology Enrichment from Heterogeneous Sources on the Web. 2010-30 Marieke van Erp (UvT), Accessing Natural History - Discoveries in data cleaning, structuring, and retrieval. 2010-29 Stratos Idreos(CWI), Database Cracking: Towards Auto-tuning Database Kernels. 2010-28 Arne Koopman (UU), Characteristic Relational Patterns. 2010-27 Marten Voulon (UL), Automatisch contracteren. 2010-26 Ying Zhang (CWI), XRPC: Efficient Distributed Query Processing on Heterogeneous XQuery Engines. 2010-25 Zulfiqar Ali Memon (VU), Modelling Human-Awareness for Ambient Agents: A Human Mindreading Perspective. 2010-24 Dmytro Tykhonov, Designing Generic and Efficient Negotiation Strategies. 2010-23 Bas Steunebrink (UU), The Logical Structure of Emotions. 2010-22 Michiel Hildebrand (CWI), End-user Support for Access to Heterogeneous Linked Data. 2010-21 Harold van Heerde (UT), Privacy-aware data management by means of data degradation. 2010-20 Ivo Swartjes (UT), Whose Story Is It Anyway? How Improv Informs Agency and Authorship of Emergent Narrative. 2010-19 Henriette Cramer (UvA), People’s Responses to Autonomous and Adaptive Systems. 2010-18 Charlotte Gerritsen (VU), Caught in the Act: Investigating Crime by Agent-Based Simulation. 2010-17 Spyros Kotoulas (VU), Scalable Discovery of Networked Resources: Algorithms, Infrastructure, Applications. 2010-16 Sicco Verwer (TUD), Efficient Identification of Timed Automata, theory and practice. 2010-15 Lianne Bodenstaff (UT), Managing Dependency Relations in Inter-Organizational"
    }, {
      "heading" : "218 SIKS DISSERTATION SERIES",
      "text" : "Models. 2010-14 Sander van Splunter (VU), Automated Web Service Reconfiguration. 2010-13 Gianluigi Folino (RUN), High Performance Data Mining using Bio-inspired techniques. 2010-12 Susan van den Braak (UU), Sensemaking software for crime analysis. 2010-11 Adriaan Ter Mors (TUD), The world according to MARP: Multi-Agent Route Planning. 2010-10 Rebecca Ong (UL), Mobile Communication and Protection of Children. 2010-09 Hugo Kielman (UL), A Politiele gegevensverwerking en Privacy, Naar een effectieve waarborging. 2010-08 Krzysztof Siewicz (UL), Towards an Improved Regulatory Framework of Free Software. Protecting user freedoms in a world of software communities and eGovernments. 2010-07 Wim Fikkert (UT), Gesture interaction at a Distance. 2010-06 Sander Bakkes (UvT), Rapid Adaptation of Video Game AI. 2010-05 Claudia Hauff (UT), Predicting the Effectiveness of Queries and Retrieval Systems. 2010-04 Olga Kulyk (UT), Do You Know What I Know? Situational Awareness of Colocated Teams in Multidisplay Environments. 2010-03 Joost Geurts (CWI), A Document Engineering Model and Processing Framework for Multimedia documents. 2010-02 Ingo Wassink (UT), Work flows in Life Science. 2010-01 Matthijs van Leeuwen (UU), Patterns that Matter. 2009-46 Loredana Afanasiev (UvA), Querying XML: Benchmarks and Recursion. 2009-45 Jilles Vreeken (UU), Making Pattern Mining Useful. 2009-44 Roberto Santana Tapia (UT), Assessing Business-IT Alignment in Networked Organizations. 2009-43 Virginia Nunes Leal Franqueira (UT), Finding Multi-step Attacks in Computer Networks using Heuristic Search and Mobile Ambients. 2009-42 Toine Bogers (UvT), Recommender Systems for Social Bookmarking. 2009-41 Igor Berezhnyy (UvT), Digital Analysis of Paintings. 2009-40 Stephan Raaijmakers (UvT), Multinomial Language Learning: Investigations into the Geometry of Language. 2009-39 Christian Stahl (TUE, Humboldt-Universitaet zu Berlin), Service Substitution – A Behavioral Approach Based on Petri Nets. 2009-38 Riina Vuorikari (OU), Tags and self-organisation: a metadata ecology for learning resources in a multilingual context. 2009-37 Hendrik Drachsler (OUN), Navigation Support for Learners in Informal Learning Networks. 2009-36 Marco Kalz (OUN), Placement Support for Learners in Learning Networks. 2009-35 Wouter Koelewijn (UL), Privacy en Politiegegevens; Over geautomatiseerde normatieve informatie-uitwisseling. 2009-34 Inge van de Weerd (UU), Advancing in Software Product Management: An Incremental Method Engineering Approach. 2009-33 Khiet Truong (UT), How Does Real Affect Affect Affect Recognition In Speech?. 2009-32 Rik Farenhorst (VU) and Remco de Boer (VU), Architectural Knowledge Man-\nSIKS DISSERTATION SERIES 219\nagement: Supporting Architects and Auditors. 2009-31 Sofiya Katrenko (UVA), A Closer Look at Learning Relations from Text. 2009-30 Marcin Zukowski (CWI), Balancing vectorized query execution with bandwidthoptimized storage. 2009-29 Stanislav Pokraev (UT), Model-Driven Semantic Integration of Service-Oriented Applications. 2009-28 Sander Evers (UT), Sensor Data Management with Probabilistic Models. 2009-27 Christian Glahn (OU), Contextual Support of social Engagement and Reflection on the Web. 2009-26 Fernando Koch (UU), An Agent-Based Model for the Development of Intelligent Mobile Services. 2009-25 Alex van Ballegooij (CWI), \"RAM: Array Database Management through Relational Mapping\". 2009-24 Annerieke Heuvelink (VUA), Cognitive Models for Training Simulations. 2009-23 Peter Hofgesang (VU), Modelling Web Usage in a Changing Environment. 2009-22 Pavel Serdyukov (UT), Search For Expertise: Going beyond direct evidence. 2009-21 Stijn Vanderlooy (UM), Ranking and Reliable Classification. 2009-20 Bob van der Vecht (UU), Adjustable Autonomy: Controling Influences on Decision Making. 2009-19 Valentin Robu (CWI), Modeling Preferences, Strategic Reasoning and Collaboration in Agent-Mediated Electronic Markets. 2009-18 Fabian Groffen (CWI), Armada, An Evolving Database System. 2009-17 Laurens van der Maaten (UvT), Feature Extraction from Visual Data. 2009-16 Fritz Reul (UvT), New Architectures in Computer Chess. 2009-15 Rinke Hoekstra (UVA), Ontology Representation - Design Patterns and Ontologies that Make Sense. 2009-14 Maksym Korotkiy (VU), From ontology-enabled services to service-enabled ontologies (making ontologies work in e-science with ONTO-SOA). 2009-13 Steven de Jong (UM), Fairness in Multi-Agent Systems. 2009-12 Peter Massuthe (TUE, Humboldt-Universitaet zu Berlin), Operating Guidelines for Services. 2009-11 Alexander Boer (UVA), Legal Theory, Sources of Law & the Semantic Web. 2009-10 Jan Wielemaker (UVA), Logic programming for knowledge-intensive interactive applications. 2009-09 Benjamin Kanagwa (RUN), Design, Discovery and Construction of Service-oriented Systems. 2009-08 Volker Nannen (VU), Evolutionary Agent-Based Policy Analysis in Dynamic Environments. 2009-07 Ronald Poppe (UT), Discriminative Vision-Based Recovery and Recognition of Human Motion. 2009-06 Muhammad Subianto (UU), Understanding Classification. 2009-05 Sietse Overbeek (RUN), Bridging Supply and Demand for Knowledge Intensive Tasks - Based on Knowledge, Cognition, and Quality. 2009-04 Josephine Nabukenya (RUN), Improving the Quality of Organisational Policy Making using Collaboration Engineering."
    }, {
      "heading" : "220 SIKS DISSERTATION SERIES",
      "text" : "2009-03 Hans Stol (UvT), A Framework for Evidence-based Policy Making Using IT. 2009-02 Willem Robert van Hage (VU), Evaluating Ontology-Alignment Techniques. 2009-01 Rasa Jurgelenaite (RUN), Symmetric Causal Independence Models."
    } ],
    "references" : [ {
      "title" : "An Introduction to Multi-Agent Systems. Wiley",
      "author" : [ "M. Wooldridge" ],
      "venue" : null,
      "citeRegEx" : "240",
      "shortCiteRegEx" : "240",
      "year" : 2002
    }, {
      "title" : "Intelligent agents: theory and practice",
      "author" : [ "M. Wooldridge", "N.R. Jennings" ],
      "venue" : null,
      "citeRegEx" : "241",
      "shortCiteRegEx" : "241",
      "year" : 1995
    }, {
      "title" : "Participatory modelling and the local governance of the politics of UK air pollution: A three-city case study",
      "author" : [ "S. Yearley", "S. Cinderby", "J. Forrester", "P. Bailey", "P. Rosen" ],
      "venue" : "Environmental Values,",
      "citeRegEx" : "242",
      "shortCiteRegEx" : "242",
      "year" : 2003
    }, {
      "title" : "Reasoning about commitments in the event calculus: An approach for specifying and executing protocols",
      "author" : [ "P. Yolum", "M. Singh" ],
      "venue" : "Annals of Mathematics and Artificial Intelligence,",
      "citeRegEx" : "243",
      "shortCiteRegEx" : "243",
      "year" : 2004
    }, {
      "title" : "Multi-Institutional Systems: Promise and Performance",
      "author" : [ "H.S. Zuckerman" ],
      "venue" : null,
      "citeRegEx" : "244",
      "shortCiteRegEx" : "244",
      "year" : 1979
    }, {
      "title" : "TUD), Accounting for Values in Design",
      "author" : [ "Christian Detweiler" ],
      "venue" : "Merijn Bruijnes (UT), Believable Suspect Agents; Response and Interpersonal",
      "citeRegEx" : "Detweiler,? \\Q2016\\E",
      "shortCiteRegEx" : "Detweiler",
      "year" : 2016
    }, {
      "title" : "UT), MATERIALS THAT MATTER - Smart Materials meet Art",
      "author" : [ "Andrea Minuto" ],
      "venue" : null,
      "citeRegEx" : "Minuto,? \\Q2016\\E",
      "shortCiteRegEx" : "Minuto",
      "year" : 2016
    }, {
      "title" : "Monitoring Social Media: Summarization, Classification and",
      "author" : [ "Zhaochun Ren" ],
      "venue" : null,
      "citeRegEx" : "Ren,? \\Q2016\\E",
      "shortCiteRegEx" : "Ren",
      "year" : 2016
    }, {
      "title" : "UVA), Single Sample Statistics, exercises in learning from just one",
      "author" : [ "Peter Bloem" ],
      "venue" : null,
      "citeRegEx" : "Bloem,? \\Q2016\\E",
      "shortCiteRegEx" : "Bloem",
      "year" : 2016
    }, {
      "title" : "Khelghati (UT), Deep web content monitoring. 2016-30 Ruud Mattheij (UvT), The Eyes Have It. 2016-29 Nicolas Höning (TUD), Peak reduction in decentralised electricity systems -Markets",
      "author" : [ "2016-31 Mohammad" ],
      "venue" : null,
      "citeRegEx" : "Mohammad,? \\Q2016\\E",
      "shortCiteRegEx" : "Mohammad",
      "year" : 2016
    }, {
      "title" : "TUD), Large-scale Agent-based Social Simulation - A study",
      "author" : [ "Mingxin Zhang" ],
      "venue" : null,
      "citeRegEx" : "Zhang,? \\Q2016\\E",
      "shortCiteRegEx" : "Zhang",
      "year" : 2016
    }, {
      "title" : "TUD), Understanding Geo-spatial Information on Social Media",
      "author" : [ "Wen Li" ],
      "venue" : "Dilhan Thilakarathne (VU),",
      "citeRegEx" : "Li,? \\Q2016\\E",
      "shortCiteRegEx" : "Li",
      "year" : 2016
    }, {
      "title" : "UVA), Query Auto Completion in Information Retrieval. 2016-22 Grace Lewis (VU), Software Architecture Strategies for Cyber-Foraging Systems",
      "author" : [ "Fei Cai" ],
      "venue" : "Alejandro Moreno Célleri (UT),",
      "citeRegEx" : "Cai,? \\Q2016\\E",
      "shortCiteRegEx" : "Cai",
      "year" : 2016
    }, {
      "title" : "UVA), Context & Semantics in News & Web Search. 2016-19 Julia Efremova (Tu/e), Mining Social Structures from Genealogical Data",
      "author" : [ "Daan Odijk" ],
      "venue" : null,
      "citeRegEx" : "Odijk,? \\Q2016\\E",
      "shortCiteRegEx" : "Odijk",
      "year" : 2016
    }, {
      "title" : "Refining Statistical Data on the Web. 2016-17 Berend Weel (VU), Towards Embodied Evolution of Robot Organisms",
      "author" : [ "Albert Meroño Peñuela" ],
      "venue" : "Guangliang Li (UVA),",
      "citeRegEx" : "Peñuela,? \\Q2016\\E",
      "shortCiteRegEx" : "Peñuela",
      "year" : 2016
    }, {
      "title" : "RUN), Hybrid Probabilistic Logics - Theoretical Aspects",
      "author" : [ "Steffen Michels" ],
      "venue" : null,
      "citeRegEx" : "Michels,? \\Q2016\\E",
      "shortCiteRegEx" : "Michels",
      "year" : 2016
    }, {
      "title" : "UVA), Search Engines that Learn from Their Users. 2016-10 George Karafotias (VUA), Parameter Control for Evolutionary Algorithms",
      "author" : [ "Anne Schuth" ],
      "venue" : "Archana Nottamkandath (VU), Trusting Crowdsourced Information on Cultural",
      "citeRegEx" : "Schuth,? \\Q2016\\E",
      "shortCiteRegEx" : "Schuth",
      "year" : 2016
    }, {
      "title" : "Meulendijk (UU), Optimizing medication reviews",
      "author" : [ "Michiel Christiaan" ],
      "venue" : null,
      "citeRegEx" : "Christiaan,? \\Q2016\\E",
      "shortCiteRegEx" : "Christiaan",
      "year" : 2016
    }, {
      "title" : "RUN), Recognition of Shapes by Humans and Machines. 2015-35 Jungxao Xu (TUD), Affective Body Language of Humanoid Robots: Perception",
      "author" : [ "Syed Saiden Abbas" ],
      "venue" : null,
      "citeRegEx" : "Abbas,? \\Q2015\\E",
      "shortCiteRegEx" : "Abbas",
      "year" : 2015
    }, {
      "title" : "Recommender Systems. 2015-33 Frederik Schadd (TUD), Ontology Mapping with Auxiliary Resources. 2015-32 Jerome Gard(UL), Corporate Venture Management in SMEs",
      "author" : [ "Victor de Graaf (UT", "Gesocial" ],
      "venue" : "Yakup Koç (TUD), On the robustness of Power Grids",
      "citeRegEx" : ".UT. and Gesocial,? \\Q2015\\E",
      "shortCiteRegEx" : ".UT. and Gesocial",
      "year" : 2015
    }, {
      "title" : "UM), Monte-Carlo Tree Search Enhancements for One-Player",
      "author" : [ "Hendrik Baier" ],
      "venue" : null,
      "citeRegEx" : "Baier,? \\Q2015\\E",
      "shortCiteRegEx" : "Baier",
      "year" : 2015
    }, {
      "title" : "UU), Bayesian Tools for Early Disease Detection. 2015-24 Richard Berendsen (UVA), Finding People, Papers, and Posts: Vertical Search",
      "author" : [ "Steven Woudenberg" ],
      "venue" : null,
      "citeRegEx" : "Woudenberg,? \\Q2015\\E",
      "shortCiteRegEx" : "Woudenberg",
      "year" : 2015
    }, {
      "title" : "Straalen (UT), A cognitive approach to modeling bad news",
      "author" : [ "Bart van" ],
      "venue" : null,
      "citeRegEx" : "van,? \\Q2015\\E",
      "shortCiteRegEx" : "van",
      "year" : 2015
    }, {
      "title" : "OUN), OpenU: design of an integrated system to support",
      "author" : [ "Henry Hermans" ],
      "venue" : null,
      "citeRegEx" : "Hermans,? \\Q2015\\E",
      "shortCiteRegEx" : "Hermans",
      "year" : 2015
    }, {
      "title" : "Klaassen(UT), HCI Perspectives on Behavior Change Support Systems. 2015-08 Jie Jiang (TUD), Organizational Compliance: An agent-based model for design",
      "author" : [ "2015-09 Randy" ],
      "venue" : null,
      "citeRegEx" : "Randy,? \\Q2015\\E",
      "shortCiteRegEx" : "Randy",
      "year" : 2015
    }, {
      "title" : "Cryptographically Enforced Search Pattern Hiding. 2015-04 Howard Spoelstra (OUN), Collaborations in Open Learning Environments. 2015-03 Twan van Laarhoven (RUN), Machine learning for network data",
      "author" : [ "Christoph Bösch (UT" ],
      "venue" : "Faiza Bukhsh (UvT),",
      "citeRegEx" : ".UT,? \\Q2015\\E",
      "shortCiteRegEx" : ".UT",
      "year" : 2015
    }, {
      "title" : "Netten (UvA), Machine Learning for Relevance of Information in Crisis",
      "author" : [ "2015-01 Niels" ],
      "venue" : null,
      "citeRegEx" : "Niels,? \\Q2015\\E",
      "shortCiteRegEx" : "Niels",
      "year" : 2015
    }, {
      "title" : "UVA), Fusion and Diversification in Information Retrieval. 2014-46 Ke Tao (TUD), Social Web Data Analytics: Relevance, Redundancy, Diversity. 2014-45 Birgit Schmitz (OUN), Mobile Games for Learning: A Pattern-Based Approach",
      "author" : [ "Shangsong Liang" ],
      "venue" : "Paulien Meesters (UvT), Intelligent Blauw. Met als ondertitel: Intelligence-gestuurde",
      "citeRegEx" : "Liang,? \\Q2014\\E",
      "shortCiteRegEx" : "Liang",
      "year" : 2014
    }, {
      "title" : "Eijckhof (CWI/TUD), Contextual Multidimensional Relevance Models. 2014-41 Frederic Hogenboom (EUR), Automated Detection of Financial Events in News",
      "author" : [ "2014-42 Carsten" ],
      "venue" : null,
      "citeRegEx" : "Carsten,? \\Q2014\\E",
      "shortCiteRegEx" : "Carsten",
      "year" : 2014
    }, {
      "title" : "UvT), Web Communities, Immigration, and Social Capital",
      "author" : [ "Jasmina Maric" ],
      "venue" : "Danny Plass-Oude Bos (UT),",
      "citeRegEx" : "Maric,? \\Q2014\\E",
      "shortCiteRegEx" : "Maric",
      "year" : 2014
    }, {
      "title" : "Manteli(VU), The Effect of Governance in Global Software",
      "author" : [ "2014-34 Christina" ],
      "venue" : null,
      "citeRegEx" : "Christina,? \\Q2014\\E",
      "shortCiteRegEx" : "Christina",
      "year" : 2014
    }, {
      "title" : "RUN), Service Discovery in eHealth",
      "author" : [ "Tesfa Tegegne" ],
      "venue" : "Leo van Moergestel (UU),",
      "citeRegEx" : "Tegegne,? \\Q2014\\E",
      "shortCiteRegEx" : "Tegegne",
      "year" : 2014
    }, {
      "title" : "Anticipating Criminal Behaviour. 2014-29 Jaap Kabbedijk (UU), Variability in Multi-Tenant Enterprise Software",
      "author" : [ "Peter de Cock (UvT" ],
      "venue" : "Anna Chmielowiec (VU), Decentralized k-Clique Matching",
      "citeRegEx" : ".UvT,? \\Q2014\\E",
      "shortCiteRegEx" : ".UvT",
      "year" : 2014
    }, {
      "title" : "TUD), What to Bid and When to Stop. 2014-25 Martijn Lappenschaar (RUN), New network models for the analysis of disease",
      "author" : [ "Tim Baarslag" ],
      "venue" : null,
      "citeRegEx" : "Baarslag,? \\Q2014\\E",
      "shortCiteRegEx" : "Baarslag",
      "year" : 2014
    }, {
      "title" : "Trusting Semi-structured Web Data. 2014-23 Eleftherios Sidirourgos (UvA/CWI), Space Efficient Indexes for the Big Data Era. 2014-22 Marieke Peeters (UU), Personalized Educational Games - Developing agent-supported",
      "author" : [ "Davide Ceolin (VU" ],
      "venue" : null,
      "citeRegEx" : ".VU,? \\Q2014\\E",
      "shortCiteRegEx" : ".VU",
      "year" : 2014
    }, {
      "title" : "TUE), Adaptive Hypermedia Courses: Qualitative and Quanti",
      "author" : [ "Vinicius Ramos" ],
      "venue" : null,
      "citeRegEx" : "Ramos,? \\Q2014\\E",
      "shortCiteRegEx" : "Ramos",
      "year" : 2014
    }, {
      "title" : "Mogles (VU), Agent-Based Analysis and Support of Human Functioning",
      "author" : [ "2014-15 Natalya" ],
      "venue" : null,
      "citeRegEx" : "Natalya,? \\Q2014\\E",
      "shortCiteRegEx" : "Natalya",
      "year" : 2014
    }, {
      "title" : "TUD), Language Models With Meta-information",
      "author" : [ "Yangyang Shi" ],
      "venue" : null,
      "citeRegEx" : "Shi,? \\Q2014\\E",
      "shortCiteRegEx" : "Shi",
      "year" : 2014
    }, {
      "title" : "TUD), An Empathic Virtual Buddy for Social Support",
      "author" : [ "Janneke van der Zwaan" ],
      "venue" : "Service Value Networks",
      "citeRegEx" : "Zwaan,? \\Q2014\\E",
      "shortCiteRegEx" : "Zwaan",
      "year" : 2014
    }, {
      "title" : "TUD), Data Integration over Distributed and Heterogeneous Data",
      "author" : [ "Samur Araujo" ],
      "venue" : null,
      "citeRegEx" : "Araujo,? \\Q2014\\E",
      "shortCiteRegEx" : "Araujo",
      "year" : 2014
    }, {
      "title" : "Aligning Observed and Modeled Behavior",
      "author" : [ "Arya Adriansyah (TUE" ],
      "venue" : "Damian Tamburri (VU), Supporting Networked Software Development",
      "citeRegEx" : ".TUE,? \\Q2014\\E",
      "shortCiteRegEx" : ".TUE",
      "year" : 2014
    }, {
      "title" : "UU), Studies in Learning Monotone Models from Data. 2013-43 Marc Bron (UVA), Exploration and Contextualization through Interaction",
      "author" : [ "Nicola Barile" ],
      "venue" : null,
      "citeRegEx" : "Barile,? \\Q2013\\E",
      "shortCiteRegEx" : "Barile",
      "year" : 2013
    }, {
      "title" : "TUD), Algorithms for Simple Temporal Reasoning",
      "author" : [ "Léon Planken" ],
      "venue" : "Jochem Liem (UVA), Supporting the Conceptual Modelling of Dynamic Systems:",
      "citeRegEx" : "Planken,? \\Q2013\\E",
      "shortCiteRegEx" : "Planken",
      "year" : 2013
    }, {
      "title" : "UM), Monte-Carlo Tree Search for Multi-Player Games. 2013-39 Joop de Jong (TUD), A Method for Enterprise Ontology based Design of Enter",
      "author" : [ "Pim Nijssen" ],
      "venue" : null,
      "citeRegEx" : "Nijssen,? \\Q2013\\E",
      "shortCiteRegEx" : "Nijssen",
      "year" : 2013
    }, {
      "title" : "Autonomous Evolutionary Art. 2013-37 Dirk Börner (OUN), Ambient Learning Displays. 2013-36 Than Lam Hoang (TUe), Pattern Mining in Data Streams",
      "author" : [ "Eelco den Heijer (VU" ],
      "venue" : "Abdallah El Ali (UvA), Minimal Mobile Human Computer Interaction",
      "citeRegEx" : ".VU,? \\Q2013\\E",
      "shortCiteRegEx" : ".VU",
      "year" : 2013
    }, {
      "title" : "TUD), User Modeling and Personalization in the Microblogging Sphere",
      "author" : [ "Qi Gao" ],
      "venue" : "Kamakshi Rajagopal (OUN), Networking For Learning; The role of Networking",
      "citeRegEx" : "Gao,? \\Q2013\\E",
      "shortCiteRegEx" : "Gao",
      "year" : 2013
    }, {
      "title" : "UvT), Blueprint Model and Language for Engineering Cloud",
      "author" : [ "2013-31 Dinh Khoa Nguyen" ],
      "venue" : null,
      "citeRegEx" : "Nguyen,? \\Q2013\\E",
      "shortCiteRegEx" : "Nguyen",
      "year" : 2013
    }, {
      "title" : "UT), Inference-based Framework Managing Data Provenance",
      "author" : [ "Mohammad Huq" ],
      "venue" : "Alireza Zarghami (UT),",
      "citeRegEx" : "Huq,? \\Q2013\\E",
      "shortCiteRegEx" : "Huq",
      "year" : 2013
    }, {
      "title" : "Latoszek-Berendsen (UM), Intention-based Decision Support",
      "author" : [ "Agnieszka Anna" ],
      "venue" : null,
      "citeRegEx" : "Anna,? \\Q2013\\E",
      "shortCiteRegEx" : "Anna",
      "year" : 2013
    }, {
      "title" : "Automated Transfer in Reinforcement Learning",
      "author" : [ "Haitham Bou Ammar (UM" ],
      "venue" : null,
      "citeRegEx" : ".UM,? \\Q2013\\E",
      "shortCiteRegEx" : ".UM",
      "year" : 2013
    }, {
      "title" : "UvA), Fast and Reliable Online Learning to Rank for Informa",
      "author" : [ "Katja Hofmann" ],
      "venue" : null,
      "citeRegEx" : "Hofmann,? \\Q2013\\E",
      "shortCiteRegEx" : "Hofmann",
      "year" : 2013
    }, {
      "title" : "Coordinated Multi-Agent Planning and Scheduling",
      "author" : [ "Renze Steenhuizen (TUD" ],
      "venue" : null,
      "citeRegEx" : ".TUD,? \\Q2013\\E",
      "shortCiteRegEx" : ".TUD",
      "year" : 2013
    }, {
      "title" : "UU), Exploring the practical benefits of argumentation in multi-agent",
      "author" : [ "Eric Kok" ],
      "venue" : null,
      "citeRegEx" : "Kok,? \\Q2013\\E",
      "shortCiteRegEx" : "Kok",
      "year" : 2013
    }, {
      "title" : "UM), Multiagent Learning - Dynamic Games and Applications. 2013-14 Jafar Tanha (UVA), Ensemble Approaches to Semi-Supervised Learning",
      "author" : [ "Daniel Hennes" ],
      "venue" : null,
      "citeRegEx" : "Hennes,? \\Q2013\\E",
      "shortCiteRegEx" : "Hennes",
      "year" : 2013
    }, {
      "title" : "EUR), News Analytics for Financial Decision Support",
      "author" : [ "Viorel Milea" ],
      "venue" : null,
      "citeRegEx" : "Milea,? \\Q2012\\E",
      "shortCiteRegEx" : "Milea",
      "year" : 2012
    }, {
      "title" : "Kervel (TUD), Ontologogy driven Enterprise Information Systems",
      "author" : [ "Steven van" ],
      "venue" : null,
      "citeRegEx" : "van,? \\Q2012\\E",
      "shortCiteRegEx" : "van",
      "year" : 2012
    }, {
      "title" : "UM), Learning against Learning - Evolutionary dynamics",
      "author" : [ "Michael Kaisers" ],
      "venue" : null,
      "citeRegEx" : "Kaisers,? \\Q2012\\E",
      "shortCiteRegEx" : "Kaisers",
      "year" : 2012
    }, {
      "title" : "TUE), Handling Abrupt Changes in Evolving Time-series Data",
      "author" : [ "Jorn Bakker" ],
      "venue" : null,
      "citeRegEx" : "Bakker,? \\Q2012\\E",
      "shortCiteRegEx" : "Bakker",
      "year" : 2012
    }, {
      "title" : "UVA), Mining Social Media: Tracking Content and Predicting",
      "author" : [ "Manos Tsagkias" ],
      "venue" : null,
      "citeRegEx" : "Tsagkias,? \\Q2012\\E",
      "shortCiteRegEx" : "Tsagkias",
      "year" : 2012
    }, {
      "title" : "UVA), Exploration and Exploitation of Multilingual Data for Sta",
      "author" : [ "Simon Carter" ],
      "venue" : null,
      "citeRegEx" : "Carter,? \\Q2012\\E",
      "shortCiteRegEx" : "Carter",
      "year" : 2012
    }, {
      "title" : "UvT), A Model and Language for Business-aware Transactions",
      "author" : [ "Benedikt Kratz" ],
      "venue" : "Anna Tordai (VU), On Combining Alignment Techniques",
      "citeRegEx" : "Kratz,? \\Q2012\\E",
      "shortCiteRegEx" : "Kratz",
      "year" : 2012
    }, {
      "title" : "Information Access for SMEs in Indonesia. 2012-39 Hassan Fatemi (UT), Risk-aware design of value and coordination networks",
      "author" : [ "Agus Gunawan (UvT" ],
      "venue" : "Selmar Smit (VU), Parameter Tuning and Scientific Testing in Evolutionary Al-",
      "citeRegEx" : ".UvT,? \\Q2012\\E",
      "shortCiteRegEx" : ".UvT",
      "year" : 2012
    }, {
      "title" : "Evolutionary analysis in PPI networks and applications. 2012-33 Rory Sie (OUN), Coalitions in Cooperation Networks (COCOON)",
      "author" : [ "Pavol Jancura (RUN" ],
      "venue" : "Wietske Visser (TUD),",
      "citeRegEx" : ".RUN,? \\Q2012\\E",
      "shortCiteRegEx" : ".RUN",
      "year" : 2012
    }, {
      "title" : "Bagarukayo (RUN), A Learning by Construction Approach for Higher Or",
      "author" : [ "2012-31 Emily" ],
      "venue" : null,
      "citeRegEx" : "Emily,? \\Q2012\\E",
      "shortCiteRegEx" : "Emily",
      "year" : 2012
    }, {
      "title" : "Peer-to-Peer Information Retrieval. 2012-28 Nancy Pascall (UvT), Engendering Technology Empowering Women",
      "author" : [ "Almer Tigelaar (UT" ],
      "venue" : "Hayrettin Gurkok (UT), Mind the Sheep! User Experience Evaluation",
      "citeRegEx" : ".UT,? \\Q2012\\E",
      "shortCiteRegEx" : ".UT",
      "year" : 2012
    }, {
      "title" : "TUD), Querying Sparse Matrices for Information Retrieval. 2012-20 Ali Bahramisharif (RUN), Covert Visual Spatial Attention, a Robust Paradigm",
      "author" : [ "Roberto Cornacchia" ],
      "venue" : null,
      "citeRegEx" : "Cornacchia,? \\Q2012\\E",
      "shortCiteRegEx" : "Cornacchia",
      "year" : 2012
    }, {
      "title" : "TUE), What’s Next? Operational Support for Business",
      "author" : [ "Helen Schonenberg" ],
      "venue" : null,
      "citeRegEx" : "Schonenberg,? \\Q2012\\E",
      "shortCiteRegEx" : "Schonenberg",
      "year" : 2012
    }, {
      "title" : "TUE), Model Driven Design and Data Integration",
      "author" : [ "2012-12 Kees van der Sluijs" ],
      "venue" : null,
      "citeRegEx" : "Sluijs,? \\Q2012\\E",
      "shortCiteRegEx" : "Sluijs",
      "year" : 2012
    }, {
      "title" : "Neisse (UT), Trust and Privacy Management Support for Context-Aware",
      "author" : [ "2012-09 Ricardo" ],
      "venue" : null,
      "citeRegEx" : "Ricardo,? \\Q2012\\E",
      "shortCiteRegEx" : "Ricardo",
      "year" : 2012
    }, {
      "title" : "OU), Awareness Support for Knowledge Workers",
      "author" : [ "Wolfgang Reinhardt" ],
      "venue" : null,
      "citeRegEx" : "Reinhardt,? \\Q2012\\E",
      "shortCiteRegEx" : "Reinhardt",
      "year" : 2012
    }, {
      "title" : "Umair(VU), Adaptivity, emotion, and Rationality in Human and Am",
      "author" : [ "2012-02 Muhammad" ],
      "venue" : null,
      "citeRegEx" : "Muhammad,? \\Q2012\\E",
      "shortCiteRegEx" : "Muhammad",
      "year" : 2012
    }, {
      "title" : "Ab Aziz(VU), Exploring Computational Models for Intelligent Support",
      "author" : [ "Azizi Bin" ],
      "venue" : null,
      "citeRegEx" : "Bin,? \\Q2011\\E",
      "shortCiteRegEx" : "Bin",
      "year" : 2011
    }, {
      "title" : "Sindlar (UU), Explaining Behavior through Mental State Attribution",
      "author" : [ "2011-42 Michal" ],
      "venue" : null,
      "citeRegEx" : "Michal,? \\Q2011\\E",
      "shortCiteRegEx" : "Michal",
      "year" : 2011
    }, {
      "title" : "Organizing Adaptation using Agents in Serious Games. 2011-38 Nyree Lemmens (UM), Bee-inspired Distributed Optimization",
      "author" : [ "Joost Westra (UU" ],
      "venue" : "Adriana Burlutiu (RUN),",
      "citeRegEx" : ".UU,? \\Q2011\\E",
      "shortCiteRegEx" : ".UU",
      "year" : 2011
    }, {
      "title" : "UU), Experiments in serious game design: a cognitive",
      "author" : [ "Erik van der Spek" ],
      "venue" : null,
      "citeRegEx" : "Spek,? \\Q2011\\E",
      "shortCiteRegEx" : "Spek",
      "year" : 2011
    }, {
      "title" : "UU), Arguing to Motivate Decisions. 2011-32 Nees-Jan van Eck (EUR), Methodological Advances in Bibliometric Mapping",
      "author" : [ "2011-33 Tom van der Weide" ],
      "venue" : null,
      "citeRegEx" : "Weide,? \\Q2011\\E",
      "shortCiteRegEx" : "Weide",
      "year" : 2011
    }, {
      "title" : "Qounain Jaffry (VU)), Analysis and Validation of Models for Trust",
      "author" : [ "2011-25 Syed Waqar ul" ],
      "venue" : null,
      "citeRegEx" : "ul,? \\Q2011\\E",
      "shortCiteRegEx" : "ul",
      "year" : 2011
    }, {
      "title" : "Finding People and their Utterances in Social Media",
      "author" : [ "Wouter Weerkamp (UVA" ],
      "venue" : null,
      "citeRegEx" : ".UVA,? \\Q2011\\E",
      "shortCiteRegEx" : ".UVA",
      "year" : 2011
    }, {
      "title" : "Selective Search in Games of Different Complexity",
      "author" : [ "Maarten Schadd (UM" ],
      "venue" : "Marijn Koolen (UvA), The Meaning of Structure: the Value of Link Evidence",
      "citeRegEx" : ".UM,? \\Q2011\\E",
      "shortCiteRegEx" : ".UM",
      "year" : 2011
    }, {
      "title" : "Bratosin (TUE), Grid Architecture for Distributed Process Mining. 2011-11 Dhaval Vyas (UT), Designing for Awareness: An Experience-focused HCI Per",
      "author" : [ "2011-12 Carmen" ],
      "venue" : null,
      "citeRegEx" : "Carmen,? \\Q2011\\E",
      "shortCiteRegEx" : "Carmen",
      "year" : 2011
    }, {
      "title" : "UvT), Cloud Content Contention",
      "author" : [ "Bart Bogaert" ],
      "venue" : "Tim de Jong (OU), Contextualised Mobile Media for Learning",
      "citeRegEx" : "Bogaert,? \\Q2011\\E",
      "shortCiteRegEx" : "Bogaert",
      "year" : 2011
    }, {
      "title" : "UVA), Combining Concepts and Language Models for Information",
      "author" : [ "Edgar Meij" ],
      "venue" : null,
      "citeRegEx" : "Meij,? \\Q2010\\E",
      "shortCiteRegEx" : "Meij",
      "year" : 2010
    }, {
      "title" : "UVA), Search in Audiovisual Broadcast Archives",
      "author" : [ "Bouke Huurnink" ],
      "venue" : null,
      "citeRegEx" : "Huurnink,? \\Q2010\\E",
      "shortCiteRegEx" : "Huurnink",
      "year" : 2010
    }, {
      "title" : "UU), A Computational Approach to Content-Based",
      "author" : [ "Peter van Kranenburg" ],
      "venue" : null,
      "citeRegEx" : "Kranenburg,? \\Q2010\\E",
      "shortCiteRegEx" : "Kranenburg",
      "year" : 2010
    }, {
      "title" : "UM), Monte-Carlo Tree Search",
      "author" : [ "Guillaume Chaslot" ],
      "venue" : null,
      "citeRegEx" : "Chaslot,? \\Q2010\\E",
      "shortCiteRegEx" : "Chaslot",
      "year" : 2010
    }, {
      "title" : "TUE), From Scenarios to components. 2010-37 Niels Lohmann (TUE), Correctness of services and their composition. 2010-36 Jose Janssen (OU), Paving the Way for Lifelong Learning",
      "author" : [ "Dirk Fahland" ],
      "venue" : null,
      "citeRegEx" : "Fahland,? \\Q2010\\E",
      "shortCiteRegEx" : "Fahland",
      "year" : 2010
    }, {
      "title" : "UVA), Ontology Enrichment from Heterogeneous Sources on",
      "author" : [ "Victor de Boer" ],
      "venue" : null,
      "citeRegEx" : "Boer,? \\Q2010\\E",
      "shortCiteRegEx" : "Boer",
      "year" : 2010
    }, {
      "title" : "UU), Characteristic Relational Patterns. 2010-27 Marten Voulon (UL), Automatisch contracteren",
      "author" : [ "Arne Koopman" ],
      "venue" : "Ying Zhang (CWI), XRPC: Efficient Distributed Query Processing on Heteroge-",
      "citeRegEx" : "Koopman,? \\Q2010\\E",
      "shortCiteRegEx" : "Koopman",
      "year" : 2010
    }, {
      "title" : "Designing Generic and Efficient Negotiation Strategies. 2010-23 Bas Steunebrink (UU), The Logical Structure of Emotions",
      "author" : [ "Dmytro Tykhonov" ],
      "venue" : "Michiel Hildebrand (CWI),",
      "citeRegEx" : "Tykhonov,? \\Q2010\\E",
      "shortCiteRegEx" : "Tykhonov",
      "year" : 2010
    }, {
      "title" : "UL), Mobile Communication and Protection of Children. 2010-09 Hugo Kielman (UL), A Politiele gegevensverwerking en Privacy, Naar een effec",
      "author" : [ "Rebecca Ong" ],
      "venue" : null,
      "citeRegEx" : "Ong,? \\Q2010\\E",
      "shortCiteRegEx" : "Ong",
      "year" : 2010
    }, {
      "title" : "Siewicz (UL), Towards an Improved Regulatory Framework of Free",
      "author" : [ "2010-08 Krzysztof" ],
      "venue" : null,
      "citeRegEx" : "Krzysztof,? \\Q2010\\E",
      "shortCiteRegEx" : "Krzysztof",
      "year" : 2010
    }, {
      "title" : "Gesture interaction at a Distance. 2010-06 Sander Bakkes (UvT), Rapid Adaptation of Video Game AI. 2010-05 Claudia Hauff (UT), Predicting the Effectiveness of Queries and Retrieval",
      "author" : [ "Wim Fikkert (UT" ],
      "venue" : null,
      "citeRegEx" : ".UT,? \\Q2010\\E",
      "shortCiteRegEx" : ".UT",
      "year" : 2010
    }, {
      "title" : "Kulyk (UT), Do You Know What I Know? Situational Awareness",
      "author" : [ "2010-04 Olga" ],
      "venue" : null,
      "citeRegEx" : "Olga,? \\Q2010\\E",
      "shortCiteRegEx" : "Olga",
      "year" : 2010
    }, {
      "title" : "CWI), A Document Engineering Model and Processing Framework",
      "author" : [ "Joost Geurts" ],
      "venue" : null,
      "citeRegEx" : "Geurts,? \\Q2010\\E",
      "shortCiteRegEx" : "Geurts",
      "year" : 2010
    }, {
      "title" : "UT), Work flows in Life Science",
      "author" : [ "Ingo Wassink" ],
      "venue" : "Jilles Vreeken (UU),",
      "citeRegEx" : "Wassink,? \\Q2009\\E",
      "shortCiteRegEx" : "Wassink",
      "year" : 2009
    }, {
      "title" : "UvT), Recommender Systems for Social Bookmarking",
      "author" : [ "Toine Bogers" ],
      "venue" : "Igor Berezhnyy (UvT), Digital Analysis of Paintings",
      "citeRegEx" : "Bogers,? \\Q2009\\E",
      "shortCiteRegEx" : "Bogers",
      "year" : 2009
    }, {
      "title" : "TUE, Humboldt-Universitaet zu Berlin), Service Substitution – A",
      "author" : [ "Christian Stahl" ],
      "venue" : null,
      "citeRegEx" : "Stahl,? \\Q2009\\E",
      "shortCiteRegEx" : "Stahl",
      "year" : 2009
    }, {
      "title" : "OUN), Navigation Support for Learners in Informal Learning",
      "author" : [ "Hendrik Drachsler" ],
      "venue" : null,
      "citeRegEx" : "Drachsler,? \\Q2009\\E",
      "shortCiteRegEx" : "Drachsler",
      "year" : 2009
    }, {
      "title" : "OUN), Placement Support for Learners in Learning Networks. 2009-35 Wouter Koelewijn (UL), Privacy en Politiegegevens; Over geautomatiseerde",
      "author" : [ "Marco Kalz" ],
      "venue" : null,
      "citeRegEx" : "Kalz,? \\Q2009\\E",
      "shortCiteRegEx" : "Kalz",
      "year" : 2009
    }, {
      "title" : "UT), How Does Real Affect Affect Affect Recognition In Speech",
      "author" : [ "Khiet Truong" ],
      "venue" : "Rik Farenhorst (VU) and Remco de Boer (VU),",
      "citeRegEx" : "Truong,? \\Q2009\\E",
      "shortCiteRegEx" : "Truong",
      "year" : 2009
    }, {
      "title" : "UT), Sensor Data Management with Probabilistic Models. 2009-27 Christian Glahn (OU), Contextual Support of social Engagement and Reflection",
      "author" : [ "Sander Evers" ],
      "venue" : null,
      "citeRegEx" : "Evers,? \\Q2009\\E",
      "shortCiteRegEx" : "Evers",
      "year" : 2009
    }, {
      "title" : "UU), An Agent-Based Model for the Development of Intelligent",
      "author" : [ "Fernando Koch" ],
      "venue" : null,
      "citeRegEx" : "Koch,? \\Q2009\\E",
      "shortCiteRegEx" : "Koch",
      "year" : 2009
    }, {
      "title" : "Ballegooij (CWI), \"RAM: Array Database Management through Rela",
      "author" : [ "Alex van" ],
      "venue" : null,
      "citeRegEx" : "van,? \\Q2009\\E",
      "shortCiteRegEx" : "van",
      "year" : 2009
    }, {
      "title" : "Cognitive Models for Training Simulations. 2009-23 Peter Hofgesang (VU), Modelling Web Usage in a Changing Environment. 2009-22 Pavel Serdyukov (UT), Search For Expertise: Going beyond direct evidence",
      "author" : [ "Annerieke Heuvelink (VUA" ],
      "venue" : "Stijn Vanderlooy (UM), Ranking and Reliable Classification",
      "citeRegEx" : ".VUA,? \\Q2009\\E",
      "shortCiteRegEx" : ".VUA",
      "year" : 2009
    }, {
      "title" : "An Evolving Database System",
      "author" : [ "Fabian Groffen (CWI", "Armada" ],
      "venue" : null,
      "citeRegEx" : ".CWI. and Armada,? \\Q2009\\E",
      "shortCiteRegEx" : ".CWI. and Armada",
      "year" : 2009
    }, {
      "title" : "UM), Fairness in Multi-Agent Systems",
      "author" : [ "Steven de Jong" ],
      "venue" : "Peter Massuthe (TUE, Humboldt-Universitaet zu Berlin),",
      "citeRegEx" : "Jong,? \\Q2009\\E",
      "shortCiteRegEx" : "Jong",
      "year" : 2009
    }, {
      "title" : "UVA), Legal Theory, Sources of Law & the Semantic Web. 2009-10 Jan Wielemaker (UVA), Logic programming for knowledge-intensive interactive",
      "author" : [ "Alexander Boer" ],
      "venue" : null,
      "citeRegEx" : "Boer,? \\Q2009\\E",
      "shortCiteRegEx" : "Boer",
      "year" : 2009
    } ],
    "referenceMentions" : [ {
      "referenceID" : 11,
      "context" : ", Li, T., Vos, M. De, Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2016). Revising Institutions Governed by Institutions for Compliant Regulations.",
      "startOffset" : 2,
      "endOffset" : 80
    }, {
      "referenceID" : 11,
      "context" : ", Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2015). A Framework for Institutions Governing Institutions.",
      "startOffset" : 2,
      "endOffset" : 92
    }, {
      "referenceID" : 11,
      "context" : ", Liu, Q., Polevoy, G., Weerdt, M. de, Dignum, V., Riemsdijk, M. B. van, & Warnier, M. (2014). Request Driven Social Sensing (Demonstration).",
      "startOffset" : 2,
      "endOffset" : 94
    }, {
      "referenceID" : 11,
      "context" : ", Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & van Riemsdijk, M. B. (2016, July). Automated Multi–level Governance Compliance Checking. Journal of Autonomous Agents and Multiagent Systems (JAAMAS). International Foundation for Autonomous Agents and Multiagent Systems. (In Submission) Which extends the following paper: King, T. C., Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2015). A Framework for Institutions Governing Institutions.",
      "startOffset" : 2,
      "endOffset" : 439
    }, {
      "referenceID" : 11,
      "context" : ", Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & van Riemsdijk, M. B. (2015, May). Automated Multi–level Governance Compliance Checking. Journal of Autonomous Agents and Multiagent Systems (JAAMAS). International Foundation for Autonomous Agents and Multiagent Systems. (In Submission) Which extends the following paper: King, T. C., Li, T., De Vos, M., Dignum, V., Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2015). A Framework for Institutions Governing Institutions.",
      "startOffset" : 2,
      "endOffset" : 438
    }, {
      "referenceID" : 11,
      "context" : ", Li, T., Vos, M. De, Jonker, C. M., Padget, J., & Riemsdijk, M. B. Van. (2016). Revising Institutions Governed by Institutions for Compliant Regulations.",
      "startOffset" : 2,
      "endOffset" : 80
    }, {
      "referenceID" : 11,
      "context" : ", Liu, Q., Polevoy, G., Weerdt, M. de, Dignum, V., Riemsdijk, M. B. van, & Warnier, M. (2014). Request Driven Social Sensing (Demonstration).",
      "startOffset" : 2,
      "endOffset" : 94
    }, {
      "referenceID" : 11,
      "context" : ", Liu, Q., Polevoy, G., Weerdt, M. de, Dignum, V., Riemsdijk, M. B. van, & Warnier, M. (2014). Request Driven Social Sensing (Demonstration). In A. Lomuscio, P. Scerri, A. Bazzan, & M. Huhns (Eds.), Proceedings of the 2014 International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2014) (pp. 1651 – 1652). Paris, France: International Foundation for Autonomous Agents and Multiagent Systems. [146] King, T. C., Riemsdijk, M. B. Van, Dignum, V., & Jonker, C. M. (2015). Supporting Request Acceptance with Use Policies.",
      "startOffset" : 2,
      "endOffset" : 486
    } ],
    "year" : 2017,
    "abstractText" : "in the highest–level institutions and the most concretely defined in the lowest–level institutions. To give an example, at the (typically) highest level of governance human rights charters use abstract terminology such as ‘fairness’ or ‘privacy’ which can have many different interpretations. At a slightly lower–level, such as supranational agreements or EU directives, the terminology is more precise but countries can comply in different concrete ways. For example, the Data Retention Directive [71] states that member states should legislate for communications metadata (e.g. the time of a phone call) to be stored between 6 and 24 months. The directive’s regulation is far clearer than human rights regulations, but does not provide the precise data retention time. At a slightly lower–level, such as at the level of nation–states, regulations are more concrete. For example, providing a precise time in which data should be stored. In multi–level governance increasingly abstract regulations are prescribed at increasingly higher levels of governance which can be interpreted in many different ways, making determining compliance of institutional designs different from determining compliance of a society’s members. Institutional design compliance is determined by legal monitors such as courts, which interpret concrete regulations to determine if they violate more abstract regulations. To give an example, the European Court of Justice [70] determined that the Data Retention Directive’s relatively concrete requirement for communications metadata to be stored violated the EU Human Rights Charter’s requirement for personal data to be processed fairly [72]. The judgement was based on the interpretation that storing metadata was the same as storing personal data, and storing personal data without someone’s consent was the same as processing data unfairly. In a different context, where someone has given consent, storing personal data would not be unfair data processing. Hence, a relationship between concrete concepts having a context–sensitive abstract meaning is used to determine compliance between concrete and abstract regulations. According to the Searlian institution concept we adopt, the context–sensitive rules linking concrete and abstract social facts are constitutive rules. Hence, the relation between concrete and abstract norms as found in multi–level governance is derived from constitutive rules. To summarise, institutions govern the design of other institutions in what is known as multi–level governance, the main points are: • Constitutive rules provide context–sensitive links between concrete and abstract concepts and through a derivation, concrete and abstract norms. Chapter 3 and Chapter 4 adopt constitutive rules to determine links between concrete and abstract norms in different social contexts. • In multi–level governance abstract regulations at higher–levels are used to govern concrete regulations at lower–levels. Non–compliant concrete regulations results in punishment. Chapter 3 and Chapter 4 look at formalising and automatically detecting (non–)compliance in multi–level governance. The objective is to flag problems to institution designers before they enact non–compliant institutions (and hence are subject to punishment) and to support higher–levels of governance in monitoring the compliance of lower–level institution designs. In order to support institutional designers in enacting compliant designs, Chapter 5 looks at finding explanatory rectifications for non–compliant institutional designs. • Enforcement should be ensured for regulation governing regulations in two senses. 2.2. GOVERNING MULTI–AGENT SYSTEMS 29 Firstly, the regulation governing regulations should be supported with rewards and/or punishments. We do not look specifically at formalising reward and punishment for regulation governing regulations, but the fact that it should and does exist motivates the contribution of automated compliance checking in Chapter 3 and Chapter 4. Secondly, regulations governing regulations issued by higher-level authorities really require that lower-level authorities do not just implement certain regulations in order to be compliant, but also enforce those implemented regulations. We do not formalise the general principle of both implementation and enforcement required by regulation governing regulations, but we do formalise the specific requirement of the Data Retention Directive [71] to be supported with punishments for non-compliance in Chapter 3 and Chapter 4. GOVERNING THE INSTITUTION DESIGN PROCESS: CONSTITUTIVE SECONDARY LEGAL RULES ASCRIBING RULE CHANGE Constitutive rules define how a social reality grows out of brute facts describing the ground truth. Moreover, constitutive rules make certain social actions, such as marriage, possible. Since brute facts (the ground truth) are liable to changing, it follows that the social reality is liable to changing too and so too the social actions that are possible. Consequently, constitutive rules both describe how the social reality is built and how it evolves over time. Biagoli [20] views an institution itself as having similar dynamic qualities, referring to institutions (legal systems) as organic sets of rules that in themselves change over time. Constitutive rules regulate the change of the social reality but are also subject to changing themselves. According to Hart [117] the complexity of institutions necessitates institutional rules with the sole function to regulate rule change. Hart refers to these rule–change regulating rules as secondary rules. Secondary rules state how and when rules can be changed, modified, repealed and by whom. To give an example, the Italian constitution states that after a law is voted to be enacted by one of the houses of government it is [204][Art. 73] “promulgated by the President of the Republic within one month of their approval”. Such rules regulate rule change by describing the institution design process that must be followed for rule changes to take place. In other words, rules exist with the exclusive function to state what actions constitute rule changes and thereby make the social actions of changing institutional rules possible. Biagoli [20] views rules regulating rule change as constitutive rules that ascribe what constitutes a rule change. From this perspective, a physical rule change does not necessarily count–as a rule change. Physically changing a rule in the Italian rule book (i.e. writing it down) does not count–as changing the rule on its own. Rather, only the president approving a law previously voted for by one of the government houses counts–as a rule change, making the social action of rule change possible. Following this idea, just as constitutive rules ascribe a social reality, making the social reality possible, constitutive rules ascribing rule change make rule changes possible. An analogy can be made to Ricciardi’s argument [206] of the rules of chess constituting the game of chess where moves made outside of chess’ rules can physically be made but then the game of chess is not being played. Likewise, physical rule modifications can be made that do not follow an institution’s constitutive rule change rules, but then according to the",
    "creator" : "LaTeX with hyperref package"
  }
}