{
  "name" : "1412.2328.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "On the Behavioral Formalization of the Cognitive Middleware AWDRAT",
    "authors" : [ "Muhammad Taimoor Khan", "Dimitrios Serpanos", "Howard Shrobe" ],
    "emails" : [ "dserpanos}@qf.org.qa", "hes@csail.mit.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n41 2.\n23 28\nv1 [\ncs .A\nI] 7\nD ec\n2 01\n4"
    }, {
      "heading" : "On the Behavioral Formalization of the Cognitive",
      "text" : ""
    }, {
      "heading" : "Middleware AWDRAT",
      "text" : "Muhammad Taimoor Khan1, Dimitrios Serpanos1, and Howard Shrobe2\n1 QCRI, Qatar {mtkhan, dserpanos}@qf.org.qa\n2 CSAIL, MIT, U.S.A. hes@csail.mit.edu\nWe present our ongoing work and initial results towards the (behavioral) correctness analysis of the cognitive middleware AWDRAT [6]. Since, the (provable) behavioral correctness of a software system is a fundamental pre-requisite of the system’s security. Therefore, the goal of the work is to first formalize the behavioral semantics of the middleware as a prerequisite for our proof of the behavioral correctness. However, in this paper, we focus only on the core and critical component of the middleware, i.e. Execution Monitor which is a part of the module “Architectural Differencer” of AWDRAT. The role of the execution monitor is to identify inconsistencies between runtime observations of the target system and predictions of the specification System Architectural Model of the system. As a starting point we have defined the formal (denotational) semantics of the observations (runtime events) and predictions (executable specifications as of System Architectural Model); then based on the aforementioned formal semantices, we have formalized the behavior of the “Execution Monitor” of the middleware. The material of the parts of this paper is based on [4].\nAWDRAT is a general purpose middleware system that provides survivability to any kind of new and legacy software system. In detail, the middleware checks for consistency between the target system’s actual (runtime) behavior and the expected (system specification) behavior of the system, if there is the one then the diagnostic engine identifies an attack (illegal behavioral pattern) and the corresponding set of resources which were compromised during the attack. After identifying an attack, AWDRAT attempts to repair respectively regenerate the compromised system into a safer state, if possible. The task of regeneration is based on the dependency-directed reasoning [7] engine of the system that contributes to the self-organization and self-awareness of the system by recording execution steps intrinsically states of the system and their corresponding justification (reason). Based on the Execution Monitor and the reasoning engine of AWDRAT not only the detection of known attacks is possible but also detection (resp. recovery from) the unknown attacks is also possible.\nA Specification Language of AWDRAT: A specification language “System Architectural Model” of AWDRAT supports to specify the target system behavior based on a fairly high-level description written in a language of “Plan Calculus” [7] which is a decomposition of pre- and post- and invariant conditions for each computing component (module) of the target system. The description can be considered as an executable specification of the system. The specification is a hierarchical nesting of system’s components such that input and output ports of each component are connected by data and control flow links respective specifications. Furthermore, each component is specified with corresponding pre- and post-conditions. However, the specification also includes a variety of event specifications.\nIn detail, the specification (System Architectural Model) of target system is described at the following two logical levels:\n1. control level describes the control structure of each of the component (e.g. subcomponents, control flow and data flow links) which is\n1\n2. behavior level describes the actual method’s behavioral specification of each of the component which is defined by the syntactic domain “BehModSeq”.\nFurthermore, the registration of the observations is given by the syntactic domain “RegModSeq” at the top of the above domains. All (four) of the aforementioned domains are the top-level syntactic domains of the System Architectural Model. For syntactic details, please see [4].\nBased on the core idea of Lamport [5], we have defined the semantics of the specification as a state relationship to achieve the desired insight of the program’s behavior by relating pre- and post-states [3]. Semantically, the System Architectural Model SAM holds in a given environment e resulting in an environment e′ by transforming a pre-state s into post-state s′ as defined below.\n〚SAM〛(e)(e’, s, s’) ⇔ ∀ e1, e2, e3 ∈ Environment, s1, s2, s3 ∈ State: 〚RegModSeq〛(e)(e1, s, inState⊥(s1)) ∧ 〚StrModSeq〛(e1)(e2, s1, inState⊥(s2)) ∧ 〚BehModSeq〛(e2) (e3, s2, inState⊥(s3)) ∧ 〚SpltModSeq〛(e3)(e’, s3, s’)\nFor further details on the semantics, please see [4]. An Execution Monitor of AWDRAT: In principle, an execution monitor interprets the event stream (traces of the execution of the target system aka observations) against the system specification (the execution of the specification is also called predictions) by detecting inconsistencies between observations and the predictions, if there is any.\nWhen the target system starts execution, an initial “startup” event is generated and dispatched to the top level component (module) of the system which transforms the execution state of the component into “running” mode. The component instantiates its subnetwork (of components, if there is one) and also propagates the data along its data links by enabling the corresponding control links (if involved). When the data arrives on the input port of the component, the execution monitor checks if it is complete; if so, the execution monitor checks the preconditions of the component for the data and if they succeed, it transform the state of the component into “ready” mode. In case, any of the preconditions fails, it enables diagnosis engine.\nAfter the above startup of the target system, the execution monitor starts monitoring the arrival of every observation (runtime event) as follows:\n1. If the event is a “method entry”, then the execution monitor checks if this is one of the “entry events” of the corresponding component in the “ready” state; if so, then after receiving the data and the respective preconditions are checked; if they succeed, then the data is applied on the input port of the component and the mode of the execution state is changed to “running”.\n2. If the event is a “method exit”, then the execution monitor checks if this one of the “exit events” of the component in the “running” state; if so, it changes its state into “completed” mode and collects the data from the output port of the component and checks for the corresponding postconditions. Should the checks fail, the execution monitor enables the diagnosis engine.\n3. If the event is one of the “allowable events” of the component, it continues execution and finally\n4. if the event is an unexpected event, i.e. it is neither an “entry event”, nor an “exit event” and also not in “allowable events”, then the execution monitor starts diagnosis.\nBased on the above behavioral description of the execution monitor, we have formalized the corresponding semantics of the execution monitor as follows:\n∀ app ∈ Target System, sam ∈ System Architectural Model, c ∈ Component, s, s’ ∈ State, t, t’ ∈ States, d, d’ ∈ Environments, e, e’ ∈ Environment, rte ∈ RTEvent: 〚sam〛(d)(d’, t, t’) ∧ 〚app〛(e)(e’, s, s’) ∧ startup(s, app) ∧ isTop(c, 〚app〛(e)(e’, s, s’)) ∧\n∀ p, p’ ∈ Environment∗, m, n ∈ State∗ ⊥ :\nequals(m(0), s) ∧ equals(p(0), e) ⇒\n∃ k ∈ N, p, p’ ∈ Environment∗, m, n ∈ State∗ ⊥ :\n∀ i ∈ Nk : monitors(i, rte, c, p, p’, m, n) ∧ ( eqMode(n(k), “completed”) ∧ eqFlag(n(k), “normal”) ∧\nequals(s’, n(k)) ∨ eqFlag(n(k), “compromised”) ⇒\nenableDiagnosis(p’(k))(n(k), inBool(true)) ∧ equals(s’, n(k)) )\nThe semantics of recursive monitoring is determined by two sequences of states pre and post that are constructed from the pre-state of the monitor. Any ith recursion of the monitor transforms pre(i) state into post(i+1) state from which the pre(i+1) is constructed. No event can be accepted in an Error state and the corresponding monitoring terminates either when the application has terminated with “normal” mode or when some misbehavior is detected as indicated by the respective “compromised” state. The corresponding “monitors” predicate formalizes the aforementioned semantics as discussed in [4].\nThe formalization gives deep insight of the internal behavior of AWDRAT increasing its usability on the one hand and developing basis for its correctness (to be proved by automated tools) on the other hand. Based on this formalism, we are currently working on the proof of the soundness of the Execution Monitor. The proof is essentially a structural induction proof, however, the non-trivial part is the recursive definition of the semantics of the monitor that is to be proved by the principle of rule induction [8]. We also plan to extend AWDRAT such that a target system’s behavior is specified using Abstract State Machine [1] based formalism which then will automatically translate into a semantically equivalent System Architectural Model allowing to already check the inconsistencies in the intra system behavior with various ASM automated tools, e.g. DKAL [2]."
    } ],
    "references" : [ {
      "title" : "Abstract State Machines: A Method for High-Level System Design and Analysis",
      "author" : [ "E. Borger", "Robert F. Stark" ],
      "venue" : null,
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2003
    }, {
      "title" : "DKAL*: Constructing Executable Specifications of Authorization Protocols",
      "author" : [ "Jean-Baptiste Jeannin", "Guido de Caso", "Juan Chen", "Yuri Gurevich", "Prasad Naldurg", "Nikhil Swamy" ],
      "venue" : "Technical Report MSR-TR-2013-19,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2013
    }, {
      "title" : "Towards the Formal Specification and Verification of Maple Programs",
      "author" : [ "Muhammad Taimoor Khan", "Wolfgang Schreiner" ],
      "venue" : "Intelligent Computer Mathematics,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2012
    }, {
      "title" : "On the Formal Semantics of the Cognitive Middleware AWDRAT",
      "author" : [ "Muhammad Taimoor Khan", "Dimitrios Serpanos", "Howard Shrobe" ],
      "venue" : "Technical Report CSAIL, MIT (to appear),",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2014
    }, {
      "title" : "The Temporal Logic of Actions",
      "author" : [ "Leslie Lamport" ],
      "venue" : "ACM Trans. Program. Lang. Syst.,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 1994
    }, {
      "title" : "Dependency Directed Reasoning for Complex Program Understanding",
      "author" : [ "Shrobe", "Howard E" ],
      "venue" : "Technical report, Massachusetts Institute of Technology,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 1979
    }, {
      "title" : "The Formal Semantics of Programming Languages: An Introduction",
      "author" : [ "Glynn Winskel" ],
      "venue" : null,
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1993
    } ],
    "referenceMentions" : [ {
      "referenceID" : 3,
      "context" : "The material of the parts of this paper is based on [4].",
      "startOffset" : 52,
      "endOffset" : 55
    }, {
      "referenceID" : 5,
      "context" : "The task of regeneration is based on the dependency-directed reasoning [7] engine of the system that contributes to the self-organization and self-awareness of the system by recording execution steps intrinsically states of the system and their corresponding justification (reason).",
      "startOffset" : 71,
      "endOffset" : 74
    }, {
      "referenceID" : 5,
      "context" : "A Specification Language of AWDRAT: A specification language “System Architectural Model” of AWDRAT supports to specify the target system behavior based on a fairly high-level description written in a language of “Plan Calculus” [7] which is a decomposition of pre- and post- and invariant conditions for each computing component (module) of the target system.",
      "startOffset" : 229,
      "endOffset" : 232
    }, {
      "referenceID" : 3,
      "context" : "For syntactic details, please see [4].",
      "startOffset" : 34,
      "endOffset" : 37
    }, {
      "referenceID" : 4,
      "context" : "Based on the core idea of Lamport [5], we have defined the semantics of the specification as a state relationship to achieve the desired insight of the program’s behavior by relating pre- and post-states [3].",
      "startOffset" : 34,
      "endOffset" : 37
    }, {
      "referenceID" : 2,
      "context" : "Based on the core idea of Lamport [5], we have defined the semantics of the specification as a state relationship to achieve the desired insight of the program’s behavior by relating pre- and post-states [3].",
      "startOffset" : 204,
      "endOffset" : 207
    }, {
      "referenceID" : 3,
      "context" : "For further details on the semantics, please see [4].",
      "startOffset" : 49,
      "endOffset" : 52
    }, {
      "referenceID" : 3,
      "context" : "The corresponding “monitors” predicate formalizes the aforementioned semantics as discussed in [4].",
      "startOffset" : 95,
      "endOffset" : 98
    }, {
      "referenceID" : 6,
      "context" : "The proof is essentially a structural induction proof, however, the non-trivial part is the recursive definition of the semantics of the monitor that is to be proved by the principle of rule induction [8].",
      "startOffset" : 201,
      "endOffset" : 204
    }, {
      "referenceID" : 0,
      "context" : "We also plan to extend AWDRAT such that a target system’s behavior is specified using Abstract State Machine [1] based formalism which then will automatically translate into a semantically equivalent System Architectural Model allowing to already check the inconsistencies in the intra system behavior with various ASM automated tools, e.",
      "startOffset" : 109,
      "endOffset" : 112
    }, {
      "referenceID" : 1,
      "context" : "DKAL [2].",
      "startOffset" : 5,
      "endOffset" : 8
    } ],
    "year" : 2014,
    "abstractText" : "We present our ongoing work and initial results towards the (behavioral) correctness analysis of the cognitive middleware AWDRAT [6]. Since, the (provable) behavioral correctness of a software system is a fundamental pre-requisite of the system’s security. Therefore, the goal of the work is to first formalize the behavioral semantics of the middleware as a prerequisite for our proof of the behavioral correctness. However, in this paper, we focus only on the core and critical component of the middleware, i.e. Execution Monitor which is a part of the module “Architectural Differencer” of AWDRAT. The role of the execution monitor is to identify inconsistencies between runtime observations of the target system and predictions of the specification System Architectural Model of the system. As a starting point we have defined the formal (denotational) semantics of the observations (runtime events) and predictions (executable specifications as of System Architectural Model); then based on the aforementioned formal semantices, we have formalized the behavior of the “Execution Monitor” of the middleware. The material of the parts of this paper is based on [4]. AWDRAT is a general purpose middleware system that provides survivability to any kind of new and legacy software system. In detail, the middleware checks for consistency between the target system’s actual (runtime) behavior and the expected (system specification) behavior of the system, if there is the one then the diagnostic engine identifies an attack (illegal behavioral pattern) and the corresponding set of resources which were compromised during the attack. After identifying an attack, AWDRAT attempts to repair respectively regenerate the compromised system into a safer state, if possible. The task of regeneration is based on the dependency-directed reasoning [7] engine of the system that contributes to the self-organization and self-awareness of the system by recording execution steps intrinsically states of the system and their corresponding justification (reason). Based on the Execution Monitor and the reasoning engine of AWDRAT not only the detection of known attacks is possible but also detection (resp. recovery from) the unknown attacks is also possible. A Specification Language of AWDRAT: A specification language “System Architectural Model” of AWDRAT supports to specify the target system behavior based on a fairly high-level description written in a language of “Plan Calculus” [7] which is a decomposition of preand postand invariant conditions for each computing component (module) of the target system. The description can be considered as an executable specification of the system. The specification is a hierarchical nesting of system’s components such that input and output ports of each component are connected by data and control flow links respective specifications. Furthermore, each component is specified with corresponding preand post-conditions. However, the specification also includes a variety of event specifications. In detail, the specification (System Architectural Model) of target system is described at the following two logical levels:",
    "creator" : "easychair.cls-3.4"
  }
}