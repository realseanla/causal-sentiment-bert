{
  "name" : "1409.0703.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ ],
    "emails" : [ "ale.sanchez.guiena@gmail.com", "azsanche@cs.helsinki.fi" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n40 9.\n07 03\nv1 [\ncs .A\nI] 2\n9 A\nug 2\n01 4\nAbstractions are essential when a person performs intellectual tasks (both when the person does it alone or using a machine as a support tool). In this case, however, abstractions are either ideas or depend on ideas in the mind of the person, making them unsuitable for mechanical manipulation. In spite of this, it is possible to define abstractions that can be processed entirely through a mechanical process. In this paper, I introduce these “computable abstractions” and the mechanical abstractional process that deals with them, opening the possibility for machines to perform intellectual tasks with results that are intuitively comparable to humans’ results."
    }, {
      "heading" : "1 Introduction",
      "text" : "Machines have been aimed to perform intellectual tasks in which they are expected to exhibit a performance that can be intuitively comparable to that of humans. By ‘intuitively comparable’ one should understand that if we (humans) performed the comparison, it would be in general impossible for us to distinguish any difference between the results of humans and the results of machines. The “imitation game” as proposed by A. M. Turing [Turing(1950)], can be seen as an instance of this criterion of comparison.\nAs examples of intellectual tasks one may consider common tasks such as processing natural language and visually recognizing objects, as well as more specialized tasks such as the derivation of the whole of mathematics from first principles.\nMachines operationally equivalent to a Turing machine, let us call them operating machines, have fundamental limitations that impede them to yield results that are intuitively comparable to humans results when performing intellectual tasks. Possibly the most significant result that shows the limitations of operating machines refers to the computation of numbers.\n∗Department of Computer Science, University of Helsinki, Finland. Email: ale.sanchez.guiena@gmail.com or azsanche@cs.helsinki.fi\nIt has been proved that a large class of numbers can be computed by a general mechanical process [Turing(1936)] (i.e., the process followed by operating machines). However, no operating machine can cover the whole extent of real numbers. This limitation stays in contrast with humans’ ability to work with the whole set of real numbers R, building other sets on top such as the set of complex numbers, and being able to work with any element in R (i.e., x ∈ R), just to mention some examples. Furthermore, if one considered only operating machines that can be physically built, they would be restricted on, at least, the length of the numbers that are able to compute. In contrast, humans are able to work with infinite numbers.\nTherefore, it can be observed that ‘something’ is missing in machines when they are compared to humans intellectual ability, ‘something’ that in no way can be ignored when attempting to make machines capable of performing intellectual tasks. A. M. Turing referred to this ‘something’ missing as intuition [Turing(1939)] or common sense [Turing(1954)], in both cases being pictured as a part of human thinking not apt for precise description and, more importantly, unsuitable for mechanical manipulation. This paper builds on that ‘something’ missing, not seen as high level ideas such as intuition or common sense, but as a process that can be observed in humans’ execution of intellectual tasks, a process from which a precise and unambiguous description can be devised, allowing thus machines to carry it out.\nA distinctive type of objects and a distinctive process can be observed when humans perform intellectual tasks. The objects are abstractions, and the process is such that deal with the construction and use of abstractions (i.e., an abstractional process)."
    }, {
      "heading" : "Abstractions",
      "text" : "An abstraction is to be understood as a construct that encompasses one or many things, holding information about the things encompassed according to certain criteria.\nAbstractions are essential when a person performs intellectual tasks. In this case, an abstraction may exist either as an idea in the person’s mind or as a concrete representation (i.e., a concrete object that represents an idea) that is understood by the person. In the person’s mind ideas may be related to other ideas (inside) and similarly to concrete objects (outside), forming a complex system that is both expandable and adaptable. This system of abstractions is necessary in order to be able to make sense out of things (i.e., build an understanding of things) and consequently be able to identify and assimilate patterns, to learn how to perform tasks in different situations and at different levels of complexity, etc.\nIn processing natural language, every linguistic construction is associated to ideas in the mind of the person who understands it (i.e., a linguistic construction is a concrete representation for the person who understands it). These ideas are sometimes referred as the meanings of the linguistic construction. The ideas related to a linguistic construction are themselves related to other ideas and these, in turn, to other linguistic constructions, allowing the first construction to be understood and used according to the particular context encountered.\nAbstractions are important in dealing with various tasks and settings, since a single abstraction may encompass objects across contexts, allowing to use information obtained in one tasks or setting, in other different tasks or settings. For instance, the idea of an apple may encompass the English word “apple” both in written and oral forms, as well as the Spanish word “manzana”, a real apple hanging from a tree, and an apple shown in a picture.\nIt is through the use of abstractions that a human can cover the whole extent of real numbers by having in his mind an idea that abstracts the set of real numbers. In a similar way, a human can work with numbers of infinite length by having in his mind an idea that abstracts infinity.\nEven the most basic numbers are indeed abstractions. To understand this we can consider for instance the number one. It is not hard to realize that ‘1’ is a concrete representation of the number one for whoever understands it as the number one. In other words, without the idea related in a person’s mind, ‘1’ is nothing but a symbol. It is the idea of the number one what holds information that allows to realize it as a natural number, a real number, or as the identity of certain algebraic structure, depending of the context. It is based on this idea that a human can build other meaningful objects on top of the number one.\nAbstractions that are ideas or involve ideas depend on human thinking, which cannot be completely described in a precise and unambiguous manner. Therefore, they are not suitable for mechanical manipulation. Even in cases in which abstractions have been built so to interact with a machine (e.g., Object Orientation, probabilistic models, ontologies), they have remained being dependable on ideas, with the machine only working with the concrete object that represents the idea and not with the whole abstraction, which remains being only processable or understood through human thinking.\nIn this paper I introduce computable abstractions, which are built based only on computable objects and through a mechanical process, with each abstraction including all its information being entirely suitable for mechanical manipulation. In § 3 I introduce a general mechanical abstracting process that abstracts objects in an operating machine M, based on how they are operable with respect to other objects, also in M. In addition, it is argued how, through computable abstractions, it is possible to abstract any object. In § 4, I present abstractional machines, which follow a mechanical abstractional process that builds and uses a system of computable abstractions in order to cope with tasks where abstractions are essential."
    }, {
      "heading" : "2 Preliminaries",
      "text" : ""
    }, {
      "heading" : "Abstractional Models",
      "text" : "A model is to be seen as a construction of interest composed of a collection of objects and relations that follow certain criteria of validity, where no object or relation in the construction can be contradicted by any other object or relation within the same construction. This is achieved by first pre-establishing an initial collection of objects and relations that are considered to be of foundational importance and are assumed to be non-contradictory between each other; I shall call this initial collection the ground of the model. Then, in order to build new objects or relations in the model, only objects and relations from its ground or that have been derived from its ground can be used. Therefore, a criteria of validity imposed over objects in the ground of a model will extend to all its derived objects, thus making the whole model consistent under such criteria.\nAn abstractional model is a model in which its objects and relations are all abstractions. It should be clear that no distinction is necessary between objects and relations in abstrac-\ntional models, since by its nature an abstraction may entail a relation (between the objects it encompasses). For this same reason, the construction of an abstractional model requires to establish, in addition to the regular model construction, the abstractional levels that are of interest for the model. First, the lowest abstractional level (or elementary level) establishes the point from which no further decomposition of abstractions is considered within the model. Then, a criteria of decomposition establishes the components that will be of interest for the model when considering each object.\nFirst Order Logic and Abstract Algebra can be seen as examples of abstractional models, where the objects are considered valid inasmuch as they are accepted as true."
    }, {
      "heading" : "Operating Machines",
      "text" : "I shall call operating machine to any model operationally equivalent to a Turing machine from which regular behavior is assumed. By operationally equivalent to a Turing machine one should understand such entity that executes actions that are specified as precise and unambiguous instructions. Regular behavior, in turn, is about performing in the same way under the same circumstances.\nExamples of operating machines are, among others, Knuth’s model (MMIX) [Knuth(1999)], Kolmogorov machines [Uspenski(1993)], programming languages (e.g., C, C++, Python), and operating systems.\nA machine operation, hereinafter referred simply as operation, is an action that is to be executed by an operating machine. It is different from a regular action in that it is precisely and unambiguously specified. From this understanding, one should notice that all constructions that exist in operating machines are operations. This includes procedures (sometimes known as routines, methods, programs, etc.), data structures, data abstractions, user-defined types, and in general any construction that can be defined in an operating machine. To convince ourselves about this fact, we should simply realize that any of those constructions corresponds, indeed, to an action that is to be executed by an operating machine, regardless of the possible interpretations that we (humans) can make at its respect. Furthermore, it is not difficult to realize that all what operating machines can do is to execute operations.\nAn operating machine executes its operations by following their specifications. The specification of an operation is given by an identifier and a set or a sequence of operations, which I shall call the composition of the operation. An operation ϕa that is specified by a set of operations shall be denoted as ϕa : {ϕ1, . . . , ϕn}. Likewise, an operation ϕb for which its composition is a sequence of operations will be denoted as ϕb : 〈ϕ1, . . . , ϕn〉.\nAll operations in an operating machine M must have a unique identifier (unique for M). Furthermore, in all cases, except when the operation lies in the most elementary operational level of M, the composition of the operation and the operations involved must be in M. For the case when the operation lies in the most elementary operational level of M, the composition of the operation is assumed to exist, however, out of the scope of M. As examples of operations in the most elementary operational level of a machine, one may consider the operations ‘scan a symbol from the tape’ and ‘print a symbol on the tape’ of a Turing machine [Turing(1936)].\nFrom above, it follows that an operation ϕ is executable in a machineM if the specification\nof ϕ exists in M or ϕ lies in the most elementary operational level ofM. Thus, for instance, 2 and return are operations in a machine corresponding to C++ programming language, however sqrt is not, unless we consider a machine corresponding to C++ programming language including its standard library (STL). Furthermore, an operation ϕ′ is said to be computable in a machine M if it can be constructed using operations that are executable in M. Once ϕ′ gets described in this way, we can say that it is executable in M. In what respects to possible interactions between an operating machine and its outside world, it can be said that an operating machine can process an object outside if there is an executable operation in the machine that corresponds to the object. As examples, one may consider any input given to an operating machine, then, it is not hard to notice that such input has to have a corresponding executable operation in the machine in order to be recognised (or processed) by the machine."
    }, {
      "heading" : "3 Computable Abstractions",
      "text" : "From what have been said about operating machines, it should be clear that in order to be suitable for machines, abstractions have to be built or derived from the specifications of operations following a process that involves nothing but the execution of operations (i.e., a mechanical process).\n“Operabilities”\nBased on the specifications of operations, it is possible to describe the “operabilities” that an operation satisfies with respect to other operations. An “operability” should be understood as the “ability” to be operable in a particular way.\n“Operabilities” are indeed abstractions, since an “operability” may encompass one or many objects (those of which are operable in the way defined by the “operability”) and holds information about the objects it encompasses, namely, one way in which they can be operable. Nonetheless, not all “operabilities” that can be described from the specifications of operations can be processed by a machine (i.e., not all are computable).\nIn fact, many “operabilities” that could be intuitively recognized are not computable as they are or depend on ideas. For instance, based on an operation print, we (humans) could intuitively recognize the “operability” ‘to be printable’, however, in order to recognize such “operability” it is necessary first to have an understanding of what does it mean to print something and then to understand what does it mean ‘to be printable’. This cannot be done by an operating machine, since for it the operation print is (as any other operation) just an action that is to be executed following its specification, i.e., an operating machine does not hold any meaning of its operations.\nIn order to describe computable “operabilities” from the specifications of operations, it is necessary to consider only the aspects that an operating machine can process from such specifications. These are: a) an operating machine can distinguish each of its operations based on their (unique) identifiers; b) an operating machine “knows” the composition of its operations, those that do not lie on its most elementary operational level, including the identifiers of the operations involved and, for the case of a sequence, their order of execution.\nFrom what operating machines can process about specifications of operations, let us consider two types of computable “operabilities”:\nType 1 Computable “operabilities” that refer to ‘being operable within the specification of some particular operation’ (i.e., the object that satisfy it is an element of the composition of an specific operation).\nType 2 Computable “operabilities” that refers to ‘being operable within some particular composition’ and, for the case of sequences, ‘... in an specific position of the sequence’.\nThese two types of computable “operabilities” allow to:\n⋄ account for levels of abstractions based on operational levels (Type 1),\n⋄ deal with contextual information (Type 1 and Type 2),\n⋄ differentiate objects, since, in general, the only object that can be operable in all the same ways as some object x, is the same object x,\n⋄ relate objects: a) based on “operabilities” of Type 1, all operations that are part of the composition of an operation can be said to be related; b) based on “operabilities” of Type 2, all operations that appear surrounded by the same operations within two different compositions can be said to be related. Suppose, for instance, that we have a composition sequence 〈ϕ1, ϕ2〉 from where we describe the “operability” ‘be operable in the first position of a sequence of two elements where the second element is ϕ2’. Then, every object that is found to be operable in that way would be said to be related to ϕ1.\nFurthermore, these types of computable “operabilities” are valid for any executable object in an operating machine, since all such objects can be operable in at least one way as they all can be executed and thus being part of the composition of some operation."
    }, {
      "heading" : "Concepts",
      "text" : "The computable “operabilities” mentioned above shall serve as the main building blocks for our computable abstractions and I will refer to them as computable concepts or simply concepts.\nConcepts shall be denoted by C. Thus, (for Type 1) if we have an operation ϕα, a concept Ca that refers to ‘being operable within the specification of ϕα’ can be described, being denoted as Ca : ϕα(x), and to express that an object a satisfies Ca the notation a ⊣ Ca shall be employed. Similarly, (for Type 2) if we have a composition sequence 〈ϕ1, ϕ2〉 of some operation, a concept Cb that refers to ‘be operable in the first position of a two-element sequence, where the second element is ϕ2’ can be described, being denoted as Cb : 〈x, ϕ2〉.\nConcepts can be defined based on other concepts, e.g., from concepts described above we can define a concept Cc : Ca,Cb, which refers to satisfying both Ca and Cb. Furthermore, we may define concepts that can only be satisfied by either a set or a sequence of certain elements that are also given in terms of concepts, e.g., a concept Cd : 〈Ca,Cb〉, which refers to ‘being operable as a two-element sequence, with the first element satisfying Ca and the second Cb’.\nA concept may encompass more than one object, all of which satisfy the operability that the concept represents. In the case of Ca above, it encompasses all objects that can be operable\nwithin the specification of ϕα. This defines an equivalence relation between the objects that satisfy the concept. Thus, given an object b such that b ⊣ Ca and considering what was said before about a (i.e., a ⊣ Ca), it follows that a and b are equivalent with respect to Ca, i.e., a Ca∼ b. In addition, a concept may satisfy other concepts, creating a relation between the objects that satisfy the former and the objects that satisfy the latter. For instance, knowing that ϕα is operable within the specification of an operation ϕβ, if we define Ce : ϕβ(x) we can say that ϕα⊣ Ce. Then, as Ca is based on ϕα, it follows that Ca⊣ Ce. In this way, Ca defines a relation between the object a and Ce, i.e., a Ca−→ Ce, with which a is related to any objects that satisfies Ce. An object in an operating machine may satisfy in general more than one concept, through which it gets related to other operations and concepts. When the object operates within the specification of a particular operation, one specific concept is satisfied and the extent of relations covered in general by the object gets restricted to a subset of operations and concepts that are related to the concept that is being satisfied. Thus, for a above, if we have that a satisfies, in addition to Ca, Cf , Cg, and Ch, it being known that Ca is related to Cg with respect to some concept Ci. Then, when a operates in such a way that it satisfies Ca (i.e., when it operates within the specification of ϕα), the extent of relations of a is restricted accordingly, this is, (a↾Ca) Ci−→ Cg.\nConcrete representations that are computable abstractions can be described based on concepts. In this case, the concrete part is an executable operation and the abstract part is a set of concepts that can be or is being satisfied by the operation. As examples of this, one may consider ϕα⊣ Ce and a↾Ca, from above."
    }, {
      "heading" : "Mechanical abstracting process",
      "text" : "A general mechanical abstracting process can be easily outlined once computable abstractions (i.e., concepts and concrete representations based on concepts) have been introduced.\nGiven some executable operation ϕ in an operating machine M, it is possible to describe a computable abstraction of ϕ by considering the concepts that ϕ satisfies, those of which are defined based on the specifications of operations in M where ϕ is operable. The operations considered in the derivation of concepts are decided based on predefined criteria (not part of the general process, but of each particular implementation).\nThus, for instance, say we want to abstract (through a mechanical process) an operation ϕ1 that is in an operating machine M1, based on operations ϕa : 〈ϕ1, ϕ2〉 and ϕb : 〈ϕ3, ϕ1, ϕ4〉, with ϕ1, ϕa, ϕb ∈ M1. Then, we describe the concepts that ϕ1 satisfies in ϕa and ϕb. These are C1 : ϕa(x), C2 : 〈x, ϕb〉, C3 : ϕb(x), and C4 : 〈ϕ3, x, ϕ4〉. Finally, we abstract ϕ1 through a concrete representation as a1 : ϕa⊣ C1,C2,C3,C4.\nIt is not hard to see that a1 is an abstraction as it encompasses one object, ϕ1, from which it holds information. It is also not hard to see that a1 is computable as abstraction since all the information that it is meant to hold can indeed be processed by an operating machine (i.e., the entire abstraction can be processed through nothing but mechanical means). Furthermore, the process used to describe a1 can clearly be followed by any operating machine (i.e., it is a mechanical process), as long as the operations involved in the description of concepts are\nexecutable in the machine and the specifications of the operations from which the concepts are derived are in the machine (e.g., M1 in this case can do it).\nThe process sketched above can, indeed, be used to abstract not only operations but also any (concrete) object ‘outside’, provided that, for the operating machine that will perform the abstracting process, the object that is to be abstracted and the objects that constitute its context (specifically, the context of current interest) can be processed."
    }, {
      "heading" : "4 Abstractional Machines",
      "text" : "From a high level perspective, it is the ability to make sense out of things (i.e., to build our own understanding of things) what marks the difference between humans and operating machines in what respects to performing intellectual tasks and the results exhibited. Humans can figure out or learn what things are about (e.g., what is to be done, how to do it, what can be used to do it) and can act accordingly, in contrast, operating machines are confined to the execution of pre-programmed steps (Note that regardless of how ‘data-dependent’ or ‘data-driven’ an operating machine is made, it is still governed by the original program, perhaps with modified parameters, but never able to make sense out of things).\nThe task of describing what an object is about will invariably produce an ambiguous result. Concepts can be used instead, as they can provide information about the object(s) encompassed, allowing to differentiate between objects. For illustration purposes, let us consider the task of processing natural language. Take any linguistic construction (i.e., a meaningful construction in a natural language) l in some concrete representation of an understanding of a natural language1, let us call it L. It is not hard to notice that if we describe l in terms of all possible contexts (where and how) it may work with respect to other linguistic constructions in L, we can describe l in such a way that it can be not only related to some other linguistic constructions, but also, differentiated from any other. If each of the linguistic constructions involved in the contexts of l have a corresponding executable operation, it is possible to characterize l in terms of concepts, thus, in a precise and unambiguous manner.\nFor instance, suppose we have two sentences s1 : 〈w1, w2, w3, w4〉 and s2 : 〈w5, w2, w3, w4〉. Based on these two sentences it is possible to find a relation between w1 and w5 through the concept C1 : 〈x, w2, w3, w4〉 as w1 C1∼ w3. However, as more context is considered it became possible to distinguish between them. Thus, if we find lα : 〈s1, s3〉 and we abstract s1 accordingly as s1 ⊣ Ca, with Ca : 〈x, s3〉, then we have (w1 ↾C1) −→ Ca. Therefore, according to our current knowledge, while w1 can be related somehow to Ca, w5 cannot.\nThe understanding that a person has in regard to some concrete object can be seen as to be based on the ideas that are related to that object in the person’s mind, together with the relations between such ideas and other objects. This, as mentioned in the introduction, constitute a system of abstractions which is being adapted and grown as the person gathers knowledge and broaden his understanding of things. A comparable process can be carried out by machines inasmuch as the system of abstractions is made suitable for mechanical manipulation and its construction, adaptation, and use are performed following a mechanical\n1Note that, when dealing with natural language, what we (humans) process is the concrete representation (e.g., speech, text) of someone’s understanding of a natural language.\nprocess. In the task of processing natural language, the understanding of some linguistic construction l includes the concepts that l satisfies and the linguistic constructions that are related to l through those concepts. Thus, for instance, the understanding of some word w may include words that operate in the same sentences or in the same or similar contexts, as well as sentences or larger pieces of text that, while cannot be directly used in place of w, are related to w through some of the concepts that abstract it (i.e., intuitively, the larger pieces of text share the meaning that w has within some specific context). A way to visualize w being related to larger pieces of text through concepts is to think on dictionary definitions: A dictionary will often provide more than one definition for each word, each accompanied by an example of a sentence where the word is related to such definition (i.e., an instance of the contexts where the word relates to such concrete representation of one of its meanings). One can notice that based on any of those instances of contexts, a concept can be described and, with it, a relation between the word and the corresponding definition. Suppose, the word being defined is wa, one of the sentences that act as instances of contexts is defined as s : 〈w1, wa, w2, w3〉, and the corresponding definition is identified as δ. Then, from s we can describe two concepts that are satisfied by w, namely, Cα : 〈w1, x, w2, w3〉 and Cβ : s(x). Thus, δ can be seen to be related to wa through any of these concepts, i.e., wa Cα−→ δ and wa Cβ −→ δ.\nAdditionally, for objects with known components, it is possible to build and understanding of them based on the abstractions of the objects that constitute them. This can be seen in processing natural language as to finding the linguistic constructions to which some sentence or piece of text is related based on the computable abstractions of its components and the relations that they entail.\nAn abstractional machine is a machine that follows a mechanical abstractional process building and using a system of computable abstractions in order to cope with tasks in which abstractions are essential. An operating machine serves as the foundation from where the abstractional machine is defined, stating its basic functioning, especially in what respects to how its system of abstractions is to be handled.\nThe system of computable abstractions K̃ of an abstractional machine M̃ is built as an abstractional model, with its lowest abstractional level and criteria of decomposition established as part of the definition of M̃. The reason for this type of construction is to ensure the consistency of K̃ and the regular behavior of M̃.\nThe behavior of an abstractional machine depends on the current state of its system of abstractions. Thus, if we consider an abstractional machine performing tasks in which its system of abstractions do not suffer any modification, we will observe regular behavior. However, if by the abstractional process of the abstractional machine its system of abstractions gets modified, then the behavior of the machine might vary accordingly. In spite of this, since the system of abstractions is built as an abstractional model, it is ensured that the construction will happen in a consistent manner, i.e., abstractions in different stages of the construction of the system of abstractions will never contradict each other.\nIn performing its tasks, an abstractional machine might require only to use its system of abstractions if the information there is enough, or it might need to build new abstractions that once included into its system of abstractions allow it to perform the tasks. Suppose,\nfor instance, that an abstractional machine M̃ with empty system of abstractions is asked to provide, given some linguistic construction l, another linguistic construction that can work in some specific context (i.e., a similar task to the one of providing a linguistic construction\nwith similar meaning). For this purpose, M̃ is also provided with texts that are assumed to\nbe meaningful, from where M̃ will, through a mechanical abstracting process as described in §3, build computable abstractions of the linguistic constructions that correspond to the abstractional levels that are of interest for M̃ according to its definition. This process will M̃’s understanding of l based on the contexts provided by the texts, allowing then M̃ to provide a linguistic construction that can work in the required context (It should be clear that the\nperformance of M̃ largely depends on the texts or information provided to it)."
    }, {
      "heading" : "5 Conclusions",
      "text" : "Computable abstractions and abstractional machines provide a completely different perspective on how machines can deal with their tasks and the objects involved, a view in which objects are not computed but abstracted, in which it is possible to build an understanding of any object or idea, including any number. This means to overcome the limitations that machines currently have when performing intellectual tasks. The solution proposed in this paper has to be further developed, with more examples and applications, which is expected to be addressed in future work.\nIndependently from the solution provided here, it deserves particular attention to realize the limitations of operating machines and to note that without overcoming them there is no way in which operating machines could perform intellectual tasks with results comparable to humans results, since such limitations have nothing to do with the efficiency or the speed of computations or with the storage capacity of machines."
    } ],
    "references" : [ {
      "title" : "MMIXware: a RISC computer for the third millennium",
      "author" : [ "Donald E Knuth" ],
      "venue" : "volume 1750. Springer,",
      "citeRegEx" : "Knuth.1999.",
      "shortCiteRegEx" : null,
      "year" : 1999
    }, {
      "title" : "with an application to the entscheidungsproblem",
      "author" : [ "Alan M Turing. On computable numbers" ],
      "venue" : "J. of Math, 58:345–363,",
      "citeRegEx" : "Turing.1936.",
      "shortCiteRegEx" : null,
      "year" : 1936
    }, {
      "title" : "Proceedings of the London Mathematical Society",
      "author" : [ "Alan M Turing. Systems of logic based on ordinals" ],
      "venue" : "2(1):161–228,",
      "citeRegEx" : "Turing.1939.",
      "shortCiteRegEx" : null,
      "year" : 1939
    }, {
      "title" : "Mind",
      "author" : [ "Alan M Turing. Computing machinery", "intelligence" ],
      "venue" : "pages 433–460,",
      "citeRegEx" : "Turing.1950.",
      "shortCiteRegEx" : null,
      "year" : 1950
    }, {
      "title" : "fr",
      "author" : [ "Alan M Turing. Solvable", "unsolvable problems. Science News-ens" ],
      "venue" : "39,",
      "citeRegEx" : "Turing.1954.",
      "shortCiteRegEx" : null,
      "year" : 1954
    }, {
      "title" : "To the definition of algorithms",
      "author" : [ "VA Uspenski" ],
      "venue" : "Selected Works of AN Kolmogorov, pages 62–85. Springer",
      "citeRegEx" : "Uspenski.1993.",
      "shortCiteRegEx" : null,
      "year" : 1993
    } ],
    "referenceMentions" : [ {
      "referenceID" : 3,
      "context" : "Turing [Turing(1950)], can be seen as an instance of this criterion of comparison.",
      "startOffset" : 7,
      "endOffset" : 21
    }, {
      "referenceID" : 1,
      "context" : "It has been proved that a large class of numbers can be computed by a general mechanical process [Turing(1936)] (i.",
      "startOffset" : 97,
      "endOffset" : 111
    }, {
      "referenceID" : 2,
      "context" : "Turing referred to this ‘something’ missing as intuition [Turing(1939)] or common sense [Turing(1954)], in both cases being pictured as a part of human thinking not apt for precise description and, more importantly, unsuitable for mechanical manipulation.",
      "startOffset" : 57,
      "endOffset" : 71
    }, {
      "referenceID" : 4,
      "context" : "Turing referred to this ‘something’ missing as intuition [Turing(1939)] or common sense [Turing(1954)], in both cases being pictured as a part of human thinking not apt for precise description and, more importantly, unsuitable for mechanical manipulation.",
      "startOffset" : 88,
      "endOffset" : 102
    }, {
      "referenceID" : 0,
      "context" : "Examples of operating machines are, among others, Knuth’s model (MMIX) [Knuth(1999)], Kolmogorov machines [Uspenski(1993)], programming languages (e.",
      "startOffset" : 71,
      "endOffset" : 84
    }, {
      "referenceID" : 5,
      "context" : "Examples of operating machines are, among others, Knuth’s model (MMIX) [Knuth(1999)], Kolmogorov machines [Uspenski(1993)], programming languages (e.",
      "startOffset" : 106,
      "endOffset" : 122
    }, {
      "referenceID" : 1,
      "context" : "As examples of operations in the most elementary operational level of a machine, one may consider the operations ‘scan a symbol from the tape’ and ‘print a symbol on the tape’ of a Turing machine [Turing(1936)].",
      "startOffset" : 196,
      "endOffset" : 210
    } ],
    "year" : 2017,
    "abstractText" : "Machines operationally equivalent to a Turing machine have fundamental limitations that prevent them from yielding results that are comparable to the results produced by humans when performing intellectual tasks (e.g., processing of natural language, visual object recognition, derivation of the whole of mathematics from first principles). For instance, while these machines can cover only a subset of the whole extent of real numbers, humans are able to work with the entire set of real numbers (e.g., building other sets on top, selecting any element from the set). Abstractions are essential when a person performs intellectual tasks (both when theions are essential when a person performs intellectual tasks (both when the person does it alone or using a machine as a support tool). In this case, however, abstractions are either ideas or depend on ideas in the mind of the person, makingions are either ideas or depend on ideas in the mind of the person, making them unsuitable for mechanical manipulation. In spite of this, it is possible to define abstractions that can be processed entirely through a mechanical process. In this paper,ions that can be processed entirely through a mechanical process. In this paper, I introduce these “computable abstractions” and the mechanical abstractional process that deals with them, opening the possibility for machines to perform intellectual tasks with results that are intuitively comparable to humans’ results.",
    "creator" : "LaTeX with hyperref package"
  }
}