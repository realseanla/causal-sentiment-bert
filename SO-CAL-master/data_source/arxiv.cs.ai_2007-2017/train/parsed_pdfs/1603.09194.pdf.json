{
  "name" : "1603.09194.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Özgür L. Özçep" ],
    "emails" : [ "oezcep@ifis.uni-luebeck.de" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n60 3.\n09 19\n4v 1\n[ cs\n.A I]\n3 0\nM ar\n2 01"
    }, {
      "heading" : "1 Introduction",
      "text" : "Iterated applications of belief change operators are essential for different scenarios such as that of ontology evolution where new information is not presented at once but only in piecemeal fashion within a sequence. Ontology evolution is a form of ontology change (Flouris et al. 2008) where an ontology modification is triggered by changes in the domain or in the conceptualization. The response to the change is the application of (a set of) predefined operators.\nIn this paper I consider the special scenario where an ontology (called the receiver’s ontology) has to be changed along the arrival of a sequence of triggering bits of ontology fragments coming from another ontology (sender’s ontology). In the terminology of Flouris et al. (Flouris et al. 2008) the one-step change would be termed ontology merge as the purpose is to get a better understanding of the domain from merging two ontologies over the same domain. As in our setting the merge is directed I call the kind of change operation iterated ontology revision.\nOne instance of iterated ontology revision is given by iterated reinterpretation operators (Eschenbach and Özçep 2010). In these operators, conflicts between the trigger and the receiver’s ontology is explained by ambiguous use of terms. Consider an example of two online library systems with ontologies: the sender may use Article to denote publications in journals whereas the receiver may use Article to denote publications in\njournals or proceeding volumes. As the ontologies are assumed to be over the same domain, the receiver guesses relations on relations between her and the sender’s uses and stipulates them as bridging axioms, e.g., stating that all articles in the sender’s sense are articles in the receiver’s sense.\nNow, a challenging aspect is to define adequateness criteria that iterated ontology revision operators should fulfill. I consider the classical iteration postulates of Darwiche and Pearl (Darwiche and Pearl 1994) as possible candidates and state whether they are fulfilled by the reinterpretation operators. Moreover I discuss, for each of them, whether it should be fulfilled at all. The main result of the paper is that reinterpretation operators fulfill the postulates sequences with atomic triggers. For sequences of complex triggers, a fulfillment is not guaranteed and indeed there are different reasons—corresponding to different postulates—why they should not be fulfilled in the particular scenario of ontology revision with well developed ontologies.\nThe rest of the paper is structured as follows. After some logical preliminaries and general terminology (Sect. 2) the necessary definitions for reinterpretation operators are recapitulated (Sect. 3). Before the sections on related work and the conclusion, the adapted postulates for iterated revision, results on their fulfillment by reinterpretation operators, and a discussion of the results are given in Sect. 4."
    }, {
      "heading" : "2 Terminology and Logical Preliminaries",
      "text" : "The reinterpretation framework described in the following works for any FOL theory but we consider here finite knowledge bases formulated in description logics.\nA non-logical DL vocabulary consists of concept symbols (= atomic concepts) NC , role symbols NR, and individual constants Ni. Using these, more complex concept descriptions can be built up in a recursive fashion. The set of possible concept constructors depends on the specific DL. We consider in particular the basic constructors ⊓,⊔,¬, ∃. C(V) is the set of all possible concept descriptions that can be built from the symbols in V in the given description logic.\nThe semantics is the usual Tarskian semantics based on interpretations I = (∆I , ·I) with a domain ∆I and denotation function ·I which gives for every c ∈ Ni an element cI ∈ ∆I , for every atomic concept A ∈ NC a set AI ⊆ ∆I and for every role symbol R ∈ NR a binary re-\nlation RI ⊆ ∆I ×∆I . The denotation function is extended recursively to all concept descriptions in the usual manner. For the ones we use here, we have (C ⊓ D)I = CI ∩ DI ; (C⊔D)I = CI∪DI ; (¬C)I = ∆I\\CI ; (∃R.C)I = {x ∈ ∆I | There is y ∈ CI s.t. (x, y) ∈ RI}. Here C,D ∈ C(V) and R ∈ NR. From concept descriptions one can built axioms which can be evaluated as true in (satisfied by) or false in (satisfied by) an interpretation. We consider TBox (terminological Box) axioms of the form\n• C ⊑ D (concept subsumption) for C,D ∈ C(V) with semantics: I |= C ⊑ D iff CI ⊆ DI ;\n• R1 ⊑ R2 (role subsumption) for R1, R2 ∈ NR with semantics I |= R1 ⊑ R2 iff (R1)I ⊆ (R2)I\nMoreover, we consider ABox axioms (assertional axioms) of the form C(a) and R(a, b) for C ∈ C(V), a, b ∈ Ni and R ∈ NR. The semantics is I |= C(a) iff aI ∈ CI and I |= R(a, b) iff (a, b) ∈ RI . We call ABox axioms of the form A(a) and ¬A(a) with A ∈ Ni concept assertions or concept-based literals. Â stands for A or ¬A. Additionally, equalities a . = b, a, b ∈ Ni may be allowed.\nConsistency (= satisfiability) of a set of axioms X means that there is an interpretation I making all axioms in X true, for short I |= X . Entailment is defined as usual byO1 |= O2 iff for all I: If I |= O1, then I |= O2. A consequence operator Cn gives the set of all axioms following from a set: Cn(X) = {ax | X |= ax}. If necessary, one can specify the vocabulary of the axioms: CnV(X) is the set of axioms over V following from X . X ≡V Y is shorthand for CnV(X) = CnV(Y ). By V(O) we denote all non-logical symbols occurring in the set of axiomsO. C(O) = C(V(O)).\nThe ontology notion of this paper slightly extends the one known from the semantic web and DL community—the extension relying on the distinction between an internal vocabulary V ′ and a public vocabulary V :\nDefinition 1 An ontology O is a triple O = (O,V ,V ′) consisting of a set of axioms O over a logic with non-logical symbols V (the public vocabulary) and V ′ (the internal vocabulary).\nIn the following I will abuse terminology by calling also the set of axioms O ontology.\nLet O1\n⊢\nO2 be the dual remainder sets modulo O2 (Delgrande 2008). This is the set of inclusion maximal subsets X of O1 that are consistent with O2, i.e., X ∈ O1 ⊢\nO2 iff X ⊆ O1, X ∪ O2 is consistent and for all Y ⊆ O1 with X ( Y the set Y ∪O2 is not consistent.\nWe are going to deal with substitutions as means to realize name space dissociations. The set of ambiguity compliant resolution substitutions, denoted AR(V ,V ′), consists of substitutions of symbols in V by symbols in V∪V ′. Here, we assume V ∩ V ′ = ∅ where V ′ is the set of symbols used for internalization. The substitutions in AR(V ,V ′) get as input a non-logical symbol in V (a constant, an atomic concept or role in DL speak) and map it either to itself or to a new nonlogical symbol (of the same type) in V ′. The set of symbols s ∈ V for which σ(s) 6= s is called the support of σ and is denoted sp(σ). In the following I use postfix notation for\nsubstitutions, i.e., Xσ = σ(X). Moreover, I use the following shorthands spi(σ) = sp(σ)∩Ni and spCR(σ) = sp(σ)∩ (NC ∪ NR). A substitution with support S is also denoted by σS . For substitutions σ1, σ2 ∈ AR(V ,V ′) we define an ordering by: σ1 ≤ σ2 iff sp(σ1) ⊆ sp(σ2). AR(V ,V ′) can be partitioned into equivalence classes of substitutions that have the same support. We assume that for every equivalence class a representative substitution Φ(S) ∈ AR(V ,V ′) with support S is fixed. Φ is called a disambiguation schema."
    }, {
      "heading" : "3 Reinterpretation Operators",
      "text" : "This section recapitulates the definitions of ontology revision operators called reinterpretation operators (Eschenbach and Özçep 2010; Özçep 2008). The envisioned scenario is that of two agents holding well-developed ontologies, one called receiver’s ontology, the other called sender’s ontology. The ontologies are over the same domain and the receiver gets bits of information from the sender’s ontology that she wants to integrate into her ontology in order to get a better, more fine-grained model of the domain. A challenging aspect is to preserve the consistency of the ontology. The kind of inconsistency that is considered here is that of inter-ontological ambiguity: the sender and the receiver may use the same symbol with different meanings (compare for example the different uses of Article in the example below).\nSo, the conflict resolution strategy that is exploited by the reinterpretation operators is based on disambiguating symbols. The sender or the receiver has to reinterpret an ambiguous symbol. In the more interesting non-monotonic setting, that I consider in this paper, it is always the receiver who reinterprets the ambiguous symbol—by storing the old symbol in a new name space and relating her use of the symbols to the sender’s use by bridging axioms. This is in line with classical (prioritized) belief revision where one has full trust in the trigger information. In (Eschenbach and Özçep 2010) these reinterpretation operators are called type-2 operators, contrasting them with type-1 operators in which it is the sender’s terminology that is reinterpreted.\nThe weak reinterpretation operators ⊗ and strong reinterpretation operators ⊙ are binary operators with a finite set of ontology axioms ontology as left and right argument. The following example (Özçep 2012) demonstrates the main ideas for the weak reinterpretation operators. Example 1 Consider the sets of ontology axioms O1, O2 of the receiver and sender, resp.: O1 = {Article(pr1), Article(pr2),¬Article(bo1)}\nO2 = {¬Article(pr1)}\nApplying the weak reinterpretation operator ⊗ gives the following set of axioms:\nO1 ⊗ O2 = {Article ′(pr1), Article ′(pr2),\n¬Article′(bo1),¬Article(pr1), Article ⊑ Article′}\nFor the purpose of the example I assume that only concept and role symbols but not constant symbols may be used ambiguously. So, the above conflict between the sender’s and\nreceiver’s ontology can only be caused by different uses of the atomic concept Article. The receiver (holder of O1) gives priority to the sender’s use of Article over her use of Article, and hence she adds ¬Article(pr1) into the result O1 ⊗ O2. The receiver’s use of Article is internalized, i.e., all occurrences of Article in O1 are substituted by a new symbol Article′. This step of internalization will also be called the step of dissociation or disambiguation. Additionally, the receiver adds hypotheses on the semantical relatedness (bridging axioms) of her and the sender’s use of Article, here Article ⊑ Article′ which states that Article is a subconcept of Article′.\nTechnically, the disambiguation is realized by uniform substitutions from AR(V ,V ′) (see section on logical preliminaries). For the disambiguation, one has to deal with the a potential multiplicity of conflicts. The minimal conflict symbol sets defined below describe the smallest sets of symbols which have to be disambiguated in order to resolve conflicts.\nDefinition 2 For ontologies O1, O2 over V the set of minimal conflicting symbols sets, MCS(O1, O2), is defined as follows:\nMCS(O1, O2) = { S ⊆ V | There is a σS ∈ AR(V ,V ′), s.t.\nO1σS ∪O2 is consistent, and for all σS1 ∈ AR(V ,V\n′) with σS1 < σS O1σS1 ∪O2 is not consistent. }\nFollowing the strategy of AGM partial meet revision (Alchourrón, Gärdenfors, and Makinson 1985), we assume that a selection function γ1 selects candidates from MCS(O1, O2) to be used for the resolution: γ1(MCS(O1, O2)) ⊆ MCS(O1, O2). So the symbol set defined by S# = ⋃ γ1(MCS(O1, O2)) is the set of symbols which will be internalized. To regain as much as possible from the receiver’s ontology in the ontology revision result, the disambiguated symbols of S# are related by bridging axioms. Depending on what kind of bridging axioms are chosen, different revision operators result. In this paper we consider two classes of bridging axioms, the simple bridging axioms and the strong bridging axioms (Özçep 2008). Let σ = σS ∈ AR(V ,V ′) be a substitution with support S ⊆ V . Let P be a concept or role symbol in S, σ(P ) = P ′.\nDefinition 3 Let σ = σS ∈ AR(V ,V ′) for S ⊆ V ∩ (NC ∪ NR). The set of simple bridging axioms w.r.t. σ is\nB(σ) = {P ⊑ P ′, P ′ ⊑ P | P ∈ S}\nThe set of strong bridging axioms w.r.t. σ is defined as:\nḂ(σ,O) = {Cσ ⊑ s | C ∈ C(O), s ∈ spCR(σ), O |= C ⊑ s}∪ {s ⊑ Cσ | C ∈ C(O), s ∈ spCR(σ), O |= s ⊑ C}∪ {s . = sσ | s ∈ spi(σ)}\nIn case of conflict, not all bridging axioms of B(S#) (resp. Ḃ(S#)) can be added to the integration result (compare Ex. 1). Hence, one searches for subsets that are compatible with the union of the internalized ontology and sender\nontology, O1σ ∪ O2. That means, possible candidate sets of bridging axioms can be described by dual remainder sets (see section on logical preliminaries) as B(σ) ⊢\n(O1σ ∪O2). Again, as there is no preference for one candidate over the other we assume that a second selection function γ2 is given with γ2(B(σ) ⊢ (O1σ ∪ O2)) ⊆ (B(σ) ⊢\n(O1σ ∪ O2). The intersections of the selected bridging axioms is the set of bridging axioms added to the integration result. (Compare this with the partial meet revision functions of AGM (Alchourrón, Gärdenfors, and Makinson 1985)).\nDefinition 4 Let V ,V ′ be disjoint vocabularies and Φ a disambiguation scheme. Moreover let γ1, γ2 be selection functions and for short let γ = (γ1, γ2). For any ontologyO1 and O2 over V let S# = ⋃ γ1(MCS(O1, O2)) and σ = Φ(S#). Then the weak reinterpretation operator ⊗γ and the strong reinterpretation operator ⊙γ are defined as follows:\nO1 ⊗γ O2 = O1σ ∪O2 ∪ ⋂ γ2 ( B(σ) ⊢ (O1σ ∪O2) ) O1 ⊙γ O2 = O1σ ∪O2 ∪⋂ γ2 ( Ḃ(σ,O1) ⊢ (O1σ ∪O2) )\nThe definition for weak reinterpretation operators is the same as in (Özçep 2008), the definition of the strong operators is an extension.\nIn the following I will simplify the discussion by simplifying the first step of internalization: In the internalization step now all symbols of the receiver are internalized. There is only a selection function for bridging axioms. Due to the fact that the maximal candidates of bridging axioms are used in the reinterpretation operators unnecessary internalizations do not occur. I therefore can write in the following, e.g., ⊗γ instead of ⊗γ . A particularly interesting case of ontology change appears in the context of ABox update (Ahmeti, Calvanese, and Polleres 2014; Gutierrez, Hurtado, and Vaisman 2011), where the trigger informations are assertional axioms (ABox) axioms. I consider the special case that only atomic bits from the sender ontology occur as trigger, namely, the trigger O2 is of the form O2 = {A(a)} or of the form O2 = {¬A(a)}. That is, the trigger is a concept assertion with an atomic symbol (A ∈ NC ) or the negated atomic symbols ¬A. For this special case particular strong reinterpretation operators can be defined (Eschenbach and Özçep 2010). The first class assumes that within the underlying DL a most specific concept w.r.t. an ontology exists. C is a most specific concept for b in the ontology O iff O |= C(b) and for all C′ s.t. O |= C′(b) also O |= C ⊑ C′. The most specific concept is unique modulo concept equivalence (w.r.t. O), hence it is denoted by mscO(b).\nDefinition 5 Let O = (O,V ,V ′) be an ontology, Φ a disambiguation scheme, A ∈ V ∩NC and b ∈ V ∩Ni. Assume σ = [A/A′] is the substitution fixed by Φ and assume that mscO(b) exists. The msc-based strong reinterpretation operators for concept-based literals ⊡) are defined as follows: If O ∪ {A(b)} 6|= ⊥ let O ⊡ A(b) = O ∪ {A(b)}. Else:\nO ⊡ A(b) = σ(O) ∪ {A(b), A′ ⊑ A,A ⊑ A′ ⊔mscOσ(b)}\nIf O∪{¬A(b)} 6|= ⊥, let O⊡¬A(b) = O∪{¬A(b)}. Else:\nO ⊡ ¬A(b) = σ(O) ∪ {¬A(b), A ⊑ A′, A′ ⊑ A ⊔mscOσ(b)}\nThe following examples illustrates the second case.\nExample 2 Assume that the receiver’s ontology from the beginning is extended with two additional facts on the “problematic” entity pr1:\nO+1 = O1 ∪ {publishedIn(pr1, proc1), P roceed(proc1)}\nThe most specific concept of pr1 w.r.t. O + 1 is\nmscO+ 1 (pr1) = Article ⊓ ∃publishedIn.Proceed\nHence the result of strong reinterpretation w.r.t. triggering concept assertions O+1 ⊡ ¬Article(pr1) adds the following additional bridging axiom\nArticle′ ⊑ Article⊔ (Article′ ⊓∃publishedIn.Proceed)\nThis says that the wider use of Article by the receiver adds (only) those publications in proceedings into the extension.\nThe selection-based strong operators for triggering literals provide more bridging axioms between the internalized and non-internalized symbols.\nDefinition 6 Let O = (O,V ,V ′) be an ontology, Φ a disambiguation scheme, A ∈ V ∩NC and b ∈ V ∩Ni. Assume σ = [A/A′] is the substitution fixed by Φ and that mscO(b) exists. Moreover, let sel be an arbitrary selection function, defined as sel(X) ⊆ X . The selection-based strong reinterpretation operators for concept-based literals ⊕sel) are defined as follows (using auxiliary definitions for the specific bridging axioms):\noa(O,A(b),K ′) = {A ⊑ A′ ⊔ C | C ∈ C(V ∪ V ′),\nOσ |= C(b) and A /∈ V(C)}\noa(O,¬A(b), A′) = {A′ ⊑ A ⊔ C | C ∈ C(V ∪ V ′),\nOσ |= C(b) and A /∈ V(C)}\nO ⊕sel α = { O ∪ {α} if O ∪ {α} 6|= ⊥ O ⊗ {α} ∪ sel(oa(O,α,A′))\nelse\nThough the complexity of the trigger is low the induced concept lattice for the reinterpretation with ⊕sel is not trivial as illustrated by Fig. 1. Nonetheless, the figure does not suggest that the computation of the revision outcome is more complex than for other revision operators for DL ontologies: It just illustrates the subsumption connections of the concepts within the resulting ontology; the calculation of the lattice is not part of constructing the revision result.\nWithout proof I state here some observations on the conservativity of reinterpretation operators. Proofs can be found in (Eschenbach and Özçep 2010).\nProposition 1 Let O = (O,V ,V ′) be an ontology, Φ a disambiguation scheme, A ∈ V ∩ NC and a, c ∈ V ∩ Ni. Assume σ = [A/A′] is the substitution fixed by Φ and that mscO(a) exists. Let α = A(a) ǫ = A(c) or α = ¬A(a) and ǫ = ¬A(c). Let β be an assertion with V(β) ⊆ (V ∪\nV(O))\\{A}. Let sel be a selection function for bridging axioms and s̃el a corresponding function selecting corresponding concepts: s̃el(oa(O, Â(a), A′)) = {C | Â ⊑ Â′ ⊔ C ∈ sel(oa(O, Â(a), A′))}.\nIf O |= ¬α, then 1. O ◦ α |= β iff O |= β 2. O ◦ α |= ǫ iff O ∪ {a 6 . = c} |= ǫ\n3. O ⊗ α 6|= ¬ǫ 4. O ⊡ α |= ¬ǫ iff O |= ¬ǫ and O |= ¬mscO(a)(c) 5. O ⊕sel α |= ¬ǫ iff O |= ¬ǫ and\nO |= ¬ ⊓ s̃el(oa2(O,α,A′))[A′/A](c)"
    }, {
      "heading" : "4 Postulates for Iterated Reinterpretation",
      "text" : "Many forms of ontology change (Flouris et al. 2008), in particular ontology evolution (Kharlamov, Zheleznyakov, and Calvanese 2013), require the iterated application of a change operator under new bits of informations. In iterated belief revision, this problem is approached systematically by defining, both, postulates and operators for iterated applications of revision operators. The first systematic study of iterated belief revision goes back to the work of Darwiche and Pearl (Darwiche and Pearl 1994) who stressed the fact that the AGM postulates (Alchourrón, Gärdenfors, and Makinson 1985) are silent w.r.t. the iterated application of operators. Indeed, the only postulates that can be said to touch some form of iteration are those dealing with the revision of conjunctions of triggers (supplementary postulates 7 and 8).\nI state those postulates in a form adapted to ontologies.\n(RAGM 7) CnV(O ◦ (O1 ∪O2)) ⊆ Cn V((O ◦O1) ∪O2)\nPostulate (RAGM 7) says that all sentences over V following from O ◦ (O1 ∪O2) are contained in the revision by O1 followed by an expansion with O2.\n(RAGM 8) If (O ◦O1) ∪O2 6|= ⊥, then :\nCnV((O ◦O1) ∪O2) ⊆ Cn V(O ◦ (O1 ∪O2))\nPostulate (RAGM 8) says that all sentences over V following from the result of revising with O1 and expanding with O2 also follow from revising O with the union of O1 and O2. A precondition is that the revision result by O1 is compatible with O2.\nIn general, the reinterpretation operators do not fulfill these postulates. This can be shown with examples similar those provided by Delgrande and Schaub (Delgrande and Schaub 2003, p. 13).\nBut if one chooses particular selection functions for the reinterpretation operators on triggering ontologies, then one can show that the postulates (RAGM 7) and (RAGM 8) are fulfilled. This result is similar to an AGM theorem (Alchourrón, Gärdenfors, and Makinson 1985) which says that a partial meet revision operator on belief sets fulfills all AGM postulates (in particular the supplementary ones) iff it can be defined as a transitive relational partial meet revision operator.\nDefinition 7 A selection function γ for bridging axioms is called a maximum based selection function for bridging axioms iff the following holds:\n1. |γ(X)| = 1 for all ∅ 6= X ⊆ B(σV). 2. If BA1 and BA2 are non-empty sets of bridging axioms\nfrom B(σV), i.e., BA1, BA2 ∈ Pow(B(σV))\\ {∅} s.t. for all X2 ∈ BA2 there is a X1 ∈ BA1 with X2 ⊆ X1, and if additionally also γ(BA1) ⊆ BA2 holds, then γ(BA2) = γ(BA1).\nNow one can show\nProposition 2 Let O = (O,V ,V ′), O1 = (O1,V , ∅) and O2 = (O2,V , ∅) be ontologies and γ be a maximum based selection function for bridging axioms. Then: If (O ⊗γ O1) ∪ O2 is consistent, then : O ⊗γ (O1 ∪ O2) = (O ⊗γ O1) ∪O2.\nThis proposition shows that weak reinterpretation operators with maximum based selection function fulfill (RAGM 8). Moreover, one sees immediately that they fulfill the postulate (RAGM 7) because if (O⊗γ O1)∪O2 is inconsistent, then trivially:\nCnV(O ⊗γ (O1 ∪O2)) ⊆ Cn V((O ⊗γ O1) ∪O2)\nThe supplementary postulates do not give constraints for the interesting case where for both triggers genuine revisions have to be applied. This motivated Darwiche and Pearl (Darwiche and Pearl 1994) to define four iteration postulates which, in an adaptation for the ontology revision scenario, are investigated in the following. The results below show that the reinterpretation operators in general do not fulfill the postulates.\nThe postulates are, along the original ideas of Darwiche and Pearl (Darwiche and Pearl 1994), described for\nfinite sets of sentences (here: ontology axioms), and not for epistemic states as in their follow-up paper (Darwiche and Pearl 1997). Using the terminology of Freund and Lehmann (Freund and Lehmann 2002), the type of iterated revision I consider in this paper is static: There is no (used) encoding of the revision history in an epistemic state nor do I consider the dynamic change of revision operators from step to step. As we consider the justification of the iteration postulates not as a whole but one by one this approach does not stand in contradiction to the insights made in the follow-up paper by Darwiche and Pearl (Darwiche and Pearl 1997).\nIn the following postulates, O = (O,V ,V ′) is the initial ontology, O1 = (O1,V , ∅) the first triggering ontology and O2 = (O2,V , ∅) the second triggering ontology. Note that the trigger ontologies do not contain internal symbols— which fits the idea that only the public parts of the sender ontologies are communicated.\n(RDP 1) If O2 |= O1, then (O ◦O1) ◦O2 ≡V O ◦O2.\nIn natural language: If the axioms of the second trigger ontology are stronger than the ones of the first trigger ontology, then the two-step outcome (relativized to the public vocabulary) is already covered by the revision with the second trigger ontology.\n(RDP 2) If O1 ∪O2 is not consistent, then (O ◦O1) ◦O2 ≡V O ◦O2.\nIn natural language: If the axioms of the first and second trigger ontology are incompatible, then the two-step outcome (relativized to the public vocabulary) is already covered by the revision with the second trigger ontology.\n(RDP 3) If O ◦O2 |= O1, then (O ◦O1) ◦O2 |= O1.\nIn natural language: If the revision by the second trigger ontology entails the first trigger ontology, then the entailment still holds for the revision with the first ontology followed by the second trigger ontology.\n(RDP 4) If O1 ∪ (O ◦O2) is consistent then so is O1 ∪ (O ◦O1) ◦O2. In natural language: If the revision by the second trigger ontology is compatible with the first trigger ontology, then the compatibility still holds for the revision with the first followed by the second trigger ontology.\nAs the following Proposition 3 shows, the fulfillment of all adapted iteration postulates cannot be guaranteed if the trigger is an ontology. (This is the same as for the operators of Delgrande and Schaub (Delgrande and Schaub 2003).) If the trigger is of atomic nature the situation is different due to the fact that there is only one symbol to be reinterpreted. For triggering literals only (RDP 2) is not fulfilled.\nProposition 3 states results for all reinterpretation operators mentioned in this paper: Regarding the weak operators a distinction is made between triggering literals and ontologies. Table 1 summarizes the results. The rows contain the operators: The first three having concept-based literals as triggers, the last two ontologies. The columns except for the last one refer to the iteration postulates. The last column gives a reference to the corresponding result in Proposition 3. Regarding the counterexamples I draw the following distinction—also reflected in the table: The weak counterexamples are those that construct ontologies for a specific selection function. The strong counterexamples are those that construct ontologies for any selection function.\nIn the counter examples that were used to prove the negative results all reinterpretation operators reinterpret only atomic concepts and roles but not constants. As long as a conflict resolution by reinterpreting only concepts and roles is possible, the reinterpretation operators can be modeled by a suitable definition of a selection function γCR: γCR selects only sets of bridge axioms that contain all identities for all constants which, in the end, means that the constants are not reinterpreted. In this case I call γCR a selection function that prefers the reinterpretation of role and concept symbols.\nProposition 3 Regarding the fulfillment of the adapted iteration postulates of Darwiche and Pearl (Darwiche and Pearl 1997) the following results hold.\n1. Reinterpretation operators for concept-based triggers (⊗,⊡,⊕sel) fulfill (RDP 1), (RDP 3) and (RDP 4). There are ontologies O,O1,O2 such that ⊗,⊡ and ⊕sel\n(for all selection functions sel) do not fulfill (RDP 2). There are ontologies O,O1,O2 and a selection function sel such that ⊕sel does not fulfill (RDP 3) and does not fulfill (RDP 4).\n2. For weak reinterpretation operators over triggering ontologies ⊗γ the following holds: For all postulates (RDP x), 1 ≤ x ≤ 3, there are ontologies O,O1,O2 such that for all selection functions γCR\nthat prefer the reinterpretation of role and concept symbols ⊗γ does not fulfill (RDP x). There are ontologies O,O1,O2 and a selection function\nγCR that prefer the reinterpretation of role and concept symbols such that ⊗γ does not fulfill (RDP 4).\n3. For strong reinterpretation operators over triggering ontologies ⊙γ the following holds: For all postulates (RDP 1), (RDP 3), (RDP 4) there are ontologies O,O1,O2 and selection functions γ such that ⊙γ does not fulfill any of them. There are ontologies O,O1,O2 such that for all selection functions γCR that prefer the reinterpretation of concepts and role symbols ⊙γ does not fulfill (RDP 2).\nI discuss the outcomes of the proposition for the four postulates one by one starting with (RDP 2) which (in its original form given by Darwiche and Pearl) evoked most of the criticism. Regarding this postulate I follow the argument of Delgrande and Schaub (Delgrande and Schaub 2003) according to which (RDP 2) may make sense only for noncomplex triggers. For complex triggers, say in our case: complex ontologies O1 (and O2), does not work. Assume O1 is made out of two sub-ontologies O11 und O12 s.t. only O12 is not compatible with O2. All those assertions that follow from O ◦ O1 on the basis of O11 should be conserved after the revision with O2. But according to (RDP 2) amnesic revision would be allowed if O2 would not entail O11: All sentences inferred with O11 would be eliminated in favor of the new ontology O2.\nRegarding the first iteration postulate, the following simple example by Delgrande and Schaub (Delgrande and Schaub 2003) demonstrates its questionable status. Actually, for the proof of Proposition 3.2 I use adapted variants of this example. Consider the ontologies O = {¬A(a)}, O1 = {(A ⊔ B)(a)} und O2 = {A(a)} |= O1. Let γ be a selection function that prefers the reinterpretation of concept and role symbols. The second ontology O2 ist stronger than the first ontology O1. Revision with O2 leads to an ontology in which B(a) does not hold: O ⊗γ O2 6|= B(a). The revision with the first ontology leads to an ontology in which B(a) holds: O⊗γ O1 = {¬A(a), (A⊔B)(a)} |= B(a). The revision by the first and then by the second ontology gives an ontology that still entails B(a):\n(O ⊗γ O1)⊗ γ O2 = {¬A(a), (A ⊔B)(a), A ′(a′),\nA ⊑ A′, a . = a′, B ⊑ B′,\nB′ ⊑ B} |= B(a)\nAll preconditions in the antecedent of (RDP 1) are fulfilled but not the succedens: (O ⊗γ O1)⊗γ O2 6≡V O ⊗γ O2.\nThere is no plausible revision operator for this particular ontology setting that would fulfill (RDP 1). Such an operator would have to fulfill O ◦O1 |= B(a) as O and O1 are compatible. The revision with O2 should not eliminate B(a) as B(a) is not relevant for the conflict: (O ◦O1) ◦O2 |= B(a). Clearly, one could define syntax-sensitive revision operators on belief bases s.t. (O ◦ O1) ◦ O2 6|= B(a) so that the fulfillment of (RDP 1) could be achieved also for this ontology configuration. But this does not change the situation that also (O ◦ O1) ◦ O2 |= B(a) should be fulfilled. Moreover, syntax-sensitive belief-base operators are not appropriate for\nthe revision of ontologies for which we would like to ensure (unique) syntax insensitive representations. So the only possibility for ◦ to fulfill (RDP 1) is that O ◦ O2 |= B(a) holds. Such an operator ◦ that fulfills these conditions can be defined : O entails (¬A ⊔ B)(a) and (¬A ⊔ ¬B)(a). If ◦ has a selection function γ that chooses (¬A ⊔ B)(a), then O ◦O2 would entail B(a). But one could equally have a selection function γ′ such that O ◦ O2 6|= B(a) or even O ◦O2 |= ¬B(a). There is no adequate reason for assuming that one has to prefer γ over γ′.\nThe counter example against (RDP 1) refers to triggering ontologies. For non-complex triggers such as concept-based literals a counter example cannot be constructed. Indeed: In this case all reinterpretation operators fulfill (RDP 1) (besides (RDP 3) and (RDP 4) ( see Proposition 3.1).\nRegarding the weak reinterpretation operator for triggering ontologies ⊗γ one can construct examples such that for all selection functions γ that prefer the reinterpretation of concept and role symbols ⊗γ does not fulfill the postulate (RDP 3) (Proposition 3.2). For strong reinterpretation operators for triggering ontologies one can at least construct ontologies and at least one selection function showing the non-fulfillment (RDP 3). The counter example for the weak variants is based on the interplay of trivial revision (consistency case) and non-trivial revision (inconsistency case):\nO = {A(a),¬B(a) ∨ ¬A(c), A(b) ∨ ¬A(e)}\nO1 = {¬A(b)}\nO2 = {¬A(a), B(a), A(c) ∨ ¬A(b), A(e)}\nO and O1 are chosen such that they are compatible and so O ⊗γ O1 = O ∪ O1 |= ¬A(e). Due to the antecedens in postulate (RDP 3) the revision by the second triggering ontology O2 gives an ontology O ⊗γ O2 that entails the first trigger O1. The conflict resolution for O2∪O is such that O1 is not effected by it. But a previous revision with O1 requires a different (additional) conflict resolution with O2 such that O1 is not entailed anymore: (O⊗γO1)⊗γO2 6|= {¬A(b)}(= O1). The reason that ¬A(b) cannot be inferred anymore is due to the fact that the conflict resolution for O ⊗γ O1 and O2 leads to a reinterpretation of A, and due to the fact that the assertion ¬A(e), which follows from O ⊗γ O1, has the same polarity as ¬A(b): namely, it is also negated.\nThis lost of ¬A(b) is due to the construction of the reinter-\npretation operators which implement a uniform reinterpretation: In case of conflicts all occurrences of symbols involved in the conflict are internalized. Only by introducing bridging axioms is it possible to regain assertions in the public vocabulary. But when the bridging axioms are not expressive enough, then old sentences of the receiver (such as ¬A(b) in this example) may not be entailed anymore. This last discussion regarding (RDP 3) (and similarly for (RDP 4)) cannot be used as general arguments against (RDP 3) and (RDP 4) as adequate reinterpretation postulates. One may construct plausible ontology revision operators fulfilling (RDP 3) and (RDP 4), but these cannot implement uniform reinterpretation: They would have to do partial reinterpretation (as, e.g., done by Goeb and colleagues (Goeb et al. 2007)). So, acceptable arguments against (RDP 3) and (RDP 4) would have to support the requirement of uniformity within reinterpretation. And indeed, there are good arguments in form of novel postulates that are motivated by typical requirements in ontology change settings: One wants to preserve the ontologies somehow in the ontology revision result and also wants them to be reconstructible. In particular these requirements occur when the ontologies are well-developed.\nI describe these postulates for the iterated scenario with a sequence SEQ of triggering ontologies. Let O = (O,V ,V ′) be an ontology and let SEQ be a finite sequence of ontology axioms containing only symbols in the public vocabulary V .\nAn operator ◦ that fulfills the iterated preservation postulate for the left argument (Preservation) has to guarantee that there is a substitution σ s.t. the initial ontology O is preserved in internalized form Oσ in the result of iterated revision with a sequence SEQ.\n(Preservation) There is a substitution σ s.t.:"
    }, {
      "heading" : "Oσ ⊆ O ◦ SEQ",
      "text" : "An operator ◦ that fulfills (Reconstruction) has to guarantee the existence of a substitution ρ such that the initial ontology O and the set set(SEQ) of all triggering ontologies in the sequence SEQ are contained in a renamed variant of the revision result (O ◦ SEQ)ρ.\n(Reconstruction) There is a substitution ρ s.t.:\nO ∪ set(SEQ) ⊆ (O ◦ SEQ)ρ\nAll reinterpretation operators of this paper fulfill both postulates. I state this proposition the proof of which is a slight adaptation of the proof given in (Eschenbach and Özçep 2010) for triggering concept-based literals.\nProposition 4 Let O = (O,V ,V ′) be an ontology and SEQ be finite sequence of setts of ontology axioms over V and ◦ a reinterpretation operator for triggering ontologies. Then there exists σ and ρ, such that :\n1. Oσ ⊆ O ◦ SEQ\n2. O ∪ set(SEQ) ⊆ (O ◦ SEQ)ρ\n3. For all symbols C ∈ V(O) ∪ V one has: C = Cρ."
    }, {
      "heading" : "5 Related Work",
      "text" : "The reinterpretation operators are constructed in a similar fashion as those by Delgrande and Schaub (Delgrande and Schaub 2003) but differ in that they are defined not only for propositional logic but also for DLs (and FOLs). Moreover, I consider different stronger forms of bridging axioms than the implications of (Delgrande and Schaub 2003).\nBridging axioms are special mappings that are used in the reinterpretation operator as auxiliary means to implement ontology revision. One may also consider mappings by themselves as the objects of revision (Qi, Ji, and Haase 2009; Meilicke and Stuckenschmidt 2009). A particularly interesting case of mapping revision comes into play with mappings used in the ontology based data access paradigm (Calvanese et al. 2009). These mappings are meant to lift data from relational DBs to the ontology level thereby mapping between close world of data and the open world of ontologies. In this setting different forms of inconsistencies induced by the mappings can be defined (such as local vs. global inconsistency) and based on this mapping evolution ensuring (one form of consistency) be investigated (Lembo et al. 2015).\nIn this paper I used reinterpretation operators as change operators on ontologies described in DLs. There are different other approaches that use the ideas of belief revision for different forms of ontology change such as ontology evolution over DL-Lite ontologies (Kharlamov, Zheleznyakov, and Calvanese 2013) or ontology debugging (Ribeiro and Wassermann 2009). As the consequence operator over DLs do not fulfill all preconditions assumed by AGM (Alchourrón, Gärdenfors, and Makinson 1985) one cannot directly transfer AGM constructions and ideas one-to-one to the DL setting as noted, e.g., by Flouris and colleagues (Flouris, Plexousakis, and Antoniou 2005) and dealt in more depth for non-classical logics by Ribeiro (Ribeiro 2012). For the definition of the reinterpretation operators the constraint is not essential. Nonetheless, they lead to constraints in providing appropriate counter examples: namely ontologies expressible in the DL at hand."
    }, {
      "heading" : "6 Conclusion",
      "text" : "The paper discussed iterative applications of reinterpretation operators meant to handle conflicts due to ambiguous use of symbols in related and well-developed ontologies. Reinterpretation operators may also be used for solving consistencies not due to ambiguity but due to false information—and indeed, the related revision operators in (Delgrande and Schaub 2003) do not talk about ambiguity. But reinterpretation operators cannot be used to solve inconsistencies that clearly cannot be explained by ambiguity: namely consistencies due to different constraints of the sender and the receiver regarding the number of possible objects in the domain (this was discussed under the term reinterpretation compatibility in (Özçep 2008)).\nThe reinterpretation for triggering literals were shown to fulfill (adapted versions of) classical iteration postulates of Darwiche and Pearl (Darwiche and Pearl 1994) whereas the reinterpretation operators for ontologies were shown in general not to fulfill them. Some of the postulates were criticized for general reasons. Nonetheless, still one may consider other forms of reinterpretation operators that incorporate the reinterpretation history in order to define dynamic operators: For example one might weight symbols according to the number of times they were reinterpreted and then use a comparison of the weights in the next iteration step in order to decided which symbols to reinterpret next.\nIn addition to the general criticisms I discussed the adequateness of the other postulates in view of the special ontology change scenario. Here one cannot guarantee the fulfillment by reinterpretation operators that implement a uniform reinterpretation. But uniformity is necessary in order to guarantee the fulfillment of postulates that express the preservation and reconstructibility of the ontologies in the revision result."
    }, {
      "heading" : "Appendix: Proofs",
      "text" : "Proof of Proposition 2 For the proof we need the following lemma Lemma 1 For all X2 ∈ B(σV) ⊢\n(OσV ∪O1 ∪O2) there is a X1 ∈ B(σV) ⊢\n(OσV ∪O1) such that X2 ⊆ X1. Proof. If OσV ∪ O1 ∪ O2 ∪ X2 is consistent, so is O1 ∪ O2 ∪X2. If X2 is not maximal, then there is a superset X1 in B(σV) ⊢ (OσV ∪O1).\nDefine the following sets X1 = γ(B(σV) ⊢ (OσV ∪O1))\nX2 = γ(B(σV)\n⊢\n(OσV ∪O1 ∪O2))\nWith this notation we have (O⊗γ O1)∪O2 = OσV ∪O1 ∪ O2 ∪X1 and (O⊗γ O1)∪O2 = OσV ∪O1 ∪O2 ∪X2. Assume that (O⊗γ2O1)∪O2 is consistent. Then there is a X\n′ ∈ B(σV) ⊢\n(OσV∪O1∪O2) with X1 ⊆ X ′. Because of Lemma 1 there is a X ′′ ∈ B(σV) ⊢\n(OσV ∪ O1) with X ′ ⊆ X ′′. Hence X1 ⊆ X ′′. But as X1 is inclusion maximal, one gets X1 = X ′′ = X ′ and hence X1 ∈ B(σV) ⊢\n(OσV ∪O1∪O2). Due to Lemma 1 the first precondition for maximum based selection functions was shown to hold. Now we showed also that the second condition holds, hence X1 = X2. In particular: O ⊗γ (O1 ∪O2) = (O ⊗γ O1) ∪O2.\nProof of Proposition 3 All results hold trivially if O is not consistent. So for the following assume that O is consistent. Proof of 1. In the following let ◦ ∈ {⊗,⊡,⊕sel}.\nProof for (RDP 1): As O1 and O2 are trigger literals, O2 |= O1 holds iff O1 = O2. Hence (O ◦ O1) ◦ O2 = (O ◦ O2) ◦ O2 = O ◦ O2, as the reinterpretation operators fulfill the success postulate.\nCounterexample for (RDP 2): Let O = {A(b)}, O1 = {A(a)} and O2 = {¬A(a)}. Then O1 ∪ O2 |= ⊥. On the one hand O ◦ O2 = {A(b),¬A(a)} |= A(b); on the other hand (O◦O1)◦O2 = {A(b), A(a)}◦2{¬A(a)} 6|= A(b) due to Proposition 1.3 (for the weak operators) and Proposition 1.4 (for the strong operators) and again due to 1.3 for the selection based operators ⊕sel, as in this case (O ⊗ O1) ⊗ O2 ≡ (O ⊕sel O1)⊕sel O2.\nProof for (RDP 3): Let O ◦ O2 |= O1. Case 1: O∪O2 is consistent. As O1 are O2 literals, O2 |= O1 means that O1 = O2. Now (O ◦O1) ◦ O2 = (O ◦ O2) ◦ O2 = O ∪O2 = O ◦ O2.\nCase 2: O ∪ O2 is inconsistent. We show the proof for O2 = {A(a)}. (The case that O2 = {¬A(a)} is proved similarly.) Subcase 2.1: A /∈ V(O1). Then from O ◦2 O2 |= O1 and Proposition 1.1, it follows that O |= O1, hence (O ◦ O1) = O ∪ O1. Because of 1.1 one has: (O ∪ O1) ◦ O2 |= O1. Subcase 2.2: A ∈ V(O1). Let ◦ = ⊗. Because of O ◦ O2 |= O1 and Proposition 1.3 it must be the case that O1 contains A positively, i.e., O1 = {A(c)}. Because ⊗ fulfills the success postulate O⊗ {A(c)} |= {A(c)} and hence also (O⊗{A(c)})∪{a 6 . = c} |= {A(c)}. Because of Proposition 1.2 one gets (O ⊗ {A(c)}) ⊗2 {A(a)} |= {A(c)}. Now consider the case ◦ = ⊡. If A is positive in O1, then O1 = {A(c)}. In this case again Proposition 1.2 gives the result (O ⊡ O1) ⊡ O2 |= O1. In the other case O1 is of the form O1 = {¬A(c)}; using the assumptionO◦O2 |= O1 one gets with Proposition 1.4 that O |= ¬mscO(a)(c) and O |= O1. In particular O⊡ O1 = O ∪O1 ≡ O. Also mscO⊡O1(a) = mscO(a). Hence fromO |= ¬mscO(a)(c) we getO⊡O1 |= ¬mscO⊡O1(a)(c). Because O ⊡ O1 |= O1 holds, one can infer with Proposition 1.4 that (O⊡O1)⊡2O2 |= O1. With a similar argument and Proposition 1.5 one can show that the results holds for ◦ = ⊕sel.\nProof for (RDP 4): Let O1 ∪ (O ◦ O2) be consistent. Case 1: O ∪ O2 is consistent. Then O ◦ O2 = O ∪ O2 and so O1 ∪ (O ∪ O2) 6|= ⊥ due to assumption. But then O ◦ O1 = O ∪O1.\nCase 2: O ∪O2 is not consistent. If also (O ◦ O1) ∪O2is consistent, then (O ◦ O1) ◦ O2 = (O ◦ O1) ∪ O2. As O ◦ O1 |= O1 we then have (O ◦ O1) ◦ O2 |= O1, in particular O1 ∪ (O ◦O1) ◦O2) 6|= ⊥. Therefore consider now the case that (O ◦ O1) ∪O2 is inconsistent.\nWe show the result for O2 = {A(a)} (The argument for negative literals is similar). Subcase 2.1: A /∈ V(O1). Due to success, O ◦O1 |= O1 and with Proposition 1.1 it follows that (O◦O1)◦O2 |= O1. Because (O◦O1)◦O2 is consistent so is O1 ∪ (O ◦O1)◦O2. Subcase 2.2: A ∈ V(O1). Assume O1∪(O◦O1)◦O2 |= ⊥. Is O1 of form O1 = {¬A(c)}, then due to Proposition 1.2 it holds that O1 ∪O ◦ O1 ∪ {a 6 . = c} is not consistent. Because O ◦ O1 |= O1 this can be the\ncase only if O ◦ O1 |= a . = c. Then O1 = {¬A(a)} which contradicts the assumption O1 ∪ (O ◦ O2) 6|= ⊥. If O1 has the form O1 = {A(c)}, then, due to Proposition 1.3, this can only be the case if ◦ = ⊡ or ◦ = ⊕sel. With the assumption that (O1∪(O◦O1)◦O2 is not consistent, i.e. (O◦ A(c))◦A(a) |= ¬A(c), one could infer with Proposition 1.4 and 1.5 that O◦A(c) |= ¬A(c) which would mean that O1∪ (O ◦ O1) is not consistent—-contradicting the consistency of O ⊡ O1 and the fact that O ⊡2 O1 |= O1. Proof of 2. Counter example for (RDP 1): Consider\nO = {¬A(a)}\nO1 = {(A ⊔B)(a)}\nO2 = {A(a)}\nLet be γ an arbitrary selection function that prefers the reinterpretation of role and concept symbols. Then we get on the one hand O⊗γ O2 = {¬A′(a′), A(a), A′ ⊑ A, a . = a′}. And so O ⊗γ O2 6|= B(a). On the other hand O ⊗γ O1 = {¬A(a), (A ⊔B)(a)} |= B(a). And last\n(O ⊗γ O1)⊗ γ O2 = {¬A ′(a′), (A′ ⊔B′)(a′), A(a),\nA′ ⊑ A, a . = a′, B ⊑ B′,\nB′ ⊑ B}\nBut then (O ⊗γ O1) |= B(a), Counter example for (RDP 2): See counter example for triggering literals. Counter example for (RDP 3):\nO = {A(a), ∃R1.A ⊑ ¬B,R1(a, c), ∃R2.A ⊑ A,\nR2(b, e)}\nO1 = {¬A(b)}\nO2 = {¬A(a), B(a), A(e), ∃R3.A ⊑ A,R3(c, b)}\nFor all selection functions γ that prefer the reinterpretation of concept and role symbols one has:\nO ⊗γ O1 = O ∪O1 O ⊗γ O2 = OσV ∪O2 ∪ B(σV) \\ {A ′ ⊑ A}\n|= ¬A(b)\n(O ⊗γ O1)⊗ γ O2 = (O ∪O1)σV ∪O2 ∪\nB(σV) \\ {A ′ ⊑ A,A ⊑ A′}\n6|= ¬A(b)\nNote that the O,O1, O2 have simple structures and do not presuppose complex DL constructors.\nCounter example for (RDP 4): Consider:\nO = {B(a), B(b) ∨C(b)}\nO1 = {¬A(a),¬B(b)}\nO2 = {¬B(a) ∨A(a),¬B(b),¬C(b)}\nChoose γ such that the following results hold:\nO ⊗γ2 O2 = {B ′(a′), B′(b′) ∨ C′(b′),\n¬B(a) ∨ A(a),¬B(b),¬C(b), a . = a′, b . = b′,\nC ⊑ C′, C′ ⊑ C,B ⊑ B′}\n6|= ¬ ∧\nO1\nO ⊗γ2 O1 = {B(a), B(b) ∨C(b),\n¬A(a),¬B(b)} |= C(b)\n(O ⊗γ2 O1)⊗ γ 2 O2 = {B ′(a′), B′(b′) ∨ C′(b′),\n¬A′(a′),¬B′(b′),¬B ⊔ A(a), ¬B(b),¬C(b), a . = a′, b . = b′,\nB ⊑ B′, B′ ⊑ B,C ⊑ C′, A′ ⊑ A} |= ¬ ∧\nO1\nNote that we use here boolean ABoxes. As in the previous counterexample a purely DL counter example with standard ABoxes should be constructible. Proof of 3. Counter examples for (RDP 1), (RDP 3) und (RDP 4): Consider the same set of ontology axioms as in the corresponding counter examples for the weak reinterpretation ⊗γ . The selection function γ can be chosen such that the same results follow as in the case of ⊗γ .\nCounter example for (RDP 2): See counter example for triggering literal."
    } ],
    "references" : [ {
      "title" : "Updating RDFS aboxes and tboxes in SPARQL",
      "author" : [ "Calvanese Ahmeti", "A. Polleres 2014] Ahmeti", "D. Calvanese", "A. Polleres" ],
      "venue" : null,
      "citeRegEx" : "Ahmeti et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Ahmeti et al\\.",
      "year" : 2014
    }, {
      "title" : "C",
      "author" : [ "Alchourrón" ],
      "venue" : "E.; Gärdenfors, P.; and Makinson, D.",
      "citeRegEx" : "Alchourrón. Gärdenfors. and Makinson 1985",
      "shortCiteRegEx" : null,
      "year" : 1985
    }, {
      "title" : "Ontologies and databases: The DL-Lite approach",
      "author" : [ "Calvanese" ],
      "venue" : "Semantic Technologies for Informations Systems",
      "citeRegEx" : "Calvanese,? \\Q2009\\E",
      "shortCiteRegEx" : "Calvanese",
      "year" : 2009
    }, {
      "title" : "and Pearl",
      "author" : [ "A. Darwiche" ],
      "venue" : "J.",
      "citeRegEx" : "Darwiche and Pearl 1994",
      "shortCiteRegEx" : null,
      "year" : 1994
    }, {
      "title" : "and Pearl",
      "author" : [ "A. Darwiche" ],
      "venue" : "J.",
      "citeRegEx" : "Darwiche and Pearl 1997",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "and Schaub",
      "author" : [ "J.P. Delgrande" ],
      "venue" : "T.",
      "citeRegEx" : "Delgrande and Schaub 2003",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "J",
      "author" : [ "Delgrande" ],
      "venue" : "P.",
      "citeRegEx" : "Delgrande 2008",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "2010",
      "author" : [ "C. Eschenbach", "Özçep", "Ö. L" ],
      "venue" : "Ontology revision based on reinterpretation. Logic Journal of the IGPL 18(4):579–616. First published online August 12,",
      "citeRegEx" : "Eschenbach and Özçep 2010",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Ontology change: classification and survey. The Knowledge Engineering Review 23(2):117–152",
      "author" : [ "Flouris" ],
      "venue" : null,
      "citeRegEx" : "Flouris,? \\Q2008\\E",
      "shortCiteRegEx" : "Flouris",
      "year" : 2008
    }, {
      "title" : "On applying the AGM theory to dls and OWL",
      "author" : [ "Plexousakis Flouris", "G. Antoniou 2005] Flouris", "D. Plexousakis", "G. Antoniou" ],
      "venue" : "The Semantic Web - ISWC",
      "citeRegEx" : "Flouris et al\\.,? \\Q2005\\E",
      "shortCiteRegEx" : "Flouris et al\\.",
      "year" : 2005
    }, {
      "title" : "D",
      "author" : [ "M. Freund", "Lehmann" ],
      "venue" : "J.",
      "citeRegEx" : "Freund and Lehmann 2002",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "Dynamic TBox-handling in agentagent-communication",
      "author" : [ "Goeb" ],
      "venue" : "Dynamics of Knowledge and Belief. Proceedings of the Workshop at the 30th Annual German Conference on Ar-",
      "citeRegEx" : "Goeb,? \\Q2007\\E",
      "shortCiteRegEx" : "Goeb",
      "year" : 2007
    }, {
      "title" : "Rdfs update: From theory to practice",
      "author" : [ "Hurtado Gutierrez", "C. Vaisman 2011] Gutierrez", "C. Hurtado", "A. Vaisman" ],
      "venue" : "In Proceedings of the 8th Extended Semantic Web Conference on The Semanic Web: Research and Applications - Volume Part II,",
      "citeRegEx" : "Gutierrez et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Gutierrez et al\\.",
      "year" : 2011
    }, {
      "title" : "Capturing model-based ontology evolution at the instance level: The case of dl-lite",
      "author" : [ "Zheleznyakov Kharlamov", "E. Calvanese 2013] Kharlamov", "D. Zheleznyakov", "D. Calvanese" ],
      "venue" : "J. Comput. Syst. Sci",
      "citeRegEx" : "Kharlamov et al\\.,? \\Q2013\\E",
      "shortCiteRegEx" : "Kharlamov et al\\.",
      "year" : 2013
    }, {
      "title" : "D",
      "author" : [ "D. Lembo", "J. Mora", "R. Rosati", "Savo" ],
      "venue" : "F.; and Thorstensen, E.",
      "citeRegEx" : "Lembo et al. 2015",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "and Stuckenschmidt",
      "author" : [ "C. Meilicke" ],
      "venue" : "H.",
      "citeRegEx" : "Meilicke and Stuckenschmidt 2009",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Ö",
      "author" : [ "Özçep" ],
      "venue" : "L.",
      "citeRegEx" : "Özçep 2008",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Ö",
      "author" : [ "Özçep" ],
      "venue" : "L.",
      "citeRegEx" : "Özçep 2012",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "A conflict-based operator for mapping revision",
      "author" : [ "Ji Qi", "G. Haase 2009] Qi", "Q. Ji", "P. Haase" ],
      "venue" : null,
      "citeRegEx" : "Qi et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Qi et al\\.",
      "year" : 2009
    }, {
      "title" : "and Wassermann",
      "author" : [ "M.M. Ribeiro" ],
      "venue" : "R.",
      "citeRegEx" : "Ribeiro and Wassermann 2009",
      "shortCiteRegEx" : null,
      "year" : 2009
    } ],
    "referenceMentions" : [ ],
    "year" : 2016,
    "abstractText" : "Iterated applications of belief change operators are essential for different scenarios such as that of ontology evolution where new information is not presented at once but only in piecemeal fashion within a sequence. I discuss iterated applications of so called reinterpretation operators that trace conflicts between ontologies back to the ambiguous of symbols and that provide conflict resolution strategies with bridging axioms. The discussion centers on adaptations of the classical iteration postulates according to Darwiche and Pearl. The main result of the paper is that reinterpretation operators fulfill the postulates for sequences containing only atomic triggers. For complex triggers, a fulfillment is not guaranteed and indeed there are different reasons for the different postulates why they should not be fulfilled in the particular scenario of ontology revision with well developed ontologies.",
    "creator" : "LaTeX with hyperref package"
  }
}