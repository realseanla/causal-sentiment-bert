{
  "name" : "1701.06388.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Constraint Programming for Planning Test Campaigns of Communications Satellites",
    "authors" : [ "Emmanuel Hebrard", "Marie-José Huguet", "Daniel Veysseire", "Ludivine Boche", "Bertrand Cabon" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n70 1.\n06 38\n8v 1\n[ cs\n.A I]\n2 3\nJa n"
    }, {
      "heading" : "1 Introduction",
      "text" : "The payload of a communications satellite is the on-board equipment that is actually relevant to the mission: receiving, amplifying and returning the signal. A set of tests are necessary to certify that the payload will correctly perform its mission. A test is characterized by a set of active equipment units and several thermal constraints limit the number of equipment units that can be made active simultaneously. The duration of the tests themselves is incompressible. However, activating some equipment takes time as each equipment unit much reach a given temperature and the temperature of the entire payload must be stabilized before tests can resume. Therefore, the total transition time depends on the order in which tests are sequenced. The goal is to sequence all the tests so that the overall duration is minimized.\nTwo main approaches have been previously considered. In the first approach [8], tests requiring the same subset of active equipment are packed together in the\nsame payload configuration. The transition time between tests run in the same configuration is null since no equipment activation is required. Between two configurations, however, some equipment units must be activated or deactivated and the heat of the payload must be stabilized before the next configuration, which entails important transition times. The objective of this approach is to minimize the number of configurations necessary for running all the tests. Moreover, a secondary objective is to minimize the overall number of activations and deactivations since the time required to stabilize the temperature of the payload is correlated, though not linearly, to the number of simultaneous activations. In practice, the transition time between two configurations is considered as a constant value sufficient to stabilize the temperature in the payload. Maillet et al. [8] first proposed a constraint programming approach to address this problem, using backjumping and dedicated heuristics.\nIt is in principle possible to activate an equipment unit whilst tests on other units are being run. The second approach, presented in [2], relies on this idea. An equipment activation is viewed as a task with a given duration. If an equipment unit is not tested during a period equal to this duration and if the thermal constraints allow it, then it can be activated at the beginning of this period, and becomes available for other tests at the end. It may be possible to do so for several or even all equipment activations, thus effectively masking the transition times. A local search method (simulated annealing) was proposed in [2] for this second approach, that is, with “online” activation allowed. It was shown that this approach can reduce the overall duration of the test campaign. However, the total number of activations can be higher in some instances.\nFinally, since the focus in [8] was on selecting a subset of tests to be run rather than sequencing them, a straightforward improvement of the first approach was proposed in [2]: Once every test is allocated to a configuration and the number of configurations is minimized, the problem of minimizing the number of activations between consecutive configurations can be seen as a Traveling Salesman Problem (TSP). As the number of configurations is typically small, this problem can be solved optimally even with relatively basic TSP methods.\nThe second approach is difficult to implement in practice as activations and deactivations can happen continuously, making the detailed thermal analysis of the process a difficult task, whereas thermal engineers only need to worry about transitions between configurations in the first approach. In this work, we present a study for Airbus, which currently only implements the first approach. We propose an improved constraint programming approach to solve the problem.\nSince thermal constraints limit the number of tests that can be run in the same configuration, this problem has a packing component, where tests have to be allocated to a minimum number of configurations. We introduce a set of implied constraints to improve the lower bound on this objective.\nMoreover, this packing component is intertwined with a sequencing component where configurations must be ordered so that the number of equipment activations is minimized. We observe that this secondary objective can be easily modeled using the constraint Switch [1]. This constraint models a resource\noperating as a buffer of limited capacity and whose content can be changed, however at a cost. Tests require equipment to be active and thermal constraints limit the number of simultaneously active equipment units, which can thus be seen as buffered. Moreover, the number of activations, which correspond to switches in the buffer, should be minimized. We introduce a simple improvement of the propagation algorithm for this constraint in the very common case where we have prior knowledge about the items that must be eventually buffered.\nNext, we introduce a search strategy in which we sequentially solve the two sub-problems. We solve first the packing problem with a dedicated branching heuristic to find upper and lower bounds on this objective quickly. Then we solve a much simplified sequencing problem since tests are already allocated to configurations. This approach is not complete, and hence we must solve the overall problem in order to find optimal solutions. However this is made significantly easier thanks to the upper and lower bounds found in the previous phases.\nFinally, we experimentally evaluate the different contributions and assess the benefit of our method with respect to the current approach in use at Airbus."
    }, {
      "heading" : "2 Formal Background",
      "text" : "A constraint satisfaction problem (CSP) consists of a set of variables, where each variable Xk has a finite domain of values D(Xk), and a set of constraints specifying allowed combinations of values for subsets of variables. A solution of a CSP is an assignment of values to the variables satisfying the constraints.\nWe consider both integer and set variables. A set variable Yi is represented by its lower bound Yi which contains the required elements and an upper bound Yi which contains the possible elements. For a finite universe U ⊂ N, we identify a set variable Yi with the set of Boolean variables {Y j i | j ∈ U}. The predicates\nY ji = 1 and j ∈ Yi are equivalent, as are |Yi| = κ and ∑ j∈e Y j i = κ.\nFor two integers a ≤ b, we denote [a, b] the set of consecutive integers {a, . . . , b}, and use the shortcut notation [b] for [1, b].\nWe shall often denote a sequence of variables or constants (c1, . . . , cn) by c (where the length n is either recalled or clear from the context).\n2.1 The constraints Switch and BufferedResource\nThe constraints Switch and BufferedResource [1] were introduced to model a type of resource corresponding to a buffer which must contain the items required by some tasks when they are being processed. Such resources are limited in two ways: first, the buffer can only hold a limited number of items, and second, there is an upper bound on the number of item switches along the sequence.\nIn our context, these constraints are useful to model thermal constraints together with the objective to minimize the number of activations (switches) of equipment units (items to be buffered). The constraint Switch involves a sequence of set variables Y = (Y1, . . . , Yn) and an integer variable M. The set variable Yi represents the content of the buffer at position (or time) i, and the\nvariable M represents the total number of items that are removed from the buffer to make room for new items: ∑n−1 i=1 |Yi \\ Yi+1|. Moreover, the buffer has a minimum and maximum capacity (lower and upper bound on |Yi|) which are allowed to be different at every position i. Let Y be a sequence of set variables, and κ, κ be two sequences of constants of same size n.\nDefinition 1 (Switch).\nSwitch(Y, κ, κ,M) ⇐⇒ ∀i ∈ [n], κi ≤ |Yi| ≤ κi ∧ ∑\n1≤i<n\n|Yi+1 \\ Yi| ≤ M\nOften, we know beforehand which tasks are to be performed and which items are required by each task. In this case, one can use the BufferedResource constraint which involves a sequence of integer variables X = (X1, . . . , Xn) representing a permutation of n tasks, and a sequence t = (t1, . . . , tn) of sets of integers standing for the items required by each task. Achieving arc consistency on this constraint is NP-hard, and there is no dedicated propagation algorithm for this constraint, besides the obvious decomposition using Switch, AllDifferent [12] and some Element [7] constraints.\nDefinition 2 (BufferedResource).\nBufferedResource(X,Y, κ, κ, t,M) ⇐⇒\nSwitch(Y, κ, κ,M) ∧\n∀i < j ∈ [1, h], Xi 6= Xj ∧\n∀i, ti ⊆ YXi\nIn our test planning problem, the buffers have equal upper and lower bounds. We shall therefore use a single integer parameter to denote the sequences κ and κ in the remainder of the paper."
    }, {
      "heading" : "3 Test Planning",
      "text" : ""
    }, {
      "heading" : "3.1 Data and Constraints",
      "text" : "A test campaign involves n tests and m equipment units. Every test k ∈ [n] involves a subset tk ⊆ [m] of equipment units to be active.\n1 A payload configuration (or simply configuration) is defined by a partition of the equipment into active and inactive units. A test k can occur in a configuration if the set of active equipment units in that configuration is a superset of tk.\nHowever, one cannot use a single configuration where every equipment unit is active, because the payload would overheat. Equipment units that are on the same wall or blade of the satellite contribute to the overall temperature of that wall/blade. Therefore, we have p constraints, one for every set of equipment units\n1 Throughout the paper, an equipment unit is said to be “active” if it is switched on and “inactive” otherwise.\nwhose thermal profiles are linked. For each thermal constraint ℓ ∈ [p], we define a subset cℓ ⊆ [m] of size ∆ℓ of equipment units, among which exactly2 κℓ should be active at the same time, i.e., in the same configuration."
    }, {
      "heading" : "3.2 Decisions and Objectives",
      "text" : "A test plan with h∗ configurations is a mapping τ from tests to a set of consecutive integers [h∗] (without loss of generality, we assume that configurations are numbered 1 to h∗), and a mapping σ from configurations to subsets of equipment units such that the equipment units required to run a test are active when this test is run and every configuration satisfies all thermal constraints.\nThe main objective is to minimize the number of configurations |{τ(k) | k ∈ [n]}|, in order to reduce the transition time between tests, that is, the time spent in reconfiguring the payload.\nMoreover it is important to take into account the total number of changes in the status of an equipment unit. Indeed, even though several equipment units can be switched on or off simultaneously, changing the status of more units requires a more careful analysis of the thermal dynamics of the system and is more likely to destabilize it. The second objective therefore is the total number of times an equipment unit is switched on besides the initial activation: ∑h∗\ni=1(|σ(i) \\ σ(i − 1)|)−m, where σ(0) is assumed to be empty.\nIndeed, it is important to take into account the total number of changes in the status of the equipment. Even though several equipment units can be switched on or off simultaneously, changing the status of more units requires a more careful analysis of the thermal dynamics of the system and is more likely to destabilize it. In order to count the total number of times each equipment unit is switched from inactive to active and vice versa, we must decide the order in which the planned configurations will be visited. By convention, since configuration names are arbitrary, the tests allocated to configuration i are run at the i-th position. Therefore, the same mapping τ defines both the allocation of tests to configurations and the sequence in which tests will be run.\nWe consider here that the packing objective has higher priority than the sequencing objective and thus that they are lexicographically ordered.\nExample 1. Consider a set of 8 tests and 6 equipment units shown in Figure 1a. The equipment required by each test is indicated with the symbol ✖. Moreover, assume that we have two thermal constraints with scopes c1 = {1, 2, 3} and c2 = {4, 5, 6} both of capacity 2.\nThe solution shown in Figure 1a (✕ symbols indicate active equipment not involved in the current test) is suboptimal as it requires three configurations. Additionally, equipment units 1 and 6 must be activated twice.\nHowever, with the permutation 2, 3, 5, 7, 8, 1, 4, 6 shown in Figure 1b, we only need two configurations and every equipment unit is activated exactly once.\n2 Alternatively, one may only consider an upper bound only to prevent the system from overheating, however thermal engineers advise to keep the system as stable as possible, hence our choice of an equality."
    }, {
      "heading" : "3.3 Complexity",
      "text" : "It is relatively easy to see that the test planning problem described above is NPhard. We show that the decision version TestPlanning, which asks whether there exists a plan with at most h configurations is NP-complete.\nTheorem 1. TestPlanning is NP-complete.\nProof. It is in NP since a plan can be checked in polynomial time. To prove hardness, we use a straightforward reduction from 3-coloring, which asks, given a graph G = (V,E), whether there exists a coloring of V with at most 3 colors such that no edge has its two end points of the same color.\nFrom a graph G = (V,E), we build an instance of TestPlanning as follows:\n– For every edge (x, y) ∈ E, there are two equipment units xy and yx and a thermal constraint on these two units with capacity 1. – For every vertex x ∈ V we create a test tx involving equipment units xy for every y such that (x, y) ∈ E.\nIt is easy to see that two tests tx and ty can share the same configuration if and only if there is no edge (x, y) ∈ E. Therefore, G has a 3-coloring if and only if there is a plan with at most 3 configurations, and hence TestPlanning is NP-hard for h = 3. ⊓⊔\nMoreover, even if we let the number of configurations free, minimizing the number of switches is also NP-hard for a single thermal constraint over all equipment of capacity κ since it corresponds exactly to the constraint:\nBufferedResource(X,Y, κ, t,M)\nwhere X (resp. Y) is a sequence of n integer (resp. set) variables, and for every k ∈ [n] the variable Xk has domain [n] and the variable Yk ranges between the empty set and [m].\nThe number of simultaneously active equipment units must be equal to κℓ, therefore, we can consider actived equipment as a buffer of capacity exactly κℓ.\nMoreover, the set of equipment units tk required by a test k corresponds to the items required to be in the buffer when processing this task. Finally, the objective is to minimize the number activations which is equivalent, up to a constant, to the number of switches M. The reduction from Hamiltonian path to BufferedResource provided in [1] can be lifted to this particular case."
    }, {
      "heading" : "4 A Constraint Model for Test Planning",
      "text" : "Let h ≤ n be some known upper bound on the number of configurations. We use n allocation variables {Xk | k ∈ [n]} with domain [h] standing for the configuration allocated to each test. Unless we have a valid upper bound, the maximum number of configurations h is equal to n. Next, we use m× h activity variables {Y ji | j ∈ [m], i ∈ [h]} standing for the status of equipment unit j in configuration i, i.e., Y ji is equal to 1 if unit j in switched ON in i and is equal to 0 otherwise. Moreover, we denote Y Ui the set variable with characteristic function {Y ji | j ∈ U}. For instance, Y [m] i has as characteristic function the set of variables in the column i of the m×h matrix formed by the activity variables, i.e., the set of equipment units active in configuration i. We introduce a variable Mℓ for each constraint ℓ standing for the total number of switches on the equipment units cℓ. Finally, we have two variables to express the objective function: a variable N standing for the number of configurations and a variable M for the total number of switches.\nTo model the test planning problem, we then post the following constraints:\n∀k ∈ [n], tk ⊆ Y [m] Xk\n(1)\n∀ℓ ∈ [p], ∀i ∈ [h], |Y cℓi | = κℓ (2)\n∀k ∈ [n], N ≥ Xk (3)\n∀ℓ ∈ [p], Switch(Y cℓ , κℓ,Mℓ) + κℓ −∆ℓ (4)\nM = ∑p\nℓ=1 Mℓ (5)\nConstraints (1) channel the allocation variables and the activity variables to ensure that every equipment unit required by a test is active in the slot in which the test is ran. They are implemented as Element constraints.\nConstraints (2) enforce the thermal constraints on the number of equipment units active simultaneously within given subsets. They are implemented as simple Sum constraints.\nConstraints (3) ensure that the variable representing the number of configurations is greater than or equal than the maximum allocated slot. We do not use a Maximum constraint nor an equality as we minimize this criterion.\nConstraints (4) count the number of switches in the sequence of set variables Y cℓ = (Y cℓ1 , . . . , Y cℓ h ) for every thermal constraint ℓ. The Switch constraint standing for the thermal constraint ℓ ensures that the number of switches∑h i=1 |Y cℓ i \\Y cℓ i+1| = Mℓ, for a capacity κℓ of the buffer. The constant term κℓ−∆ℓ\nis used to count only from the second activation of each equipment unit. The constraint Switch counts the number of deactivations. Moreover, the κℓ items contained in the buffer at the last position are not counted by Switch, even though they will eventually be switched off. The total number of deactivations is thus Mℓ + κℓ and it is equal to the number of activations. Then each of the ∆ℓ equipment units constrained by ℓ must be activated at least once, so we can subtract this number to obtain the number of activation besides the first.\nFinally, Constraint (5) computes the overall sum of switches.\nWe consider the number of configurations as a higher priority objective than the total number of switches. Therefore, we express the objective function to minimize as the weighted sum (mh/2)N +M.\nThe Test Planning problem may be decomposed into two sub-problems:\n– a Test Packing problem when restricting to Constraints (1), (2) and (3) and the minimization of the number of configurations N ; – a Test Sequencing problem when restricting to Constraints (1), (4) and (5) and the minimization of the total number of switches M.\nFor the type of satellites we have considered in this study, there is no overlap in the scope of thermal constraints since they stand for the physical support of a disjoint subset of equipment units. However, overlaps may exist in some satellite architectures. In this case, we need to replace the constraints (4) and (5) by a single Switch constraint on the sequence of set variables Y m = (Y [m] 1 , . . . , Y [m] h ):\nSwitch(Y [m],\np∑\nℓ=1\nκℓ,M) (6)"
    }, {
      "heading" : "5 Lower Bound for Test Packing",
      "text" : "The problem restricted to Constraints (1), (2) and (3) has some similarities with the multi-dimensional bin packing problem [5]. Instead of a one dimensional capacity, the bins have a capacity κℓ for each of the p dimension/thermal constraint. Moreover, for a test k requiring a set of equipment units tk, we can compute a p-vector representing its weight in each of these dimensions. However, the weights are not additive since every equipment unit is activated at most once per configuration, irrespective of the number of tests requiring it in this configuration. As discussed previously, it can also be seen as a coloring problem. The particular case where each test is on a single equipment unit could be seen as a generalization of list coloring to hypergraphs, as thermal constraints can be mapped to hyperedges. However, to our knowledge, there is no known method for this specific problem.\nWe therefore use a simple lower bound on the number of configurations based on the “capacity” of the thermal constraints. Indeed, if a thermal constraint ℓ\nensures that at most κℓ equipment units are active in a given configuration, and if the tests involve ∆ℓ units, then at least ⌈∆ℓ/κℓ⌉ configurations are needed. More generally, suppose that we have a lower bound Kj on the number of configurations in which an equipment unit j will be active. Given a thermal constraint ℓ, the sum of these lower bounds over all equipment units in cℓ cannot be greater than the number of configurations multiplied by the capacity κℓ, in other words,\nfor any constraint ℓ, ⌈ ( ∑\nj∈cℓ Kj)/κℓ\n⌉ is a valid lower bound for N .\nNow, consider an equipment unit j, and let Γj = {j′ | ∃k s.t. {j, j′} ⊆ tk} be its “neighborhood”, that is, the set of units that will necessarily be active when running the tests requiring j. It might not be possible to activate all these equipment units within a single configuration because of the thermal constraints. More generally, the equipment unit j must be active in at least as many config-\nurations as are required to visit Γj , i.e., Kj ≥ max({ ⌈ |Γj∩cℓ|\nκℓ\n⌉ | ℓ ∈ [p]}), let Γj\nbe this lower bound. The following two implied constraints enforce this lower bound:\n∀j ∈ [m], Kj = max(Γj , ∑h i=1 Y j i ) (7)\n∀ℓ ∈ [p], N ≥ ⌈∑ j∈cℓ Kj\nκℓ\n⌉ (8)\nHowever, Constraints 2 in the base model force every set variable Y cℓi to have cardinality κℓ, even if no test is allocated to configuration i. In this case, the configuration i would be a copy of configuration N since it satisfies every constraint and minimize the number of switches. However, this is not compatible with Constraint 7 since equipment units active in “dummy” configurations would still be counted. We therefore replace Constraints 2 with the following constraints on ph extra Boolean variables {Zℓi | i ∈ [h], ℓ ∈ [p]}:\n∀ℓ ∈ [p], ∀i ∈ [h], Zℓi ⇐⇒ ∑ j∈cℓ Y ji > 1 (9) ∀ℓ ∈ [p], ∀i ∈ [h], ∑\nj∈cℓ Y ji = Z ℓ i × κℓ (10)\n∀ℓ ∈ [p], ∀i ∈ [h], N ≥ i ⇐⇒ Zℓi (11)\nConstraints 9 ensure that Zℓi equals 1 iff at least one equipment unit constrained by ℓ is active in configuration i. Constraints 10 ensure that, for every configuration i, either there is no active equipment (i is a dummy configuration) or exactly κℓ for every thermal constraint ℓ. Finally, Constraints 11 channel these extra variables with the objective variable N by ensuring that (Zℓ1, . . . , Z ℓ h) is its unary order encoding [13]. These constraints are necessary to obtain a filtering as strong as in the base model, while improving the lower bound on N ."
    }, {
      "heading" : "6 Test Sequencing",
      "text" : "The problem of minimizing the number of equipment activations can be naturally represented using the Switch constraint, since, as shown in Section 4, thermal\nconstraints and the fact that tests require some equipment units to be active can be modeled as buffered resources. Moreover, as often in problems that can be represented with a buffered resource, we know beforehand the set of items (here equipment units) that will be activated at least once. In other words, the total number of items to be buffered minus the capacity κℓ of the buffer is a trivial lower bound on the required number of switches. However, the constraint Switch does not take this information into account and hence is “suboptimal”, especially when only a few tests have been allocated a configuration.\nIn this section, we propose an improvement of the propagator for Switch for the very common case where we have prior knowledge on a set of items that must eventually be buffered. In some cases, we can simply add the number of non-buffered items to the lower bound computed by the algorithm for Switch. However, this is not always true. We define a correct lower bound based on this idea in Theorem 2.\nWe define the variant Switch+ of the Switch constraint with an extra parameter V indicating the items that must be put in the buffer at some point in the sequence. Let V be a set of integers, M an integer variable, Y = (Y1, . . . , Yn) be a sequence of set variables, and κ, κ be two sequences of n integers.\nDefinition 3.\nSwitch +(Y, κ, κ, V,M) ⇐⇒\n∀i ∈ [n], κi ≤ |Yi| ≤ κi ∧ ∑\n1≤i<n\n|Yi+1 \\ Yi| ≤ M ∧ n⋃\ni=1\nYi = V\nWe next recall some background about the constraint and in particular its propagation algorithm in Definitions 4 and 5. It is possible to find an optimal buffer sequence σ, that is, an assignment of Y that minimizes the value of M with the greedy procedure FindSupport introduced by [1] (Algorithm 1 in [1]). This algorithm explores the sequence once while maintaining all items in a list ordered by a priority relation ≺ based on two indices (nexti∈(j) and next i 6∈(j)) for each item j.\nDefinition 4. nexti∈(j) is the least index i ′ ≥ i such that j ∈ Yi′ if it exists and n + 2 otherwise. nexti6∈(j) is the least index i ′ ≥ i such that j 6∈ Yi′ if it exists and n+ 1 otherwise.\nThe priority relation ≺ between two items is defined by the following criteria:\nDefinition 5. At index i, and given two items j1 < j2, we have j1 ≺ j2 if:\n1. nexti∈(j1) < next i 6∈(j1) and next i ∈(j1) ≤ next i ∈(j2), or 2. nexti∈(j2) > next i 6∈(j2) and next i 6∈(j1) ≥ next i 6∈(j2)\nand j2 ≺ j1 otherwise.\nThe procedure starts with σ(0) = ∅ and when moving to index i, it first adds all required items (i.e., in Yi) and removes all impossible items (i.e., not in Yi), which yields the set σ(i) = Yi ∩ σ(i − 1) ∪ Yi. If |σ(i)| > κi it then removes the κi− |σ(i)| last items for the order ≺ in σ(i). Otherwise, if |σ(i)| < κi it adds the κi − |σ(i)| first items for the order ≺ in Yi \\ σ(i).\nDefinition 6. A stretch of a buffer sequence σ is a triple 〈j, a, b〉 such that the value j is buffered in σ during the interval [a, b] and j is not buffered at a − 1 nor at b + 1 (we assume that no item is buffered at 0 or n + 1). We say that a stretch 〈j, a, b〉 is optional if there is no i ∈ [a, b] such that j ∈ Yi. We say that the item j is optional if there exists a stretch 〈j, a, b〉 and for all i ∈ [n], j 6∈ Yi.\nEvery stretch entails one switch, except if it extends until the end of the sequence. Therefore, if κ is the cardinality of the buffer at the last index of the sequence, the following observation holds:\nObservation 1 A solution with α switches has κ+ α stretches.\nLemma 1. If σ and σ′ are two buffer sequences found by FindSupport on two instances I and I ′ equal on every index except one for which the lower bound of the buffer at this index contains a single additional item j in I ′, then ∀i ∈ [n], σ′(i) \\ σ(i) ⊆ {j}.\nProof. An item not in the buffer at index i− 1 is added at index i only if:\n1. the item is the lower bound Yi or 2. κi > |Yi ∩ σ(i − 1) ∪ Yi| and it is in the |Yi ∩ σ(i − 1) ∪ Yi| − κi first for ≺.\nOnly item j can satisfies case 1 in I ′ but not in I.\nMoreover, by definition, the order ≺ is equal in I and I ′, except for j which may be ranked higher in I ′. Therefore, the only item that may satisfy case 2 in I ′ but not in I is again j. Therefore, ∀i ∈ [n], σ′(i) \\ σ(i) ⊆ {j}. ⊓⊔\nLemma 2. Let σ be a buffer sequence of an instance I with minimal number of switches and let j be an item not buffered in σ. For any i ∈ [n], a sequence σ′ on the instance I ′ obtained by adding the constraint j ∈ Yi has at least one more non-optional stretch than σ.\nProof. We can assume that σ and σ′ were found by FindSupport as this algorithm is complete. The sequence σ′ has necessarily a non-optional stretch 〈j, a, b〉, and there was no j-stretch in σ. Therefore, if the number of non-optional stretches is not larger in σ′ than in σ, it must have one less non-optional j′stretch for an item j′ 6= j. This can only happen if the gap between two nonoptional stretches 〈j′, a1, b1〉 and 〈j′, a2, b2〉 with b1+1 < a2 is bridged by buffering the value j′ in the interval [b1 + 1, a2 − 1]. Hence there exists i such that j′ ∈ σ′(i) \\ σ(i). However, by Lemma 1 we have ∀i ∈ [n], σ′(i) \\ σ(i) ⊆ {j}. ⊓⊔\nTheorem 2. For any two sets V ⊆ U , if there is an optimal buffer sequence visiting exactly the items in U \\ V with α switches, β optional stretches, and γ optional items, then there is no buffer sequence visiting all items in U in less than α+ |V | − β + γ switches.\nProof. First, notice that we can reduce the case with γ > 0 optional items to the case without optional item, and β − γ optional stretches. Indeed, if there exists an optimal sequence σ visiting all items in U , we can add a constraint j ∈ Yi for every pair (i, j) where j ∈ U and j ∈ σ(i). The procedure FindSupport will then find a sequence with same number of switches, same number of stretches, and γ less optional stretches than σ. Therefore, we suppose γ = 0 and prove the lower bound α+ |V | − β.\nNow, if σ has κ+ α− β non-optional stretches, then by Lemma 2, we know that a solution visiting all items in U must have at least κ+ α+ |V | − β (nonoptional) stretches, and hence at least α+ |V | − β switches. ⊓⊔\nCounting the number of optional stretches and items in the sequence returned by FindSupport can be done in linear time. Therefore, Theorem 2 improves the lower bound found by this algorithm without changing its worst case complexity when we know that some items must be buffered but do not appear in the lower bound of a set variable. This is true in the test sequencing problem, as it is in most applications of this constraint."
    }, {
      "heading" : "7 Search Strategy",
      "text" : "In this section we introduce a dedicated branching heuristic for the packing problem. The basic idea is that we can easily evaluate the impact of allocating a test to a configuration by counting how many equipment activations are required and how these equipment units are already constrained in this configuration. Second, we propose to decompose the problem into packing and sequencing aspects in order to find good upper bounds quickly for the test planning problem."
    }, {
      "heading" : "7.1 Branching Heuristic",
      "text" : "Let δℓk(i) be the number of equipment units constrained by ℓ that will be active in configuration i if test k was to be run in that configuration, i.e., the number of non-ground Boolean activation variables concerning equipment of test k constrained by ℓ:\nδℓk(i) = ∑\nj∈cℓ∩tk\nY ij − Y i j\nWe consider the ratio ∆ℓ κℓ\nto be proportional to the tightness of the constraint ℓ, and we use the change in tightness resulting from the decision of running test k in configuration i to evaluate the impact of this decision. After the decision Xk = i, the tightness rb = ∆ℓ κℓ becomes ra = ∆ℓ−δ ℓ k(i) κℓ−δℓk(i) . Therefore, the factor\nra/rb represents the factor by which the tightness of constraint ℓ would increase. As ra/rb ∈ [1,∞], we use 1 minus its inverse as a measure, in [0, 1], of the impact of that decision, that is:\nγℓk(i) = 1− ∆ℓ(κℓ − δℓk(i))\nκℓ(∆ℓ − δℓk(i))\nNow, we can use the average of these impacts on all thermal constraints to define the impact γ(Xk ← i) of allocating test k to configuration i.\nγ(Xk ← i) =\n∑ ℓ∈[p] γ ℓ k(i)\np\nNotice that allocation variables may have many more values than necessary to satisfy the thermal constraints. Indeed, it is important, for a coloring heuristic, to branch only values in [i+1] where i is the highest allocated value so far. Hence,\ngiven a test k we consider the intersection D̂(k) = D(Xk) ∩ [i+ 1] instead of its actual domain D(Xk). We therefore select the variable Xk minimizing:\n|D̂(k)|∑ i∈D̂(k) γ(Xk ← i)\nAnd we branch on the value i minimizing γℓk(i)."
    }, {
      "heading" : "7.2 Multi-stage Approach",
      "text" : "We use mh Boolean variables to represent the status of every equipment unit in every configuration. Moreover, without an upper bound on the number of configurations required to pack every test, we can only assume that n configurations (as many as there are tests) may be needed, i.e., h = n. However, in practice n is a gross overestimate of h. For instance, in one of the industrial instances that we considered, several hundreds of tests can be run in as few as three configurations.\nFurthermore, since we consider two criteria in a hierarchical way, it makes sense to optimize a relaxation of the problem where only Constraints 1 to 3 are kept (the packing sub-problem), i.e., the model is complete with respect to the objective with highest priority. Observe that since the order of the bins does not matter in this case, configurations are symmetric. We therefore used lexicographic ordering constraints [4,6] on the set variables Y1, . . . , Yh.\nLast, we also considered the pure sequencing aspect of the problem. Given a packing, finding the optimal sequence for that packing can be modeled with a set of BufferedResource constraints, one for each thermal constraint, all sharing the same permutation. Another way to understand this is that we can consider a packing solution using h configurations as a new instance with only h tests to sequence (it is unlikely that two such tests could share a single configuration given the thermal constraints) and consider Constraints 1, 4 and 5 of the\ncomplete model (the sequencing sub-problem). Solving this problem to optimality does not give us a lower bound on the total number of switches, however, it is much simpler and can often provide a good upper bound quickly.\nWe therefore implemented the following four-phase strategy:\n1. We run a greedy descent on the packing problem to find an initial upper bound. The trivial heuristic that branch on the lexicographically least configuration for a test gives relatively good results, so we stop this phase at the first solution found, which is backtrack-free. 2. We run the packing model (initialized with the previous upper bound) for a given period of time, or until optimality is proven. 3. We run the sequencing model for a given period of time, or until optimality is proven (though in this case we cannot deduce a lower bound). 4. We run the complete model (packing & sequencing) (initialized with lower and/or upper bounds, accordingly) for the rest of the allocated time."
    }, {
      "heading" : "8 Experimental Evaluation",
      "text" : "We tested the different approaches that we propose on industrial and generated instances. We have only six real instances, corresponding to three already launched communications satellites. The same tests are usually run in two types of thermal environments. The hot and cold test phases respectively simulate the periods where the satellite is facing the sun, or when it is in Earth’s shadow. Instances labeled cold are much more thermally constrained and thus typically require more configurations than those labeled hot. We diversified the pool of instances by randomly shuffling tests in order to produce 5 randomized variants of every instance. Moreover, we used random instances designed to be similar to the real cases, generated as follows: for a given number of tests n ∈ {30, 50, 80, 100, 200, 300}, we set the number of equipment units to n/4. The equipment of instances with 30 and 50 tests are equally partitioned into 3 thermal constraints. Each test requires 2 equipment units from two different thermal constraints. Other instances have 5 thermal constraints and each test requires 2 or 3 equipment units belonging to different thermal constraints. Then, for each generated instance, we consider two levels of tightness for thermal constraints to simulate the hot (κℓ/∆ℓ =0.6) and the cold phases (κℓ/∆ℓ =0.4).\nWe generated 5 variants of 12 classes of instances. Instance XXX.YY denote a set of XXX tests with YY giving the ratio κℓ/∆ℓ of the thermal constraints. Instances A, B and C are industrial instances. All models have been implemented in Choco 3 [10] and ran on Intel Xeon E5 processors for a total of thirty minutes on every instance. We compared the five following approaches:\n– base is the straightforward model with Constraints 1 to 5, using Weighted Degree [3] for variable selection and lexicographic branching. Notice that the strategy is set up to branch on all allocation variables before branching on activity variables. Other predefined heuristics in Choco were less efficient. It is important to note that due to the “coloring” aspect of the problem,\nNote that for every approach, we first applied a preprocessing to the data in order to merge identical tests. Indeed, on top of the packing based on the configuration of active equipment units, one must, in the real setting, further partition the tests because of different requirements on signal routing equipment. This second packing phase is exactly a list-coloring problem on the tests of each the configurations. The size of these problems is very modest with respect to state of the art coloring algorithms, so we do not study this aspect in the current paper. As a consequence, some tests in the data require the same set of equipment units to be active, and can be thought of as a single test for our purpose.\nThe results are reported in Table 1. For each method, we show the objective values, where#conf stands for the average number of configurations over the five\nvariants of the instance, and #switch stands for the average number of switches for the same instances. Next to these values, we report in brackets, the number of instances for which the reported objective value was proven optimal within a 30 minutes time limit (no value means that none of the runs was complete). For each instance, the methods proving optimality in the most cases, among those giving the minimum average objective value, are color-highlighted.\nFirst, we observe that the straightforward model base is very poor, in most of the larger instances it does not even find a feasible solution in less than ten minutes. On the other hand, augmenting this model either with stronger propagation, better branching heuristic, or the multi-stage approach is sufficient to obtain decent results. Combining all these improvements clearly yields the best and most robust results, and sometimes allows to prove optimality even on real industrial instances.\nSecond, multi-stage approaches (multi-stage and full) are clearly better for larger instances, however, they tend to hinder the ability of Choco to prove optimality on small instances. Moreover, we observed that they tend to be less robust, in the sense that the final result greatly depends on the initial packing which gives no guarantees on the number of switches. This is especially true for large instances in which the complete model often cannot improve on the heuristic sequence found during the third phase.\nFor a deeper analysis of the two bounds proposed in this paper, we ran four other models on the same instances. The first two are the base model augmented with the lower bound on configurations or the lower bound on switches (base ⊕ lb conf and base ⊕ lb switch, respectively). The other two models are the full model from which we removed these lower bounds (full \\ lb switch and full \\\nlb conf , respectively). The results of these additional tests, in Table 2 clearly show that both bounds are useful. Surprisingly, the capacity to prove optimality on a criterion is also impacted by the bound on the other criterion.\nFinally, in Table 3, we compare the results of our best method (model full) with the method previously used by Airbus Defense & Space [8] and with a slight improvement of this method described in [2]. The former, denoted CM, is a constraint optimization tool build to solve the packing problem only. The second, denoted CM+TSP, is the same approach, however the resulting configurations are then permuted so that the Traveling Salesman Problem defined by the Hamming distance between configurations is optimized. It is not surprising that the first method is very poor in terms of total equipment activation since it makes no attempt to optimize this criterion. However, it is interesting to compare with our results as it is still the method used in practice.\nThe method CM+TSP gives a better solution in one case (C cold). Indeed, this instance is particular as it involves more than twice as many tests as other instances. The consequence is that the model computing packing and sequencing simultaneously is relatively inefficient. For this instance, we therefore ran a simple randomized sequence of the second and third phases of the multi-stage approach (i.e., pure packing followed by pure sequencing) and quickly found a similar solution (though we could not improve on it). Notice that in the case of the “hot” test campaign for satellite C, carefully packing and sequencing the tests makes it possible to get rid of all equipment activation besides the mandatory one, whereas 14 activations are necessary with the current method."
    }, {
      "heading" : "9 Conclusion",
      "text" : "We have introduced a complete constraint programming approach for the problem of packing and sequencing the validation tests of communications satellites. We proposed a search strategy and lower bound for the packing aspect of the problem. Moreover, we introduced an improvement of the Switch constraint that can be applied in many other contexts. Our experimental evaluation shows that the methods proposed in this paper greatly improve the test plans with respect to those currently used within the Airbus group.\nAlthough this approach is not yet industrially implemented, a previous internal study in Airbus3 has shown that, during a test campaign, around 30% of the total duration is spent on transitions between configurations. Moreover, in many cases, tests must be interrupted because the payload is overheating and can only resume after the system has been stabilized. The constraint model we introduced should help with both of these issues.\nSince such test campaigns require an extremely costly and energy greedy thermal vacuum chamber as well as a large team of engineers in 3-shift rosters, significant financial savings are expected from this approach."
    }, {
      "heading" : "12. Jean-Charles Régin. A filtering algorithm for constraints of difference in CSPs. In",
      "text" : "Proceedings of the Twelfth National Conference on Artificial Intelligence (AAAI), pages 362–367, 1994. 13. Naoyuki Tamura, Akiko Taga, Satoshi Kitagawa, and Mutsunori Banbara. Compiling finite linear CSP into SAT. Constraints, 14(2):254–272, 2008."
    } ],
    "references" : [ {
      "title" : "Buffered resource constraint: Algorithms and complexity",
      "author" : [ "Christian Bessiere", "Emmanuel Hebrard", "Marc-André Ménard", "Claude-Guy Quimper", "Toby Walsh" ],
      "venue" : "In Proceedings of the Eleventh International Conference on Integration of AI and OR Techniques in Constraint Programming (CPAIOR),",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2014
    }, {
      "title" : "Heuristic Methods for Test Sequencing in Telecommunication Satellites",
      "author" : [ "Ludivine Boche-Sauvan", "Bertrand Cabon", "Marie-José Huguet", "Emmanuel Hébrard" ],
      "venue" : "In Proceedings of the Tenth International Conference on Modeling, Optimization and Simulation (MOSIM),",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2014
    }, {
      "title" : "Boosting Systematic Search by Weighting Constraints",
      "author" : [ "Frédéric Boussemart", "Fred Hemery", "Christophe Lecoutre", "Lakhdar Sais" ],
      "venue" : "In Proceedings of the Sixteenth Eureopean Conference on Artificial Intelligence (ECAI),",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2004
    }, {
      "title" : "Arc-Consistency for a Chain of Lexicographic Ordering Constraints",
      "author" : [ "Mats Carlsson", "Nicolas Beldiceanu" ],
      "venue" : "Technical Report T2002-18,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2002
    }, {
      "title" : "On multi-dimensional packing problems",
      "author" : [ "Chandra Chekuri", "Sanjeev Khanna" ],
      "venue" : "In Proceedings of the 10th Annual ACM-SIAM Symposium on Discrete Algorithms, Tenth Annual ACM-SIAM Symposium on Discrete Algorithms (SODA),",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 1999
    }, {
      "title" : "Propagation algorithms for lexicographic ordering constraints",
      "author" : [ "Alan M. Frisch", "Brahim Hnich", "Zeynep Kiziltan", "Ian Miguel", "Toby Walsh" ],
      "venue" : "Artificial Intelligence,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2006
    }, {
      "title" : "Generality versus Specificity: An Experience with AI and OR techniques",
      "author" : [ "Pascal Van Hentenryck", "Jean-Philippe Carillon" ],
      "venue" : "In Proceedings of the Seventh National Conference on Artificial Intelligence (AAAI),",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 1988
    }, {
      "title" : "Constraint programming for optimising satellite validation plans",
      "author" : [ "Caroline Maillet", "Gérard Verfaillie", "Bertrand Cabon" ],
      "venue" : "In Proceedings of Seventh International Workshop on Planning and Scheduling for Space (IWPSS),",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2011
    }, {
      "title" : "Activity-Based Search for Black-Box Constraint Programming Solvers, pages 228–243",
      "author" : [ "Laurent Michel", "Pascal Van Hentenryck" ],
      "venue" : null,
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2012
    }, {
      "title" : "Choco Documentation. TASC, INRIA Rennes, LINA CNRS UMR 6241",
      "author" : [ "Charles Prud’homme", "Jean-Guillaume Fages", "Xavier Lorca" ],
      "venue" : "COSLING S.A.S.,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2015
    }, {
      "title" : "Impact-Based Search Strategies for Constraint Programming. In Principles and Practice of Constraint Programming (CP), pages 557–571, 2004. 3 Master’s internship report by Ludivine Boche-Sauvan for the “Institut Supérieur de l’Aeronautique et de l’Espace",
      "author" : [ "Philippe Refalo" ],
      "venue" : "(http://www.laas.fr/files/ROC/LAAS_Techreport.pdf)",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2012
    }, {
      "title" : "A filtering algorithm for constraints of difference in CSPs",
      "author" : [ "Jean-Charles Régin" ],
      "venue" : "In Proceedings of the Twelfth National Conference on Artificial Intelligence (AAAI),",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 1994
    }, {
      "title" : "Compiling finite linear CSP into SAT",
      "author" : [ "Naoyuki Tamura", "Akiko Taga", "Satoshi Kitagawa", "Mutsunori Banbara" ],
      "venue" : null,
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2008
    } ],
    "referenceMentions" : [ {
      "referenceID" : 7,
      "context" : "In the first approach [8], tests requiring the same subset of active equipment are packed together in the",
      "startOffset" : 22,
      "endOffset" : 25
    }, {
      "referenceID" : 7,
      "context" : "[8] first proposed a constraint programming approach to address this problem, using backjumping and dedicated heuristics.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 1,
      "context" : "The second approach, presented in [2], relies on this idea.",
      "startOffset" : 34,
      "endOffset" : 37
    }, {
      "referenceID" : 1,
      "context" : "A local search method (simulated annealing) was proposed in [2] for this second approach, that is, with “online” activation allowed.",
      "startOffset" : 60,
      "endOffset" : 63
    }, {
      "referenceID" : 7,
      "context" : "Finally, since the focus in [8] was on selecting a subset of tests to be run rather than sequencing them, a straightforward improvement of the first approach was proposed in [2]: Once every test is allocated to a configuration and the number of configurations is minimized, the problem of minimizing the number of activations between consecutive configurations can be seen as a Traveling Salesman Problem (TSP).",
      "startOffset" : 28,
      "endOffset" : 31
    }, {
      "referenceID" : 1,
      "context" : "Finally, since the focus in [8] was on selecting a subset of tests to be run rather than sequencing them, a straightforward improvement of the first approach was proposed in [2]: Once every test is allocated to a configuration and the number of configurations is minimized, the problem of minimizing the number of activations between consecutive configurations can be seen as a Traveling Salesman Problem (TSP).",
      "startOffset" : 174,
      "endOffset" : 177
    }, {
      "referenceID" : 0,
      "context" : "We observe that this secondary objective can be easily modeled using the constraint Switch [1].",
      "startOffset" : 91,
      "endOffset" : 94
    }, {
      "referenceID" : 0,
      "context" : "The constraints Switch and BufferedResource [1] were introduced to model a type of resource corresponding to a buffer which must contain the items required by some tasks when they are being processed.",
      "startOffset" : 44,
      "endOffset" : 47
    }, {
      "referenceID" : 11,
      "context" : "Achieving arc consistency on this constraint is NP-hard, and there is no dedicated propagation algorithm for this constraint, besides the obvious decomposition using Switch, AllDifferent [12] and some Element [7] constraints.",
      "startOffset" : 187,
      "endOffset" : 191
    }, {
      "referenceID" : 6,
      "context" : "Achieving arc consistency on this constraint is NP-hard, and there is no dedicated propagation algorithm for this constraint, besides the obvious decomposition using Switch, AllDifferent [12] and some Element [7] constraints.",
      "startOffset" : 209,
      "endOffset" : 212
    }, {
      "referenceID" : 0,
      "context" : "The reduction from Hamiltonian path to BufferedResource provided in [1] can be lifted to this particular case.",
      "startOffset" : 68,
      "endOffset" : 71
    }, {
      "referenceID" : 4,
      "context" : "The problem restricted to Constraints (1), (2) and (3) has some similarities with the multi-dimensional bin packing problem [5].",
      "startOffset" : 124,
      "endOffset" : 127
    }, {
      "referenceID" : 12,
      "context" : ", Z l h) is its unary order encoding [13].",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 0,
      "context" : "It is possible to find an optimal buffer sequence σ, that is, an assignment of Y that minimizes the value of M with the greedy procedure FindSupport introduced by [1] (Algorithm 1 in [1]).",
      "startOffset" : 163,
      "endOffset" : 166
    }, {
      "referenceID" : 0,
      "context" : "It is possible to find an optimal buffer sequence σ, that is, an assignment of Y that minimizes the value of M with the greedy procedure FindSupport introduced by [1] (Algorithm 1 in [1]).",
      "startOffset" : 183,
      "endOffset" : 186
    }, {
      "referenceID" : 0,
      "context" : "As ra/rb ∈ [1,∞], we use 1 minus its inverse as a measure, in [0, 1], of the impact of that decision, that is:",
      "startOffset" : 62,
      "endOffset" : 68
    }, {
      "referenceID" : 3,
      "context" : "We therefore used lexicographic ordering constraints [4,6] on the set variables Y1, .",
      "startOffset" : 53,
      "endOffset" : 58
    }, {
      "referenceID" : 5,
      "context" : "We therefore used lexicographic ordering constraints [4,6] on the set variables Y1, .",
      "startOffset" : 53,
      "endOffset" : 58
    }, {
      "referenceID" : 9,
      "context" : "All models have been implemented in Choco 3 [10] and ran on Intel Xeon E5 processors for a total of thirty minutes on every instance.",
      "startOffset" : 44,
      "endOffset" : 48
    }, {
      "referenceID" : 2,
      "context" : "– base is the straightforward model with Constraints 1 to 5, using Weighted Degree [3] for variable selection and lexicographic branching.",
      "startOffset" : 83,
      "endOffset" : 86
    }, {
      "referenceID" : 10,
      "context" : "However Impact Based Search [11] and Activity Based Search [9] cannot trivially be made to branch on the lexicographically least value and thus gave extremely poor results for that reason.",
      "startOffset" : 28,
      "endOffset" : 32
    }, {
      "referenceID" : 8,
      "context" : "However Impact Based Search [11] and Activity Based Search [9] cannot trivially be made to branch on the lexicographically least value and thus gave extremely poor results for that reason.",
      "startOffset" : 59,
      "endOffset" : 62
    }, {
      "referenceID" : 7,
      "context" : "Finally, in Table 3, we compare the results of our best method (model full) with the method previously used by Airbus Defense & Space [8] and with a slight improvement of this method described in [2].",
      "startOffset" : 134,
      "endOffset" : 137
    }, {
      "referenceID" : 1,
      "context" : "Finally, in Table 3, we compare the results of our best method (model full) with the method previously used by Airbus Defense & Space [8] and with a slight improvement of this method described in [2].",
      "startOffset" : 196,
      "endOffset" : 199
    } ],
    "year" : 2017,
    "abstractText" : "The payload of communications satellites must go through a series of tests to assert their ability to survive in space. Each test involves some equipment of the payload to be active, which has an impact on the temperature of the payload. Sequencing these tests in a way that ensures the thermal stability of the payload and minimizes the overall duration of the test campaign is a very important objective for satellite manufacturers. The problem can be decomposed in two sub-problems corresponding to two objectives: First, the number of distinct configurations necessary to run the tests must be minimized. This can be modeled as packing the tests into configurations, and we introduce a set of implied constraints to improve the lower bound of the model. Second, tests must be sequenced so that the number of times an equipment unit has to be switched on or off is minimized. We model this aspect using the constraint Switch, where a buffer with limited capacity represents the currently active equipment units, and we introduce an improvement of the propagation algorithm for this constraint. We then introduce a search strategy in which we sequentially solve the sub-problems (packing and sequencing). Experiments conducted on real and random instances show the respective interest of our contributions.",
    "creator" : "LaTeX with hyperref package"
  }
}