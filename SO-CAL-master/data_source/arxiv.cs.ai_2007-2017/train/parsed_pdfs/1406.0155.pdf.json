{
  "name" : "1406.0155.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "On the Measure of the Conflicts: A MUS-Decomposition Based Framework",
    "authors" : [ "Said Jabbour", "Yue Ma", "Badran Raddaoui", "Lakhdar Saı̈s", "Yakoub Salhi" ],
    "emails" : [ "salhi}@cril.fr", "mayue@tcs.inf.tu-dresden.de" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Conflicting information is often unavoidable for large-sized knowledge bases (KBs for short). Thus, analyzing conflicts has gained a considerable attention in Artificial Intelligence research (Bertossi, Hunter, and Schaub 2005). In the same vein, measuring inconsistency has proved useful and attractive in diverse scenarios, including software specifications (Martinez, Arias, and and 2004), e-commerce protocols (Chen, Zhang, and Zhang 2004), belief merging (Qi, Liu, and Bell 2005), news reports (Hunter 2006), integrity constraints (Grant and Hunter 2006), requirements engineering (Martinez, Arias, and and 2004), databases (Martinez et al. 2007; Grant and Hunter 2013), semantic web (Zhou et al. 2009), and network intrusion detection (McAreavey et al. 2011).\nInconsistency measuring is helpful to compare different knowledge bases and to evaluate their quality (Grant 1978). A number of logic-based inconsistency measures have been studied, including the maximal η-consistency\nCopyright c© 2014, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\n(Knight 2002), measures based on variables or via multivalued models (Grant 1978; Hunter 2002; Oller 2004; Hunter 2006; Grant and Hunter 2008; Ma et al. 2010; Xiao et al. 2010; Ma, Qi, and Hitzler 2011), n-consistency and nprobability (Doder et al. 2010), minimal inconsistent subsets based inconsistency measures (Hunter and Konieczny 2008; Mu, Liu, and Jin 2011; Mu, Liu, and Jin 2012; Xiao and Ma 2012), Shapley inconsistency value (Hunter and Konieczny 2006a; Hunter and Konieczny 2010), and more recently the inconsistency measurement based on minimal proofs (Jabbour and Raddaoui 2013).\nThere are different ways to categorize the proposed measures. One way is with respect to their dependence on syntax or semantics: Semantic based ones aim to compute the proportion of the language that is affected by the inconsistency, via for example paraconsistent semantics. Whilst, syntax based ones are concerned with the minimal number of formulae that cause inconsistencies, often through minimal inconsistent subsets. Different measures can also be classified by being formula or knowledge base oriented. For example, the inconsistency measures in (Hunter and Konieczny 2006a; Hunter and Konieczny 2010) consist in quantifying the contribution of a formula to the inconsistency of a whole knowledge base containing it, while the other mentioned measures aim to quantify the inconsistency degree a the whole knowledge base. Some basic properties (Hunter and Konieczny 2010) such as Consistency, Monotony, Free Formula Independence, are also proposed to evaluate the quality of inconsistency measures.\nIn this paper, we propose a syntax-based framework to measure inconsistencies1 using a novel methodology allowing to resolve inconsistencies in a parallel way. To this end, distributable MUS-decomposition and distribution index of a KB are introduced. Intuitively, a distributable MUSdecomposition gives a reasonable partition of a KB such that it allows multiple experts to solve inconsistencies in parallel; And the distribution index is the maximal components that a KB can be partitioned into. This methodology is of great importance in a scenario where the information in a KB is precious, large, and complex such that removing or weakening information requires intensive and time-consuming interac-\n1It can be embedded into Shapley Inconsistency Value to have a formula oriented measure (Hunter and Konieczny 2006a).\nar X\niv :1\n40 6.\n01 55\nv1 [\ncs .A\nI] 1\nJ un\n2 01\n4\ntions with human experts. Consider K = {a1,¬a1, a1 ∨ ¬a2, a2,¬a2, · · · , an−1,¬an−1, an−1∨¬an, an,¬an}. Intuitively, K contains a large number of inconsistencies. And interestingly, our approach can recognize {ai,¬ai} as n distributable parts ofK such that each expert can focus on verifying a single part carefully and independently2. In contrast, classical approaches follow the idea of resolving inconsistency as a whole without being able to break a KB into independent pieces. Take, for example, the classical Hitting Set approach which identifies a minimal set of formulae, e.g. {¬ai | 1 ≤ i ≤ n} of K, to remove for restoring consistency. Note that K has many such Hitting Sets of a big size n. Therefore, even if working in parallel, each expert needs to verify a large number of formulae, which is time consuming. More problematic in general, there are often overlaps among Hitting sets so that multiple experts have to waste time in unnecessarily rechecking the overlaps. This is the same if we simply distribute one minimal inconsistent subsets to an expert. However, the proposed distributable MUS-decomposition avoids this problem because it gives a disjoint decomposition of a KB. The methodology is inspired and a side-product of our exploration of the decomposition property defined for inconsistency measures, which is rarely discussed in the literature due to its modeling difficulty (Hunter and Konieczny 2010).\nOur technical contributions are as follows:\n• We propose independent decomposability as a more reasonable characterization of inconsistency measures.\n• We define a graph representation of KBs to analyze connections between minimal inconsistent subsets by exploiting the structure of the graph. Such a representation is then used to improve an existing inconsistency measure to satisfy the independent decomposability.\n• Based on the graph representation, a series of MUSdecompositions are introduced and used for defining the distribution-based inconsistency measure ID. We show the interesting properties of ID and give a comparison with other measures, which indicates its rationality.\n• We study the complexity of ID (via an extended set packing problem) and we provide encodings as a 0/1 linear program or min cost satisfiability for its computation.\nThe paper is organized as follows: Sections 2 and 3 give basis notions and recall some inconsistency measures relevant to the present work. In Section 4, we propose a graph representation of a KB and use it to revise an existing measure. Section 5 focuses on MUS-decomposition and distribution-based inconsistency measure. Section 6 gives the complexity results of the proposed measure and its computation algorithms whose efficiency is evaluated in Section 7. Section 8 concludes the paper with some perspectives."
    }, {
      "heading" : "2 Preliminaries",
      "text" : "Through this paper, we consider the propositional language L built over a finite set of propositional symbols P using\n2More details are explained later in the paper.\nclassical logical connectives {¬,∧,∨,→}. We will use letters such as a and b to denote propositional variables, Greek letters like α and β to denote propositional formulae. The symbols > and ⊥ denote tautology and contradiction, respectively.\nA knowledge base K consists of a finite set of propositional formulae. Sometimes, a propositional formula can be in conjunctive normal form (CNF) i.e. a conjunction of clauses. Where a clause is a disjunction literals, and a literal is either a propositional variable (x) or its negation (¬x). For a set S, |S| denotes its cardinality. Moreover, a KB K is inconsistent if there is a formula α such that K ` α and K ` ¬α, where ` is the deduction in classical propositional logic. If K is inconsistent, Minimal Unsatisfiable Subsets (MUS) of K are defined as follows: Definition 1 (MUS). Let K be a KB and M ⊆ K. M is a minimal unsatisfiable (inconsistent) subset (MUS) of K iff M ` ⊥ and ∀M ′ ( M , M ′ 0 ⊥. The set of all minimal unsatisfiable subsets of K is denoted MUSes(K ).\nClearly, an inconsistent KB K can have multiple minimal inconsistent subsets. When a MUS is singleton, the single formula in it, is called a self-contradictory formula. We denote the set of self-contradictory formulae of K by selfC(K) = {α ∈ K | {α} ` ⊥}. A formula α that is not involved in any MUS of K is called free formula. The set of free formulae of K is written free(K) = {α | there is no M ∈ MUSes(K) such that α ∈ M}, and its complement is named unfree formulae set, defined as unfree(K) = K \\ free(K). Moreover, the Maximal Consistent Subset and Hitting set are defined as follows: Definition 2 (MSS). Let K be a KB and M be a subset of K. M is a maximal satisfiable (consistent) subset (MSS) of K iff M 0 ⊥ and ∀α ∈ K \\M , M ∪ {α} ` ⊥. The set of all maximal satisfiable subsets is denoted MSSes(K ). Definition 3. Given a universe U of elements and a collection S of subsets of U , H ⊆ U is a hitting set of S if ∀E ∈ S, H ∩E 6= ∅. H is a minimal hitting set of S if H is a hitting set of S and each H ′ ⊂ H is not a hitting set of S."
    }, {
      "heading" : "3 Inconsistency Measures",
      "text" : "We review the inconsistency measures relevant to the ones proposed in this paper.\nThere have been several contributions for measuring inconsistency in knowledge bases defined through minimal inconsistent subsets theories. In (Hunter and Konieczny 2010), Hunter and Konieczny introduce a scoring function allowing to measure the degree of inconsistency of a subset of formulae of a given knowledge base. In other words, for a subset K ′ ⊆ K, the scoring function is defined as the reduction of the number of minimal inconsistent subsets obtained by removing K ′ from K (i.e. |MUSes(K )| − |MUSes(K −K ′)|). By extending the scoring function, the authors introduce an inconsistency measure of the whole base, defined as the number of minimal inconsistent subsets of K. Formally, IMI(K) = |MUSes(K )|. IMI measure also leads to an interesting Shapley Inconsistency Value SIMIα with desirable properties (Hunter and Konieczny 2010).\nCombining both minimal inconsistent subsets and maximal consistent subsets is another way to define inconsistency degree (Mu et al. 2011; Grant and Hunter 2011). We consider the inconsistency value IM (K) that counts for a given KB, the number of itsMSSes and its Self-contradictory formulae (subtraction of 1 is required to make IM (K) = 0 when K is consistent):\nIM (K) = |MSSes(K)|+ |selfC(K)| − 1. Another inconsistency measure considered in this paper is defined as the minimum hitting set of MUSes(K):\nδhs(K) = min{|H| |H is a hitting set of MUSes(K)}. δhs(K) is the size of the smallest hitting set of MUSes(K) w.r.t. its cardinality.\nIn addition, a set of properties have been proposed to characterize an inconsistency measure.\nDefinition 4 ((Hunter and Konieczny 2010)). Given two knowledge bases K and K ′, and formulae α and β in L,\n(1) Consistency: I(K) = 0 iff K is consistent (2) Monotony: I(K) ≤ I(K ∪K ′) (3) Free Formula Independence: if α is a free formula in K ∪ {α}, then I(K ∪ {α}) = I(K)\n(4) MinInc: If M ∈MUSes(K), then I(M) = 1. The monotony property shows that the inconsistency\nvalue of a KB increases with the addition of new formulae. The free formula independence property states that the set of formulae not involved in any minimal inconsistent subset does not influence the inconsistency measure. The MinInc is used to characterize the Shapley Inconsistency Value by IMI(K) in (Hunter and Konieczny 2008)."
    }, {
      "heading" : "4 Independent Decomposability Property",
      "text" : "There are common properties that we examine for an inconsistency measure (Definition 4), while leaving another property, called Decomposability or Additivity, debatable due to its modelling difficulty (Hunter and Konieczny 2008). Indeed, properties in Definition 4 have an inspiring root from the axioms of Shapley Value (Shapley 1953). As mentioned in (Luce and Raiffa 1957), one of the main limitation of the original additivity lies in the fact that the interactions of subgames are not considered. Moreover, (Hunter and Konieczny 2006b) argue that a direct translation of Shapley’s additivity has little sense for inconsistency measures. For this reason, Pre-Decomposability and Decomposability are defined (Hunter and Konieczny 2010) for formula-oriented inconsistency measures.\nIn this section, we analyze the limitation of existing decomposability property and propose an Independent Decomposability which is more intuitive. We then derive a new measure I ′M by modifying IM to satisfy the independent decomposability property by considering the interactions between MUSes through MUS-graph representation of a KB.\nLet us recall Pre-decomposability and Decomposability properties (Hunter and Konieczny 2010).\nDefinition 5 (Pre-Decomposability3). Let K1, . . . ,Kn be knowledge bases and I an inconsistency measure. I satisfies Pre-Decomposability if it satisfies the following condition: If MUSes(K1 ∪ . . . ∪Kn) = MUSes(K1 ) ⊕ . . .⊕ MUSes(Kn)\n4, then I(K1 ∪ . . . ∪ Kn) = I(K1) + . . . + I(Kn).\nPre-Decomposability ensures that the inconsistency degree of a KB K can be obtained by summing up the degrees of its sub-bases Ki under the condition that {MUSes(Ki) | 1 ≤ i ≤ n} is a partition of MUSes(K). Definition 6 (Decomposability). I satisfies Decomposability if it satisfies the following condition: If |MUSes(K1 ∪ . . . ∪Kn)| = ∑ 1≤i≤n |MUSes(Ki)|, then I(K1 ∪ . . . ∪Kn) = I(K1) + . . .+ I(Kn). Compared to Pre-Decomposability, Decomposability characterizes a weaker condition that consider only MUSes cardinalities of K and Ki. Although Pre-Decomposability and Decomposability can characterize some kind of interactions. We argue that this condition is not sufficient. Let us consider the following example:\nExample 1. Let K1 = {a,¬a},K2 = {¬a, a ∧ b},K3 = {c,¬c}, each of which contains only one single MUS. Consider two bases K = K1 ∪ K2,K ′ = K1 ∪ K3. Clearly, MUSes(K)= MUSes(K1) ⊕MUSes(K2), and MUSes(K ′) = MUSes(K1) ⊕ MUSes(K3). For any measure I , if I satisfies the decomposability property (Definition 6), we have I(K) = I(K1) + I(K2) and I(K ′) = I(K1) + I(K3). Moreover, if I satisfies the MinInc property. Then, K and K’ will have the same value, which is counter-intuitive because the components of MUSes(K ′) = {{a,¬a}, {c,¬c}} are unrelated, whereas those of MUSes(K) = {{a,¬a}, {¬a, a ∧ ¬b}} are overlapping. Consequently, the components of MUSes(K ′) are more spread than those ofMUSes(K). One can expect that K ′ should contain more inconsistencies than K.\nThis example illustrates the necessity to characterize the interactions among sub-bases whose inconsistency measures can be summed up. To this end, we propose the following independent decomposability property:\nDefinition 7 (Independent Decomposability). Let K1, . . . , Kn be knowledge bases and I an inconsistency measure. If MUSes(K1 ∪ . . . ∪Kn) = MUSes(K1 ) ⊕ . . .⊕ MUSes(Kn) and unfree(Ki) ∩ unfree(Kj) = ∅ for all 1 ≤ i 6= j ≤ n, then I(K1 ∪ . . . ∪Kn) = I(K1) + . . . + I(Kn). I is then called ind-decomposable.\nTo perform additivity for a given measure, the independent decomposability requires an additional precondition expressing that pairwise sub-bases should not share unfree formulae, which encodes a stronger independence among sub-bases. Indeed, the independent decomposability avoids the counter-intuitive conclusion illustrated in Example 1. To\n3It is named MinInc Separability in (Hunter and Konieczny 2008)\n4We denote a partition {A,B} of a set C by C = A⊕ B, i.e., C = A ∪B and A ∩B = ∅.\nillustrate this, suppose that I satisfies independent decomposability, then we have I(K ′) = I(K1) + I(K3), but not necessarily I(K ′) = I(K1) + I(K2) as MUSes(K1 ) and MUSes(K2 ) share the formula ¬a. Hence I(K) can be different from I(K ′).\nClearly, the following relations hold among different decomposability conditions.\nProposition 1. Decomposability implies PreDecomposability; Pre-Decomposability implies Independent Decomposability.\nIndeed, as shown by Example 1, the strong constraints of Pre-Decomposability and Decomposability would make an inconsistency measure behavior counter-intuitive. In contrast, the independence between sub-bases required in the independent decomposability property make it more intuitive.\nWhile we can see that the measure IMI is predecomposable, decomposable, and ind-decomposable, it is not the case for IM measure as shown below.\nProposition 2. The measure IM is not pre-decomposable, neither decomposable and nor ind-decomposable.\nProof. Consider the counter example:K1 = {a,¬a},K2 = {b,¬b} and K = K1 ∪ K2. It is easy to check that K and Ki (i = 1, 2) satisfy the conditions of Pre-Decomposability, Decomposability, and Independent Decomposability. We have IM (K1 ∪ K2) = 3 while IM (K1) + IM (K2) = 2. Consequently, IM (K1) + IM (K2) 6= IM (K1 ∪K2). Thus, IM is not pre-decomposable, neither decomposable and nor ind-decomposable.\nIndeed, the following theorem states that under certain constraints, MSS is multiplicative instead of additive.\nTheorem 3. Let K = K1 ∪ · · · ∪ Kn be KBs such that MUSes(K1 ∪ · · · ∪ Kn) = MUSes(K1) ⊕ · · · ⊕ MUSes(Kn) and, for all 1 ≤ i, j ≤ n with i 6= j, Ki ∩ Kj = ∅. Then, M ∈ MSSes(K) iff M = M1 ∪ · · · ∪Mn where M1 ∈MSSes(K1), . . . ,Mn ∈MSSes(Kn).\nProof. By induction on n. The case of n = 1 is trivial. We now consider the case of n > 1. Let K ′ = K1 ∪ · · · ∪ Kn−1. Using induction hypothesis, we have M ′ ∈ MSSes(K ′) iff M = M1 ∪ · · · ∪ Mn−1 where M1 ∈MSSes(K1), . . . ,Mn ∈MSSes(Kn−1). Part ⇒. Let M ∈ MSSes(K ′ ∪ Kn). Then, there exist M ′ ⊆ K ′ and Mn ⊆ Kn such that M = M ′ ∪ Mn. If M ′ /∈ MSSes(K ′) (resp. Mn /∈ MSSes(Kn)) then there exists α ∈ (K ′ ∪ Kn) \\ M such that M ′ ∪ {α} (resp. Mn∪{α}) is consistent. Using MUSes(K ′∪Kn) = MUSes(K ′)⊕MUSes(Kn) and K ′ ∩Kn = ∅, M ∪ {α} is consistent and we get a contradiction. Therefore, M ′ ∈ MSSes(K ′) and Mn ∈MSSes(Kn). Part⇐. Let M ′ ∈ MSSes(K ′) and Mn ∈ MSSes(Kn). Then, the set M = M ′ ∪Mn is consistent, since we have M ′ ∩Mn = ∅ and MUSes(K ′ ∪Kn) = MUSes(K ′) ⊕ MUSes(Kn). Let us now show that M is in MSSes(K ′ ∪ Kn). Assume that M is not in MSSes(K ′ ∪ Kn). Then, there exists α ∈ (K ′ ∪Kn) \\M such that M ∪ {α} is consistent. If α ∈ K ′ (resp. α ∈ Kn), then M ′ ∪ {α} (resp.\nMn ∪ {α}) is consistent and we get a contradiction. Therefore, M is in MSSes(K ′ ∪Kn).\nUsing this theorem, we deduce the following corollary:\nCorollary 4. Let K = K1 ∪ · · · ∪ Kn be KBs such that MUSes(K1 ∪ · · · ∪ Kn) = MUSes(K1) ⊕ · · · ⊕ MUSes(Kn) and, for all 1 ≤ i, j ≤ n with i 6= j, Ki ∩ Kj = ∅. Then, |MSSes(K)| = |MSSes(K1)| × · · · × |MSSes(Kn)|.\nAs the Independent Decomposability gives a more intuitive characterization of the interaction among subsets, in the following, we are interested in restoring the independent decomposability property of the IM measure.\nLet us first define two fundamental concepts: MUS-graph and MUS-decomposition.\nDefinition 8 (MUS-graph). The MUS-graph of K of a KB K, denoted GMUS(K), is an undirected graph where: • MUSes(K) is the set of vertices; and • ∀M,M ′ ∈ MUSes(K ), {M,M ′} is an edge iff M ∩ M ′ 6= ∅. A MUS-graph ofK gives us a structural representation of the connection between minimal unsatisfiable subsets.\nExample 2. Let K = {a ∧ d,¬a,¬b, b ∨ ¬c,¬c ∧ d,¬c ∨ e, c,¬e, e ∧ d}. We have MUSes(K) = {M1, . . . ,M5} where M1 = {¬a, a ∧ d}, M2 = {c,¬b, b ∨ ¬c}, M3 = {c,¬c ∧ d}, M4 = {¬c ∨ e, c,¬e}, and M5 = {¬e, e ∧ d}. So GMUS(K) is as follows:\nMoreover, GMUS(K) leads to a partition of a KB K, named MUS-decomposition, as defined below.\nDefinition 9 (MUS-decomposition). A MUS-decomposition of K is a set {K1, . . . ,Kp} such that K = K1 ∪ · · · ∪Kp ∪ free(K) and MUSes(Ki) (1 ≤ i ≤ p) are the connected components of GMUS(K).\nBy the fact that MUSes(K) 6= ∅ and the uniqueness of the connected components of a graph, we can easily see:\nProposition 5. MUS-decomposition exists and is unique for an inconsistent KB.\nExample 3. (Example 2 contd.) The MUS-decomposition of K contains two components of GMUS(K): K1 = M1 and K2 = M2 ∪M3 ∪M4 ∪M5 by noting that free(K) = ∅.\nObviously, the MUS-decomposition of a KB can be computed in polynomial time given its MUS-graph. Interestingly, we can see that the partition {K1, . . . ,Kp, free(K)}\nsatisfies the application conditions of Independent Decomposability. That is, if an inconsistency measure I is inddecomposable and free-formula independent, then I(K) = I(K1) + · · ·+ I(Kp).\nIn the following, based on MUS-decomposition, we present an alternative to the inconsistency measure IM (defined in Section 2) so as to make it ind-decomposable.\nDefinition 10. Let K be a KB with its MUS-decomposition K = {K1, . . . ,Kp}. The I ′M measure is defined as follows:\nI ′M (K) =  ∑ 1≤i≤p |MSSes(Ki)|+ |selfC(K)| if K ` ⊥;\n0 otherwise.\nThat is, instead of MSSes(K) as in IM , the maximal consistent subsets of MUS-decomposition of Ki are used in I ′M .\nExample 4. (Example 2 contd.) We have MSSes(K1) = {{a ∧ d}, {¬a}} and MSSes(K2) = {{¬b, b ∨ ¬c,¬c ∧ d,¬c ∨ e, e ∧ d}, {¬b, b ∨ ¬c,¬c ∧ d,¬c ∨ e,¬e}, {b∨¬c,¬c∨ e, c, e∧ d}, {¬b,¬c∨ e, c, e∧ d}, {b∨ ¬c, c,¬e}, {¬b, c,¬e}}. Then I ′M (K) = 2 + 6 = 8. Proposition 6. I ′M measure is ind-decomposable.\nProof. Let K = ⋃\n1≤i≤n Ki be a KB such that\nMUSes(K) = ⊕1≤i≤nMUSes(Ki) and, for all 1 ≤ i, j ≤ n with i 6= j, unfree(Ki) ∩ unfree(Kj) = ∅. One can easily see that I ′M (K) = 0 if and only if, for all 1 ≤ i ≤ n, I ′M (Ki) = 0. We now consider the case of I ′M (K) > 0. We denote by C(Ki) the set of connected components in GMUS(Ki) for i = 1, . . . , n. Thus,\n⋃ 1≤i≤n C(Ki) is the set of connected components in\nGMUS(K), since GMUS(K) = ⊎\n1≤i≤n GMUS(Ki)5. Moreover, it is obvious that selfC(K) = ⋃\n1≤i≤n selfC(Ki).\nLet {K1i , . . . ,Kpii , free(Ki)} be the MUSdecomposition of Ki for i = 1, . . . , n. We have I ′M (K) = ∑ 1≤i≤n ( ∑ 1≤j≤pi |MSSes(Kji )|+ |selfC(Ki)|) =∑ 1≤i≤n I ′M (Ki), since ( ⋃ 1≤i≤n {K1i , . . . ,Kpii }) ∪\n( ⋃\n1≤i≤n free(Ki)) is the MUS-decomposition of K.\nThat is, by taking into account the connections between minimal inconsistent subsets, MUS-decomposition gives us a way to define an inconsistency measure which still satisfies the Independent Decomposability."
    }, {
      "heading" : "5 A New MUS-based Inconsistency Measure",
      "text" : "Recall that we want to have a way to resolve inconsistencies in a parallel way as mentioned in Section 1. Indeed, MUS-decomposition defines a disjoint\n5The union of disjoint graphs is the graph with the union of vertex and edge sets from individual graphs as its vertexes and edges.\npartitions of a KB. However, it is inadequate for this purpose. Consider again K = {a1,¬a1, a1 ∨ ¬a2, a2,¬a2, · · · , an−1,¬an−1, an−1 ∨ ¬an, an,¬an}. The MUS-decomposition can not divide K into smaller pieces because its MUS-graph contains only one connected component. A solution to this problem is via a more finegrained analysis of a MUS-graph by taking into account its inner structures. To this end, we propose partial and distributable MUS-decompositions, based on which a new inconsistency measure is proposed and shown having more interesting properties.\nLet us first study a general characterization of inconsistency measures with respect to the Independent Decomposability property. Definition 11. Let K be a KB, {K1, . . . ,Kp} the MUSdecomposition of K and δ a function from {K1, . . . ,Kp} to R. The MUS-decomposition based inconsistency measure ofK with respect to δ, denoted IδD(K), is defined as follows:\nIδD(K) = p∑ i=1 δ(Ki)\nA range of possible measures can be defined using the above general definition. Let us review some existing instances of IδD according to some δ functions. The simplest one is obtained when δ(Ki) = 1. In this case, we get a measure that assigns to K the number of its connected components. However, this measure in not monotonic. Indeed, adding new formulae to a KB can decrease the number of connected components. For instance, consider the KB K = {a,¬a, b,¬b} that contains two singleton connected components K1 = {{a,¬a}} and K2 = {{b,¬b}}. Now, adding the formula a∨b toK leads to a new KB containing a unique connected component K = {{a,¬a}, {b,¬b}, {¬a, a ∨ b,¬b}}. Besides, this simple measure considers each connected component as an inseparable entity.\nMoreover, when we take δ(Ki) = |Ki| (the number of MUSes involved in the connected component Ki), IδD(K) is equal to IMI measure i.e. IδD(K) = |MUSes(K )|. This measure again does not take into account the inner structure of minimal inconsistent subsets of a K."
    }, {
      "heading" : "5.1 (Maximal) Partial MUS-decomposition",
      "text" : "We now modify IδD to take into account interactions between MUSes. In particular, we deeply explore the Independent Decomposability and the Monotony properties to define a new inconsistency measure, while keeping other desired properties satisfied. To this end, we first introduce the partial MUS-decomposition notion. Definition 12 (Partial MUS-decomposition). Let K be a KB and K1, . . . ,Kn subsets of K. The set {K1, . . . ,Kn} is called a partial MUS-decomposition of K if the following conditions are satisfied:\n(1) Ki ` ⊥, for 1 ≤ i ≤ n; (2) MUSes(K1 ∪ . . . ∪Kn) = ⊕ 1≤i≤nMUSes(Ki); (3) Ki ∩Kj = ∅, ∀ i 6= j. We denote pMUSd(K) the set of partial MUSdecompositions of K.\nThe following proposition comes from the fact that the MUS-decomposition of a KB K is in pMUSd(K). Proposition 7. Any inconsistent KB has at least one partial MUS-decomposition.\nUnlike the uniqueness of MUS-decomposition, a KB can have multiple partial MUS-decompositions as shown in the following example. Example 5. Consider K = {a,¬a, a ∨ b,¬b, b, c,¬c ∧ d,¬d ∧ e ∧ f,¬e,¬f}. Figure 2 depicts the graph representation of K which contains two connected components C1 and C2 where C1 = {a,¬a, a ∨ b,¬b, b} and C2 = {c,¬c∧ d,¬d∧ e∧ f,¬e,¬f}. So the MUS-decomposition of K is {C1, C2}. However, there are many partial MUSdecompositions with some examples listed below: • K1 = {a,¬a}, and K2 = {b,¬b}. • K ′1 = {a,¬a}, K ′2 = {b,¬b}, and K ′3 = {c,¬c ∧ d}. • K ′′1 = {¬a, a ∨ b,¬b}, and K ′′2 = {¬c ∧ d,¬d ∧ e ∧ f}. Note thatK ′3 = {c,¬c∧d} andK ′′3 = {¬e,¬d∧e∧f} can not form a partial MUS-decomposition due to the violation of the condition (2) in Definition 12. This also shows that condition (3) alone can not guarantee to satisfy the condition 2 in the definition.\nDefinition 13 (Maximal partial MUS-decomposition). A partial MUS-decomposition T ∈ pMUSd(K) is called maximal if |T | = µD(K), where µD(K) is defined by\nµD(K) = arg max T ′∈pMUSd(K)\n|T ′|.\nMoreover, µD(K) is called the distribution index of K. That is, the maximal partial MUS-decomposition has the largest cardinality among all partial MUS-decompositions. And the distribution index is the cardinality of maximal MUS-decompositions. Example 6. (Example 5 contd.) Among maximal partial MUS-decompositions is {K ′1,K ′2,K ′3}. Note that C2 contains highly connected formulae that cannot be separated into a partial MUS-decomposition of size larger than 2.\nAlthough a (maximal) partial MUS-decomposition can be formed by any subsets of K, the next proposition indicates that onlyMUSes(K) are needed to obtain a (maximal) partial MUS-decomposition. Lemma 8. LetK be an inconsistent KB. There exist µD(K) distinct MUSes M1, . . . ,MµD(K) such that {Mi | 1 ≤ i ≤ µD(K)} is a maximal partial MUS-decomposition of K.\nProof. Suppose {K1, · · · ,KµD(K)} is a maximal MUSdecomposition of K. Let Mi ∈ MUSes(Ki) for 1 ≤ i ≤ µD(K), then it is easy to verify that {M1, · · · ,MµD (K)} is a partial MUS-decomposition whose cardinality is the distribution index of K, so it is a maximal pMUSd.\nThat is, each element of a maximal partial MUSdecomposition can be some minimal unsatisfiable subsets of K, as {K ′1,K ′2,K ′3} in Example 5. Moreover, the following proposition tells that we can have another special format of maximal MUS-decomposition.\nProposition 9 (Distributable MUS-decomposition). Let K be an inconsistent KB. There exist µD(K) distinct Mi ⊆ MUSes(K) for 1 ≤ i ≤ µD(K), such that { ⋃ M∈Mi M | 1 ≤ i ≤ µD(K)} is a maximal partial MUS-decomposition of K andMi is maximal w.r.t. set inclusion. We call such a maximal partial MUS-decomposition a distributable MUSdecomposition.\nProof. By Lemma 8, take a maximal MUS-decomposition of the form {Mi ∈ MUSes(K) | 1 ≤ i ≤ µD(K)}. Denote Ci the connected component of GMUS(K) such that Mi ∈ Ci. Now considerMi ⊆ Ci such that { ⋃ M∈Mi M | 1 ≤ i ≤ µD(K)} is still a partial MUS-decomposition of K. SuchMi exists because we can takeMi = {Mi}. K is finite, so are GMUS(K) and Ci. Now takingMi that is maximal w.r.t. set-inclusion with such a property, the conclusion follows.\nExample 7. (Example 5 contd.) {K ′1,K ′2, C2} is a distributable MUS-decomposition, but {K ′1,K ′2,K ′3} is not because K ′3 ⊂ C2. Example 8. Recall the example in Section 1: K = {a1,¬a1, a1 ∨ ¬a2, a2,¬a2, · · · , an−1,¬an−1, an−1 ∨ ¬an, an,¬an}. The distributable MUS-decomposition of K is {ai,¬ai}.\nA distributable MUS-decomposition defines a way to separate a whole KB into maximal number of disjoint inconsistent components. The decomposed components, such as {ai,¬ai}, can in turn be delivered to n different experts to repair in parallel. In the case where resolving inconsistency is a serious and time-consuming decision, this can advance task time by a distributed manipulation of maximal experts. Indeed, the rational in distribution MUS-decomposition related to inconsistency resolving is given in the following proposition.\nProposition 10. Given an inconsistent base K and T = {K1, · · · ,Kn} is a distributable MUS-decomposition of K. Suppose K ′i is a consistent base obtained by removing or weakening formulae in Ki. Then K ′ = ⋃n 1 K ′ i is consistent.\nThat is, inconsistencies in each component can be resolved separately and the merged KB afterwards is consistent. However, note that K ′ ∪ R where R = K \\ ⋃iKi is not necessarily consistent6. For instance, in Example 6, if we have K ′1 = {¬a} and K ′2 = {¬b} after expert verification,\n6Indeed, this is unavoidable by Proposition 13 if each expert only removes one formula from K.\nwe still have inconsistency in {¬a, a ∨ b,¬b}. In this case, we can drop a ∨ b because {¬a,¬b} have been manually chosen by experts; Or for carefulness, we can retrigger the same process to resolve the rest inconsistencies."
    }, {
      "heading" : "5.2 Distribution-based Inconsistency Degree",
      "text" : "As we can see above that a distributable MUSdecomposition gives a reasonable disjoint partition of a KB. In this section, we study the distribution index which rises an interesting inconsistency measure with desired properties. Definition 14. LetK be a KB, the distribution-based inconsistency degree ID(K) is defined as:\nID(K) = µD(K).\nIntuitively, ID(K) characterizes how many experts are demanded to repair inconsistencies in parallel. The higher the value is, more labor force is required7. Example 9. (Example 7 contd.) Since {K ′1,K ′2, C2} is a distributable MUS-decomposition, we have ID(K) = 3.\nIndeed, the so defined measure satisfies several important properties for an inconsistency measure. Proposition 11. ID(K) satisfies Consistency, Monotony, Free formula independence, MinInc, and Independent Decomposability.\nProof. Consistency: If K is consistent, the partial MUSdecomposition set is empty, so ID(K) = 0. Monotony: For any KB K and K ′, it is easy to see that a partial MUS-decomposition of K is a partial MUSdecomposition of K ∪ K ′. Therefore, µD(K) ≤ µD(K ∪ K ′). Free formula independence: It follows from the obvious fact that free formula do not effect the set of partial MUSdecompositions. MinInc: For M ∈ MUSes(K), clearly, the only partial decomposition of M is {M}, so ID(K) = 1. Independent Decomposability: Let K,K ′ two bases satisfying MUSes(K)⊕MUSes(K ′) = MUSes(K ∪K ′) and unfree(K) ∩ unfree(K ′) = ∅. For any partial MUSdecompositions of K and K ′: M = {M1, · · · ,MµD(K)} andM′ = {M ′1, · · · ,M ′µD(K′)}, it is easy to seeM∪M\n′ ∈ pMUSd(K ∪ K ′). Moreover, M ∪ M′ is of the maximal cardinality in pMUSd(K∪K ′). Otherwise, by Lemma 8, there are M ′′j ∈ MUSes(K ∪ K ′) that form a partial MUS-decomposition ofK∪K ′: {M ′′1 , · · · ,M ′′N}withN > µD(K) + µD(K\n′). Since MUSes(K) ⊕MUSes(K ′) = MUSes(K ∪ K ′), we have either M ′′j ∈ MUSes(K) or M ′′j ∈ MUSes(K ′) for all j. So at least one of K and K ′ has a partial MUS-decomposition whose cardinality is stricter larger than its distribution index. A contradiction with the definition of distribution index. So µD(K ∪K ′) = µD(K) + µD(K\n′). Consequently, ID satisfies independent decomposability property.\n7Note that labor force for resolving an inconsistent component can vary for different inconsistent components because of for instance differences in their sizes. But we focus on the study of maximal number of components in the present paper.\nMoreover, the distribution-based inconsistency measure is a lower bound of inconsistency measures which satisfy monotony, independent Decomposability, and MinInc properties.\nProposition 12. Given an inconsistency measure I that satisfies Monotony, Independent Decomposability, and MinInc, we have I(K) ≥ µD(K).\nProof. For any partial MUS-decomposition {K1, . . . ,Kn} of K, we have ⋃ 1≤i≤n Ki ⊆ K. So by monotony, I(K) ≥ I(K1 ∪ . . . ∪ Kn). Moreover, since I satisfies independent Decomposability, I(K) ≥ I(K1) + . . .+ I(Kn). Taking a maximal partial MUS-decomposition, one can deduce that I(K) ≥ I(K1) + . . . + I(Kµmax(K)). By MinInc and monotony, I(Ki) ≥ 1, so I(K) ≥ µD(K).\nExample 10. (Example 1 contd.) For different measures based on MUSes, we have\n– ID(K1 ∪K2) = 1 and ID(K1 ∪K3) = 2; – δhs(K1 ∪K2) = 1 and δhs(K1 ∪K3) = 2; – I ′M (K1 ∪K2) = 1 and I ′M (K1 ∪K3) = 4; – IMI(K1 ∪K2) = 2 and IMI(K1 ∪K3) = 2. So all ID, δhs, and I ′M give a conclusion that K1 ∪ K2 is less inconsistent than K1 ∪ K3, which coincides with our intuition, but it is not the case of IMI .\nIn Example 10, we have ID and δhs of the same value. But it is not the general case as shown in the following example.\nExample 11. (Example 5 contd.) For the connected component C2, δhs(C2) = 2 while its distribution index is 1.\nHowever, the following Proposition gives a general relationship between ID and δhs.\nProposition 13. Let K be a KB. We have\nID(K) ≤ δhs(K).\nProof. AsK can be partitioned into µD(K) disjoint components of minimal inconsistent subsets of K, a minimal hitting set of K must contain at least one formula from each component. That is, ID(K) = µD(K) ≤ δhs(K).\nExample 12. (Example 8 contd.) We have ID(K) = n and δhs(K) = n. But the former means that K can be distributed to n experts to resolve inconsistency in parallel and each expert only verifies two elements because of the distribution MUS-decomposition is {ai,¬ai}; Whilst the latter means that each expert needs to verify at least n formulae to confirm an inconsistency resolving plan. And different experts have to do repetition work due to overlapping among different hitting sets.\nThis example shows that the proposed MUSdecomposition gives a more competitive inconsistency handling methodology than the hitting set based approach albeit the occasionally equivalent value of the deduced inconsistency measures ID(K) and δhs.\n6 Computations of ID(K) In this section, we consider the computational issues of distribution-based inconsistency measure ID(K) by generalizing the classical Set Packing problem, and then show two encodings of ID(K), which is aiming at practical algorithms for its solution.\nWe first look at the following proposition which is a simple conclusion of Lemma 8. Proposition 14. Let K be a KB. ID is the maximal cardinality ofM⊆MUSes(K) satisfying\n1. MUSes(∪M∈MM) =M. Proposition 14 states that ID(K) is the largest number\nof (pairwise disjoint) MUSes of K such that their union will not rise any new MUS, which gives a way to compute ID(K).\nNext we study this computation in the framework of Maximum Closed Set Packing (MCSP) defined in the following."
    }, {
      "heading" : "6.1 Closed Set Packing",
      "text" : "The maximum set packing problem is one of the basic optimization problems (see, e.g., (Garey and Johnson 1990)). It is related to other well-known optimization problems, such as the maximum independent set and maximum clique problems (Arora et al. 1998; Arora and Safra 1998; Boppana and Halldórsson 1992; Feige et al. 1996; Wigderson 1983). We here introduce a variant of this problem, called the maximum closed set packing problem. We show that this variant is NPhard by providing a reduction from the maximum set packing problem which is NP-hard (Karp 1972). In this work, the maximum closed set packing problem is used to compute the distribution-based inconsistency measure.\nLet U be universe and S be a family of subsets of U . Definition 15 (Set Packing). A set packing is a subset P ⊆ S such that, for all Si, Sj ∈ P with Si 6= Sj , Si ∩ Sj = ∅.\nOur variant is obtained from the maximum set packing problem by further requiring that the union of selected subsets does not contain unselected subsets in S as defined below. Definition 16 (Closed Set Packing). A closed set packing is a set packing P ⊆ S such that, for all Si ∈ S \\ P , Si is not a subset of ⋃ Pi∈P Pi.\nThe maximum (free) set packing problem consists in founding a (free) set packing with maximum cardinality, written MSP (MCSP). Theorem 15. MCSP is NP-hard.\nProof. We construct a reduction from the maximum set packing problem to the maximum closed set packing problem. Let U be a universe, S = {S1, . . . , Sn} a family of subsets of U and e1, . . . , en are n distinct elements which do not belong to U . Define U ′ = U ∪ {e1, . . . , en} and S′ = {S1 ∪ {e1}, . . . , Sn ∪ {en}}. We have P is a solution of the maximum set packing problem for (U, S) if and only if P ′ = {Si ∪ {ei} | Si ∈ P} is a solution of the maximum closed set packing problem for (U ′, S′). Since maximum set packing MSP is NP-hard, so is the MCSP."
    }, {
      "heading" : "6.2 Integer Linear Program Formulation of MCSP",
      "text" : "We here provide an encoding of the maximum closed set packing problem in linear integer programming. Let U be a universe and S a set of subsets of U . We associate a binary variable XSi (XSi ∈ {0, 1}) to each subset Si in S. We also associate a binary variable Ye to each element e in U .\nThe first linear inequalities allow us to only consider the pairwise disjoint subsets in S:∑\ne∈Si,Si∈S XSi ≤ 1 for all e ∈ U (1)\nThe following inequalities allow us to have XSi = 1 if and only if, for all e ∈ Si, Ye = 1:\n( ∑ e∈Si Ye)− Ci ∗XSi ≥ 0 for all Si ∈ S (2)\n( ∑ e∈Si Ye)−XSi ≤ Ci − 1 for all Si ∈ S (3)\nwhere, for all Si ∈ S, Ci = |Si|. Indeed, If XSi = 1 then, using inequality (2), we have, for all e ∈ Si, Ye = 1. Otherwise, we have XSi = 0 and, using inequality (3), there exists e ∈ Si such that Ye = 0.\nFinally, the objective function is defined as follows: max ∑ Si∈S XSi (4)\nProposition 16. The linear inequalities in (1), (2) and (3) with the objective function (4) is a correct encoding of MCSP.\nProof. Let P be a subset of S that corresponds to a solution of the linear integer program. Using the inequalities in (1), we have, for all Si, Sj ∈ P with Si 6= Sj , Si ∩ Sj = ∅. Thus, P corresponds to a set packing. Using the inequalities (2) and (3), we have, for all Si ∈ S, XSi = 1 if and only if, for all e ∈ Si, Ye = 1. Hence, for all Si ∈ S \\ P , there exists e ∈ Si such that Ye = 0, so Si is not a subset of ⋃ Pi∈P Pi. Therefore, P is a closed set packing. Finally, from maximizing the objective function in (4), we deduce that P is a solution of the maximum closed set packing for (U, S)."
    }, {
      "heading" : "6.3 MinCostSAT Formulation of MCSP",
      "text" : "In this section, we describe our encoding of the maximum closed set packing problem as a MinCostSAT instance (Miyazaki, Iwama, and Kambayashi 1996). Definition 17 (MinCostSAT). Let Φ be a CNF formula and f a cost function that associates a non-negative cost to each variable in V ar(Φ). The MinCostSAT problem is the problem of finding a model for Φ that minimizes the objective function: ∑\np∈V ar(Φ)\nf(p)\nLet U be a universe and S a set of subsets of U . We associate a boolean variable XSi (resp. Ye) to each Si ∈ S (resp. e ∈ U ). The inequalities in (1) in our previous integer linear program correspond to instances of the AtMostOne constraint which is a special case of the well-known cardinality constraint. Several efficient encodings of the cardinality constraint to CNF have been proposed, most of them try to improve the efficiency of constraint propagation (e.g. (Bailleux and Boufkhad 2003; Sinz 2005)). We here consider the encoding using sequential counter (Sinz 2005; Silva and Lynce 2007). In this case, the inequality\n∑ e∈Si,Si∈S XSi ≤ 1 is en-\ncoded as follows (we fix ∑\ne∈Si,Si∈S XSi = ∑ 1≤i≤n XSi ):\n(¬XS1 ∨ p1) ∧ (¬XSn ∨ ¬pn−1)∧ 1<i<n ((¬XSi ∨ pi) ∧ (¬pi−1 ∨ pi) ∧ (¬XSi ∨ ¬pi−1))\n(5)\nwhere pi is a fresh boolean variable for all 1 ≤ i ≤ n− 1. Regarding to the inequalities in (2), it can be encoded by the following clauses:∧ Si∈S ∧ e∈Si ¬XSi ∨ Ye (6)\nIndeed, these clauses are equivalent to the following ones:∧ Si∈S XSi → ∧ e∈Si Ye\nThe inequalities in (3) can be simply encoded as:∧ Si∈S (XSi ∨ ∨ e∈Si ¬Ye) (7)\nContrary to MCSP, the optimization process in MinCostSAT consists in minimizing the objective function. In order to encode MCSP as an MinCostSAT instance, we rename each variable XSi with ¬X ′Si (X ′Si is a fresh boolean variable) in (5), (6) and (7), for all Si ∈ S. The MinCostSAT instance encoding the maximum closed set packing problem for (U, S) isM(U,S) = (Φ, f) where Φ is the CNF formula obtained from (5) ∧ (6) ∧ (7) by the renaming described previously and f is defined as follows:\n• for all Si ∈ S, f(X ′Si) = 1; and • for all v ∈ V ar(Φ) \\ {X ′Si | Si ∈ S}, f(v) = 0. Note that the optimization process in M consists in minimizing ∑ Si∈S X ′ Si\nand that corresponds to maximizing∑ Si∈S XSi ."
    }, {
      "heading" : "7 Experimental Results",
      "text" : "In this section, we present a preliminary experimental evaluation of our proposed approach. All experiments was performed on a Xeon 3.2GHz (2 GB RAM) cluster.\nWe conduced two kinds of experiments. The first one deals with instances coming from classical MUSes enumeration problem. For this category we use two complementary\nstate-of-the art MUSes enumeration solvers and then we apply our encoding into MCSP to compute the values of ID. When enumerating all MUSes is infeasible we use eMUS (Previti and Marques-Silva 2013) instead of camus (Liffiton and Sakallah 2008) to enumerate a subset of MUSes. Indeed, eMUS is a real time solver that outperforms camus when we deal with partial MUSes enumeration. The instances where eMUS is used are indicated with an asterisk.\nIn the second experiment, the instances are randomly generated. To represent a KB with n formulae involving m MUSes, called mfsp m n, we first generate randomly a family of sets {S1, . . . , Sm} of positive integers from the interval [1 . . . n]. We suppose that each set Si of numbers represents a MUS. We randomly set the size of Si. In our experiments, we consider 1 < |Si| ≤ 3.\nIn Table 1, for each instance, we report the number of MUSes (#mus), the value of the inconsistency measure (ID) and the time (time in seconds) needed to compute ID . To solve the encoded instances, we use wpmaxsatz Partial MaxSAT solver (Argelich et al. 2006).\nAs we can observe, the value ID is much smaller than the number of MUSes. Furthermore, the computation time globally increases as ID increases. Note that for instances whose ID value is equal to 1, it means that they are strongly interconnected."
    }, {
      "heading" : "8 Conclusion",
      "text" : "We studied in this paper a new framework for characterizing inconsistency based on the proposed independent decomposability property and MUS-decomposition. Such defined inconsistency measures (I.e. I ′M and ID) are shown with desired properties. The distributable MUS-decomposition allows to resolve inconsistencies in a parallel way, which is a rarely considered methodology for handling large knowledge bases with important informations. Complexity and practical algorithms are studied based on the advance of MUS enumeration. We will study the lower bound complexity of the measure and explore applications of the proposed\nmethodology in the future."
    } ],
    "references" : [ {
      "title" : "C",
      "author" : [ "J. Argelich", "X. Domingo", "Li" ],
      "venue" : "M.; Manyà, F.; and Planes, J.",
      "citeRegEx" : "Argelich et al. 2006",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "and Safra",
      "author" : [ "S. Arora" ],
      "venue" : "S.",
      "citeRegEx" : "Arora and Safra 1998",
      "shortCiteRegEx" : null,
      "year" : 1998
    }, {
      "title" : "Proof verification and the hardness of approximation problems",
      "author" : [ "Arora" ],
      "venue" : "J. ACM 45(3):501–555",
      "citeRegEx" : "Arora,? \\Q1998\\E",
      "shortCiteRegEx" : "Arora",
      "year" : 1998
    }, {
      "title" : "and Boufkhad",
      "author" : [ "O. Bailleux" ],
      "venue" : "Y.",
      "citeRegEx" : "Bailleux and Boufkhad 2003",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "L",
      "author" : [ "Bertossi" ],
      "venue" : "E.; Hunter, A.; and Schaub, T.",
      "citeRegEx" : "Bertossi. Hunter. and Schaub 2005",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "M",
      "author" : [ "R.B. Boppana", "Halldórsson" ],
      "venue" : "M.",
      "citeRegEx" : "Boppana and Halldórsson 1992",
      "shortCiteRegEx" : null,
      "year" : 1992
    }, {
      "title" : "A verification model for electronic transaction protocols",
      "author" : [ "Zhang Chen", "Q. Zhang 2004] Chen", "C. Zhang", "S. Zhang" ],
      "venue" : "APWeb,",
      "citeRegEx" : "Chen et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Chen et al\\.",
      "year" : 2004
    }, {
      "title" : "Interactive proofs and the hardness of approximating cliques",
      "author" : [ "Feige" ],
      "venue" : "J. ACM 43(2):268–292",
      "citeRegEx" : "Feige,? \\Q1996\\E",
      "shortCiteRegEx" : "Feige",
      "year" : 1996
    }, {
      "title" : "D",
      "author" : [ "M.R. Garey", "Johnson" ],
      "venue" : "S.",
      "citeRegEx" : "Garey and Johnson 1990",
      "shortCiteRegEx" : null,
      "year" : 1990
    }, {
      "title" : "and Hunter",
      "author" : [ "J. Grant" ],
      "venue" : "A.",
      "citeRegEx" : "Grant and Hunter 2006",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "and Hunter",
      "author" : [ "J. Grant" ],
      "venue" : "A.",
      "citeRegEx" : "Grant and Hunter 2008",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "and Hunter",
      "author" : [ "J. Grant" ],
      "venue" : "A.",
      "citeRegEx" : "Grant and Hunter 2011",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "and Hunter",
      "author" : [ "J. Grant" ],
      "venue" : "A.",
      "citeRegEx" : "Grant and Hunter 2013",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "Classifications for inconsistent theories",
      "author" : [ "J. Grant" ],
      "venue" : "Notre Dame Journal of Formal Logic",
      "citeRegEx" : "Grant,? \\Q1978\\E",
      "shortCiteRegEx" : "Grant",
      "year" : 1978
    }, {
      "title" : "and Konieczny",
      "author" : [ "A. Hunter" ],
      "venue" : "S.",
      "citeRegEx" : "Hunter and Konieczny 2008",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "and Konieczny",
      "author" : [ "A. Hunter" ],
      "venue" : "S.",
      "citeRegEx" : "Hunter and Konieczny 2010",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "and Raddaoui",
      "author" : [ "S. Jabbour" ],
      "venue" : "B.",
      "citeRegEx" : "Jabbour and Raddaoui 2013",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "R",
      "author" : [ "Karp" ],
      "venue" : "M.",
      "citeRegEx" : "Karp 1972",
      "shortCiteRegEx" : null,
      "year" : 1972
    }, {
      "title" : "K",
      "author" : [ "M.H. Liffiton", "Sakallah" ],
      "venue" : "A.",
      "citeRegEx" : "Liffiton and Sakallah 2008",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "and Raiffa",
      "author" : [ "R.D. Luce" ],
      "venue" : "H.",
      "citeRegEx" : "Luce and Raiffa 1957",
      "shortCiteRegEx" : null,
      "year" : 1957
    }, {
      "title" : "Computational complexity and anytime algorithm for inconsistency measurement",
      "author" : [ "Ma" ],
      "venue" : "Int. J. Software and Informatics",
      "citeRegEx" : "Ma,? \\Q2010\\E",
      "shortCiteRegEx" : "Ma",
      "year" : 2010
    }, {
      "title" : "Computing inconsistency measure based on paraconsistent semantics",
      "author" : [ "Qi Ma", "Y. Hitzler 2011] Ma", "G. Qi", "P. Hitzler" ],
      "venue" : "J. Log",
      "citeRegEx" : "Ma et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Ma et al\\.",
      "year" : 2011
    }, {
      "title" : "J",
      "author" : [ "Martinez, A.B.B.", "Arias" ],
      "venue" : "J. P.; and and, A. F. V.",
      "citeRegEx" : "Martinez. Arias. and and 2004",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "V",
      "author" : [ "M.V. Martinez", "A. Pugliese", "G.I. Simari", "Subrahmanian" ],
      "venue" : "S.; and Prade, H.",
      "citeRegEx" : "Martinez et al. 2007",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Measuring inconsistency in a network intrusion detection rule set based on snort",
      "author" : [ "McAreavey" ],
      "venue" : "Int. J. Semantic Computing",
      "citeRegEx" : "McAreavey,? \\Q2011\\E",
      "shortCiteRegEx" : "McAreavey",
      "year" : 2011
    }, {
      "title" : "Database queries as combinatorial optimization problems",
      "author" : [ "Iwama Miyazaki", "S. Kambayashi 1996] Miyazaki", "K. Iwama", "Y. Kambayashi" ],
      "venue" : "CODAS,",
      "citeRegEx" : "Miyazaki et al\\.,? \\Q1996\\E",
      "shortCiteRegEx" : "Miyazaki et al\\.",
      "year" : 1996
    }, {
      "title" : "D",
      "author" : [ "K. Mu", "W. Liu", "Z. Jin", "Bell" ],
      "venue" : "A.",
      "citeRegEx" : "Mu et al. 2011",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "A general framework for measuring inconsistency through minimal inconsistent sets",
      "author" : [ "Liu Mu", "K. Jin 2011] Mu", "W. Liu", "Z. Jin" ],
      "venue" : "Knowl. Inf. Syst",
      "citeRegEx" : "Mu et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Mu et al\\.",
      "year" : 2011
    }, {
      "title" : "C",
      "author" : [ "Oller" ],
      "venue" : "A.",
      "citeRegEx" : "Oller 2004",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "and MarquesSilva",
      "author" : [ "A. Previti" ],
      "venue" : "J.",
      "citeRegEx" : "Previti and Marques.Silva 2013",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "D",
      "author" : [ "G. Qi", "W. Liu", "Bell" ],
      "venue" : "A.",
      "citeRegEx" : "Qi. Liu. and Bell 2005",
      "shortCiteRegEx" : null,
      "year" : 2005
    }, {
      "title" : "L",
      "author" : [ "Shapley" ],
      "venue" : "S.",
      "citeRegEx" : "Shapley 1953",
      "shortCiteRegEx" : null,
      "year" : 1953
    }, {
      "title" : "and Lynce",
      "author" : [ "J.P.M. Silva" ],
      "venue" : "I.",
      "citeRegEx" : "Silva and Lynce 2007",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "and Ma",
      "author" : [ "G. Xiao" ],
      "venue" : "Y.",
      "citeRegEx" : "Xiao and Ma 2012",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "Computing inconsistency measurements under multi-valued semantics by partial max-sat solvers",
      "author" : [ "Xiao" ],
      "venue" : "In KR",
      "citeRegEx" : "Xiao,? \\Q2010\\E",
      "shortCiteRegEx" : "Xiao",
      "year" : 2010
    }, {
      "title" : "Measuring inconsistency in dl-lite ontologies",
      "author" : [ "Zhou" ],
      "venue" : "In Web Intelligence,",
      "citeRegEx" : "Zhou,? \\Q2009\\E",
      "shortCiteRegEx" : "Zhou",
      "year" : 2009
    } ],
    "referenceMentions" : [ ],
    "year" : 2014,
    "abstractText" : "Measuring inconsistency is viewed as an important issue related to handling inconsistencies. Good measures are supposed to satisfy a set of rational properties. However, defining sound properties is sometimes problematic. In this paper, we emphasize one such property, named Decomposability, rarely discussed in the literature due to its modeling difficulties. To this end, we propose an independent decomposition which is more intuitive than existing proposals. To analyze inconsistency in a more fine-grained way, we introduce a graph representation of a knowledge base and various MUSdecompositions. One particular MUS-decomposition, named distributable MUS-decomposition leads to an interesting partition of inconsistencies in a knowledge base such that multiple experts can check inconsistencies in parallel, which is impossible under existing measures. Such particular MUSdecomposition results in an inconsistency measure that satisfies a number of desired properties. Moreover, we give an upper bound complexity of the measure that can be computed using 0/1 linear programming or Min Cost Satisfiability problems, and conduct preliminary experiments to show its feasibility.",
    "creator" : "LaTeX with hyperref package"
  }
}