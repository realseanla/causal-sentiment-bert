{
  "name" : "1411.6279.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Bryan Renne", "Joshua Sack", "Audrey Yap" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n41 1.\n62 79\nv1 [\ncs .L\nO ]\n2 3\nN ov\n2 01"
    }, {
      "heading" : "1 Introduction",
      "text" : "Anyone who has been late to an appointment or missed a deadline is aware that it is often difficult to keep track of time. This basic difficulty is the motivation for this paper, which presents a framework called Dynamic Epistemic Temporal Logic that allows us to reason about epistemic agents’ changing beliefs about time, from one point in time to the next. We will develop this framework by combining techniques from the traditions of Epistemic Temporal Logic (ETL) [10] and Dynamic Epistemic Logic (DEL) [3, 4, 5, 16, 17].\nSection 2 introduces the syntax and semantics of Dynamic Epistemic Temporal Logic (DETL). Section 3 then highlights several features of this system by presenting a number of examples that illustrate different ways of measuring the time at a world in a model. The proof system and completeness results for DETL appear in Section 4. In Section 5, we study the preservation under updates of several model-theoretic properties that one might wish to enforce so as to ensure models have sensible temporal structure. Finally, we conclude in Section 6 by connecting DETL to other work concerned with adding time to DEL.\n∗Funded by an Innovational Research Incentives Scheme Veni grant from the Netherlands Organisation for Scientific Research (NWO).\n†Currently supported by the Netherlands Organisation for Scientific Research VIDI project 639.072.904."
    }, {
      "heading" : "2 Our System",
      "text" : "We begin with a nonempty finite set A of agents and a disjoint nonempty set P of (propositional) letters. Our semantics is based on Kripke models (with yesterday). These are structures M = (WM ,→M , ❀M , V M) consisting of a nonempty set WM of (possible) worlds, a binary epistemic accessibility relation →Ma for each a ∈ A indicating the worlds w\n′ ←Ma w agent a ∈ A considers possible at w, a binary temporal accessibility relation ❀M indicating the worlds w′ ❀M w to be thought of as a “yesterday” of (i.e., fall one clock-tick before) world w,1 and a (propositional) valuation V M : P → ℘(WM) indicating the set V M(p) of worlds at which propositional letter p ∈ P is true. For now, we do not place any restrictions on the behavior of these relations, but later (in Definition 2.7) we will introduce several desirable properties that they will typically have in concrete examples. For a binary relation R, a pair (w, v) ∈ R is often called an “R arrow.” A pointed Kripke model (with yesterday), sometimes called a situation, is a pair (M,w) consisting of a Kripke model and a world w ∈ WM called the point. To say that a Kripke model (pointed or not) is atemporal means that it contains no ❀arrows.\nPointed Kripke models (M,w) describe fixed (i.e., “static”) epistemic-temporal situations in which agents have certain beliefs about time, propositional truth, and the beliefs of other agents. We now define (epistemic-temporal) action models, which transform a situation (M,w) into a new situation (M [U ], (w, s)) according to a certain “product operation” M 7→ M [U ] defined in a moment (in Definition 2.5).\nDefinition 2.1 (Action Models). Let F be a nonempty set of formulas. An action model U over F is a structure (WU ,→U , ❀U , preU) satisfying the following.\n• WU is a nonempty finite set of informational events the agents may experience.\n• For each a ∈ A , the object →Ua is a binary (epistemic) accessibility relation. The relation →Ua designates the events s\n′ ←Ua s that agent a thinks are consistent with her experience of event s.\n• ❀U is a binary temporal relation indicating the events s′ ❀U s that occur as a “yesterday” of (i.e., fall one time-step before) event s.\n• preU : WU → F is a precondition function assigning a precondition (formula) preU(s) ∈ F to each event s. The precondition preU(s) of event s is the condition that must hold in order for event s to occur.\nA pointed action model over F , sometimes called an action, is a pair (U, s) consisting of an action model U over F and an event s ∈ WU called the point. To say that an action model (pointed or not) is atemporal means that it contains no ❀arrows. We define the following sets:\n• A(F ) is the set of action models over F ,\n1For all structures X , let ❀X denote the converse of ❀X and let ←X a denote the converse of →X a . Our discussion of temporal issues will typically use ❀ rather than ❀because the former follows the natural direction of time’s flow. Here and elsewhere, we will omit superscripts on relations when doing so ought not cause confusion.\n• Aa(F ) is the set of atemporal action models over F ,\n• A∗(F ) is the set of pointed action models over F , and\n• Aa ∗ (F ) is the set of pointed atemporal action models over F .\nAtemporal action models were developed by Baltag, Moss, and Solecki [3, 4] and have been adapted or extended in various ways in the Dynamic Epistemic Logic literature in order to reason about knowledge and belief change; see the textbook [17] for details and references. Our contribution here is the inclusion of temporal arrows ❀within action models. To say more about this, we first introduce some additional terminology.\nDefinition 2.2 (Progressions, Histories, Depth d(w)). A progression is a finite nonempty sequence 〈wi〉 n i=0 of states having wi ❀ wi+1 for each i < n. We say that a progression 〈wi〉 n i=0 begins at w0 and ends at wn. The length of a progression 〈wi〉 n i=0 is the number n, which is equal to the number of ❀ arrows it takes to link up the states making up the progression (i.e., one less than the number of states in the progression). A past-extension of a progression σ is another progression obtained from σ by adding zero or more extra states at the beginning of the sequence (i.e., in the “past-looking direction” from x to y in the arrow x ❀y). A past-extension is proper if more than zero states were added. A history is a progression that has no proper past-extension. For each state w, we define d(w) as follows: if there is a maximum n ∈ N such that there is a history of length n that ends at w, then d(w) is this maximum n; otherwise, if no such maximum n ∈ N exists, then d(w) = ∞. We call d(w) the depth of w. A state w satisfying d(w) = 0 is said to be initial.\nWe will present a number of examples shortly showing that the inclusion of temporal ❀ arrows in both Kripke models and action models allow us to reason about time in a Dynamic Epistemic Logic-style framework. The basic idea is this: if the depth d(w) of a world w is finite, then the depth d(w) of w indicates the time at w; likewise, if the depth d(s) of an event s is finite, then the depth d(s) of s indicates the relative time at which event s takes place. To make these notions coherent and useful, there are a number of things we will do. First, we introduce our multi-modal language LDETL having doxastic modalities ✷aϕ (“agent a believes ϕ”) for each a ∈ A , the temporal modality [Y ]ϕ (“ϕ was true ‘yesterday’ (i.e., one time-step ago)”), and action model modalities [U, s]ϕ (“after action (U, s) occurs, ϕ is true”).\nDefinition 2.3 (Languages LDETL and LSETL). The set LDETL of formulas ϕ of Dynamic Epistemic Temporal Logic and the set A∗(LDETL) of pointed action models over LDETL are defined by the following recursion:\nϕ ::= p | ¬ϕ | ϕ ∧ ϕ | ✷aϕ | [Y ]ϕ | [U, s]ϕ p ∈ P, a ∈ A , (U, s) ∈ A∗(LDETL)\nTo say that a formula ϕ is atemporal means that every action model used in the formation of ϕ according to the above recursion is atemporal. We define the set LSETL of formulas of Simple Epistemic Temporal Logic as the set of LDETL-formulas that do not contain any action model modalities [U, s]. We use the usual abbreviations from classical propositional\nlogic to represent connectives other than those in the language, including those for the propositional constants ⊤ (truth) and ⊥ (falsehood); also, 〈U, s〉 def = ¬[U, s]¬, 〈Y 〉 def = ¬[Y ]¬, and ♦a def = ¬✷a¬.\nDefinition 2.4 (Past State). Let U be an action model. A past state is an event s in U that has no yesterday: there is no s′ ❀U s.\nEvery history s0 ❀ s1 ❀ s2 ❀ · · · ❀ sn begins with a past state (see Definition 2.2). This past state s0 plays a special role in the semantics by copying part or all of the initial state of affairs before the remaining events in the history take place. The next definition shows how this is done. The sequential execution of successive events s1, . . . , sn then transform this copy.\nDefinition 2.5 (Semantics). We define the binary truth relation |= between pointed Kripke models (written without delimiting parenthesis) and formulas by an induction on formula construction that has standard Boolean cases and the following non-Boolean cases.\n• M,w |= ✷aϕ means M, v |= ϕ for each v ← M a w.\n• M,w |= [Y ]ϕ means M, v |= ϕ for each v ❀M w.\n• M,w |= [U, s]ϕ means M,w |= preU(s) implies M [U ], (w, s) |= ϕ, where\n– WM [U ] def = {(v, t) ∈ WM ×WU | M, v |= preU(t)}.\n– We have (v, t) → M [U ] a (v′, t′) if and only if both v →Ma v ′ and t →Ua t ′. – We have (v′, t′) ❀M [U ] (v, t) if and only if we have at least one of the following:\n∗ v′ ❀M v, t′ = t, and t is a past state; or ∗ v′ = v and t′ ❀U t.\n– V M [U ](p) def = {(v, t) ∈ WM [U ] | v ∈ V M(p)}.\nFormula validity |= ϕ means that M,w |= ϕ for each pointed Kripke model (M,w). When it will not cause confusion, we will write the application of a function f to a paired world (v, t) ∈ WM [U ] as f(v, t) instead of the more cumbersome f((v, t)). We may write |=DETL in place of |= later in the paper when other notions of truth are defined.\nAfter taking the update product M 7→ M [U ], the epistemic relation →a behaves as it does in DEL [17]; that is, one pair is epistemically related to another iff they are related componentwise. This is analogous to the notion of synchronous composition in process algebra [18]. However, our relations →a are epistemic, whereas the relations in process algebra are temporal.\nThe behavior of our temporal relation ❀ after the update product M 7→ M [U ] is analogous to the notion of asynchronous composition from process algebra [1]: one component of the pair makes the transition while the other component remains fixed. However, in our case, if (v′, t′) ❀M [U ] (v, t), then the component it is that makes the transition depends on whether t is a past state. If t is indeed a past state, then the first component makes the transition (v′ ❀ v) and the second component remains fixed (t′ = t). Otherwise, if t is not a past state, then it is instead the first component that remains fixed (v′ = v) and the second component that makes the transition (t′ ❀ t).\nDefinition 2.6 (Epistemic Past State). Let U be an action model. An epistemic past state is a past state s in U whose precondition is a validity (i.e., |= preU(s)) and whose only epistemic arrows are the reflexive arrows s →Ua s for each agent a ∈ A .\nLike a past state (Definition 2.4), an epistemic past state s0 in a history s0 ❀ · · · ❀ sn plays the special role of copying the initial state of affairs before the remaining events in the history take place. However, there is a key difference: a past state may copy only part of the initial state of affairs, whereas an epistemic past state will always make a complete copy. A later result (Theorem 5.1) will explain this further. Therefore, a history s0 ❀ · · · ❀ sn beginning with an epistemic past state s0 may be thought of as describing the following construction: the epistemic past state s0 makes a complete copy of the initial state of affairs (thereby remembering the “past” just as it was) and then the remaining events s1, . . . , sn transform this copy (appending “future” states of affairs one by one). A series of examples in Section 3 will explain this in further detail.\nIn a significant departure from the temporal logic literature, our language does not include a future operator [T ] (for “tomorrow”) that acts as a converse of our yesterday operator [Y ]:\nM,w |= [T ]ϕ means M, v |= ϕ for each v ❀M w. (1)\nThe reason we omit the temporal operator [T ] is that the update modal [U, s] already functions as a forward-looking temporal operator of a different sort. Such operators [U, s] are parametrized future operators. A common approach (see [2]) to relating parametrized and unparametrized operators is to have the unparametrized operator quantify over the parametrized operators. A tomorrow operator defined that way would be significantly different from [T ] as defined in (1). Furthermore, having the [T ] as well as the update operators [U, s] results in unintuitive updates, which will be explained from various perspectives over the course of the paper. For now, it suffices to say that our framework has a static past (via the operator [Y ]) and a dynamic future (via the Kripke model-changing operators [U, s]). To help make sense of these notions of “past” and “future,” we will impose in all concrete examples a number of restrictions on Kripke models and on action models that allow us to provide a coherent and meaningful account of time and of the flow of time within the setting of our framework. Many of the restrictions on Kripke models can be found elsewhere in the literature of DEL and ETL [14, 15, 7, 13, 12, 19]; however, the identification of relevant action model-specific restrictions and the use of Kripke model restrictions in action models having ❀ arrows is, to the best of our knowledge, new (though it builds off the authors’ early work in [11]).\nDefinition 2.7. The following properties may apply to Kripke models or to (pointed) action models.\n• Persistence of Facts (for Kripke models only): w ❀ w′ ⇒ (w ∈ V (p) ⇔ w′ ∈ V (p)) for all w and w′.\nThis says that propositional letters retain their values across temporal ❀ arrows.\n• Depth-Definedness : d(w) 6= ∞ for all w.\nThis says that every world/event has a finite depth.\n• Knowledge of the Past : (w′ ❀ w →a v) ⇒ ∃v ′(v′ ❀ v) for all a ∈ A , w′, w, and v.\nThis says that agents know if there is a past (i.e., a state reachable via a backward step along a ❀ arrow).\n• Knowledge of the Initial Time: w →a v∧¬∃w ′(w′ ❀ w) ⇒ ¬∃v′(v′ ❀ v) for all a ∈ A ,\nw, and v.\nThis says that agents know if there is no past.\n• Uniqueness of the Past : (w′ ❀ w ∧ w′′ ❀ w) ⇒ (w′ = w′′) for all w′, w, and w′′.\nThis says that there is only one possible past.\n• Perfect Recall : (w ❀ v →a v ′) ⇒ ∃w′(w →a w ′ ❀ v′) for all a ∈ A , w, v, and v′.\nThis says that agents do not forget what they knew in the past.\n• Synchronicity : The structure is depth-defined and w →a w ′ implies d(w) = d(w′) for\nall a ∈ A , w, and w′.\nThis says that there is no uncertainty, disagreement, or mistakenness among the agents with regard to the depth of a world/event.\n• History Preservation (for action models U only): s′ ❀U s implies |= preU(s) → preU(s′) for all s′ and s; further, every past state in U is an epistemic past state.\nThis says that a non-initial event s can take place only if its predecessor s′ can as well, and initial events can always take place (Definition 2.6).\n• Past Preservation (for pointed action models (U, s) only): The action model U is history preserving; further, every progression sn ❀\nU · · · ❀U s0 = s that ends at s can be past-extended to a history\nsn+m ❀ U · · · ❀U sn+1 ❀ U sn ❀ U · · · ❀U s0 = s\nthat begins at an epistemic past state sn+m. To say an event t ∈ W U is past preserving means the action (U, t) with point t is past preserving.\nThis says that there is a “link to the past” (i.e., an epistemic past state) via a sequence of ❀arrows. (The forthcoming Theorem 5.1 describes the consequences of this property.)\n• Time-advancing (for pointed action models (U, s) only): The action (U, s) is past preserving and the point s is not a past state.\nThis says that the “past” is at least one time-step away.\nFor the moment, we do not require that our Kripke models or action models satisfy any of the above properties. This will change in Section 5, where we study the preservation of Kripke model properties under action models satisfying appropriate properties, and in Section 6, where we impose a number of these properties in order to study connections\nbetween our framework and other approaches to the study of time in Dynamic Epistemic Logic.\nA note on the depth of worlds (Definition 2.2) in the updated model M [U ]: if world w and state t both have finite depth, then the maximum depth of the resulting world (w, t) ∈ WM [U ] is d(w)+d(t). The reason: we can take at most d(t) backward steps in the second coordinate (fix the first coordinate and proceed backward in the second until a past state is reached), and we can take at most d(w) backward steps in the first coordinate (fix the second coordinate and proceed backward in the first until an initial world is reached). The actual depth of (w, t) need not obtain its maximum: when stepping backward in either coordinate (with the other fixed), we may reach a pair (w′, s′) whose world w′ violates the precondition of the state s′ (i.e., M,w′ 6|= preU(s′)) and therefore the pair (w′, s′) will not be a member of WM [U ]. However, if the action model U is history preserving, then this problem is avoided and hence d(w, t) = d(w) + d(t).\nFinally, we note that we can express finite depth explicitly in our language.\nTheorem 2.8. For each non-negative integer n, define the formulas\nDn def = 〈Y 〉n[Y ]⊥ ∧ [Y ]n+1⊥ and D′n def = 〈Y 〉n[Y ]⊥ .\nWe have M,w |= Dn if and only if d(w) = n. Further, if M satisfies uniqueness of the past, then we have M,w |= D′n if and only if d(w) = n.\nIn the next section, we will discuss how the depth of a world w can be used as an explicit measure of the time at world w. If one adopts this measure of time, then it follows from Theorem 2.8 that we can express the time of a world within our language LDETL: we say that “the time at world w is n” to mean that w satisfies Dn."
    }, {
      "heading" : "3 Examples",
      "text" : "In this section, we will illustrate several features of our system. This will demonstrate the way in which our system can represent interesting epistemic situations as well as shed some light on the ways in which time is treated in dynamic systems. First, we will define explicit and implicit measures of time. An explicit measure of time is one in which the time of a world w in model M can be determined solely by inspection of M . As we have seen, the depth of a world in a Kripke model (see Definition 2.2) can provide an explicit measure of the time at that world, and this can be expressed explicitly in our language (Theorem 2.8). In contrast, an implicit measure of time is one in which the time of a world w in model M cannot be determined solely be inspection of M . For example, if we measure the time at a world in M by the number of updates that have led up to M , this can provide an implicit measure of the time at that world. These are not the only possible implicit and explicit measures, but they are certainly natural ones within our DETL framework.\nNow we will consider ways in which explicit and implicit representations of time might differ. More specifically, we will consider cases in which there is only a single update (implicitly increasing the time by 1) but at which the explicit time at the actual world changes by a number other than 1. Second, we will add in the epistemic aspect, by demonstrating\nthe ways in which agents can hold differing beliefs about temporal and epistemic features of their situation.\nIn all of these cases, we will begin with a basic Kripke model (M,w) pictured in Figure 1 in which agents a and b are uncertain of the truth values of p and q. The double outline around world w indicates that w is the “actual world” (i.e., that w is the point) and hence that p and q are actually true. Throughout this section, we will assume that our epistemic accessibility relations →a and →b are S5 (i.e., that they are closed under reflexivity, transitivity, and symmetry); however, for the sake of readability, we will not draw all transitive arrows."
    }, {
      "heading" : "3.1 Explicit and Implicit Representations of Time",
      "text" : "We now discuss three examples related to discrepancies between the number of updates that have occurred and the explicit time at a world as determined by its depth. First, we will see “standard” behavior, in which a single update increases the time of the actual world by 1.\nExample 3.1. The action (U2, s) (Figure 2) represents the public announcement of p. Applied to our initial situation (M,w) (Figure 1), the result is (M [U2], (w, s)).\nIn the situation (M,w) before the announcement, neither a nor b knew p; that is, M,w |= ¬✷ap∧¬✷bp. In the situation (M [U2], (w, s)) after the announcement, both know p; that is, M [U2], (w, s) |= ✷ap ∧ ✷bp . But note that in the “after” model M [U2], we have a “copy” of the original model M consisting of the worlds (u, t), (w, t), and (v, t) and the arrows interconnecting these worlds. As a result, we can describe the agents’ knowledge “before” and “after” all together in the resultant situation:\nM [U2], (w, s) |= (✷ap ∧ ✷bp) ∧ 〈Y 〉(¬✷ap ∧ ¬✷bp) .\nIn words, “a and b know p but yesterday they did not.” Further, we note that the (explicit) time at both the initial world w and its copy (w, t) is 0, and the time at the final world (w, s) is 1.\nThe language of ordinary DEL is the atemporal fragment of LDETL without the [Y ] modality. In this language, the only way to refer to the agents’ knowledge before the announcement is with reference to the original situation (M,w). This is because ordinary DEL lacks ❀ arrows, both in action models and in the underlying Kripke models.\nExample 3.1 showed “standard” temporal behavior: a single update increases the time of the actual world by 1. Two obvious ways in which updates could be “non-standard” are by not increasing the time when an update takes place or by increasing the time by a number greater than 1.\nExample 3.2. Here we consider the effect of the action (U3, t) (Figure 3) on our initial situation (M,w) (Figure 1). This action has a structure that is nearly identical to that of action (U2, s) in Example 3.1 (Figure 2); in fact, these actions are based on the same underlying action model (i.e., U2 = U3). However, the actual events of (U2, s) and (U3, t) are different. The result of the update with the latter action is the pointed model (M [U3], (w, t)). Note that the resultant actual world (w, t) is among the worlds (u, t), (w, t), and (v, t) that make up the “copy” of the initial model M .\nWe have designed our system so that the initial world w and its copy (w, t) satisfy the same formulas. In this way, we may identify each initial world with its copy, so that the collection of copied worlds (and the arrows interconnecting them) may be identified with the initial model itself. This allows us to reason about what was the case in the initial model by evaluating formulas only within the resultant model. In effect, we can “forget” the initial model because all of its information is copied over to the resultant model.\nTo make this work, both w and its copy (w, t) must satisfy the same formulas. We guarantee this by designing our system so that it ignores all “future” worlds, by which we mean the worlds accessible from the point only via a link x ❀ y from a “past” world x to a “future” world y.2 So from the point of view of our theory, the time-1 worlds (u, s) and (w, s) in Figure 3 are ignored in the resultant time-0 situation (M [U3], (w, t)) because the\n2Formally, a LDETL-formula ϕ is true at a world x if and only if ϕ is true at x even after we delete all worlds y satisfying the property that every path from x to y contains at least one ❀ arrow (followed in the “forward” direction z ❀ z′ from “past” z to “future” z′). This is so because LDETL has no [T ] operator, as defined in (1).\ntime-1 worlds can only be reached via a forward ❀ arrow. This leaves only the “copy” of the initial model M consisting of the worlds (u, t), (w, t), and (v, t). The resultant situation (M [U3], (w, t)) is therefore equivalent to the initial situation (M,w) from the point of view of our theory. In other words, the action (U3, t) does not change the state of affairs at all. 3\nRemark 3.3. The previous two examples illustrate some motivation behind our choice not to include a [T ] operator, as defined in (1). If our language had included such an operator, two worlds that are intended to represent the exact same state of affairs could disagree about the truth of formulas. In Example 3.2, a non-time-advancing update transforms (M,w) into (M [U3], (w, t)), but the worlds w and (w, t) are meant to represent the same situation and so should satisfy the same formulas. However, (M,w) and (M [U3], (w, t)) disagree on the truth of the formula 〈T 〉p. But as we have defined LDETL without the [T ]-operator, we can easily show that for any LDETL-formula ϕ, we have M,w |= ϕ iff M [U ], (w, t) |= ϕ because t is an epistemic past state (see Theorem 5.1). This avoids the problem illustrated here where two worlds that are supposed to represent the same situation disagree on the truth of formulas.\nExample 3.1 also illustrates the semantic difference between an action model operator [U, s] and the operator [T ]. The truth of [U, s]ϕ is determined by evaluating ϕ in a new model, while the truth of [T ]ϕ is determined by evaluating ϕ within the model as it currently stands. In considering our initial model (M,w) (Figure 1), note that M,w 6|= 〈T 〉p. However, as we can see, M,w |= 〈U2, s〉p. So while we informally read the formula 〈T 〉ϕ as claiming that ϕ will hold “tomorrow” (and that there is at least one possible “tomorrow” world), this is only from the perspective of a static model—it does not consider all possible ways in which\n3This is similar to the way in which the “do nothing” Propositional Dynamic Logic (PDL) program skip does not change the state of the system. However, there is a difference: the PDL program does not change the structure of the model, though the action (U3, t) does. Nevertheless, from the point of view of language equivalence, this change is inconsequential: the “before” situation and the “after” situation satisfy the same LDETL-formulas, and so our intention is that these situations are to be identified.\nthat model might evolve given different updates. The [U, s] and [T ] operators are not the only options for “tomorrow” operators. Section 2 mentions the way in which the update operators [U, s] serve as dynamic parametrized operators. And it is also possible to define dynamic unparametrized operators that work by quantifying over the parametrized ones, and these also are different from [T ] operators. Call our unparametrized operator [N ], and we can define: M,w |= [N ]ϕ if and only if M,w |= [U, s]ϕ for all action models (U, s) with only epistemic preconditions (this constraint is imposed on the action models, so as to ensure the well-foundedness of the semantics) [2]. Since all public announcement action models fall into this category, we have that M,w |= 〈N〉p (since M,w |= 〈U2, s〉p) and yet M,w 6|= 〈T 〉p.\nWe believe that these interpretive issues involving [T ] reflect its complex relationship with the update modalities. Indeed, [T ] may not even have a clear interpretation in the context of our framework, which is part of the rationale for leaving it out of our language. But such a situation is not unusual in the epistemic logic tradition. For instance, a common system for modeling agents’ beliefs is KD45, whose epistemic accessibility relation does not have to be symmetric. In such systems, it is not clear that the converse of the accessibility relation has a clear semantic interpretation, but this is not viewed as problematic. So for us, the relation\n❀is one example of many from modal logic of a relation that has a corresponding modality but whose converse does not. (Also, the semantic asymmetry of having a [Y ] operator but no corresponding [T ] operator is analogous to an asymmetry in ordinary DEL, which has [U, s] modalities but no converse [U, s]−1 modalities.) As a result, our system DETL is one that has a dynamic parametrized future (accessed via the update modals [U, s]) and a static unparametrized past (accessed via the yesterday modal [Y ]).\nExample 3.4. In this example, the time at the actual world increases by 2 even though only a single update (U4, r) (Figure 4) takes place. With simple modifications of (U4, r), we could increase the time by any finite number.\nThese three examples demonstrate the differences between explicit and implicit measures of time; in particular, the number of updates (the implicit time) need not equal the depth of the actual world (the explicit time). In this paper, we will adopt the convention that the time at the actual world is measured by its depth (explicit time). While this is by no means a necessary choice, it has the advantage of allowing us to determine the time at a world solely by inspection of the model to which it belongs."
    }, {
      "heading" : "3.2 Agents Mistaken About Time",
      "text" : "Given that we are measuring the time at a world by its depth, we can represent situations in which agents are unable to distinguish between worlds that have different times. These situations can be brought about by DETL actions, as the following example illustrates.\nExample 3.5. In this example, (U5, r) (Figure 5) represents the sequenced public announcement of p followed by the asynchronous semi-private announcement of q to agent b. This increases the time at the actual world by 2, as in Example 3.4. However, in the present example, agent a is uncertain whether the time has increased by 1 or by 2.\nWe contrast Example 3.5 with the following.\nExample 3.6. (U6, r) (Figure 6) couples a public announcement of p with the simultaneous semi-private announcement of q to agent b. When we compare this with Example 3.5 (pictured in Figure 5), we note that the agents’ respective knowledge gain is identical with respect to the propositional facts: a learns that p is true but not whether q is true, while b learns both p and q. However, in the current example (pictured in Figure 6), b learns p and q simultaneously instead of successively, and a’s knowledge differs accordingly.\nWe now compare the truth values of several propositions in M [U5] from Example 3.5 (Figure 5) and M [U6] from Example 3.6 (Figure 6). First, it should be clear from inspection that at both actual (i.e., double circled) worlds, agent a knows p is true but does not know whether q is true, while agent b knows both p and q. Agent a also considers b’s current epistemic state vis-à-vis p and q to be possible, as both worlds satisfy ♦a✷b(p∧q)∧✷b(p∧q); that is, agent a considers it possible that b knows p and q, and this possibility is in fact the correct one, since b does in fact does know p and q. However, note that M [U5], (w, r) |= ♦a[Y ]✷b(p∧ q) while M [U6], (w, r) 6|= ♦a[Y ]✷b(p∧ q). The formula ♦a[Y ]✷b(p∧ q) says that a considers it possible that b knew p and q “yesterday” (i.e., one step in the past). So despite the fact that agent a’s knowledge of b’s epistemic state vis-à-vis p and q is the same at the resultant situations (M [U5], (w, r)) and (M [U6], (w, r)), there is a key difference: agent a’s knowledge of how these epistemic states evolved over time is not the same. In the first case (M [U5], (w, r)), agent a thinks b may have learned p before learning q. However, in the second case (M [U6], (w, r)), though a still thinks b may have learned q, he believes that the only way this could have happened is that b learned both q and p simultaneously.\nAxiom Schemes"
    }, {
      "heading" : "4 Proof System and Completeness",
      "text" : "Definition 4.1. The axiomatic theory of Dynamic Epistemic Temporal Logic, DETL, is defined in Figure 7.\nMany axioms of DETL are the same as in Dynamic Epistemic Logic.4 In defining DETL, we have not imposed any of the properties from Definition 2.7 on action models, nor have we designed the axiomatics to be sound for Kripke models having properties from Definition 2.7 that one might expect. So DETL should be viewed as the minimal theory that brings update mechanisms to a basic Epistemic Temporal Logic. However, we will study the preservation of these properties in Section 5, and we study a DETL-based theory satisfying a number of these properties in Section 6.\nTheorem 4.2 (LDETL Reduction). For every LDETL-formula ϕ, there is an action model-free LSETL-formula ϕ ◦ such that DETL ⊢ ϕ ↔ ϕ◦.\nProof. The proof is a straightforward adaptation of the standard argument from Dynamic Epistemic Logic [17].\n4The primary difference is with those concerning the Y -modality. There are two cases: s is a past state, and s is not a past state. In both cases, U[Y ] is a simplification of U✷a, reflecting the involvement of asynchronous composition rather than synchronous (see the discussion after Definition 2.5). In U✷a, the conjunction reflects the transitions made in the action model, while the modality ✷a that follows reflects the transitions made in original model. Note that if s is a past state, then there is no s′ ❀U s, so we can remove the conjunction. If s not a past state, then it is the first coordinate rather than the second coordinate that must be fixed in a ❀ transition in the updated model. Hence we remove the modality [Y ] that would otherwise follow the conjunction.\nTheorem 4.3 (Soundness and Completeness). DETL ⊢ ϕ if and only if |= ϕ.\nProof. Soundness (⊢ ϕ implies |= ϕ) is by induction on the length of DETL-derivations. All cases except U[Y ] soundness are straightforward adaptations of the standard atemporal Dynamic Epistemic Logic arguments [17], so we shall only prove U [Y ] soundness here. Proceeding, we are to show that\n|= [U, s][Y ]ϕ ↔ ( preU(s) → [Y ][U, s]ϕ ) if s is a past state, and |= [U, s][Y ]ϕ ↔ ( preU(s) → ∧\ns′❀Us[U, s ′]ϕ\n)\nif s is not a past state.\nGiven (M,w), we assume that M,w |= preU(s), for otherwise the result follows immediately.\n• Case: s is a past state.\nAssume M,w |= [U, s][Y ]ϕ. By the definition of truth, M [U ], (w′, s) |= ϕ for each (w′, s) ❀M [U ] (w, s). Therefore, if v ❀M w satisfiesM, v |= preU(s), thenM [U ], (v, s) |= ϕ. Conclusion: M,w |= [Y ][U, s]ϕ.\nConversely, assume M,w |= [Y ][U, s]ϕ and (w′, s) ❀M [U ] (w, s). The second assumption implies both that w′ ❀M w—and hence M,w′ |= [U, s]ϕ by the first assumption— and that M,w′ |= preU(s). But then M [U ], (w′, s) |= ϕ. Conclusion: M,w |= [U, s][Y ]ϕ.\n• Case: s is not a past state.\nAssume M,w |= [U, s][Y ]ϕ. By the definition of truth, M [U ], (w, t) |= ϕ for each (w, t) ❀M [U ] (w, s). If s′ ❀U s satisfies M,w |= preU(s′), then (w, s′) ❀M [U ] (w, s) and hence M [U ], (w, s′) |= ϕ. Conclusion: M,w |= ∧\ns′❀Us[U, s ′]ϕ.\nConversely, assume M,w |= ∧ s′❀Us[U, s ′]ϕ and (w, t) ❀M [U ] (w, s). The second assumption implies both that t ❀U s—and henceM,w |= [U, t]ϕ by the first assumption— and that M,w |= preU(t). But then M [U ], (w, t) |= ϕ. Conclusion: M,w |= [U, s][Y ]ϕ.\nCompleteness (0 ϕ implies 6|= ϕ) follows by LDETL Reduction (Theorem 4.2), the standard normal modal logic canonical model argument for the action model-free sublanguage LSETL [6], and the combination of LDETL Reduction with soundness."
    }, {
      "heading" : "5 Preservation Results",
      "text" : "In this section, we study the preservation of properties of Kripke models defined previously in Definition 2.7. These properties have been of interest in the study of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19] and so it will be useful for our purposes to understand the conditions under which they are preserved within our DETL setting. Theorem 5.1 concerns the behavior of past states in action models, and Theorem 5.2 concerns the preservation of Kripke model properties.\nTheorem 5.1 (Past State). Let (U, s) be an action satisfying M,w |= preU(s).\n(a) If s is an epistemic past state, then (M [U ], (w, s)) and (M,w) satisfy the same LDETLformulas.\n(b) If (U, s) is past preserving, then there is a history\n(w, s0) ❀ M [U ] (w, s1) ❀ M [U ] · · · ❀M [U ] (w, sn) = (w, s)\nsuch that (M [U ], (w, s0)) and (M,w) satisfy the same LDETL-formulas.\nProof. (a) Since the language of LDETL does not include forward-looking tomorrow operators [T ], it follows by the standard argument in modal logic [6] that bisimilar worlds satisfy the same action model-free LDETL-formulas (i.e., the same LSETL-formulas).\n5 By LDETL Reduction (Theorem 4.2) and soundness (Theorem 4.3), bisimilar worlds also satisfy the same LDETLformulas. Finally, one can show that there is a bisimulation between (w, s) and w. The result follows.\n(b) Past preservation of (U, s) implies there exists a history s0 ❀ U · · · ❀U sn = s that\nbegins at an epistemic past state s0. The result therefore follows by part (a).\nTheorem 5.1(a) tells us that, from the point of view of the language, an epistemic past state essentially makes a copy of a given situation (M,w) within the context of the updated model M [U ]. Part 5.1(b) tells us that after the execution of a past preserving action (U, s), the copy of the initial situation resides at the beginning of a history\n(w, s0) ❀ M [U ] · · · ❀M [U ] (w, sn) = (w, s) (2)\nproduced by the stepwise occurrence of a past state s0 followed by events s1, . . . , sn = s. Past states in past preserving actions (U, s) therefore play the role of “maintaining a link to the past” in virtue of the fact that there is a temporal linkage (2) in the resultant model M [U ] leading back to the initial situation (as it exists in its copied form).\nTheorem 5.1 would fail if we were to include a tomorrow operator [T ] in our language.6 This not only violates the theorem but also our intuition about what it means for the occurrence of an action to increment the time. In particular, given that we identify the time of a world with its depth, a time-incrementing action must take an initial situation and successively add on additional layers of “future” worlds:\n(initial world) ❀ (+1 world) ❀ (+2 world) ❀ · · · ❀ (+n world) . (3)\nIn order for us to view this process as a progression that began with a particular situation (M,w), the leftmost world in the temporal sequence (3) should be identical to our initial situation (M,w) from the point of view of the language. Furthermore, we should be able to “trace backward in time” from the final resultant situation—made up of the rightmost world in the temporal sequence (3)—to our initial situation. And this is just what Theorem 5.1\n5In detail: a bisimulation is a nonempty binary relation B between the worlds of Kripke models M = (WM ,→M , ❀M , V M ) and M ′ = (WM ′ ,→M ′ , ❀M ′ , V M ′\n) with yesterday such that wBw′ implies w and w′ satisfy the same propositional letters; and, for each binary relation symbol R ∈ {→a | a ∈ A } ∪ { ❀} specified by the structures, wBw′ and wRMv implies there is a v′ ∈ WM ′ such that w′RM ′\nv′ and vBv′, and wBw′ and w′RM ′\nv′ implies there is a v ∈ WM such that wRMv and vBv′. Note that the definition of bisimulation only considers temporally reachable worlds “in the past” (i.e., in the direction from x to y in the arrow x ❀y).\n6For example, we have M,w 6|= 〈T 〉p (Figure 1) and yet M [U3], (w, t) |= 〈T 〉p (Figure 3).\nsays we can do. So since adding the [T ] operator would falsify the theorem and hence go against our intuition, we decided to leave this operator out.\nWe now examine the relationship between our conditions on action models (Definition 2.7) and the preservation of certain Kripke models properties (also Definition 2.7) under the update operation M 7→ M [U ].\nTheorem 5.2 (Preservation). Suppose M,w∗ |= preU(s∗) for some w∗ ∈ WM and s∗ ∈ WU .\n(a) If M satisfies persistence of facts, then so does M [U ].\n(b) If M and U are depth-defined, then so is M [U ].\n(c) If M and U satisfy knowledge of the past and U is history preserving, then M [U ] satisfies knowledge of the past.\n(d) If M satisfies knowledge of the initial time and U is history preserving, then M [U ] satisfies knowledge of the initial time.\n(e) If M and U satisfy uniqueness of the past, then so does M [U ].\n(f) IfM and U satisfy perfect recall and U is history preserving, thenM [U ] satisfies perfect recall.\n(g) If M and U are synchronous and U is history preserving, then M [U ] is synchronous.\nProof. We prove each item in turn.\n(a) If M satisfies persistence of facts, then so does M [U ]. Suppose that M satisfies persistence of facts and (w, s) ❀M [U ] (w′, s′). It follows that w = w′ or w ❀M w′. Now M satisfies persistence of facts, so w ∈ V M(p) iff w′ ∈ V M(p). Applying the fact that (v, t) ∈ V M [U ](p) iff v ∈ V M(p), we have (w, s) ∈ V M [U ](p) iff (w′, s′) ∈ V M [U ](p).\n(b) If M and U are depth-defined, then so is M [U ]. Assume that M and U are depthdefined. Notice that if\n∀(w, s) ∈ WM [U ] : d(w, s) ≤ d(w) + d(s) , (4)\nthen since we have d(w) < ∞ and d(s) < ∞ by the depth-definedness of M and U , it follows that M [U ] is depth-defined. It therefore suffices to prove (4) by induction on d(s).\n• Base case: d(s) = 0.\nIt follows that s is a past state. Therefore (w′, s′) ❀M [U ] (w, s) implies w′ ❀M w and s′ = s. We now prove (4) by a sub-induction on d(w). In the sub-induction base case, d(w) = 0 and therefore there is no w′ ❀M w, which implies there is no (w′, s) ❀M [U ] (w, s). But then d(w, s) = 0 = d(w) + d(s), which completes the subinduction base case. For the sub-induction step, we assume that (4) holds for all worlds v having 0 ≤ d(v) < d(w) (the “sub-induction hypothesis”) and we prove (4) holds for world w itself. If d(w, s) = 0, then (4) follows immediately because depths are nonnegative integers. So let us assume that d(w, s) > 0. Then we may choose an arbitrary\n(w′, s) ❀M [U ] (w, s), from which it follows that w′ ❀M w. Since M is depth-defined, d(w′) ≤ d(w)− 1 and so we may apply the sub-induction hypothesis:\nd(w′, s) ≤ d(w′) + d(s) ≤ d(w)− 1 + d(s) .\nHence\nd(w, s) = 1 + max{d(w′, s) | (w′, s) ❀M [U ] (w, s)}\n≤ 1 + max{d(w)− 1 + d(s) | (w′, s) ❀M [U ] (w, s)}\n= d(w) + d(s)\n• Induction step: we suppose (4) holds for all events t having 0 ≤ d(t) < d(s) (the “induction hypothesis”) and prove that (4) holds for event s itself.\ns is not a past state because d(s) > 0. Therefore (w′, s′) ❀M [U ] (w, s) implies w′ = w and s′ ❀U s. If d(w, s) = 0, then (4) follows immediately because depths are nonnegative integers. So let us assume d(w, s) > 0. Then we may choose an arbitrary (w, s′) ❀M [U ] (w, s), from which it follows that s′ ❀U s. Since U is depth-defined, we have d(s′) ≤ d(s)− 1 and so we may apply the induction hypothesis:\nd(w, s′) ≤ d(w) + d(s′) ≤ d(w) + d(s)− 1 .\nHence\nd(w, s) = 1 + max{d(w, s′) | (w, s′) ❀M [U ] (w, s)}\n≤ 1 + max{d(w) + d(s)− 1 | (w, s′) ❀M [U ] (w, s)}\n= d(w) + d(s)\n(c) If M and U satisfy knowledge of the past and U is history preserving, them M [U ] satisfies knowledge of the past. Suppose M and U satisfy knowledge of the past, U is history preserving, and\n(w′, s′) ❀M [U ] (w, s) →M [U ]a (v, t) .\nWe want to show that there exists (v′, t′) ❀M [U ] (v, t). Given (w, s) → M [U ] a (v, t), we have w →Ma v and s → U a t. Given (w ′, s′) ❀M [U ] (w, s), one of two cases obtains.\n• Case: w′ ❀M w and s′ = s is a past state.\nSince w′ ❀M w →Ma v and M satisfies knowledge of the past, there exists v ′ ❀ M v. Since U is history preserving and s is a past state, s is an epistemic past state. From this we obtain two things. First, (v′, s) ∈ WM [U ] because epistemic past states have valid preconditions. Second, applying the fact that s →Ua t, it follows that s = t because →a arrows leaving epistemic past states are all reflexive. Since v ′ ❀\nM v and s is a past state, we conclude that (v′, s) ❀M [U ] (v, s) = (v, t).\n• Case: w′ = w and s′ ❀U s.\nSince s′ ❀U s →Ua t and U satisfies knowledge of the past, there exists t ′ ❀ U t. Applying this to the assumption that U is history preserving and the fact that (v, t) ∈ WM [U ], it follows that (v, t′) ∈ WM [U ]. But then (v, t′) ❀M [U ] (v, t).\n(d) If M satisfies knowledge of the initial time and U is history preserving, then M [U ] satisfies knowledge of the initial time. Suppose M satisfies knowledge of the initial time, U is history preserving, (w, s) → M [U ] a (v, t), and d(w, s) = 0. We wish to show that d(v, t) = 0 as well. Toward a contradiction, assume d(v, t) 6= 0, which implies there exists (v′, t′) ❀M [U ] (v, t). It follows from (w, s) → M [U ] a (v, t) that w →Ma v and s → U a t. We consider two cases.\n• Case: s is not a past state.\nSince s is not a past state, there exists s′ ❀U s. Since U is history preserving and (w, s) ∈ WM [U ], it follows that (w, s′) ∈ WM [U ]. But then (w, s′) ❀M [U ] (w, s), which contradicts our assumption that d(w, s) = 0.\n• Case: s is a past state.\nSince U is history preserving and s is a past state, s is in fact an epistemic past state. Applying the fact that s →Ua t, it follows that s = t because →a arrows leaving epistemic past states are all reflexive. Since (v′, t′) ❀M [U ] (v, t) and t = s is a past state, it follows that t′ = t = s and v ❀M v′. Also, it follows from the fact that s is a past state and d(w, s) = 0 that we have d(w) = 0. Since M satisfies knowledge of the initial time, it follows from d(w) = 0 and w →Ma v that d(v) = 0, but this contradicts v ❀M v′.\nSince both cases lead to a contradiction, we conclude that d(v, t) = 0, as desired.\n(e) If M and U satisfy uniqueness of the past, then so does M [U ]. Suppose M and U satisfy uniqueness of the past and we have (v1, t1) ❀ M [U ] (w, s) and (v2, t2) ❀ M [U ] (w, s). We wish to show that (v1, t1) = (v2, t2). There are two cases to consider.\n• Case: s is a past state.\nSince s is a past state, if follows from (v1, t1) ❀ M [U ] (w, s) and (v2, t2) ❀ M [U ] (w, s) that we have s = t1 = t2, v1 ❀ M w, and v2 ❀ M w. Since M satisfies uniqueness of the past, it follows that v1 = v2. Hence (v1, t1) = (v2, t2).\n• Case: s is not a past state.\nSince s is not a past state, if follows from (v1, t1) ❀ M [U ] (w, s) and (v2, t2) ❀ M [U ] (w, s) that we have w = v1 = v2, t1 ❀ U s, and t2 ❀ U s. Since U satisfies uniqueness of the past, it follows that t1 = t2. Hence (v1, t1) = (v2, t2).\n(f) If M and U satisfy perfect recall and U is history preserving, then M [U ] satisfies perfect recall. Suppose M and U satisfy perfect recall, U is history preserving, and (w′, s′) ❀M [U ] (w, s) → M [U ] a (v, t). We wish to prove that there exists (v′, t′) ∈ WM [U ] such that (w′, s′) → M [U ] a (v′, t′) ❀M [U ] (v, t). Proceeding, it follows from (w, s) → M [U ] a (v, t) that w →Ma v and s → U a t. It follows from (w ′, s′) ❀M [U ] (w, s) that one of two cases obtains.\n• Case: w′ = w and s′ ❀U s.\nSince s′ ❀U s →Ua t and U satisfies perfect recall, there exists t ′ satisfying s′ →Ua t ′ ❀ U t. Since U is history preserving and (v, t) ∈ WM [U ], it follows that (v, t′) ∈ WM [U ]. But then (v, t′) ❀M [U ] (v, t). Since w →Ma v and s ′ →Ua t ′, we have (w′, s′) = (w, s′) → M [U ] a (v, t′).\n• Case: w′ ❀M w and s′ = s is a past state.\nSince w′ ❀M w →Ma v and M satisfies perfect recall, there exists v ′ satisfying w′ →Ma v′ ❀M v. Further, since s is a past state and U is history preserving, s is an epistemic past state. From this two things follow. First, (v′, s) ∈ WM [U ] because epistemic past states have valid preconditions. Second, applying the fact that s →Ua t, it follows that s = t because →a arrows leaving epistemic past states are all reflexive. Since v ′ ❀\nM v and s is a past state, we have (v′, s) ❀M [U ] (v, s) = (v, t). Further, since w′ →Ma v ′ and s →Ua t = s, we have (w ′, s′) = (w′, s) → M [U ] a (v′, s).\n(g) If M and U are synchronous and U is history preserving, then M [U ] is synchronous. Assume M and U are synchronous and U is history preserving. It follows by a previous item that M [U ] is depth-defined. So all that remains is to prove that (w, s) → M [U ] a (w′, s′) implies d(w, s) = d(w′, s′). To prove this, we for the moment assume the following:\n∀(v, t) ∈ WM [U ] : d(v, t) = d(v) + d(t) . (5)\nProceeding under this assumption, it follows from (w, s) → M [U ] a (w′, s′) that w →Ma w\n′ and s →Ua s\n′. Since M and U are synchronous, it follows that d(w) = d(w′) and d(s) = d(s′). But then\nd(w, s) = d(w) + d(s) = d(w′) + d(s′) = d(w′, s′)\nby (5), completing the argument. So all that remains is to prove (5). The proof proceeds by induction on d(t).\n• Base case: d(t) = 0.\nIt follows that t is a past state. Since U is history preserving, t is an epistemic past state. Therefore, u ∈ WM implies (u, t) ∈ WM [U ] because epistemic past states have valid preconditions, and hence u ❀M u′ implies (u, t) ❀M [U ] (u′, t). It follows by an easy sub-induction on d(v) that d(v, t) = d(v). Since d(t) = 0, this proves (5).\n• Induction step: assume the result holds for events s with d(s) < d(t) (the “induction hypothesis”) and prove the result holds for event t with d(t) > 0.\nSince d(t) > 0, there exists t′ ❀U t with d(t′) = d(t)−1. Since U is history preserving, we have |= preU(t) → preU(t′). But then it follows from (v, t) ∈ WM [U ] that (v, t′) ∈ WM [U ]. Since d(t′) < d(t), we may apply the induction hypothesis, from which it follows that\nd(v, t′) = d(v) + d(t′) = d(v) + d(t)− 1 .\nFurther, we note that from t′ ❀U t we obtain (v, t′) ❀M [U ] (v, t). Now take an arbitrary (u, s) ❀M [U ] (v, t). Since d(t) > 0, event t is not a past state and it therefore follows that u = v and s ❀U t. Hence d(s) ≤ d(t)− 1. Applying the induction hypothesis,\nd(u, s) = d(v, s) = d(v) + d(s) ≤ d(v) + d(t)− 1 .\nNote that this holds for all (u, s) ❀M [U ] (v, t). Finally, since\nd(v, t) = 1 + max{d(u, s) | (u, s) ❀M [U ] (v, t)} ,\nit follows by what we have shown above that\nd(v, t) = 1 + d(v, t′) = d(v) + d(t) ,\nwhich completes the proof.\nTheorem 5.2 describes conditions under which properties of epistemic temporal models are preserved under updates. We will use this theorem later to show that a well-studied atemporal Dynamic Epistemic Logic approach to reasoning about time is limited to the class of Kripke models that necessarily satisfy all of the properties we have defined. This highlights one of the key advantages of our DETL framework: it may be used to reason about situations that do or do not satisfy these (or other) properties. The choice is left to the user.\n6 Connections with Previous Work\n6.1 RDETL\nTheorem 5.2 studied the preservation of Kripke model properties under certain actions. We chose these properties because they have been of interest in many studies of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19]. We now focus our attention on the class of Kripke models that satisfy these properties. This provides a paradigmatic example demonstrating how our DETL framework can be used to reason about a well-studied account of time in Dynamic Epistemic Logic.\nDefinition 6.1 (Restricted (forest-like) models). A Kripke model M is restricted (or forestlike) if it satisfies persistence of facts, depth-definedness, knowledge of the past, knowledge of the initial time, uniqueness of the past, and perfect recall (Definition 2.7). Let R be the class of all the restricted Kripke models and R∗ the class of all pointed restricted Kripke models.\nThe restricted models satisfy all the constraints on Kripke models given in Definition 2.7. Although synchronicity was not explicitly named as one of the properties of a restricted model, it is not hard to show that synchronicity does follow from the other properties (argue by induction on the depth of worlds, making use of perfect recall, knowledge of the past, and knowledge of the initial time).\nWe now define a fragment of LDETL whose update modals preserve these restricted models.\nDefinition 6.2 (Language LRDETL). The language LRDETL of restricted DETL is the sublanguage of LDETL obtained by removing all actions [U, s] that are based on an action model U that fails to satisfy one or more of persistence of facts, depth-definedness, knowledge of the past, history preservation, knowledge of the initial time, uniqueness of the past, or perfect recall. This removal applies recursively to preconditions as well.\nThe restrictions on the action models in LRDETL are those that appear in the Preservation Theorem (Theorem 5.2). Hence updating a restricted model by an action model in A(LRDETL) yields another restricted model.\nDefinition 6.3 (RDETL Semantics). We write M,w |=RDETL ϕ to mean that (M,w) ∈ R∗ and M,w |= ϕ. We write |=RDETL ϕ to mean that M,w |= ϕ for every (M,w) ∈ R∗.\n6.1.1 Proof system for RDETL\nDefinition 6.4 (RDETL Theory). The axiomatic theory of Restricted Dynamic Epistemic Temporal Logic, RDETL, is defined in Figure 8. We write ⊢RDETL ϕ to mean that ϕ is a theorem of RDETL.\nTheorem 6.5 (Soundness and Completeness for RDETL). ⊢RDETL ϕ iff |=RDETL ϕ for each ϕ ∈ LRDETL.\nProof. Theorem 4.3 already establishes the soundness of the DETL schemes and rules. Soundness for the remaining schemes is straightforward to prove.\nThe completeness proof can be divided into two stages. First, prove the Reduction Theorem: every LRDETL-formula is RDETL-provably equivalent to an action model-free formula in LSETL. This follows by the proof of Theorem 4.2. Second, prove completeness of action model-free formulas with respect to the class of restricted Kripke models: 0RDETL ψ for a given ψ ∈ LSETL implies there is a restricted situation (M,w) for which M,w 6|= ψ. We outline a proof of the second stage.\nTo begin, fix ψ ∈ LSETL satisfying 0RDETL ψ. For each LSETL-formula χ, we define the [Y ]-nesting depth dY (χ) of χ by the following induction on the construction of χ:\ndY (⊥) def = 0\ndY (p) def = 0\ndY (¬ϕ) def = dY (ϕ)\ndY (ϕ ∧ ψ) def = max{dY (ϕ), dY (ψ)}\ndY (✷aϕ) def = dY (ϕ) dY ([Y ]ϕ) def = 1 + dY (ϕ)\nLet m def\n= dY (¬ψ) be the [Y ]-nesting depth of ¬ψ. We construct the canonical model Ω = (WΩ,→Ω, ❀Ω, V Ω) for the theory RDETL: the worlds in WΩ are the maximal RDETLconsistent sets of formulas, the binary relations are defined canonically (i.e., Γ →Ωa ∆ iff Γa def = {χ | ✷aχ ∈ Γ} ⊆ ∆ and Γ ❀ Ω ∆ iff ΓY def = {χ | [Y ]χ ∈ Γ} ⊆ ∆), and the valuation\nis defined canonically as well (i.e., V Ω(p) def = {Γ ∈ WΩ | p ∈ Γ}). The Truth Lemma (i.e., the statement that ϕ ∈ Γ iff Ω,Γ |= ϕ for each ϕ ∈ LSETL) is proved in the usual way, and hence we have Ω,Γ¬ψ 6|= ψ for a world Γ¬ψ ∈ W\nΩ obtained by a Lindenbaum construction as a maximal RDETL-consistent extension of the RDETL-consistent set {¬ψ}. However, we cannot guarantee that (Ω,Γ¬ψ) ∈ R∗. So to complete the argument, we perform a sequence of stepwise truth-preserving transformations on the canonical model in order to construct a pointed model (F,A) ∈ R∗ satisfying the property that F,A 6|= ψ.\nUnraveling: We define the Kripke model Ω×Z as the following unraveling of Ω in the temporal direction:\n• WΩ×Z def = WΩ × Z.\n• For each a ∈ A : (w, k) →Ω×Za (w ′, k′) if and only if w →Ωa w ′ and k = k′.\n• (w, k) ❀Ω×Z (w′, k′) if and only if w ❀Ω w′ and k′ = k − 1.\n• V Ω×Z(p) def = V Ω(p)× Z.\nBy induction on the construction of LSETL-formulas, we have Ω × Z, (w, k) |= ϕ if and only if Ω, w |= ϕ for each k ∈ Z and each ϕ ∈ LSETL.\nGenerated submodel: Let M be the model generated by the world (Γ¬ψ, m) in Ω×Z using the relations ❀Ω×Z and →Ω×Za for each a ∈ A :\n• WM def = {(w, k) ∈ Ω × Z | (Γ¬ψ, m)( ❀ Ω×Z ∪\n⋃\na∈A → Ω×Z a ) ∗(w, k)}, where R∗ denotes the reflexive-transitive closure of a binary relation R.\n• For each a ∈ A : →Ma def = →Ω×Za ∩ (W M ×WM).\n• ❀M def = ❀Ω×Z ∩ (WM ×WM).\n• V M(p) def = V Ω×Z(p) ∩WM .\nBy induction on the construction of LSETL-formulas, we have M, (w, k) |= ϕ if and only if Ω× Z, (w, k) |= ϕ for each (w, k) ∈ WM and ϕ ∈ LSETL.\nTrimming: For each LSETL-formula ϕ, we let Sub(ϕ) be the set of all subformulas of ϕ. If S and S ′ are sets of LSETL-formulas, we define the following sets of LSETL-formulas:\nSub(S) def = ⋃\nχ∈S Sub(χ)\n¬S def = {¬χ | χ ∈ S}\n✷S def = ⋃\na∈A {✷aχ | χ ∈ S}\n[Y ]S def = {[Y ]χ | χ ∈ S}\nS → S ′ def = {χ → χ′ | χ ∈ S ∧ χ′ ∈ S ′}\nS ↔ S ′ def = {χ ↔ χ′ | χ ∈ S ∧ χ′ ∈ S ′}\nFor each k ∈ N and LSETL-formula ϕ, we let Subk(ϕ) be the set of subformulas of ϕ with [Y ]-nesting depth at most k and we define the set of LSETL-formulas Clk(ϕ) by the following induction:\nCl0(ϕ) def = Sub0(ϕ) ∪ {⊥}\nClk+1(ϕ) def = Subk+1(ϕ) ∪\nSub([Y ]Clk(ϕ) ↔ (¬[Y ]Clk(ϕ) → Clk(ϕ))) ∪\nSub(¬[Y ]Clk(ϕ) → [Y ]¬Clk(ϕ)) ∪\nSub(¬[Y ]Clk(ϕ) → ✷¬[Y ]Clk(ϕ)) ∪\nSub([Y ]Clk(ϕ) → ✷[Y ]Clk(ϕ))\nObserve that Clk(ϕ) contains LSETL-formulas of [Y ]-nesting depth at most k. Note also that ⊥ ∈ Clk(ϕ) for each k. We define a Kripke model M ′ consisting of all worlds (w, k) ∈ WM satisfying 0 ≤ k ≤ m with all other components relativized to this set of worlds:\n• WM ′ def = {(w, k) ∈ WM | 0 ≤ k ≤ m}.\n• For each a ∈ A : →M ′\na\ndef = →Ma ∩ (W M ′ ×WM ′ ).\n• ❀M ′ def = ❀M ∩ (WM ′ ×WM ′ ).\n• V M ′ (p) def = V M(p) ∩WM ′ .\nBy an induction on k satisfying 0 ≤ k ≤ m with a subinduction on the construction of LSETL-formulas of [Y ]-nesting depth at most k, we can show that for each ϕ ∈ Clk(¬ψ) and (w, k) ∈ WM ′ , we have M ′, (w, k) |= ϕ if and only if M, (w, k) |= ϕ.\nFiltration: We define an equivalence relation ≡ on elements ofWM ′\nby setting (w, k) ≡ (w′, k′) if and only if k = k′ and for all ϕ ∈ Clk(¬ψ), we have that M\n′, (w, k) |= ϕ iff M ′, (w′, k′) |= ϕ. For a world (w, k) ∈ WM ′ , we write [w, k] to denote the equivalence class\n[w, k] def = {(w′, k′) ∈ WM ′ | (w′, k′) ≡ (w, k)}\nof (w, k) under ≡. We define a Kripke model F by the equivalence relation ≡ as follows:\n• W F def = {[w, k] | (w, k) ∈ WM ′ }.\n• For each a ∈ A : A →Fa B iff ∃(w, k) ∈ A and ∃(v, j) ∈ B with (w, k) → M ′ a (v, j).\n• A ❀F B iff ∃(w, k) ∈ A and ∃(v, j) ∈ B with (w, k) ❀M ′ (v, j).\n• V F (p) def = {A ∈ W F | p ∈ Clm(¬ψ) and ∀(w, k) ∈ A : M ′, (w, k) |= p}.\nBy induction on k satisfying 0 ≤ k ≤ m with a subinduction on the construction of LSETLformulas of [Y ]-nesting depth at most k, we can show that for each ϕ ∈ Clk(¬ψ) and [w, k] ∈ W F , we have F, [w, k] |= ϕ if and only if M ′, (w′, k′) |= ϕ for each (w′, k′) ∈ [w, k].\nTruth preservation: By what we have shown above, it follows that for each (w, k) ∈ WΩ × {0, . . . , m} and each ϕ ∈ Clk(¬ψ), we have Ω, w |= ϕ if and only if F, [w, k] |= ϕ. In particular, we have F, [Γ¬ψ, m] 6|= ψ. So to complete the proof, it suffices for us to show that F ∈ R (i.e., F is a restricted model).\nF is a restricted model: Before we proceed, note that (x, k) →M ′ a (x ′, k′) implies\nk = k′ and that (x, k) ❀M ′ (x′, k′) implies k = k′ − 1. Thus if A →Fa B, then all pairs in A and B have the same second coordinate. Also, if A ❀F B, then all pairs in A have a second coordinate one less than the second coordinate of the pairs in B.\n• F satisfies uniqueness of the past:\n([w′, k′] ❀F [w, k] ∧ [w′′, k′′] ❀F [w, k]) ⇒ ([w′, k′] = [w′′, k′′]) .\nSuppose not. From [w′, k′] ❀F [w, k] and [w′′, k′′] ❀F [w, k], we have k′ = k′′ = k − 1. From [w′, k − 1] 6= [w′′, k − 1], it follows that there exists ϕ ∈ Clk−1(¬ψ) such that, without loss of generality, F, [w′, k − 1] |= ϕ and F, [w′′, k − 1] 6|= ϕ. Defining\nχ def = ¬[Y ]ϕ → [Y ]¬ϕ ,\nwe have χ ∈ Clk(¬ψ) and F, [w, k] 6|= χ and hence that Ω, w 6|= χ by Truth preservation. But then it follows by the Truth Lemma that the maximal consistent set w fails to contain an instance χ of the Uniqueness of the Past axiom, a contradiction.\n• F satisfies persistence of facts:\n[w, k] ❀F [v, j] ⇒ ([w, k] ∈ V F (p) ⇔ [v, j] ∈ V F (p)) .\nSuppose not. Then we have\n¬([w, k] ∈ V F (p) ⇔ [v, j] ∈ V F (p)) . (6)\nLet χ def\n= [Y ]p ↔ (¬[Y ]⊥ → p). Since F satisfies uniqueness of the past, it follows from (6) that F, [v, j] 6|= χ. Since [w, k] ❀F [v, j], we have j ≥ 1. Further, it follows by (6) that [w, k] ∈ V F (p) or [v, j] ∈ V F (p). Applying the definition of V F (p), we have that p ∈ Clm(¬ψ) and therefore that p ∈ Cl0(¬ψ). So since j ≥ 1, we have χ ∈ Clj(¬ψ). But then it follows from F, [v, j] 6|= χ by Truth preservation that Ω, v 6|= χ. Applying the Truth Lemma, the maximal consistent set v fails to contain an instance χ of the Persistence of Facts axiom, a contradiction.\n• F is depth-defined: d([w, k]) 6= ∞.\nFor each [v, j] ∈ W F , we have 0 ≤ j ≤ m. Further, [w′, k′] ❀F [v′, j′] implies j′ = k′−1. It follows that d([w, k]) 6= ∞.\n• F satisfies knowledge of the past:\n([w′, k′] ❀F [w, k] →Fa [v, j]) ⇒ ∃[v ′, j′]([v′, j′] ❀F [v, j]) .\nSuppose not. Letting χ def\n= ¬[Y ]⊥ → ✷a¬[Y ]⊥, it follows that F, [w, k] 6|= χ. Further, from [w′, k′] ❀F [w, k], we have k ≥ 1 and therefore that χ ∈ Clk(¬ψ). But then it follows by Truth preservation that Ω, w 6|= χ. Applying the Truth Lemma, the maximal consistent set w fails to contain an instance χ of the Uniqueness of the Past axiom, a contradiction.\n• F satisfies knowledge of the initial time:\n[w, k] →Fa [v, j] ∧ ¬∃[w ′, k′]([w′, k′] ❀F [w, k]) ⇒ ¬∃[v′, j′]([v′, j′] ❀F [v, j]) .\nSuppose [w, k] →Fa [v, j] and ¬∃[w ′, k′]([w′, k′] ❀F [w, k]). If k = 0, then it follows by [w, k] →Fa [v, j] that j = 0 and therefore that ¬∃[v ′, j′]([v′, j′] ❀F [v, j]) by Trimming. So let us assume that k > 0. Further, toward a contradiction, we assume that ∃[v′, j′]([v′, j′] ❀F [v, j]). Letting χ def\n= [Y ]⊥ → ✷a[Y ]⊥, it follows that F, [w, k] 6|= χ. But since k > 0, we have χ ∈ Clk(¬ψ) and hence it follows by Truth preservation that Ω, w 6|= χ. Applying the Truth Lemma, the maximal consistent set w fails to contain an instance χ of the Knowledge of the Initial Time axiom, a contradiction.\n• F satisfies perfect recall:\n([w, k] ❀F [v, j] →F a [v′, j′]) ⇒ ∃[w′, k′]([w, k] →F a [w′, k′] ❀F [v′, j′]) .\nSuppose [w, k] ❀F [v, j] →Fa [v ′, j′]. Then k + 1 = j = j′. Now [v, k + 1] = [v, j] →Fa [v′, j′] = [v′, k + 1] implies ∃(v∗, k + 1) ∈ [v, k + 1] and ∃(v ′ ∗ , k + 1) ∈ [v′, k + 1] with (v∗, k+1) → M ′ a (v ′ ∗ , k+ 1). Hence v∗ → Ω a v ′ ∗ . Now from [w, k] ❀F [v, j] = [v, k+1], we have that F, [v, k+1] |= ¬[Y ]⊥. Since k+1 ≥ 1, it follows that ¬[Y ]⊥ ∈ Clk+1(¬ψ) and therefore we have by Truth preservation that Ω, v∗ |= ¬[Y ]⊥. By the definition of truth, it follows that there is a w∗ ∈ W Ω with w∗ ❀ Ω v∗. But then [w∗, k] ❀\nF [v, j] = [v, k + 1], from which it follows by uniqueness of the past for F that [w∗, k] = [w, k] and therefore that (w∗, k) ∈ [w, k]. Now Ω satisfies perfect recall (for if it did not, we could find a violation of an instance of the Perfect Recall axiom at a maximal consistent set, a contradiction). Therefore, since we have w∗ ❀ Ω v∗ → Ω a v ′ ∗ , it follows by perfect recall for Ω that there is a w′ ∗ ∈ WΩ satisfying w∗ → Ω a w ′ ∗ ❀ Ω v′ ∗ . But then [w, k] = [w∗, k] → Ω a [w ′ ∗ , k] ❀Ω [v′ ∗ , k + 1] = [v′, k + 1] = [v′, j].\n6.2 YDEL\nIn this section, we relate DETL to a more conservative approach to adding time to DEL, which, as is generally studied in the literature [3, 4, 5, 16, 17], does not use ❀ arrows in its action models. Further, the semantics of DEL does not use Kripke models with designated time-keeping arrows ❀. In order to draw this comparison, we will define an extension of DEL called “Yesterday Dynamic Epistemic Logic,” or YDEL (see [12, 13, 19]), that records a history of the updates made. We will then show that YDEL reasoning can be done within the DETL setting, since (modulo translation) YDEL is sound and complete with respect to a particular class of DETL models.\nDefinition 6.6. LYDEL is the atemporal fragment of LDETL. For reasons explained in a moment, we assume that the special symbol ♭ is used neither as a world nor as an event in LYDEL.\nWe will evaluate YDEL formulas on restricted Kripke models (Definition 6.1).\nDefinition 6.7 (YDEL Semantics). We define a relation |=YDEL between pointed models in R∗ and LYDEL-formulas using standard Boolean cases and the following modal cases.\nM,w |=YDEL ✷aϕ iff M, v |=YDEL ϕ for each v ← M a w M,w |=YDEL [Y ]ϕ iff M, v |=YDEL ϕ for each v ❀ M w M,w |=YDEL [U, s]ϕ iff M,w |=YDEL pre U(s) implies M ⊕ U, (w, s) |=YDEL ϕ\nwhere WM⊕U def = (WM × {♭}) ∪\n{(v, t) ∈ WM ×WU | M, v |=YDEL pre U(t)}\n(v, t) →M⊕Ua (v ′, t′) iff ((t, t′ 6= ♭) & v →Ma v ′ & t →Ua t ′) or\n((t = t′ = ♭) & v →Ma v ′)\n(v, t) ❀M⊕U (v′, t′) iff (t = ♭ & t′ 6= ♭ & v = v′) or\n((t = t′ = ♭) & v ❀M v′)\n(v, t) ∈ V M⊕U(p) iff v ∈ V M(p)\nThe forthcoming Corollary 6.13 shows that M ⊕ U ∈ R whenever M ∈ R and U is atemporal. The function of the symbol ♭ is to serve as an epistemic past state, preserving a copy of M in M⊕U (Lemma 6.8). Since YDEL uses atemporal action models, which contain no ❀ arrows, the mechanism for preserving the previous model M is “hardcoded” in the semantics. However, by defining a translation from LYDEL to LDETL (Definition 6.10), we will be able to show that “atemporal” YDEL reasoning can be captured in DETL.\nLemma 6.8. Let (M,w) be a situation and (U, s) be an atemporal action satisfying M,w |= preU(s). The function f : WM → WM⊕U defined by f(w) def = (w, ♭) is a bisimulation.\nProof. w and (w, ♭) have the same valuation. If f(w) = (w, ♭) →M⊕Ua (v, t), then t = ♭ and w →Ma v. If w → M a v, then (w, ♭) → M⊕U a (v, ♭).\nBefore defining the translation from YDEL to DETL, we will first show how YDEL works by illustrating the way in which M ⊕ U is constructed.\nExample 6.9. Figure 9 pictures an initial situation and a YDEL action. In the initial situation, neither agent knows whether p is true. The action informs a that p is true but tells b only that a was either informed of p or provided with trivial information. After applying the action to the situation, we obtain the resultant situation in Figure 10.\nWe now show how YDEL reasoning is captured in DETL.\n6.2.1 Translation of LYDEL into LDETL\nWe define a translation from YDEL formulas and action models to DETL formulas and action models. This translation acts on action models by adding a new epistemic past state ♭ along with an arrow ♭ ❀ s to each action s. See Figure 11 for an example.\nDefinition 6.10 (♯ Translation). We define a function\n♯ : LYDEL ∪ A a(LYDEL) → LDETL ∪ A(LDETL)\nas follows: ⊥♯ = ⊥, p♯ = p, ♯ commutes with unary Boolean connectives and with non-[U, s] modal connectives, ♯ distributes over binary Boolean connectives, ([U, s]ϕ)♯ = [U ♯, s]ϕ♯, and\nU ♯ is defined by taking\nWU ♯ def = WU ∪ {♭} s →U ♯\na s ′ iff s →Ua s ′ or s = s′ = ♭\ns ❀U ♯ s′ iff s = ♭ and s′ ∈ WU preU ♯ (s) def = preU(s)♯ for s ∈ WU preU ♯ (♭) def = ⊤\nThe function ♯ transforms the atemporal action models used by YDEL into DETL action models having epistemic past states. As it turns out, such action models are in fact RDETL action models (Definition 6.2).\nLemma 6.11. If U is an atemporal action model, then U ♯ ∈ A(LRDETL).\nThe proof of this lemma is straightforward. It follows that the image of ♯ is contained in LRDETL ∪ A(LRDETL). This containment is strict: every history in U\n♯ has length 1, while the length of histories in RDETL action models is unbounded.\nThe situation (M ⊕U, (w, s)) from Figure 10 was produced by applying the YDEL action (U, s) to the initial situation (M,w), both from Figure 9. It is not difficult to verify that we obtain the same final situation by applying the RDETL action (U ♯, s); that is,\n(M ⊕ U, (w, s)) = (M [U ♯], (w, s)) .\nThe following theorem shows that this result holds in general.\nTheorem 6.12. For each (M,w) ∈ R∗, each ϕ ∈ LYDEL, and each U ∈ A a(LYDEL):\n(a) M ⊕ U = M [U ♯], and\n(b) M,w |=YDEL ϕ iff M,w |=RDETL ϕ ♯.\nProof. Set L0 def = LSETL. Once Li is defined, define the language Li+1 and the set A a ∗ (Li+1) of pointed atemporal action models over Li+1 by the following grammar:\nϕ ::= ψ | ¬ϕ | ϕ ∧ ϕ | ✷aϕ | [Y ]ϕ | [U, s]ϕ ψ ∈ Li, a ∈ A , (U, s) ∈ Aa∗(Li)\nNote that the preconditions of any U ∈ Aa(Li+1) all come from Li. Further, LYDEL = ⋃\ni∈N Li. We prove by induction on i that we have Si, which we define as the conjunction of the following two statements:\n1. For each M ∈ R and each U ∈ Aa(Li): M ⊕ U = M [U ♯].\n2. For each (M,w) ∈ R∗ and each ϕ ∈ Li:\nM,w |=YDEL ϕ iff M,w |=RDETL ϕ ♯ .\nThe base case i = 0 is immediate. For the induction step, we assume that Si holds (the “induction hypothesis”) and prove that Si+1 holds. We begin with Statement 1. We must show that WM⊕U = WM [U ♯], that →M⊕Ua = → M [U♯] a , that ❀M⊕U = ❀M [U\n♯], and that V M⊕U = V M [U ♯]. Proceeding, we have\nWM⊕U = (WM × {♭}) ∪ {(v, t) ∈ WM ×WU | M, v |=YDEL pre U(t)}\n= (WM × {♭}) ∪ {(v, t) ∈ WM ×WU | M, v |=RDETL pre U(t)♯} = {(v, t) ∈ WM ×WU ♯ | M, v |=RDETL pre U(t)♯} = {(v, t) ∈ WM ×WU ♯ | M, v |=RDETL pre U♯(t)} = WU ♯\nThe first equality follows by definition of WM⊕U . The second follows by the induction hypothesis. The third follows by the definition of U ♯; in particular, ♭ ∈ WU ♯\nhas precondition ⊤. The fourth equality follows by the definition of U ♯. The fifth equality follows by the definition of WM [U\n♯]. Next, we have (v, t) →M⊕Ua (v ′, t′) by definition if and only if v →Ma v ′ and either\n• t, t′ 6= ♭ and t →Ua t ′; or\n• t = t′ = ♭.\nFurther, we have (v, t) → M [U♯] a (v′, t′) by definition if and only if v →Ma v ′ and t →U ♯ a t ′. Thus “(v, t) →M [U ♯]\na (v′, t′) if and only if (v, t) →M⊕Ua (v ′, t′)” (which we aim to show) is\nequivalent to “t →U ♯ a t ′ if and only if t = t′ = ♭ or both t, t′ 6= ♭ and t →Ua t\n′.” But this follows because ♭ /∈ WU by assumption (Definition 6.6) and we have t →U ♯\na t ′ if and only if\nt →Ua t ′ or t = t′ = ♭ (Definition 6.10). Conclusion: →M⊕Ua = → M [U♯] a .\nNext, we have (v, t) ❀M⊕U (v′, t′) by definition if and only if\n• t = ♭, t′ 6= ♭, and v = v′; or\n• t = t′ = ♭ and v ❀M v′.\nFurther, we have (v, t) ❀M [U ♯] (v′, t′) by definition if and only if\n• v ❀M v′, t = t′, and t is a past state; or\n• v = v′ and t ❀U ♯ t′.\nIn the action model U ♯, event ♭ is the unique past state, the only event with an outgoing ❀ arrow, and has an outgoing ❀ arrow to every other event. It follows that we have (v, t) ❀M [U\n♯] (v′, t′) if and only if “v ❀M v′ and t = t′ = ♭” or “v = v′, t = ♭, and t′ 6= ♭.” But this is equivalent to the conditions defining (v, t) ❀M⊕U (v′, t′). Conclusion:\n❀ M⊕U = ❀M [U ♯]. Finally, we have (v, t) ∈ V M⊕U(p) if and only if v ∈ V M(p) if and only if (v, t) ∈ V M [U\n♯](p). Here we made tacit use of the fact that WM⊕U = WM [U ♯]. Conclusion: V M⊕U = V M [U ♯].\nThis completes the proof of Statement 1. The proof of Statement 2 then proceeds by a sub-induction on the construction of Li+1-formulas. Most cases are obvious, so we only address the case for Li+1-formulas [U, s]ϕ. Proceeding, we have M,w |=YDEL [U, s]ϕ if and only if M,w 6|=YDEL pre\nU(s) or M ⊕ U, (w, s) |=YDEL ϕ. By Statement 2 of the induction hypothesis, the latter is equivalent to “M,w 6|=RDETL pre U(s)♯ or M ⊕ U, (w, s) |=RDETL ϕ ♯,” which is itself equivalent to “M,w 6|=RDETL pre U♯(s) or M [U ♯], (w, s) |=RDETL ϕ\n♯” (by the definition of U ♯ for the left disjunct and Statement 1 of the induction hypothesis for the right). But this is equivalent to M,w |=RDETL [U\n♯, s]ϕ♯ by the RDETL semantics. Since [U ♯, s]ϕ♯ = ([U, s]ϕ)♯, the result follows.\nA corollary of Theorem 6.12 is that restricted models are closed under the YDEL update operation M 7→ M ⊕ U .\nCorollary 6.13. If M ∈ R, U ∈ A(LYDEL), and W M⊕U 6= ∅, then M ⊕ U ∈ R.\nProof. Fix M ∈ R and U ∈ A(LYDEL) with W M⊕U 6= ∅. Since U ∈ A(LYDEL) if and only if U is atemporal (Definition 6.6), it follows by Lemma 6.11 that U ♯ ∈ A(LRDETL). Applying Preservation (Theorem 5.2) and the definition of LRDETL (Definition 6.2), we haveM [U\n♯] ∈ R. By Theorem 6.12, M ⊕ U = M [U ♯] ∈ R.\n6.2.2 Connecting the theories of YDEL and RDETL\nDefinition 6.14. The theory YDEL is defined in Figure 12. Note that all axioms and rules refer to formulas in LYDEL and hence to action models in A(LYDEL).\nTheorem 6.15. The theory of YDEL is sound and complete with respect to R∗.\nProof. Soundness for most of the axioms is straightforward. As such, we will only go through the proofs for the [Y ]-reduction axiom and (UN).\n• Soundness for [U, s][Y ]ϕ ↔ (preU(s) → ϕ).\nWe first prove the left-to-right direction of the equivalence. Suppose M,w |= [U, s][Y ]ϕ and M,w |= preU(s). This implies that for every (v, t) ❀M⊕U (w, s), we have M ⊕\nBasic Schemes\nClassical Logic: Schemes for Classical Propositional Logic\nNormality for ✷a: ✷a(ϕ → ψ) → (✷aϕ → ✷aψ)\nNormality for Y : [Y ](ϕ → ψ) → ([Y ]ϕ → [Y ]ψ)\nPersistence of Facts: [Y ]p ↔ (¬[Y ]⊥ → p)\nUniqueness of the Past: ¬[Y ]ϕ → [Y ]¬ϕ\nPerfect Recall: [Y ]✷aϕ → ✷a[Y ]ϕ\nKnowledge of the Past: ¬[Y ]⊥ → ✷a¬[Y ]⊥\nKnowledge of the Initial Time: [Y ]⊥ → ✷a[Y ]⊥\nReduction Axioms: [U, s]q ↔ ( preU(s) → q ) for q ∈ P\n[U, s](ϕ ∧ ψ) ↔ ( [U, s]ϕ ∧ [U, s]ψ ) [U, s]¬ϕ ↔ ( preU(s) → ¬[U, s]ϕ ) [U, s]✷aϕ ↔ ( preU(s) → ∧\ns′←Ua s ✷a[U, s\n′]ϕ )\n[U, s][Y ]ϕ ↔ (preU(s) → ϕ)\nRules\nU, (v, t) |= ϕ. By definition of M ⊕ U , we have (w, ♭) ❀M⊕U (w, s), and so M ⊕ U(w, ♭) |= ϕ. By Lemma 6.8, M,w |= ϕ.\nNow we prove the right-to-left direction. Suppose M,w |= preU(s) and M,w |= ϕ (the case where M,w 6|= preU(s) is immediate). By definition of M ⊕ U and uniqueness of the past, (w, t) ❀M⊕U (w, s) implies t = ♭. By the fact that M,w |= ϕ and Lemma 6.8, we have M ⊕ U, (w, ♭) |= ϕ. Hence M,w |= [U, s][Y ]ϕ.\n• Soundness for (UN) follows from the fact that restricted models are closed under the operation M 7→ M ⊕ U (Corollary 6.13).\nCompleteness follows a similar argument as was used for RDETL (Theorem 6.5).\nCorollary 6.16. For each ϕ ∈ LDETL, we have:\n⊢YDEL ϕ iff ⊢RDETL ϕ ♯ .\nProof. By Theorems 6.15, 6.12, and 6.5."
    }, {
      "heading" : "7 Conclusion",
      "text" : "We have presented Dynamic Epistemic Temporal Logic (DETL), a general framework for reasoning about transformations on Kripke models with a designated timekeeping relation\n❀. Our “temporal” action models are a generalization of the atemporal action models familiar from Dynamic Epistemic Logic. We showed by way of a number of examples how temporal action models can be used to reason about and control the flow of time. We also highlighted some key design choices that allow this framework to avoid conceptual complications relating to time and that enable us to define actions that preserve a complete copy of the past state of affairs. This leads to one natural choice for understanding time: the time of a world is the depth of that world (i.e., the maximum number of “backward” temporal steps one can take from that world, whenever this maximum exists).\nKripke models with a designated timekeeping relation are essentially the models of Epistemic Temporal Logic. Therefore, one way of understanding our work is as follows: we extend the domain of action model operations from those on (atemporal) Kripke models to (what are essentially) the models of Epistemic Temporal Logic. We showed that a number of properties that may arise in the latter models—such as Persistence of Facts, Perfect Recall, and Synchronicity—are preserved under the application of temporal action models that themselves satisfy certain related properties. This makes it possible to use our DETL framework to develop Dynamic Epistemic Logic-style theories of temporal Kripke models. Such logics can be used to reason about objective changes in time along with the agents’ basic and higher-order knowledge and beliefs about changes in this structure. As an example, we showed how the DETL approach can be used to define the logic RDETL of “restricted” Dynamic Epistemic Temporal Logic, which is essentially the Dynamic Epistemic Logic of synchronous actions with the “yesterday” temporal operator [Y ]. We proved that RDETL reasoning captures the reasoning of YDEL, the first Dynamic Epistemic Logic of synchronous time with the yesterday modal.\nThe DETL approach is not, however, limited to synchronous systems. We presented one example where a synchronous model is transformed into an asynchronous one, leaving one agent sure that two clock ticks occurred, and the other uncertain as to whether it was one or two. We contrasted this with a synchronous variant in which the agents’ knowledge about atemporal information is the same, but the knowledge change is compressed into a single clock tick that is common knowledge. Here we see that the difference is easily discernable by a simple examination of the temporal action models involved. In essence, our theory extends the types of knowledge change describable by atemporal action models to the temporal setting, which gives us a great deal of control as to the relationship between how much time passes and what the agents perceive of this passage. And we of course also inherit many features (and drawbacks) of the atemporal action model approach.\nIn closing, we mention a recent study of time in Dynamic Epistemic Logic that looks at asynchronous systems [7]. The basic idea is that an atemporal action model operates on a temporal Kripke model in such a way that an agent experiences a single clock tick if her knowledge of atemporal information changes, but will otherwise be uncertain as to whether the clock ticked. So, for example, if agent a does not know p, a public announcement of p will transform her knowledge in a synchronous manner: the clock will tick once, she will learn p, and she will know that the clock ticked once. But if the public announcement of p\nthen occurs again, the clock will tick but, since she already knows p and hence her atemporal knowledge will not change, she will be uncertain as to whether the clock ticked once or not at all. The result is an asynchronous situation.\nThough we have shown (by way of an example) that DETL can reason about some asynchronous updates, we have not proved that it can reason about every such update. Nor have we shown that it can reason about a certain class of asynchronous updates that can be independently identified according to some desirable properties it satisfies. In particular, it is not clear if there is a DETL action model for all the updates that can be produced by the framework of [7]. Moreover, the latter approach is based on “protocols” constraining the sequences of actions that can occur, something we have left out of the present study for simplicity. Another complication is that the asynchronous updates of [7] essentially insert agent arrows →a based on whether a certain knowledge condition is satisfied, whereas our temporal action models do not allow us to conditionally insert arrows. This suggests that there may be connections with “arrow update logics” [8, 9] that allow such conditions on arrows. In particular, it has been shown that generalized arrow updates are equivalent to atemporal action models in terms of update expressivity [9]. Therefore, an arrow update version of DETL might suggest a natural way to represent asynchronous updates like those of [7], and this may turn out to be equivalent in update expressivity to our present approach, just as in the atemporal case. If this is so, then it may be the case that “conditional” arrow changes are already within the scope of our current approach, albeit indirectly.\nRegardless, we believe that DETL presents a viable option for developing Dynamic Epistemic Logic-style theories of Epistemic Temporal Logic. While this paper (and its early predecessor [11]) present the first steps of this study, there is clearly still much more work to be done."
    } ],
    "references" : [ {
      "title" : "Structural operational semantics",
      "author" : [ "Luca Aceto", "Wan Fokkink", "Chris Verhoef" ],
      "venue" : "In Handbook of Process Algebra,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2001
    }, {
      "title" : "Knowable’ as ‘known after an announcement",
      "author" : [ "Philippe Balbiani", "Alexandru Baltag", "Hans van Ditmarsch", "Andreas Herzig", "Tomohiro Hoshi", "Tiago de Lima" ],
      "venue" : "The Review of Symbolic Logic, 1(3):305–334,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2008
    }, {
      "title" : "The logic of public announcements, common knowledge, and private suspicions",
      "author" : [ "Alexandru Baltag", "Lawrence S. Moss", "S  lawomir Solecki" ],
      "venue" : "Proceedings of the 7th Conference on Theoretical Aspects of Rationality and Knowledge (TARK VII),",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 1998
    }, {
      "title" : "Epistemic logic and information update",
      "author" : [ "Alexandru Baltag", "Hans P. van Ditmarsch", "Lawrence S. Moss" ],
      "venue" : "Handbook on the Philosophy of Information,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2008
    }, {
      "title" : "Modal Logic",
      "author" : [ "Patrick Blackburn", "Maarten de Rijke", "Yde Venema" ],
      "venue" : null,
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2001
    }, {
      "title" : "The synchronicity of dynamic epistemic logic",
      "author" : [ "Cédric Dégremont", "Benedikt Löwe", "Andreas Witzel" ],
      "venue" : "Proceedings of the 13th Conference on Theoretical Aspects of Rationality and Knowledge (TARK XIII),",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2011
    }, {
      "title" : "Arrow update logic",
      "author" : [ "Barteld Kooi", "Bryan Renne" ],
      "venue" : "Review of Symbolic Logic,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2011
    }, {
      "title" : "Generalized arrow update logic",
      "author" : [ "Barteld Kooi", "Bryan Renne" ],
      "venue" : "Proceedings of the 13th Conference of Theoretical Aspects of Rationality and Knowledge (TARK XIII),",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2011
    }, {
      "title" : "A knowledge based semantics of messages",
      "author" : [ "Rohit Parikh", "Ramaswamy Ramanujam" ],
      "venue" : "Journal of Logic, Language, and Information,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2003
    }, {
      "title" : "Dynamic epistemic temporal logic",
      "author" : [ "Bryan Renne", "Joshua Sack", "Audrey Yap" ],
      "venue" : "Logic, Rationality, and Interaction, Second International Workshop,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2009
    }, {
      "title" : "Temporal languages for epistemic programs",
      "author" : [ "Joshua Sack" ],
      "venue" : "Journal of Logic, Language, and Information,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2008
    }, {
      "title" : "Logic for update products and steps into the past",
      "author" : [ "Joshua Sack" ],
      "venue" : "Annals of Pure and Applied Logic,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2010
    }, {
      "title" : "Merging frameworks for interaction",
      "author" : [ "Johan van Benthem", "Jelle Gerbrandy", "Tomohiro Hoshi", "Eric Pacuit" ],
      "venue" : "Journal of Philosophical Logic,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2009
    }, {
      "title" : "Merging frameworks for interaction: DEL and ETL",
      "author" : [ "Johan van Benthem", "Jelle Gerbrandy", "Eric Pacuit" ],
      "venue" : "In Proceedings of the 11th Conference on Theoretical Aspects of Rationality and Knowledge (TARK XI),",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2007
    }, {
      "title" : "Logics of communication and change",
      "author" : [ "Johan van Benthem", "Jan van Eijck", "Barteld Kooi" ],
      "venue" : "Information and Computation,",
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2006
    }, {
      "title" : "Dynamic Epistemic Logic",
      "author" : [ "Hans van Ditmarsch", "Wiebe van der Hoek", "Barteld Kooi" ],
      "venue" : "Synthese Library. Springer,",
      "citeRegEx" : "17",
      "shortCiteRegEx" : "17",
      "year" : 2007
    }, {
      "title" : "The linear time-branching time spectrum I - the semantics of concrete, sequential processes",
      "author" : [ "R.J. van Glabbeek" ],
      "venue" : "In Handbook of Process Algebra,",
      "citeRegEx" : "18",
      "shortCiteRegEx" : "18",
      "year" : 2001
    }, {
      "title" : "Dynamic epistemic logic and temporal modality",
      "author" : [ "Audrey Yap" ],
      "venue" : "Dynamic Formal Epistemology,",
      "citeRegEx" : "19",
      "shortCiteRegEx" : "19",
      "year" : 2011
    } ],
    "referenceMentions" : [ {
      "referenceID" : 8,
      "context" : "We will develop this framework by combining techniques from the traditions of Epistemic Temporal Logic (ETL) [10] and Dynamic Epistemic Logic (DEL) [3, 4, 5, 16, 17].",
      "startOffset" : 109,
      "endOffset" : 113
    }, {
      "referenceID" : 2,
      "context" : "We will develop this framework by combining techniques from the traditions of Epistemic Temporal Logic (ETL) [10] and Dynamic Epistemic Logic (DEL) [3, 4, 5, 16, 17].",
      "startOffset" : 148,
      "endOffset" : 165
    }, {
      "referenceID" : 3,
      "context" : "We will develop this framework by combining techniques from the traditions of Epistemic Temporal Logic (ETL) [10] and Dynamic Epistemic Logic (DEL) [3, 4, 5, 16, 17].",
      "startOffset" : 148,
      "endOffset" : 165
    }, {
      "referenceID" : 14,
      "context" : "We will develop this framework by combining techniques from the traditions of Epistemic Temporal Logic (ETL) [10] and Dynamic Epistemic Logic (DEL) [3, 4, 5, 16, 17].",
      "startOffset" : 148,
      "endOffset" : 165
    }, {
      "referenceID" : 15,
      "context" : "We will develop this framework by combining techniques from the traditions of Epistemic Temporal Logic (ETL) [10] and Dynamic Epistemic Logic (DEL) [3, 4, 5, 16, 17].",
      "startOffset" : 148,
      "endOffset" : 165
    }, {
      "referenceID" : 2,
      "context" : "Atemporal action models were developed by Baltag, Moss, and Solecki [3, 4] and have been adapted or extended in various ways in the Dynamic Epistemic Logic literature in order to reason about knowledge and belief change; see the textbook [17] for details and references.",
      "startOffset" : 68,
      "endOffset" : 74
    }, {
      "referenceID" : 15,
      "context" : "Atemporal action models were developed by Baltag, Moss, and Solecki [3, 4] and have been adapted or extended in various ways in the Dynamic Epistemic Logic literature in order to reason about knowledge and belief change; see the textbook [17] for details and references.",
      "startOffset" : 238,
      "endOffset" : 242
    }, {
      "referenceID" : 15,
      "context" : "After taking the update product M 7→ M [U ], the epistemic relation →a behaves as it does in DEL [17]; that is, one pair is epistemically related to another iff they are related componentwise.",
      "startOffset" : 97,
      "endOffset" : 101
    }, {
      "referenceID" : 16,
      "context" : "This is analogous to the notion of synchronous composition in process algebra [18].",
      "startOffset" : 78,
      "endOffset" : 82
    }, {
      "referenceID" : 0,
      "context" : "The behavior of our temporal relation ❀ after the update product M 7→ M [U ] is analogous to the notion of asynchronous composition from process algebra [1]: one component of the pair makes the transition while the other component remains fixed.",
      "startOffset" : 153,
      "endOffset" : 156
    }, {
      "referenceID" : 1,
      "context" : "A common approach (see [2]) to relating parametrized and unparametrized operators is to have the unparametrized operator quantify over the parametrized operators.",
      "startOffset" : 23,
      "endOffset" : 26
    }, {
      "referenceID" : 12,
      "context" : "Many of the restrictions on Kripke models can be found elsewhere in the literature of DEL and ETL [14, 15, 7, 13, 12, 19]; however, the identification of relevant action model-specific restrictions and the use of Kripke model restrictions in action models having ❀ arrows is, to the best of our knowledge, new (though it builds off the authors’ early work in [11]).",
      "startOffset" : 98,
      "endOffset" : 121
    }, {
      "referenceID" : 13,
      "context" : "Many of the restrictions on Kripke models can be found elsewhere in the literature of DEL and ETL [14, 15, 7, 13, 12, 19]; however, the identification of relevant action model-specific restrictions and the use of Kripke model restrictions in action models having ❀ arrows is, to the best of our knowledge, new (though it builds off the authors’ early work in [11]).",
      "startOffset" : 98,
      "endOffset" : 121
    }, {
      "referenceID" : 5,
      "context" : "Many of the restrictions on Kripke models can be found elsewhere in the literature of DEL and ETL [14, 15, 7, 13, 12, 19]; however, the identification of relevant action model-specific restrictions and the use of Kripke model restrictions in action models having ❀ arrows is, to the best of our knowledge, new (though it builds off the authors’ early work in [11]).",
      "startOffset" : 98,
      "endOffset" : 121
    }, {
      "referenceID" : 11,
      "context" : "Many of the restrictions on Kripke models can be found elsewhere in the literature of DEL and ETL [14, 15, 7, 13, 12, 19]; however, the identification of relevant action model-specific restrictions and the use of Kripke model restrictions in action models having ❀ arrows is, to the best of our knowledge, new (though it builds off the authors’ early work in [11]).",
      "startOffset" : 98,
      "endOffset" : 121
    }, {
      "referenceID" : 10,
      "context" : "Many of the restrictions on Kripke models can be found elsewhere in the literature of DEL and ETL [14, 15, 7, 13, 12, 19]; however, the identification of relevant action model-specific restrictions and the use of Kripke model restrictions in action models having ❀ arrows is, to the best of our knowledge, new (though it builds off the authors’ early work in [11]).",
      "startOffset" : 98,
      "endOffset" : 121
    }, {
      "referenceID" : 17,
      "context" : "Many of the restrictions on Kripke models can be found elsewhere in the literature of DEL and ETL [14, 15, 7, 13, 12, 19]; however, the identification of relevant action model-specific restrictions and the use of Kripke model restrictions in action models having ❀ arrows is, to the best of our knowledge, new (though it builds off the authors’ early work in [11]).",
      "startOffset" : 98,
      "endOffset" : 121
    }, {
      "referenceID" : 9,
      "context" : "Many of the restrictions on Kripke models can be found elsewhere in the literature of DEL and ETL [14, 15, 7, 13, 12, 19]; however, the identification of relevant action model-specific restrictions and the use of Kripke model restrictions in action models having ❀ arrows is, to the best of our knowledge, new (though it builds off the authors’ early work in [11]).",
      "startOffset" : 359,
      "endOffset" : 363
    }, {
      "referenceID" : 1,
      "context" : "Call our unparametrized operator [N ], and we can define: M,w |= [N ]φ if and only if M,w |= [U, s]φ for all action models (U, s) with only epistemic preconditions (this constraint is imposed on the action models, so as to ensure the well-foundedness of the semantics) [2].",
      "startOffset" : 269,
      "endOffset" : 272
    }, {
      "referenceID" : 15,
      "context" : "The proof is a straightforward adaptation of the standard argument from Dynamic Epistemic Logic [17].",
      "startOffset" : 96,
      "endOffset" : 100
    }, {
      "referenceID" : 15,
      "context" : "All cases except U[Y ] soundness are straightforward adaptations of the standard atemporal Dynamic Epistemic Logic arguments [17], so we shall only prove U [Y ] soundness here.",
      "startOffset" : 125,
      "endOffset" : 129
    }, {
      "referenceID" : 4,
      "context" : "2), the standard normal modal logic canonical model argument for the action model-free sublanguage LSETL [6], and the combination of LDETL Reduction with soundness.",
      "startOffset" : 105,
      "endOffset" : 108
    }, {
      "referenceID" : 12,
      "context" : "These properties have been of interest in the study of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19] and so it will be useful for our purposes to understand the conditions under which they are preserved within our DETL setting.",
      "startOffset" : 87,
      "endOffset" : 110
    }, {
      "referenceID" : 13,
      "context" : "These properties have been of interest in the study of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19] and so it will be useful for our purposes to understand the conditions under which they are preserved within our DETL setting.",
      "startOffset" : 87,
      "endOffset" : 110
    }, {
      "referenceID" : 5,
      "context" : "These properties have been of interest in the study of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19] and so it will be useful for our purposes to understand the conditions under which they are preserved within our DETL setting.",
      "startOffset" : 87,
      "endOffset" : 110
    }, {
      "referenceID" : 11,
      "context" : "These properties have been of interest in the study of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19] and so it will be useful for our purposes to understand the conditions under which they are preserved within our DETL setting.",
      "startOffset" : 87,
      "endOffset" : 110
    }, {
      "referenceID" : 10,
      "context" : "These properties have been of interest in the study of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19] and so it will be useful for our purposes to understand the conditions under which they are preserved within our DETL setting.",
      "startOffset" : 87,
      "endOffset" : 110
    }, {
      "referenceID" : 17,
      "context" : "These properties have been of interest in the study of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19] and so it will be useful for our purposes to understand the conditions under which they are preserved within our DETL setting.",
      "startOffset" : 87,
      "endOffset" : 110
    }, {
      "referenceID" : 4,
      "context" : "(a) Since the language of LDETL does not include forward-looking tomorrow operators [T ], it follows by the standard argument in modal logic [6] that bisimilar worlds satisfy the same action model-free LDETL-formulas (i.",
      "startOffset" : 141,
      "endOffset" : 144
    }, {
      "referenceID" : 12,
      "context" : "We chose these properties because they have been of interest in many studies of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19].",
      "startOffset" : 112,
      "endOffset" : 135
    }, {
      "referenceID" : 13,
      "context" : "We chose these properties because they have been of interest in many studies of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19].",
      "startOffset" : 112,
      "endOffset" : 135
    }, {
      "referenceID" : 5,
      "context" : "We chose these properties because they have been of interest in many studies of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19].",
      "startOffset" : 112,
      "endOffset" : 135
    }, {
      "referenceID" : 11,
      "context" : "We chose these properties because they have been of interest in many studies of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19].",
      "startOffset" : 112,
      "endOffset" : 135
    }, {
      "referenceID" : 10,
      "context" : "We chose these properties because they have been of interest in many studies of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19].",
      "startOffset" : 112,
      "endOffset" : 135
    }, {
      "referenceID" : 17,
      "context" : "We chose these properties because they have been of interest in many studies of time in Dynamic Epistemic Logic [14, 15, 7, 13, 12, 19].",
      "startOffset" : 112,
      "endOffset" : 135
    }, {
      "referenceID" : 2,
      "context" : "2 YDEL In this section, we relate DETL to a more conservative approach to adding time to DEL, which, as is generally studied in the literature [3, 4, 5, 16, 17], does not use ❀ arrows in its action models.",
      "startOffset" : 143,
      "endOffset" : 160
    }, {
      "referenceID" : 3,
      "context" : "2 YDEL In this section, we relate DETL to a more conservative approach to adding time to DEL, which, as is generally studied in the literature [3, 4, 5, 16, 17], does not use ❀ arrows in its action models.",
      "startOffset" : 143,
      "endOffset" : 160
    }, {
      "referenceID" : 14,
      "context" : "2 YDEL In this section, we relate DETL to a more conservative approach to adding time to DEL, which, as is generally studied in the literature [3, 4, 5, 16, 17], does not use ❀ arrows in its action models.",
      "startOffset" : 143,
      "endOffset" : 160
    }, {
      "referenceID" : 15,
      "context" : "2 YDEL In this section, we relate DETL to a more conservative approach to adding time to DEL, which, as is generally studied in the literature [3, 4, 5, 16, 17], does not use ❀ arrows in its action models.",
      "startOffset" : 143,
      "endOffset" : 160
    }, {
      "referenceID" : 10,
      "context" : "In order to draw this comparison, we will define an extension of DEL called “Yesterday Dynamic Epistemic Logic,” or YDEL (see [12, 13, 19]), that records a history of the updates made.",
      "startOffset" : 126,
      "endOffset" : 138
    }, {
      "referenceID" : 11,
      "context" : "In order to draw this comparison, we will define an extension of DEL called “Yesterday Dynamic Epistemic Logic,” or YDEL (see [12, 13, 19]), that records a history of the updates made.",
      "startOffset" : 126,
      "endOffset" : 138
    }, {
      "referenceID" : 17,
      "context" : "In order to draw this comparison, we will define an extension of DEL called “Yesterday Dynamic Epistemic Logic,” or YDEL (see [12, 13, 19]), that records a history of the updates made.",
      "startOffset" : 126,
      "endOffset" : 138
    }, {
      "referenceID" : 5,
      "context" : "In closing, we mention a recent study of time in Dynamic Epistemic Logic that looks at asynchronous systems [7].",
      "startOffset" : 108,
      "endOffset" : 111
    }, {
      "referenceID" : 5,
      "context" : "In particular, it is not clear if there is a DETL action model for all the updates that can be produced by the framework of [7].",
      "startOffset" : 124,
      "endOffset" : 127
    }, {
      "referenceID" : 5,
      "context" : "Another complication is that the asynchronous updates of [7] essentially insert agent arrows →a based on whether a certain knowledge condition is satisfied, whereas our temporal action models do not allow us to conditionally insert arrows.",
      "startOffset" : 57,
      "endOffset" : 60
    }, {
      "referenceID" : 6,
      "context" : "This suggests that there may be connections with “arrow update logics” [8, 9] that allow such conditions on arrows.",
      "startOffset" : 71,
      "endOffset" : 77
    }, {
      "referenceID" : 7,
      "context" : "This suggests that there may be connections with “arrow update logics” [8, 9] that allow such conditions on arrows.",
      "startOffset" : 71,
      "endOffset" : 77
    }, {
      "referenceID" : 7,
      "context" : "In particular, it has been shown that generalized arrow updates are equivalent to atemporal action models in terms of update expressivity [9].",
      "startOffset" : 138,
      "endOffset" : 141
    }, {
      "referenceID" : 5,
      "context" : "Therefore, an arrow update version of DETL might suggest a natural way to represent asynchronous updates like those of [7], and this may turn out to be equivalent in update expressivity to our present approach, just as in the atemporal case.",
      "startOffset" : 119,
      "endOffset" : 122
    }, {
      "referenceID" : 9,
      "context" : "While this paper (and its early predecessor [11]) present the first steps of this study, there is clearly still much more work to be done.",
      "startOffset" : 44,
      "endOffset" : 48
    } ],
    "year" : 2014,
    "abstractText" : "We present Dynamic Epistemic Temporal Logic, a framework for reasoning about operations on multi-agent Kripke models that contain a designated temporal relation. These operations are natural extensions of the well-known “action models” from Dynamic Epistemic Logic. Our “temporal action models” may be used to define a number of informational actions that can modify the “objective” temporal structure of a model along with the agents’ basic and higher-order knowledge and beliefs about this structure, including their beliefs about the time. In essence, this approach provides one way to extend the domain of action model-style operations from atemporal Kripke models to temporal Kripke models in a manner that allows actions to control the flow of time. We present a number of examples to illustrate the subtleties involved in interpreting the effects of our extended action models on temporal Kripke models. We also study preservation of important epistemic-temporal properties of temporal Kripke models under temporal action model-induced operations, provide complete axiomatizations for two theories of temporal action models, and connect our approach with previous work on time in Dynamic Epistemic Logic.",
    "creator" : "LaTeX with hyperref package"
  }
}