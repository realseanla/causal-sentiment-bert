{
  "name" : "1403.0222.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "BEYOND Q-RESOLUTION AND PRENEX FORM: A PROOF SYSTEM FOR QUANTIFIED CONSTRAINT SATISFACTION",
    "authors" : [ "HUBIE CHEN", "Hubie Chen" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : "1. Introduction",
      "text" : "Background. The study of propositional proof systems for certifying the unsatisfiability of quantifier-free propositional formulas is supported by multiple motivations [3, 15]. First, the desire to have an efficiently verifiable certificate of a formula’s unsatisfiability is a natural and basic one, and indeed the field of propositional proof complexity studies, for various proof systems, whether and when succinct proofs exist for unsatisfiable formulas. Next, theorem provers are typically based on such proof systems, and so insight into the behavior of proof systems can yield insight into the behavior of theorem provers. Also, algorithms that perform search to determine the satisfiability of formulas can typically be shown to implicitly generate proofs in a proof system, and thus lower bounds on proof size translate to lower bounds on the running time of such algorithms. Finally, algorithms that check for unsatisfiability proofs of various restricted forms have been shown to yield tractable cases of the propositional satisfiability problem and related problems (see for example [1, 2]).\nIn recent years, increasing attention has been directed towards the study of quantified proof systems that certify the falsity of quantified propositional formulas, which study is also pursued with the motivations similar to those outlined for the quantifier-free case. Indeed, the development of so-called QBF solvers, which determine the truth of quantified propositional formulas, has become an active research theme, and the study of quantified proof systems is pursued as a way to understand their behavior, as well as to explore the\n2012 ACM CCS: [Theory of computation]: Logic. Key words and phrases: Q-resolution, proof system, quantified constraint satisfaction.\nLOGICAL METHODSl IN COMPUTER SCIENCE DOI:10.2168/LMCS-10(4:14)2014 c© Hubie ChenCC© Creative Commons\nspace of potential certificate formats for verifying their correctness on particular input instances [14].\nQ-resolution [4] is a quantified proof system that can be viewed as a quantified analog of resolution, one of the best-known and most customarily considered propositional proof systems. In the context of quantified propositional logic, Q-resolution is a heavily studied and basic proof system on which others are built and to which others are routinely compared, as well as a point of departure for the discussion of suitable certificate formats (see [11, 16, 12] for examples). However, the Q-resolution proof system has intrinsic shortcomings. First, it is only applicable to quantified propositional sentences that are in prenex form, that is, where all quantifiers appear in front. While it is certainly true that an arbitrary given quantified propositional formula may be efficiently prenexed, the process of prenexing is not canonical: intuitively, it involves choosing a total order of variables consistent with the partial order given by the input formula. As argued by Egly, Seidl, and Woltran [10], this may disrupt the original formula structure, “artificially extend” the scopes of quantifiers, and generate dependencies among variables that were not originally present, unnecessarily increasing the expense of solving; we refer the reader to their article for a contemporary discussion of this issue.1 A second shortcoming of Q-resolution is that it is only defined in the propositional setting, despite that some scenarios may be more naturally and cleanly modelled by allowing variables to be quantified over domains of size greater than two.\nContributions. In this article, we introduce a proof system that directly overcomes both of the identified shortcomings of Q-resolution and that, in a sense made precise, generalizes Q-resolution.\nWe here define the quantified constraint satisfaction problem (QCSP) to be the problem of deciding, given a relational structure B and a first-order sentence φ (not necessarily in prenex form) built from the conjunction connective (∧) and the two quantifiers (∀, ∃), whether or not the sentence is true on the structure. To permit different variables to have different domains, we formalize the QCSP using multi-sorted first-order logic. Our proof system (Section 3) allows for the certification of falsity of QCSP instances. While Q-resolution provides rules for deriving clauses from a given quantified propositional formula, our proof system provides rules for deriving what we call constraints at various formula locations of a given QCSP instance; here, a constraint (V, F ) is a set V of variables paired with a set F of assignments, each defined on V . A formula location i paired with a constraint is called a judgement ; a proof in our system is a sequence of judgements where each is derived from the previous ones via the rules. Crucially, we formulate and prove a key lemma (Lemma 3.5) that shows (essentially) that if a judgement (i, V, F ) is derivable from a QCSP instance (φ,B), then there exists a formula ψ(V ) that “defines” the constraint (V, F ) over B, such that ψ(V ) can be conjoined to the input sentence φ at location i while preserving logical equivalence. This key lemma is then swiftly deployed to establish soundness and completeness of our proof system (Theorem 3.6). We view the formulation of our proof system and of this key lemma as conceptual contributions. They offer a broader, deeper, and more general perspective on Q-resolution and what it means for a clause to be derivable by Q-resolution: we show (in a sense made precise) that each clause derivable by Q-resolution is derivable by our proof\n1Let us remark that using so-called dependency schemes is a potential way to cope with such introduced dependencies in a prenex formula [16].\nsystem (see Theorem 4.4). This yields a clear and transparent proof of the soundness of Q-resolution which, interestingly, is carried out in the setting of first-order logic, despite the result concerning propositional logic.\nIn order to relate our proof system to Q-resolution, we give a proof system for certain quantified propositional formulas (Section 4) and prove that this second proof system is a faithful propositional interpretation of our QCSP proof system (Theorem 4.3). We also provide an algorithmic interpretation of this second proof system. In particular, we give a nondeterministic search algorithm such that traces of execution that result in certifying falsity correspond to refutations in the proof system (Section 4.3). As a consequence, the proof system yields a basis for establishing running-time lower bounds for any deterministic algorithm which instantiates the non-deterministic choices of our search algorithm.\nIn the final section of the article (Section 5), we present and study a notion of consistency for the QCSP that is naturally induced by our proof system. In the context of constraint satisfaction, a consistency notion is a condition which is necessary for the satisfiability of an instance and which can typically be efficiently checked. An example used in practice is arc consistency, and understanding when various forms of consistency provide an exact characterization of satisfiability (that is, when consistency is sufficient for satisfiability in addition to being necessary) has been a central theme in the tractability theory of constraint satisfaction [1, 2, 8]. Atserias, Kolaitis, and Vardi [1] showed that checking for k-consistency, an oft-considered consistency notion, can be viewed as detecting the absence of a proof of unsatisfiability having width at most k, in a natural proof system (the width of a proof is the maximum number of variables appearing in a line of the proof); Kolaitis and Vardi [13] also characterized k-consistency algebraically as whether or not Duplicator can win a natural Spoiler-Duplicator pebble game in the spirit of Ehrenfeucht-Fräıssé games. Inspired by these connections, we directly define a QCSP instance to be k-judgeconsistent if it has no unsatisfiability proof (in our proof system) of width at most k; and, we then present an algebraic, Ehrenfeucht-Fräıssé-style characterization of k-judge-consistency (Theorem 5.3). As an application of this algebraic characterization, we prove that (in a sense made precise) any case of the QCSP that lies in the tractable regime of a recent dichotomy theorem [7], is tractable via checking for k-judge-consistency.2 That is, within the framework considered by that dichotomy, if a class of QCSP instances is tractable at all, it is tractable via k-judge consistency. We remark that earlier work [6] presents algebraically a notion of consistency for the QCSP, but no corresponding proof system was explicitly presented; the notion of k-judgement consistency can be straightforwardly verified to imply the notion of consistency in this earlier article. To sum up, this article presents a proof system for non-prenex quantified formulas. Our proof system is based on highly natural and simple rules, and its utility is witnessed by its connections to Q-resolution and by our presentation of a consistency notion that it induces, which allows for the establishment of tractability results. We hope that this proof system will serve as a point of reference and foundation for the future study of solvers and certificates for non-prenex formulas. One particular possibility for future work is to compare this proof system to others that are defined on non-prenex formulas, such as those discussed and studied by Egly [9].\n2 Let us remark that this dichotomy theorem has since been generalized [5]."
    }, {
      "heading" : "2. Preliminaries",
      "text" : "When f is a mapping, we use f S to denote its restriction to a set S; we use f [s→ b] to denote the extension of f that maps s to b. We extend this notation to sets of mappings in the natural fashion.\nFirst-order logic. We assume basic familiarity with the syntax and semantics of first-order logic. For the sake of broad applicability, in this article, we work with multi-sorted relational first-order logic, formalized here as follows. A signature is a pair (σ,S) where S is a set of sorts and σ is a set of relation symbols; each relation symbol R ∈ σ has an associated arity ar(R) which is an element of S∗. Each variable v has an associated sort s(v) ∈ S; an atom is a formula R(v1, . . . , vk) where R ∈ σ and s(v1) . . . s(vk) = ar(R). A structure B on signature (σ,S) consists of an S-indexed family B = {Bs | s ∈ S} of sets, called the universe of B, and, for each symbol R ∈ σ, an interpretation RB ⊆ Bar(R). Here, for a word w = w1 . . . wk ∈ S∗, we use Bw to denote the product Bw1 × · · · × Bwk . Suppose that V is a set of variables where each variable v ∈ V has an associated sort s(v); by a mapping f : V → B, we mean a mapping that sends each v ∈ V to an element f(v) ∈ Bs(v).\nWhen φ is a formula, we use free(φ) to denote the set containing the free variables of φ. The width of a formula φ is the maximum of |free(ψ)| over all subformulas ψ of φ. A quantified-conjunctive formula (for short, qc-formula) is a formula over a signature built from atoms on the signature, conjunction (∧), and the two quantifiers (∀, ∃). Note that we permit conjunction of arbitrary arity. As expected, a qc-sentence is a qc-formula φ such that free(φ) = ∅. We allow conjunction of arbitrary (finite) arity, in formulas. We will use > to denote a sentence that is always true; this is considered to be a qc-sentence. A relation P is qc-definable over a structure B if there exists a qc-formula φ(v1, . . . , vk) such that P ⊆ Bs(v1)...s(vk) and P contains a tuple (b1, . . . , bk) if and only if B, b1, . . . , bk |= φ(v1, . . . , vk). Note that by the notation B, b1, . . . , bk |= φ(v1, . . . , vk), we mean that the structure B and the mapping taking each vi to bi satisfy φ. We sometimes use ≡ to indicate logical equivalence of two formulas.\nWe define the QCSP to be the problem of deciding, given a QCSP instance, which is a pair (φ,B) where φ is a qc-sentence and B is a structure that both have the same signature, whether or not B |= φ."
    }, {
      "heading" : "3. QCSP proof system",
      "text" : "In this section, we present our proof system for the QCSP, and establish some basic properties thereof, including soundness and completeness. Let (φ,B) be a QCSP instance, and conceive of φ as a tree. The proof system will allow us to derive what we call constraints at the various nodes of the tree. To facilitate the discussion, we will assume that each qc-sentence φ has, associated with it, a set Iφ of indices that contains one index for each subformula occurrence of φ, that is, for each node of the tree corresponding for φ. Let us remark that (in general) the collection of constraints derivable at an occurrence of a subformula does not depend only on the subformula, but also on the subformula’s location in the full formula φ. When i is an index, we use φ(i) to denote the actual subformula of the subformula occurrence corresponding to i; we will also refer to i as a location.\nExample 3.1. Consider the qc-sentence φ = ∃x∀y(E(x, y) ∧ (∃xE(x, y))). (See Figure 3.) When viewed as a tree, this formula has 6 nodes. We may index them naturally according\nax tvg I7n\nutl,r: b\nae--7Lr -\" ,b\\\n% QLs) = ax gb'y)\nStroelweBi Uu', Verse l orlo'& ee =\\ (a,a) ,(n b), (ar.),\nLvrv), (c,c)l\nL,e+ (6 csur*arn *{nz vnag1.\n-H^atr sdtOtl ELxrg) ' tx41 * tarb,cl m glvocr*vr2 lb.\nL Z &c*2 (L\n'-\\b C.-. C\nFigure 1: Formula discussed in Examples 3.1 and 3.4.\nto the depth-first search order: we could take the index set {1, . . . , 6} where φ(4) = φ(6) = E(x, y), φ(5) = ∃xφ(6), φ(3) = φ(4) ∧ φ(5), φ(2) = ∀yφ(3), and φ(1) = ∃xφ(2).\nWe say that an index i is a parent of an index j, and also that j is a child of i, if, in viewing the formula φ as a tree, the root of the subformula occurrence of i is the parent of the root of the subformula occurrence of j. Note that, when this holds, the formula φ(i) either is of the form Qvφ(j) where Q is a quantifier and v is a variable, or is a conjunction where φ(j) appears as a conjunct. As examples, with respect to the qc-sentence and indexing in Example 3.1, index 3 has two children, namely, 4 and 5, and index 3 has one parent, namely, 2.\nDefinition 3.2. Let (φ,B) be a QCSP instance. A constraint (on (φ,B)) is a pair (V, F ) where V is a set of variables occurring in φ, and F is a set of mappings from V to B. A judgement (on (φ,B)) is a triple (i, V, F ) where i ∈ Iφ and (V, F ) is a constraint with V ⊆ free(φ(i)); it is empty if F = ∅.\nHere, we use the convention that (relative to a QCSP instance) there is exactly one map e : ∅ → B defined on the empty set, so there are two constraints whose variable set is the empty set: the constraint (∅, ∅), and the constraint (∅, {e}) where e is the aforementioned map.\nWhen (U1, F1), (U2, F2) are two constraints on the same QCSP instance, we define the join of F1 and F2, denoted by F1 on F2, to be the set {f : U1 ∪ U2 → B | (f U1) ∈ F1, (f U2) ∈ F2}. When (U,F ) is a constraint and y is a variable in U , we use yF to denote the set {f : U \\ {y} → B | for each b ∈ Bs(y), it holds that f [y → b] ∈ F}. The operator y will be used to eliminate a universally quantified variable y. Dually, in the following definition, projection can be used to cope with existential quantification.\nDefinition 3.3. A judgement proof on (φ,B) is a finite sequence of judgements, each of which has one of the following types:\n(atom) (i, {v1, . . . , vk}, F ) where φ(i) is an atom R(v1, . . . , vk) and F = {f : {v1, . . . , vk} → B | (f(v1), . . . , f(vk)) ∈ RB}\n(projection) (i, U, F U) where (i, V, F ) is a previous judgement, and U ⊆ V\n(join) (i, U1 ∪ U2, F1 on F2) where (i, U1, F1) and (i, U2, F2) are previous judgements\n(upward flow) (i, V, F )\nwhere (j, V, F ) is a previous judgement and i is the parent of j\n(∀-elimination) (i, V \\ {y}, yF ) where (j, V, F ) is a previous judgement with y ∈ V , φ(i) = ∀yφ(j), and i is the parent of j\n(downward flow) (j, V, F )\nwhere (i, V, F ) is a previous judgement and i is the parent of j\nWe say that a judgement (i, V, F ) is derivable if there exists a judgement proof that contains the judgement.\nThe width of a judgement (i, V, F ) is |V |. The width of a judgement proof is the maximum width over all of its judgements, and the length of a judgement proof is the number of judgements that it contains.\nLet us emphasize that, by definition, a judgement proof is a finite sequence of judgements, and by definition, in order for a triple (i, V, F ) to be a judgement, it must hold that all variables in V are free variables of φ(i). Consequently, upward flow can only be applied to a judgement (j, V, F ) if all variables in V are free variables of φ(i), where i is the parent of j; an analogous comment holds for downward flow.\nExample 3.4. Let φ be the qc-sentence from Example 3.1 (shown in Figure 3), considered as a sentence over signature ({E}, {e, u}) with ar(E) = eu and where s(x) = e and s(y) = u. Define B to be a structure over this signature having universe B defined by Be = {a, b, c} and Bu = {d, e, f}, and where EB = {(a, d), (a, e), (a, f), (b, e), (c, f)}. To offer a feel of the proof system, we give some examples of derivable judgements.\nLet FE be the set of assignments from {x, y} to B that satisfy E(x, y) (over B). By (atom), we may derive the judgement (4, {x, y}, FE). By (upward flow), we may then derive the judgement (3, {x, y}, FE). By (∀-elimination), we may then derive the judgement (2, {x}, G), where G contains the single map that takes x to a. By applying (downward flow) twice, we may then derive the judgement (4, {x}, G). By (atom), we may also derive the judgement (6, {x, y}, FE). By (projection), we may then derive the judgement (6, {x}, H), where H contains the maps taking x to a, b, and c, respectively. Let us remark that, even though φ(4) = φ(6) and we derived the judgement (4, {x}, G), it is not possible to derive\nthe judgement (6, {x}, G). (This can be verified by Lemma 3.5, to be presented next, and the observation that B |= φ.)\nWe now prove soundness and completeness of our proof system; we first establish a lemma, which indicates what it means for a judgement to be derivable.\nWhen φ is a qc-formula with index set I, and {θi}i∈I is a family of formulas, we use φ+θ to denote the formula obtained from φ by replacing, at each location i, the subformula φ(i) by φ(i) ∧ θi. Formally, we define φ+θ by induction. When φ(i) is an atom, we define φ+θ(i) = φ(i)∧ θi. When φ(i) = φ(j)∧φ(k), we define φ+θ(i) = φ+θ(j)∧φ+θ(k)∧ θi. When φ(i) = Qvφ(j), we define φ+θ(i) = (Qvφ+θ(j)) ∧ θi. We define φ+θ to be φ+θ(r) where r is the root index of φ (that is, where r is such that φ(r) = φ).\nLemma 3.5. Let (φ,B) be a QCSP instance. For every derivable judgement (i, V, F ), there exists a qc-formula ψ such that • free(ψ) = V ; • for each f : V → B, it holds that f ∈ F if and only if B, f |= ψ; and • for any family {θi}i∈I of formulas, it holds that φ+θ entails φ+θ[i\n∧→ ψ] (and hence that φ+θ ≡ φ+θ[i ∧→ ψ]). Here, φ+θ[i ∧→ ψ] denotes the formula where, at location i, the subformula φ+θ(i) is replaced with φ+θ(i) ∧ ψ.\nMoreover, if one has a judgement proof of width at most k, then each of the formulas ψ produced for its judgements has width(ψ) ≤ k.\nProof. We consider the different types of judgements, and use the notation from Definition 3.3. In each case, the claim on the width is straightforwardly verified.\nIn the case of (atom), we take ψ = φ(i); the formulas φ+θ and φ+θ[i ∧→ ψ] are logically\nequivalent since φ(i) ≡ φ(i) ∧ φ(i). In the case of (projection), by induction, we have that φ+θ entails φ+θ[i\n∧→ ψ′] where ψ′ is the formula for the judgement (i, V, F ). We take ψ = ∃v1 . . . ∃vmψ′, where v1, . . . , vm is a listing of the elements in V \\ U . We have that φ+θ[i ∧→ ψ′] entails φ+θ[i ∧→ ψ], and hence by transitivity of the entailment relation that φ+θ entails φ+θ[i\n∧→ ψ]. In the case of (join), by induction, we have (for any family {θj}j∈I) that φ+θ entails\nboth φ+θ[i ∧→ ψ1] and φ+θ[i ∧→ ψ2] where ψ1 and ψ2 are the formulas corresponding to the judgements (i, U1, F1) and (i, U2, F2). We take ψ = ψ1∧ψ2. Fix a family {θj}j∈I , and define {θ′j}j∈I to be the family that has θ′i = θi ∧ ψ1, and is everywhere else equal to {θj}j∈I . We have that φ+θ entails φ+θ[i ∧→ ψ1] ≡ φ+θ ′ , and that φ+θ ′ entails φ+θ ′ [i ∧→ ψ2]. It follows that φ+θ entails φ+θ ′ [i ∧→ ψ2] ≡ φ+θ[i\n∧→ (ψ1 ∧ ψ2)]. In the case of (∀-elimination), by induction, we have that φ+θ entails φ+θ[j ∧→ ψ′],\nwhere ψ′ is the formula for the judgement (j, V, F ). We take ψ = ∀yψ′. We claim that the formula φ+θ[j ∧→ ψ′] is logically equivalent to φ+θ[i ∧→ ψ], which suffices to give that φ+θ entails φ+θ[i ∧→ ψ]. This is because the subformula of φ+θ[j ∧→ ψ′] at location i is logically equivalent to (∀y(φ+θ(j)∧ψ′))∧ θi which is logicically equivalent to (∀yφ+θ(j))∧ (∀yψ′)∧ θi. In the cases of (upward flow) and (downward flow), we take ψ to be equal to the formula that is given to us by the previous judgement. It is straightforwardly verified that φ+θ[i ∧→ ψ] and φ+θ[j ∧→ ψ] are logically equivalent.\nTheorem 3.6. Let (φ,B) be a QCSP instance. An empty judgement on (φ,B) is derivable if and only if B 6|= φ.\nThis theorem is proved in the following way. The forward direction follows immediately from the previous lemma. For the backward direction, we show by induction that, for each location i, there exists a derivable judgement for which the formula ψ given by the previous lemma is equal to φ(i)!\nProof. Suppose that an empty judgement (i, V, F ) is derivable. Then by invoking the (projection) rule, the empty judgement (i, ∅, ∅) is derivable. Define {θj}j∈I so that θj is the true formula > for each j ∈ I; then, invoking Lemma 3.5, we have that there exists a qc-formula ψ that is false on B (that is, B 6|= ψ) and such that φ entails φ[i ∧→ ψ]. We have that B 6|= φ[i ∧→ ψ], and hence (since φ entails φ[i ∧→ ψ]) we have that B 6|= φ. Suppose that B 6|= φ. We claim that for each location i, there exists a derivable judgement (i, V, F ) where the corresponding formula ψ, given by the proof of Lemma 3.5, is equal to φ(i). This suffices, as then the root location r has a derivable judgement (r, V, F ) such that F = ∅. We establish the claim by induction. When φ(i) is an atom, we use the judgement given by (atom) in the proof system (Definition 3.3). When φ(i) is a conjunction, let j and k be the children of i, so that φ(i) = φ(j) ∧ φ(k). Let (j, Vj , Fj) and (k, Vk, Fk) be the derivable judgements given by induction. By (upward flow) in the proof system, we have that (i, Vj , Fj) and (i, Vk, Fk) are derivable judgements; by invoking (join), we obtain the desired judgement. When φ(i) begins with existential quantification, let j be the child of i, and denote φ(i) = ∃xφ(j). Let (j, V, F ) be the derivable judgement given by induction; by applying the rule (projection) to obtain a constraint on V \\ {x} and then the rule (upward flow), we obtain the desired derivation. When φ(i) begins with universal quantification, let j be the child of i, and denote φ(i) = ∀yφ(j). Let (j, V, F ) be the derivable judgement given by induction; by the (∀-elimination) rule, we obtain the desired derivation."
    }, {
      "heading" : "4. Propositional proof system",
      "text" : "In this section, we introduce a different proof system, which is a propositional interpretation of the QCSP proof system. For differentiation, we refer to judgements and judgement proofs as defined in the previous section as constraint judgements and constraint judgement proofs. A literal is a propositional variable v or the negation v thereof. Two literals are complementary if one is a variable v and the other is v; each is said to be the complement of the other. A clause is a disjunction of literals that contains, for each variable, at most one literal on the variable; a clause is sometimes viewed as the set of the literals that it contains. A clause is empty if it does not contain any literals. The variables of a clause are simply the variables that underlie the clause’s literals, and the set of variables of a clause α is denoted by vars(α). A clause γ is a resolvent of two propositional clauses α and β if there exists a literal L ∈ α such that its complement M is in β, and γ = (α \\ {L}) ∪ (β \\ {M}). A clause γ is falsified by a propositional assignment a if a is defined on vars(γ) and each literal in γ evalutes to false under a. We define a QCBF instance to be a propositional formula not having free variables that is built from clauses, conjunction, and universal and existential quantification over propositional variables. As with QCSP instance, we assume that each QCBF instance ψ has\nan associated index set that contains an index for each subformula of ψ. Note that a clause is not considered to have any subformulas, other than itself. As an example, consider the QCBF instance ∃x∀y∃z((y ∨ z) ∧ (y ∨ z ∨ x)). This formula would have 6 indices: one for each of the two clauses, one for the conjunction of the two clauses, and one for each of the quantifiers.\nLet ψ be a QCBF instance. A clause judgement (on ψ) is a pair (i, α) where i ∈ Iψ and α is a clause with vars(α) ⊆ free(ψ(i)); a clause judgement (i, α) is empty if α is empty.\nDefinition 4.1. A clause judgement proof on a QCBF instance ψ is a finite sequence of clause judgements, each of which has one of the following types:\n(clause) (i, α)\nwhere φ(i) is the clause α\n(resolve) (i, γ)\nwhere (i, α) and (i, β) are previous clause judgements, and γ is a resolvent of α and β\n(upward flow) (i, α)\nwhere (j, α) is a previous clause judgement and i is the parent of j\n(∀-removal) (i, α \\ {y, y}) where (j, α) is a previous clause judgement, φ(i) = ∀yφ(j), and i is the parent of j\n(downward flow) (j, α)\nwhere (i, α) is a previous clause judgement and i is the parent of j\nWe say that a clause judgement (i, α) is derivable if there exists a clause judgement proof that contains the clause judgement.\nThe width of a clause judgement (i, α) is |vars(α)|. The width of a clause judgement proof is the maximum width over all of its clause judgements; the length of a clause judgement proof is the number of judgements that it contains. In a clause judgement proof, we refer to judgements that are not derived by the rules (upward flow) and (downward flow) as non-flow judgements.\nLet us emphasize that we allow resolution over both existential and universal variables, and the resolvent must be non-tautological, because it must be a clause (for our definition of clause).\n4.1. Relationship to the QCSP proof system. We now define the notion of a QCSP translation of a QCBF instance ψ, which intuitively is a QCSP instance that behaves just like ψ. When discussing QCSP translations, we will be concerned with structures B that have just one sort s with Bs = {0, 1}; we slightly abuse notation and simply write B = {0, 1}.\nDefinition 4.2. When ψ is a QCBF instance, define a QCSP translation of ψ to be a QCSP instance (φ,B) where B is a one-sorted structure with B = {0, 1} and where φ is obtainable from ψ by replacing each clause γ having variables v1, . . . , vk with an atom R(v1, . . . , vk)\nsuch that\nRB = {(f(v1), . . . , f(vk)) | f : {v1, . . . , vk} → {0, 1} satisfies γ}; we typically assume that Iφ = Iψ and that each subformula of φ has the same index as the natural corresponding subformula of ψ.\nNote that when ψ is a QCBF instance and (φ,B) is a QCSP translation thereof, it can be immediately verified, by induction, that for each index i, an assignment g to {0, 1} that is defined on free(ψ(i)) = free(φ(i)) satisfies ψ(i) if and only if it satisfies φ(i). In particular, we have that ψ is true if and only if φ is true on B. We prove that our clause judgement proof system is a faithful interpretation of our QCSP proof system, as made precise by the following theorem.\nTheorem 4.3. Let ψ be a QCBF instance and let (φ,B) be a QCSP translation of ψ. For each clause judgement (i, α) that is derivable from ψ, there exists a constraint judgement (i, vars(α), F ) derivable from (φ,B) such that the unique g : vars(α)→ {0, 1} that does not satisfy α is not in F . The other way around, for each constraint judgement (i, V, F ) that is derivable from (φ,B), and for each mapping g : V → {0, 1} with g /∈ F , there exists a clause judgement (i, α) derivable from ψ where vars(α) ⊆ V and g does not satisfy α. Consequently, an empty clause judgement is derivable from ψ if and only if an empty constraint judgement is derivable from (φ,B).\nThe proof of this theorem is provided in Section A.\n4.2. Simulation of Q-resolution. We now show that our clause judgement proof system simulates Q-resolution [4], as made precise by the following theorem.\nTheorem 4.4. Let ψ be a QCBF instance in prenex form, whose quantifier-free part is a conjunction of clauses with index c. If a clause γ is derivable from ψ by Q-resolution, then the clause judgement (c, γ) is derivable from ψ by the clause judgement proof system.\nProof. It is straightforwardly verified that each clause derivable by Q-resolution from ψ is contained in the smallest set C of clauses satisfying the following recursive definition: • Each clause α appearing in ψ is in C. • C is closed under taking resolvents. • If α ∈ C and y ∈ vars(α) is universally quantified and is the first variable in vars(α) to be\nquantified on the unique path from c to the root of ψ, then α \\ {y, y} is in C. It suffices to show, then, that for each α ∈ C, the clause judgement (c, α) is derivable. We consider the three types of clauses according to the just-given recursive definition. For each clause α appearing in ψ, the clause judgement (c, α) is derivable by applying the (clause) rule at the location of α, followed by one application of the (upward flow) rule. For a clause that is a resolvent of two other clauses, one can simply apply the (resolve) rule. Finally, suppose that (c, α) is derivable and that y ∈ vars(α) satisfies the described condition. We need to show that α \\ {y, y} is derivable. Let j be the first location where y is quantified when walking from c to the root, and let K be the set of nodes appearing on the unique path from c to the child of j (inclusive). By the definition of C, no variable in vars(α) is quantified at a location in K and vars(α) ⊆ free(ψ(k)) for each k ∈ K; hence, (upward flow) can be applied repeatedly to derive (k, α) for each k ∈ K. By applying (∀-removal) at the child of j, we obtain (j, α \\ {y, y}; then, (downward flow) can be applied repeatedly to derive (c, α \\ {y, y}.\nThe soundness of Q-resolution (derivability of an empty clause implies falsehood) is thus a consequence of this theorem, Theorem 4.3, and Theorem 3.6.\n4.3. Algorithmic interpretation. We define the following notions relative to a QCBF instance ψ. We view ψ as a rooted tree. When i, j ∈ Iψ, we write i ≤ψ j if i is an ancestor of j, that is, if i occurs on the unique path from j to the root; we write i <ψ j if i ≤ψ j and i 6= j. We define a located variable to be a pair (i, u) where i ∈ Iψ is an index, and u is a variable that is quantified at location i; this pair is a ∀-located variable if u is universally quantified at location i. We say that index j ∈ Iψ follows a located variable (i, u) if i <ψ j and for each index k ∈ Iψ with i <ψ k ≤ψ j, it holds that u ∈ free(φ(k)). We say that a located variable (j, v) follows a located variable (i, u) if j follows (i, u). We say that an index j or a located variable (j, v) follows a set S of located variables if j follows each located variable in S. A set S of located variables is coherent if for any two distinct elements (i, u), (j, v) ∈ S, one follows the other (that is, either (i, u) follows (j, v) or (j, v) follows (i, u)). When S is a set of located variables, we use vars(S) to denote the set of variables occurring in the located variables in S. Observe that when a set S of located variables is coherent, no variable occurs in two distinct located variables in S, and so |S| = |vars(S)|. We now present a nondeterministic, recursive algorithm that, in a sense to be made precise, corresponds to the proof system. At each point in time, the algorithm maintains a set S of coherent variables; actions it may perform include branching on a located variable (i, u) such that adding (i, u) to S is still coherent, and, nondeterministically setting a ∀- located variable (i, y) that follows S. The algorithm returns either the false value F or the indeterminate value ⊥. On these two values, we define the operation ∨ by F ∨ F = F and ⊥∨ F = F ∨⊥ = ⊥∨⊥ = ⊥. Intuitively speaking, the algorithm returns the indeterminate value ⊥ when a nondeterministically selected action cannot be carried out. We assume that when the algorithm is first invoked on a given QCBF instance, the set S is initially assigned to the empty set. Algorithm Detect_Falsity( QCBF instance ψ, coherent set S, assignment a : vars(S)→ {0, 1}) {\nSelect nondeterministically and perform one of the following:\n(falsify) check if there exists a location i following S such that ψ(i) is a clause falsified by a with vars(ψ(i)) = vars(S); if so, return F, else return ⊥;\n(Q-branch) check if there exists a located variable (i, u) /∈ S such that S ∪ {(i, u)} is coherent; if not, return ⊥, else: - nondeterministically select such a located variable (i, u); - nondeterministically pick subsets S0, S1 ⊆ S with S0 ∪ S1 = S; - return Detect-Falsity(ψ, S0 ∪ {(i, u)}, (a vars(S0))[u→ 0]) ∨\nDetect-Falsity(ψ, S1 ∪ {(i, u)}, (a vars(S1))[u→ 1])\n(∀-branch) check if there exists a ∀-located variable (i, y) that follows S; if not, return ⊥, else: - nondeterministically select such a ∀-located variable (i, y); - nondeterministically pick a value b ∈ {0, 1}; - return Detect-Falsity(ψ, S ∪ {(i, y)}, a[y → b])\n}\nRelative to a clause judgement proof, we employ the following terminology. A clause judgement (j, β) that is derived using a previous judgement (i, α) is said to be a successor of (i, α); also, (i, α) is said to be a predecessor of (j, β). So, a clause judgement derived using the (clause) rule has 0 predecessors, one derived using the (resolve) rule has 2 predecessors, and one derived using one of the other rules has 1 predecessor. We say that a clause judgement proof is tree-like if each clause judgement has at most one successor; in this case, each clause judgement (i, α) naturally induces a tree (defined recursively) where: each node is labelled with a clause judgement; the root is labelled with (i, α); and, for each predecessor of the clause judgement (i, α), the root has a child which is the tree of the predecessor. We formalize the notion of a trace of the nondeterministic algorithm. A trace of a QCBF instance ψ is a rooted tree where: • each node has a label (S, a) where S is a coherent set of located variables and a : vars(S)→ {0, 1} is an assignment; • each node has 0, 1, or 2 children; • when a node has 2 children and label (S, a), the labels of the two children could be\ngenerated by the (Q-branch) step from (S, a); • when a node has 1 child and label (S, a), the label of the child could be generated by the\n(∀-branch) step from (S, a); • when a node has 0 children and label (S, a), the node has an associated index i that\nfollows S and such that ψ(i) is a clause falsified by a with vars(ψ(i)) = vars(S).\nWe take it as evident that this notion of trace properly formalizes the recursion trees that the algorithm generates. Let e denote the unique assignment from ∅ to {0, 1}. We now show that, up to polynomial-time computable translations, tree-like clause judgement proofs of an empty clause correspond precisely to traces having root label (∅, e).\nTheorem 4.5. Let ψ be a QCBF instance; let n ≥ 1. There exists a tree-like clause judgement proof P (viewed as a tree) of an empty clause with n non-flow judgements if and only if there exists a trace T whose root has label (∅, e) and having n nodes. Moreover, both implied translations (from proof to trace, and from trace to proof) can be computed in polynomial time.\nThe proof of this theorem is provided in Section B.\n5. Algebraic characterization of k-judge-consistency\nWe will assume that all structures under discussion in this section are finite, in that each structure’s universe is finite.\nDefinition 5.1. Let k ≥ 1. A QCSP instance (φ,B) is k-judge-consistent if there does not exist a judgement proof of width less than or equal to k that contains an empty judgement.\nDefinition 5.2. Let (φ,B) be a QCSP instance, where φ is a qc-formula with index set I, and let k ≥ 1. A k-constraint system P provides, for each i ∈ I and each V ⊆ free(φ(i)) with |V | ≤ k, a non-empty set P [i, V ] of maps from V to B satisfying the following four properties: • (α) If φ(i) is an atom R(v1, . . . , vm) with V = {v1, . . . , vm}, then P [i, {v1, . . . , vm}] ⊆ {f : {v1, . . . , vm} → B | (f(v1), . . . , f(vm)) ∈ RB} • (π) If U ⊆ V , then P [i, U ] = (P [i, V ] U).\n• (λ) If j is a child of i and V ⊆ free(φ(j)), then P [i, V ] = P [j, V ]. • ( ) If j is a child of i, φ(i) = ∀yφ(j), U is a subset of free(φ(j)) with |U | ≤ k and y ∈ U ,\nand V = U \\ {y}, then P [i, V ] ⊆ y(P [j, U ]).\nWe show that the existence of a k-constraint system characterizes k-judge consistency.\nTheorem 5.3. Let (φ,B) be a QCSP instance. There exists a k-constraint system P for the instance if and only if the instance is k-judge-consistent.\nA proof of this theorem can be found in Section C.\nTheorem 5.4. For each k ≥ 1, there exists a polynomial-time algorithm that, given a QCSP instance (φ,B), decides if the instance is k-judge-consistent.\nProof. We begin by describing the algorithm, which decides, given a QCSP instance (φ,B), whether or not there exists a k-constraint system (this property is equivalent to k-judgeconsistency by Theorem 5.3). Throughout, i and j will always denote indices from Iφ. For each i ∈ Iφ and V ⊆ free(φ(i)) with |V | ≤ k, the algorithm initializes Q[i, V ] to be {f : {v1, . . . , vm} → B | (f(v1), . . . , f(vm)) ∈ RB} in the case that φ(i) is an atom R(v1, . . . , vm) and V = {v1, . . . , vm}, and otherwise initializes Q[i, V ] to be the set of all maps from V to B. The algorithm then iteratively performs the following rules (which parallel properties (π), (λ), and ( ) in the definition of k-constraint system) until no changes can be made to Q: • When i is an index and U ⊆ V ⊆ free(φ(i)) with |V | ≤ k, assign to Q[i, U ] the value Q[i, U ]∩(Q[i, V ] U) and then assign to Q[i, V ] the value {f ∈ Q[i, V ] | (f U) ∈ Q[i, U ]}. • If j is a child of i, V ⊆ free(φ(i)) ∩ free(φ(j)), and |V | ≤ k, assign to each of Q[i, V ], Q[j, V ] the value Q[i, V ] ∩Q[j, V ]. • If j is a child of i, φ(i) = ∀yφ(j), and U is a set of variables with y ∈ U ⊆ free(φ(j)) and |U | ≤ k, then assign to Q[i, U \\ {y}] the value Q[i, U \\ {y}] ∩ y(P [j, U ]).\nThis algorithm runs in polynomial time: there are polynomially many pairs (i, V ) for which Q[i, V ] is initialized and used, and each Q[i, V ] contains (at most) polynomially many maps: when |V | ≤ k, the number of maps from V to B is polynomial. (Here, when we say polynomial, we mean as a function of the input length.) Applying the three given rules can be done in polynomial time; each time they are applied, the sets Q[i, V ] may only decrease in size. Hence, the process of repeatedly applying the three rules until no changes are possible terminates in polynomial time. We now explain why the instance is k-judge-consistent if and only if no set Q[i, V ] is empty, which suffices to give the theorem. It is straightforward to verify that, for any k-constraint-system P , the invariant P [i, V ] ⊆ Q[i, V ] is maintained by the algorithm. Hence, when the algorithm terminates, if any set Q[i, V ] is empty, then there does not exist a kconstraint system P . It is also straightforward to verify that, when the algorithm terminates, the four properties in the definition of k-constraint system hold on Q. (As an example, consider property (λ). Suppose that j is a child of i and that V ⊆ free(φ(i)) ∩ free(φ(j)). When the algorithm terminates, since the second rule can no longer be applied it must hold that Q[i, V ] = Q[j, V ] = Q[i, V ] ∩Q[j, V ].) Hence, if the algorithm terminates without any empty set Q[i, V ], it holds that Q is a k-constraint system.\nWe can upper bound the number of iterations that the algorithm performs on an instance (φ,B) in the following way. Let n be the maximum number of free variables, over all subformulas of φ. For each index i of φ, the algorithm maintains, for each V ⊆ free(φ(i))\nwith |V | ≤ k, a set of mappings from V to B. The size of such a set is at most |B||V |. In each iteration, each such set of mappings can only have mappings deleted from it. The number of iterations is thus upper bounded by the number of mappings that can occur in such sets of mappings, which is |Iφ|( ( n k ) |B|k + ( n k−1 ) |B|k−1 + · · ·+ ( n 0 ) |B|0). We now show that checking for k-judge-consistency gives a way to decide a set of prenex qc-sentences that is tractable via the dichotomy theorem on so-called prefixed graphs [7]. In particular, we prove this in the setting where relation symbols have bounded arity. Let us refer to the width notion defined in that previous work [7] as elimination width. Define the Q-width of a prenex qc-sentence φ to be the maximum of its elimination width and maxR |ar(R)| (where this maximum ranges over all relation symbols R appearing in φ).\nTheorem 5.5. Let k ≥ 1. Suppose that φ is a prenex qc-sentence with Q-width k (or less). For any finite structure B, it holds that (φ,B) is k-judge-consistent if and only if B |= φ. (Intuitively, this says that checking for k-judge consistency is a decision procedure for QCSP instances involving φ.)\nThis theorem, in conjunction with Theorem 5.4, immediately implies that for any set Φ of qc-sentences having Q-width bounded by a constant k, checking for k-judge-consistency is a uniform polynomial-time procedure that decides any QCSP instance (φ,B) where φ ∈ Φ and B is finite. Hence, in the setting of bounded arity, checking for k-judge-consistency is a generic reasoning procedure that correctly decides the tractable cases of QCSP identified by the work on elimination width.\nIn order to establish this theorem, we first prove a lemma.\nLemma 5.6. Suppose that the QCSP instance (θ,B) is k-judge-consistent, that B is a finite structure, and that θ′ is a qc-sentence obtained from θ by applying one of the following three syntactic transformations to a subformula of θ:\n(1) ∧ i∈I φi ( ∧ j∈J φj) ∧ ( ∧ k∈K φk), where I is the disjoint union of J and K (2) Qv(φ ∧ ψ) (Qvφ) ∧ ψ where v /∈ free(ψ) (3) ∀y ∧ i∈I φi ∧ i∈I(∀yφi) Then, the QCSP instance (θ′,B) is k-judge-consistent.\nProof. By Theorem 5.3, it suffices to show that if (θ,B) has a k-constraint system P , then (θ′,B) does as well. We consider each of the three cases. Case (1): We define a k-constraint system P ′ for (θ′,B) in the following way. Relative to the transformation, let i denote the index of φi in both θ and θ\n′; let c denote the index of ∧ i∈I φi in θ and of ( ∧ j∈J φj) ∧ ( ∧ k∈K φk) in θ ′; let a be the index of ∧ j∈J φj in θ ′; and\nlet b be the index of ∧ k∈K φk in θ\n′. For each other subformula occurrence in θ′, there is a corresponding subformula occurrence in θ; we will assume that these two corresponding subformula occurrences share the same index.\nWe now describe how to define P ′. Whenever discussing P ′[d, V ], it will hold that d is an index of θ′, and we assume that V ⊆ free(θ′(d)) and |V | ≤ k. We define P ′[i, V ] as P [i, V ]. We define P ′[c, V ] as P [c, V ]. We define P ′[a, V ] as P [c, V ], and similarly we define P ′[b, V ] as P [c, V ]. For each other index ` of θ′, we define P ′[`, V ] as P [`, V ]. It is straightforward to verify that P ′ is a k-constraint system. Case (2): We proceed as in the previous case; we define a k-constraint system P ′ for (θ′,B). Relative to the transformation, let a denote the index of Qv(φ ∧ ψ) in θ; let b denote the index of the subformula Qvφ in θ′. We define P ′[b, V ] as P [a, V ]. For each other subformula occurrence of θ′ with index `, there exists a corresponding subformula\noccurrence of θ which we assume to also have index `. We define P ′[`, V ] as P [`, V ]. It is straightforward to verify that P ′ is a k-constraint system.\nCase (3): We proceed as in the previous cases; we define a k-constraint system P ′ for (θ′,B). Let d denote the index of ∀y ∧ i∈I φi in θ, and also the index of ∧ i∈I(∀yφi) in θ′. Let i denote the index of φi in both θ and θ ′. Let c denote the index of ∧ i∈I φi in θ, and let i′ denote the index of ∀yφi in θ′. For each V ⊆ free(∀yφi) with |V | ≤ k, define P ′[i′, V ] to be P [d, V ]. Elsewhere, define P ′ to be equal to P (each other index of θ′ corresponds to an index of θ). It is straightforward to verify that P ′ is a k-constraint system. In the region of interest, the property ( ) can be verified as follows. Suppose that U ⊆ free(φ(i)) has |U | ≤ k and y ∈ U , and that V = U \\ {y}. Then P [d, V ] ⊆ y(P [c, U ]) = y(P [i, U ]) since P is a k-constraint system. As P ′[i′, V ] = P [d, V ] by our definition of P ′, it follows that P ′[i′, V ] ⊆ y(P [i, U ]).\nProof. (Theorem 5.5) Suppose that the instance (φ,B) is not k-judge-consistent. Then, by definition, there exists a judgement proof for the instance containing an empty judgement, implying that B 6|= φ by Theorem 3.6.\nFor the other direction, suppose that B 6|= φ. From the definition of elimination width (defined as width in [7]), it can straightforwardly be verified by induction on the number of variables in φ that φ can be transformed to a sentence φ′ having width less than or equal to k, via the three syntactic transformations of Lemma 5.6. As these three syntactic transformations preserve logical equivalence, we have B 6|= φ′. By Theorem 3.6, an empty judgement is derivable; by the proof of this theorem, there is a judgement proof with the empty judgement whose width is equal to the width of φ′. Since the width of φ′ is less than or equal to k, we thus obtain a judgement proof of the empty judgement having width less than or equal to k, so by definition, (φ′,B) is not k-judge-consistent. By appeal to Lemma 5.6, (φ,B) is not k-judge-consistent."
    }, {
      "heading" : "Acknowledgements",
      "text" : "The author thanks Moritz Müller and Friedrich Slivovsky for useful comments. This work was supported by the Spanish project TIN2013-46181-C2-2-R, by the Basque project GIU12/26, and by the Basque grant UFI11/45."
    }, {
      "heading" : "Appendix A. Proof of Theorem 4.3",
      "text" : "The theorem follows directly from the following two theorems.\nTheorem A.1. Let ψ be a QCBF instance and let (φ,B) be a QCSP translation of ψ. For each clause judgement proof of ψ having length s and width w, there exists a constraint judgement proof of (φ,B) having length ≤ 2s and width ≤ w + 1 such that: each clause judgement (i, α) appearing in the first proof has the entailment property that there exists a constraint judgement in the second proof of the form (i, vars(α), F ) such that each f ∈ F satisfies α (equivalently, the unique g : vars(α)→ {0, 1} that does not satisfy α is not in F ).\nA direct consequence of this theorem is that if the original clause judgement proof contains an empty clause, then the produced constraint judgement proof contains an empty constraint.\nProof. We prove this by induction on s. Given a clause judgement proof P of length s+ 1 we create a constraint judgement proof in the following way. Apply induction to the clause judgement proof consisting of the first s judgements in P ; this gives a constraint judgement proof P ′. We then need to show how to augment P ′. We consider cases, depending on the rule used to derive the last judgement of P . We use the notation of Definition 4.1. • In the case of (clause) deriving (i, α), apply (atom) at location i. • In the case of (resolve) deriving (i, γ) from (i, α) and (i, β), let v be the variable underlying\nthe complementary literals that are eliminated from α and β to obtain γ. The rule (join) is applied to the constraint judgements corresponding to (i, α) and (i, β) to obtain a new judgement, and then (projection) is used to remove the variable v from that new judgement. • In the case of (upward flow) or (downward flow), the same rule is applied to the corre-\nsponding constraint judgement. • In the case of (∀-removal), the rule (∀-elimination) is applied to the corresponding\nconstraint judgement.\nIn the case (resolve), two new constraint judgements are produced, and in all other cases, one new constraint judgement is produced; hence, the claim on the length is correct. In the case (resolve), the width of the first constraint judgement produced is one more than the width of the corresponding clause judgement, and the width of the second constraint judgement produced is equal to the width of the corresponding clause judgement; in all other cases, the new constraint judgement produced has width equal to that of the corresponding clause judgement. Hence, the claim on the width is correct. In each case, it is straightforward to verify the claimed entailment property. As an example, we verify the claimed entailment property in the case of (resolve). Suppose that (resolve) derives (i, γ) from (i, α) and (i, β). Let gα : vars(α) → {0, 1}, gβ : vars(β) → {0, 1}, and gγ : vars(γ) → {0, 1} be assignments not satisfying α, β, and γ, respectively. Let v be the variable such that vars(γ) = (vars(α) ∪ vars(β)) \\ {v}. We assume without loss of generality that gα(v) = 0 and that gβ(v) = 1. Let (i, vars(α), Fα) and (i, vars(β), Fβ) be the constraint judgements for (i, α) and (i, β), respectively; we have gα /∈ Fα and gβ /∈ Fβ. Consider the constraint judgement (i, vars(α) ∪ vars(β), Fα on Fβ) obtained by applying (join) to these two constraint judgements. By definition of the join on, neither gα not gβ has an extension defined on vars(α)∪ vars(β) that is contained in Fα on Fβ . Next, consider the constraint judgement (i, vars(γ), (Fα on Fβ) vars(γ)) obtained from the previous one by applying (projection). We claim that gγ /∈ (Fα on Fβ) vars(γ). Suppose not,\nfor a contradiction; then there exists an extension g′γ of gγ which is contained in Fα on Fβ . If g′γ(v) = 0, then g ′ γ is an extension of gα, but g ′ γ ∈ Fα on Fβ contradicts gα /∈ Fα; analogously, If g′γ(v) = 1, then g ′ γ is an extension of gβ, but g ′ γ ∈ Fα on Fβ contradicts gβ /∈ Fβ.\nTheorem A.2. Let ψ be a QCBF instance and let (φ,B) be a QCSP translation of ψ. For each constraint judgement proof of (φ,B) having length s and width w, there exists a clause judgement proof of ψ of length ≤ s ·max(w2w−1, 1) and width ≤ w such that: each constraint judgement (i, V, F ) appearing in the first proof has the entailment property that, for each mapping g : V → {0, 1} with g /∈ F , there exists a clause judgement (i, α) with vars(α) ⊆ V in the second proof where α is not satisfied by g.\nA direct consequence of this theorem is that if a constraint judgement proof of (φ,B) having length s and width w contains an empty constraint, it may be augmented by one constraint judgement to contain an empty constraint of the form (i, ∅, ∅), and then the theorem yields that there is a clause judgement proof having an empty clause of length ≤ (s+ 1) ·max(w2w−1, 1) and width ≤ w.\nProof. We proceed as in the proof of the previous theorem. We prove this by induction on s. Given a constraint judgement proof P of length s+ 1, we create a clause judgement proof P ′ by applying induction to P with the last constraint judgement removed; we then explain how to augment the resulting clause judgement proof P ′ so that the last constraint judgement of P has a corresponding clause judgement with the properties given in the theorem statement. We consider cases depending on the rule used to derive the last constraint judgement of P ; we use the notation of Definition 3.3. • In the case of (atom) deriving (i, V, F ), apply (clause) at location i. • In the case of (projection) deriving (i, U, F U) from (i, V, F ), we first explain how to\nobtain the clause judgements in the case that |V | = |U |+ 1. Let v be the variable such that U ∪{v} = V . For each clause judgement (i, α) with vars(α) ⊆ U that can be obtained by resolving two clause judgements in P ′ on the variable v, include the clause judgement in the proof. The maximum number of clause judgements that we can add in this fashion is the number of clauses on (w − 1) variables, that is, 2w−1.\nIn the general case where U ⊆ V , we may proceed by applying the described procedure |V | − |U | many times. Since |V | − |U | ≤ w, the total number of clause judgements that will be added can be upper bounded by w2w−1. • In the case of (join), no clause judgement needs to be added. This is because of the\nfollowing. Suppose the constraint judgement (i, U1 ∪ U2, F1 on F2) is obtained by applying (join) to (i, U1, F1) and (i, U2, F2). For each mapping g : U1∪U2 → {0, 1} with g /∈ F1 on F2, it holds (by definition of on) that either g U1 /∈ F1 or g U2 /∈ F2. • In the case of (∀-elimination) deriving (i, V \\ {y}, yF ) from (j, V, F ), take all clause\njudgements (j, α) where y ∈ vars(α) ⊆ V , and apply (∀-removal) to each of these clause judgements. • In the case of (upward flow) or (downward flow), the same rule is applied to the corre-\nsponding clause judgement.\nIn each case, the clause judgements produced have width less than or equal to w. We now consider the number of clause judgements produced in each case. This number is 1 in the cases (atom), (upward flow), and (downward flow), and is 0 in the case (join). In the case of (projection), we argued that this number is less than or equal to w2w−1. In the case of\n(∀-elimination), since this rule can only be applied if w ≥ 1 and at most 2w−1 clauses are generated, we can also bound this number by w2w−1.\nIn each case, it is straightforward to verify the claimed entailment property."
    }, {
      "heading" : "Appendix B. Proof of Theorem 4.5",
      "text" : "The theorem follows directly from the following two theorems.\nTheorem B.1. Let ψ be a QCBF instance. Given a tree-like clause judgement proof P (viewed as a tree) of an empty clause, there exists a trace E whose root has label (∅, e) and where the number of nodes in E is equal to the number of non-flow judgements in P . (Here, we use e to denote the unique assignment from ∅ to {0, 1}.) Also, the translation from P to E is polynomial-time computable.\nProof. We prove the following result, which yields the theorem. Suppose that P is a tree-like clause judgement proof, viewed as a tree; using (i, α) to denote the clause judgement at the root of P , there exists a trace E whose number of nodes is equal to the number of non-flow judgements in P , and whose root has label (S, a), such that the following two conditions hold: (1) For each v ∈ vars(α), the set S contains the located variable (j, v) where j is the first location above i where v is quantified. (2) The assignment a is the unique assignment on vars(α) that falsifies α.\nWe prove this result by induction on the structure of P , describing directly how to construct E. We consider cases depending on how the clause judgement at the root of P was derived; we use the notation of Definition 4.1. In the case of (clause), let E consist of a single node having label (S, a), where (S, a) is the unique pair satisfying the two conditions. In the case of (resolve), suppose that (i, γ) is the clause judgement at the root of P and that (i, γ) is derived as a resolvent of α and β via clause judgements (i, α) and (i, β). Suppose that v ∈ α and v ∈ β are the complementary literals such that γ = (α \\ {v}) ∪ (β \\ {v}). Take the trace whose root has label (U, c) where U is the union of S and T but without the located variable containing v, and where c is the unique assignment on vars(U) = vars(γ) that falsifies γ. Since i follows S and i follows T , we have that i follows U , and we have that (S, a) and (T, b) could be generated from (U, c) via a (Q-branch) step. In the case of (∀-removal), suppose that the clause judgement at the root of P has the form (i, α \\{y, y}) and is derived from (j, α) where φ(i) = ∀yφ(j). If α∩{y, y} = ∅, then the trace E can be taken to be the trace given by induction. Otherwise, take the trace for (j, α) given by induction, and let (T, a) denote its root node label. Set S to be T , but with the located variable for y removed. We have that (T, a) could be derived from (S, a vars(S)) by a (∀-branch) step; hence, we may take the trace obtained from the trace for (j, α) by adding on the top a new root node with label (S, a vars(S)). In the case of (upward flow) or (downward flow), we simply take the trace given by induction. This preserves condition (1): if i is the parent of j in φ and (i, α) and (j, α) are clause judgements in P , then vars(α) ⊆ free(ψ(i)) ∩ free(ψ(j)) and so no variable in vars(α) is quantified at location i (nor j).\nTheorem B.2. Let ψ be a QCBF instance. Given a trace T with root node label (∅, e), there exists a tree-like clause judgement proof P of an empty clause where the number of non-flow nodes in P (viewed as a tree) is equal to the number of nodes in T . Also, the translation from T to P is polynomial-time computable.\nProof. We prove the following result which implies the theorem: for any trace T with root node label (S, a), there exists a tree-like clause judgement proof P ending in (i, α) where the number of nodes in P and T are related as in the theorem statement, and such that the following two conditions hold:\n(1) i follows S. (2) vars(S) = vars(α) and a is the unique assignment on vars(α) that falsifies α.\nWe prove the result by induction; we consider cases depending on the type of the root node of T , that is, depending on how many children the root node of T has.\nIf the root node of T is a leaf, the result is clear from the definition of trace. If the root node of T has one child, let (S ∪ {(j, y)}, a[y → b]) be the label of the child of the root node. By induction, there exists a tree-like clause judgement proof ending with (k, β) where k follows S ∪ {(j, y)} and a[y → b] is the unique assignment on vars(β) that falsifies β. Since (j, y) follows S and k follows (j, y), by applying (upward flow), we may obtain a tree-like clause judgement proof ending with (c, β) where c is the child of j. Then, as ψ(j) = ∀yψ(c), we can apply (∀-removal) to (c, β) to obtain the desired clause judgement proof. If the root node of T has two children, let (S0 ∪ {(j, u)}, (a vars(S0))[u → a0]) and (S1∪{(j, u)}, (a vars(S1))[u→ a1]) be the labels of the children; we have a0, a1 ∈ {0, 1} and a0 6= a1. By induction, we have tree-like clause judgement proofs ending with (k0, β0) and (k1, β1) where k0 follows S0 ∪ {(j, u)} and (a vars(S0))[u→ a0] is the unique assignment on vars(β0) that falsifies β0; and similarly, k1 follows S1 ∪ {(j, u)} and (a vars(S1))[u→ a1] is the unique assignment on vars(β1) that falsifies β1. By applying (upward flow), we obtain tree-like clause judgement proofs ending with (`0, β0) and (`1, β1) where `0 is the child of the lowest location in S0 ∪ {(j, u)}, and `1 is the child of the lowest location in S1 ∪ {(j, u)}. Let m be the child of the lowest location in S ∪ {(j, u)}. At least one of `0, `1 is equal to m (since S0 ∪ S1 = S). If one of `0, `1 is not equal to m, say `b, we may apply (downward flow) to obtain a clause judgement proof (m,βb); this is because vars(βb) is free in every location between m and `b (inclusive), as S ∪ {(j, u)} is coherent. We hence obtain clause judgement proofs for (m,β0) and for (m,β1). Apply (resolve) to these to obtain the desired clause judgement proof."
    }, {
      "heading" : "Appendix C. Proof of Theorem 5.3",
      "text" : "Theorem 5.3 follows immediately from the two lemmas presented in this section.\nLemma C.1. Let (φ,B) be a QCSP instance. If there exists a k-constraint system P for the instance, then the instance is k-judge-consistent.\nProof. We show, by induction on the proof structure, that if (i, V, F ) with |V | ≤ k is a derivable judgement, then P [i, V ] ⊆ F . We consider cases based on which rule was used to derive (i, V, F ).\nIn the case of (atom), we have P [i, V ] ⊆ F by property (α).\nIn the case of (projection), we suppose that (i, V, F ) is a previous judgement with P [i, V ] ⊆ F , and that the judgement of interest has the form (i, U, F U), where U ⊆ V . We have P [i, U ] = (P [i, V ] U) ⊆ (F U), where the equality holds by property (π). In the case of (join), we suppose that (i, U1, F1) and (i, U2, F2) are previous judgements with P [i, U1] ⊆ F1 and P [i, U2] ⊆ F2, and that the judgement of interest is (i, U1 ∪ U2, F1 on F2). By property (π), we have that P [i, U1 ∪ U2] U1 = P [i, U1] and P [i, U1 ∪ U2] U2 = P [i, U2]. It follows that P [i, U1 ∪ U2] ⊆ P [i, U1] on P [i, U2] ⊆ F1 on F2.\nThe cases of (upward flow) and (downward flow) follow immediately from property (λ). In the case of (∀-elimination), we suppose that (j, V, F ) is a previous judgement with P [j, V ] ⊆ F , and that the judgement of interest is (i, V \\ {y}, yF ) where i is the parent of j, and φ(i) = ∀yφ(j). We have P [i, V \\{y}] ⊆ y(P [j, V ]) ⊆ y(F ), where the first containment holds by property ( ).\nDefinition C.2. Let k ≥ 1. A structure B is k-behaved if for each i with 1 ≤ i ≤ k, there are finitely many relations of arity i that are qc-definable over B.\nLemma C.3. Let k ≥ 1. Let (φ,B) be a QCSP instance where B is k-behaved. If the instance is k-judge-consistent, then then there exists a k-constraint system P for the instance.\nProof. Relative to a QCSP instance, we say that a judgement is k-derivable if there exists a judgement proof of width less than or equal to k that contains the judgement.\nLet I be an index set for φ. Let us say that a k-derivable judgement (i, V, F ) is minimal if for all sets G such that the judgement (i, V,G) is k-derivable, it holds that G ⊆ F implies G = F . We claim that, when i ∈ I and V ⊆ free(φ(i)) with |V | ≤ k, there is a unique minimal k-derivable judgement (i, V, F ). The existence of a minimal k-derivable judgement follows from Lemma 3.5 and the k-behavedness of B. To establish uniqueness, suppose for a contradiction that (i, V, F1) and (i, V, F2) are both minimal k-derivable judgements and F1 6= F2. By the definition of minimal, we have F1 6⊆ F2 and F2 6⊆ F1, so F1 ∪ F2 6⊆ F1 and F1 ∪ F2 6⊆ F2. By the (join) rule, the judgement (i, V, F1 on F2) is k-derivable; since here F1 on F2 = F1 ∩ F2, we obtain a contradiction.\nFor all i ∈ I and V ⊆ free(φ(i)), we define P [i, V ] so that (i, V, P [i, V ]) is the unique minimal k-derivable judgement involving i and V . We confirm that P is a k-constraint system by verifying that it satisfies each of the four properties of the definition of k-constraint system. In discussing each of the properties, we use the notation of Definition 5.2.\nProperty (α) follows immediately from the (atom) rule. For property (π), suppose that U ⊆ V . We have that (i, U, P [i, U ]) and (i, V, P [i, V ]) are k-derivable. It follows that (i, V, FV ) and (i, U, FU ) are k-derivable, where FV = P [i, U ] on P [i, V ] and FU = FV U . We have FV ⊆ P [i, V ] and FU ⊆ P [i, U ]; it follows, by definition of P , that FV = P [i, V ] and FU = P [i, U ]. Since FU = FV U , we have P [i, U ] = P [i, V ] U .\nFor property (λ), suppose that j is a child of i with V ⊆ free(φ(j)). We have that (i, V, P [i, V ]) and (j, V, P [j, V ]) are k-derivable. By the (downward flow) and (upward flow) rules, we obtain that (i, V, P [j, V ]) and (j, V, P [i, V ]) are k-derivable. By definition of P , we obtain that P [i, V ] ⊆ P [j, V ] and P [j, V ] ⊆ P [i, V ] and hence P [i, V ] = P [j, V ]. For property ( ), suppose that j is a child of i, φ(i) = ∀yφ(j), U is a subset of free(φ(j)) with |U | ≤ k and y ∈ U , and V = U \\ {y}. That P [i, V ] ⊆ y(P [j, U ]) follows immediately from applying the (∀-elimination) rule to the k-derivable judgement (j, U, P [j, U ])."
    } ],
    "references" : [ {
      "title" : "Constraint propagation as a proof system",
      "author" : [ "A. Atserias", "P. Kolaitis", "M. Vardi" ],
      "venue" : "In Proceedings of CP,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2004
    }, {
      "title" : "Constraint satisfaction problems of bounded width",
      "author" : [ "L. Barto", "M. Kozik" ],
      "venue" : "In Proceedings of FOCS’09,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2009
    }, {
      "title" : "Propositional proof complexity: Past, present and future",
      "author" : [ "P. Beame", "T. Pitassi" ],
      "venue" : "Bulletin of the EATCS,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 1998
    }, {
      "title" : "Resolution for quantified Boolean formulas",
      "author" : [ "H.K. Büning", "M. Karpinski", "A. Flögel" ],
      "venue" : "Information and Computation,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 1995
    }, {
      "title" : "The tractability frontier of graph-like first-order query sets",
      "author" : [ "H. Chen" ],
      "venue" : "In Joint Meeting of the Twenty- Third EACSL Annual Conference on Computer Science Logic (CSL) and the Twenty-Ninth Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), CSL-LICS ’14,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2014
    }, {
      "title" : "From Pebble Games to Tractability: An Ambidextrous Consistency Algorithm for Quantified Constraint Satisfaction",
      "author" : [ "H. Chen", "V. Dalmau" ],
      "venue" : "In Computer Science",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2005
    }, {
      "title" : "Decomposing quantified conjunctive (or disjunctive) formulas",
      "author" : [ "H. Chen", "V. Dalmau" ],
      "venue" : "In LICS,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2012
    }, {
      "title" : "Grußien. Arc consistency and friends",
      "author" : [ "H. Chen", "V. Dalmau" ],
      "venue" : "J. Log. Comput.,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2013
    }, {
      "title" : "On sequent systems and resolution for qbfs",
      "author" : [ "U. Egly" ],
      "venue" : "In SAT, pages 100–113,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2012
    }, {
      "title" : "A solver for QBFs in negation normal",
      "author" : [ "U. Egly", "M. Seidl", "S. Woltran" ],
      "venue" : "form. Constraints,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2009
    }, {
      "title" : "Clause/term resolution and learning in the evaluation of quantified Boolean formulas",
      "author" : [ "E. Giunchiglia", "M. Narizzano", "A. Tacchella" ],
      "venue" : "J. Artif. Intell. Res. (JAIR),",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2006
    }, {
      "title" : "On propositional QBF expansions and Q-resolution",
      "author" : [ "M. Janota", "J. Marques-Silva" ],
      "venue" : "In SAT,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2013
    }, {
      "title" : "A game-theoretic approach to constraint satisfaction",
      "author" : [ "P.G. Kolaitis", "M.Y. Vardi" ],
      "venue" : "In Proceedings of the 17th National Conference on AI,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2000
    }, {
      "title" : "Evaluating and certifying qbfs: A comparison of state-of-the-art tools",
      "author" : [ "M. Narizzano", "C. Peschiera", "L. Pulina", "A. Tacchella" ],
      "venue" : "AI Commun.,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2009
    }, {
      "title" : "The complexity of propositional proofs",
      "author" : [ "N. Segerlind" ],
      "venue" : "Bull. Symbolic Logic,",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2007
    }, {
      "title" : "Computing resolution-path dependencies in linear time",
      "author" : [ "F. Slivovsky", "S. Szeider" ],
      "venue" : null,
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 2012
    } ],
    "referenceMentions" : [ {
      "referenceID" : 2,
      "context" : "The study of propositional proof systems for certifying the unsatisfiability of quantifier-free propositional formulas is supported by multiple motivations [3, 15].",
      "startOffset" : 156,
      "endOffset" : 163
    }, {
      "referenceID" : 14,
      "context" : "The study of propositional proof systems for certifying the unsatisfiability of quantifier-free propositional formulas is supported by multiple motivations [3, 15].",
      "startOffset" : 156,
      "endOffset" : 163
    }, {
      "referenceID" : 0,
      "context" : "Finally, algorithms that check for unsatisfiability proofs of various restricted forms have been shown to yield tractable cases of the propositional satisfiability problem and related problems (see for example [1, 2]).",
      "startOffset" : 210,
      "endOffset" : 216
    }, {
      "referenceID" : 1,
      "context" : "Finally, algorithms that check for unsatisfiability proofs of various restricted forms have been shown to yield tractable cases of the propositional satisfiability problem and related problems (see for example [1, 2]).",
      "startOffset" : 210,
      "endOffset" : 216
    }, {
      "referenceID" : 13,
      "context" : "space of potential certificate formats for verifying their correctness on particular input instances [14].",
      "startOffset" : 101,
      "endOffset" : 105
    }, {
      "referenceID" : 3,
      "context" : "Q-resolution [4] is a quantified proof system that can be viewed as a quantified analog of resolution, one of the best-known and most customarily considered propositional proof systems.",
      "startOffset" : 13,
      "endOffset" : 16
    }, {
      "referenceID" : 10,
      "context" : "In the context of quantified propositional logic, Q-resolution is a heavily studied and basic proof system on which others are built and to which others are routinely compared, as well as a point of departure for the discussion of suitable certificate formats (see [11, 16, 12] for examples).",
      "startOffset" : 265,
      "endOffset" : 277
    }, {
      "referenceID" : 15,
      "context" : "In the context of quantified propositional logic, Q-resolution is a heavily studied and basic proof system on which others are built and to which others are routinely compared, as well as a point of departure for the discussion of suitable certificate formats (see [11, 16, 12] for examples).",
      "startOffset" : 265,
      "endOffset" : 277
    }, {
      "referenceID" : 11,
      "context" : "In the context of quantified propositional logic, Q-resolution is a heavily studied and basic proof system on which others are built and to which others are routinely compared, as well as a point of departure for the discussion of suitable certificate formats (see [11, 16, 12] for examples).",
      "startOffset" : 265,
      "endOffset" : 277
    }, {
      "referenceID" : 9,
      "context" : "As argued by Egly, Seidl, and Woltran [10], this may disrupt the original formula structure, “artificially extend” the scopes of quantifiers, and generate dependencies among variables that were not originally present, unnecessarily increasing the expense of solving; we refer the reader to their article for a contemporary discussion of this issue.",
      "startOffset" : 38,
      "endOffset" : 42
    }, {
      "referenceID" : 15,
      "context" : "dependencies in a prenex formula [16].",
      "startOffset" : 33,
      "endOffset" : 37
    }, {
      "referenceID" : 0,
      "context" : "An example used in practice is arc consistency, and understanding when various forms of consistency provide an exact characterization of satisfiability (that is, when consistency is sufficient for satisfiability in addition to being necessary) has been a central theme in the tractability theory of constraint satisfaction [1, 2, 8].",
      "startOffset" : 323,
      "endOffset" : 332
    }, {
      "referenceID" : 1,
      "context" : "An example used in practice is arc consistency, and understanding when various forms of consistency provide an exact characterization of satisfiability (that is, when consistency is sufficient for satisfiability in addition to being necessary) has been a central theme in the tractability theory of constraint satisfaction [1, 2, 8].",
      "startOffset" : 323,
      "endOffset" : 332
    }, {
      "referenceID" : 7,
      "context" : "An example used in practice is arc consistency, and understanding when various forms of consistency provide an exact characterization of satisfiability (that is, when consistency is sufficient for satisfiability in addition to being necessary) has been a central theme in the tractability theory of constraint satisfaction [1, 2, 8].",
      "startOffset" : 323,
      "endOffset" : 332
    }, {
      "referenceID" : 0,
      "context" : "Atserias, Kolaitis, and Vardi [1] showed that checking for k-consistency, an oft-considered consistency notion, can be viewed as detecting the absence of a proof of unsatisfiability having width at most k, in a natural proof system (the width of a proof is the maximum number of variables appearing in a line of the proof); Kolaitis and Vardi [13] also characterized k-consistency algebraically as whether or not Duplicator can win a natural Spoiler-Duplicator pebble game in the spirit of Ehrenfeucht-Fräıssé games.",
      "startOffset" : 30,
      "endOffset" : 33
    }, {
      "referenceID" : 12,
      "context" : "Atserias, Kolaitis, and Vardi [1] showed that checking for k-consistency, an oft-considered consistency notion, can be viewed as detecting the absence of a proof of unsatisfiability having width at most k, in a natural proof system (the width of a proof is the maximum number of variables appearing in a line of the proof); Kolaitis and Vardi [13] also characterized k-consistency algebraically as whether or not Duplicator can win a natural Spoiler-Duplicator pebble game in the spirit of Ehrenfeucht-Fräıssé games.",
      "startOffset" : 343,
      "endOffset" : 347
    }, {
      "referenceID" : 6,
      "context" : "As an application of this algebraic characterization, we prove that (in a sense made precise) any case of the QCSP that lies in the tractable regime of a recent dichotomy theorem [7], is tractable via checking for k-judge-consistency.",
      "startOffset" : 179,
      "endOffset" : 182
    }, {
      "referenceID" : 5,
      "context" : "We remark that earlier work [6] presents algebraically a notion of consistency for the QCSP, but no corresponding proof system was explicitly presented; the notion of k-judgement consistency can be straightforwardly verified to imply the notion of consistency in this earlier article.",
      "startOffset" : 28,
      "endOffset" : 31
    }, {
      "referenceID" : 8,
      "context" : "One particular possibility for future work is to compare this proof system to others that are defined on non-prenex formulas, such as those discussed and studied by Egly [9].",
      "startOffset" : 170,
      "endOffset" : 173
    }, {
      "referenceID" : 4,
      "context" : "2 Let us remark that this dichotomy theorem has since been generalized [5].",
      "startOffset" : 71,
      "endOffset" : 74
    }, {
      "referenceID" : 3,
      "context" : "We now show that our clause judgement proof system simulates Q-resolution [4], as made precise by the following theorem.",
      "startOffset" : 74,
      "endOffset" : 77
    }, {
      "referenceID" : 6,
      "context" : "We now show that checking for k-judge-consistency gives a way to decide a set of prenex qc-sentences that is tractable via the dichotomy theorem on so-called prefixed graphs [7].",
      "startOffset" : 174,
      "endOffset" : 177
    }, {
      "referenceID" : 6,
      "context" : "Let us refer to the width notion defined in that previous work [7] as elimination width.",
      "startOffset" : 63,
      "endOffset" : 66
    }, {
      "referenceID" : 6,
      "context" : "From the definition of elimination width (defined as width in [7]), it can straightforwardly be verified by induction on the number of variables in φ that φ can be transformed to a sentence φ′ having width less than or equal to k, via the three syntactic transformations of Lemma 5.",
      "startOffset" : 62,
      "endOffset" : 65
    } ],
    "year" : 2014,
    "abstractText" : "We consider the quantified constraint satisfaction problem (QCSP) which is to decide, given a structure and a first-order sentence (not assumed here to be in prenex form) built from conjunction and quantification, whether or not the sentence is true on the structure. We present a proof system for certifying the falsity of QCSP instances and develop its basic theory; for instance, we provide an algorithmic interpretation of its behavior. Our proof system places the established Q-resolution proof system in a broader context, and also allows us to derive QCSP tractability results.",
    "creator" : "LaTeX with hyperref package"
  }
}