{
  "name" : "1312.6140.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "The DIAMOND System for Argumentation: Preliminary Report",
    "authors" : [ "Stefan Ellmauthaler", "Hannes Strass" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Formal argumentation has established itself as a vibrant subfield of artificial intelligence, contributing to such diverse topics as legal decision making and multiagent interactions. A particular, well-known formalism to model argumentation scenarios are Dung’s abstract argumentation frameworks [1]. In that model, arguments are treated as abstract atomic entities. The only information given about them is a binary relation expressing that one argument attacks another.\nA criticism often advanced against Dung frameworks is their restricted expressive capability of allowing only attacks between arguments. This leads to quite a number of extensions of Dung AFs, for example with attacks from sets of arguments [2], attacks on attacks [3] and meta-argumentation [4]. Unifying these and other extensions to AFs, Brewka and Woltran [5] proposed a general model, abstract dialectical frameworks (ADFs). In ADFs, attack, support, joint support, combined attacks and many more relations between arguments (called statements there) can be expressed, while the whole formalism stays on the same abstraction level as Dung’s.\nIn this paper we present the DIAMOND software system that computes models of ADFs with respect to several different semantics. The name DIAMOND abbreviates “DIAlectical MOdels eNcoDing” and hints at the fact that DIAMOND is built on top of the state of the art in answer set programming: abstract dialectical frameworks are encoded into logic programs, and an answer set solver is used to compute the models of the ADF. By providing an expressive argumentation formalism with an implementation, we pave the way for practical applications of ADFs in scenarios where dialectical aspects are of interest, for example in group decision making.\nThe paper proceeds as follows. We first introduce the necessary background in abstract dialectical frameworks and answer set programming. We then present\n? This research has been supported by DFG projects BR 1817/7-1 and FOR 1513.\nar X\niv :1\n31 2.\n61 40\nv1 [\ncs .A\nI] 2\n0 D\nec 2\n01 3\nthe DIAMOND system – how ADFs are represented there, and how the ADF semantics are encoded into answer set programs. We conclude with a contrasting discussion of the most significant related work."
    }, {
      "heading" : "2 Background",
      "text" : "An abstract dialectical framework (ADF) [5] is a directed graph whose nodes represent statements or positions that can be accepted or not. The links represent dependencies: the status of a node s only depends on the status of its parents (denoted par(s)), that is, the nodes with a direct link to s. In addition, each node s has an associated acceptance condition Cs specifying the exact conditions under which s is accepted. Cs is a function assigning to each subset of par(s) one of the truth values t, f . Intuitively, if for some R ⊆ par(s) we have Cs(R) = t, then s will be accepted provided the nodes in R are accepted and those in par(s) \\R are not accepted.\nDefinition 1. An abstract dialectical framework is a tuple D = (S,L,C) where\n– S is a set of statements (positions, nodes), – L ⊆ S × S is a set of links, – C = {Cs}s∈S is a set of total functions Cs : 2par(s) → {t, f}.\nIn many cases it is convenient to represent the acceptance condition of a statement s by a propositional formula ϕs, as is done in our running example.\nExample 1. Consider the ADF D = (S,L,C) with a support cycle and one attack relation: S = {a, b, c} , L = {(a, b), (b, a), (b, c)} , ϕa = b, ϕb = a, ϕc = ¬b. This ADF can also be represented as a graph, where the nodes are statements and the relations between them are directed edges. The boxes below each node are the acceptance conditions for the particular statement.\na b c\nb a ¬b\nIn recent work [6], we redefined several standard ADF semantics and defined additional ones. In this paper, we use these revised definitions, which are based on three-valued logic.1 The three truth values true (t), false (f) and unknown (u) are partially ordered by ≤i according to their information content: we have u <i t and u <i f and no other pair in <i, which intuitively means that the classical truth values contain more information than the truth value unknown. On the set of truth values, we define a meet operation, consensus, which assigns\n1 For further details on those newly introduced semantics we refer the interested reader to Brewka et al. [6].\nt u t = t, f u f = f , and returns u otherwise. The information ordering ≤i extends in a straightforward way to valuations v1, v2 over S in that v1 ≤i v2 iff v1(s) ≤i v2(s) for all s ∈ S. Obviously, a three-valued interpretation v is twovalued if all statements are mapped to either true or false. For a three-valued interpretation v, we say that a two-valued interpretation w extends v iff v ≤i w. We denote by [v]2 the set of all two-valued interpretations that extend v. A threevalued interpretation Ev has an associated extension Ev = {s ∈ S | v(s) = t}.\nBrewka and Woltran [5] defined an operator ΓD over three-valued interpretations. For each statement s, the operator returns the consensus truth value for its acceptance formula ϕs, where the consensus takes into account all possible two-valued interpretations w that extend the input valuation v.\nDefinition 2. Let D be an ADF and v be a three-valued interpretation. Then the interpretation ΓD(v) is given by s 7→ d {w(ϕs) | w ∈ [v]2}. Furthermore v is admissible iff v ≤i ΓD(v); complete iff ΓD(v) = v, that is, v is a fixpoint of ΓD; grounded iff v is the ≤i-least fixpoint of ΓD.\nA two-valued interpretation v is a model of D iff ΓD(v) = v; it is a stable model of D = (S,L,C) iff v is a model of D and Ev equals the grounded extension of the reduced ADF Dv = (Ev, L\nv, Cv), where Lv = L ∩ (Ev × Ev) and for s ∈ Ev we set ϕvs = ϕs[r/f : v(r) = f ].\nExample 2. We will now show the models with respect to the different semantics for the ADF introduced in Example 1. For readability, we write interpretations v as sets of literals Lv = {s ∈ S | v(s) = t} ∪ {¬s | s ∈ S, v(s) = f}. There are\n– five admissible interpretations: ∅, {a, b}, {a, b,¬c} {¬a,¬b, c}, {¬a,¬b}, – three complete models: {¬a,¬b, c}, ∅, {a, b,¬c}; of which ∅ is grounded; – two models: {a, b,¬c}, {¬a,¬b, c}, of which one is stable: {¬a,¬b, c}\nBrewka et al. [6] also defined an approach to handle preferences in ADFs. The approach generalises the one for AFs from Amgoud and Cayrol [7]. Since DIAMOND also implements this treatment of preferences, we recall it here. For this approach, the links are restricted to links that are attacking or supporting.\nDefinition 3. A prioritised ADF (PADF) is a tuple P = (S,L+, L−, >) where S is the set of nodes, L+ and L− are subsets of S×S, the supporting and attacking links, and > is a strict partial order (irreflexive, transitive, antisymmetric) on S representing preferences among the nodes.\nHere (a, b) ∈ > (alternatively: a > b) expresses that a is preferred to b. The semantics of prioritised ADFs is given by a translation to standard ADFs: P translates to (S,L+ ∪ L−, C), where for each statement s ∈ S the acceptance condition Cs is defined as: Cs(M) = t iff for each a ∈ M such that (a, s) ∈ L− and not s > a we have: for some b ∈ M , (b, s) ∈ L+ and b > a. Intuitively, an attacker does not succeed if the attacked node is more preferred or if there is a more preferred supporting node."
    }, {
      "heading" : "2.1 Answer Set Programming",
      "text" : "A propositional normal logic program Π is a set of finite rules r over a set of ground atoms A. A rule r is of the form α← β1, . . . , βm,not βm+1 . . . ,not βn, where α ∈ A, βi ∈ A are ground atoms and m ≤ n ≤ 0. Each rule consists of a body B(r) = {β1, . . . , βm,not βm+1 . . . ,not βn} and a head H(r) = {α}, divided by the ←-symbol. We will split up the body into two parts, B(r) = B+(r) ∪ B−(r), where B+(r) = {β1, . . . , βm} and B−(r) = {not βm+1 . . . ,not βn}. A rule r is said to be positive if B−(r) = ∅ and a program Π is positive if every rule r ∈ Π is positive. For a positive program Π, its immediate consequence operator TΠ is defined for S ⊆ A by TΠ(S) = {H(r) ∈ A | r ∈ Π,B+(r) ⊆ S}. A set A ⊆ A of ground atoms is a minimal model of a positive propositional logic program Π iff A is the least fixpoint of TΠ . To allow rules with negative body atoms, Gelfond and Lifschitz [8] proposed the stable model semantics (also called answer set semantics).\nDefinition 4. Let A ⊆ A be a set of ground atoms. A is a stable model for the propositional normal logic program Π iff A is the minimal model of the reduced program ΠA, where ΠA = {H(r)← B+(r) | r ∈ Π,B−(r) ∩A = ∅}.\nWe use clasp from the Potsdam Answer Set Solving Collection Potassco2 [9] as the back-end answer set solver for our software system. Potassco allows us to use an enriched input language where in addition to the above pictured propositional logic programs we can use first-order variables and predicates. Ground atoms are generally written in lower case while variables are represented with upper case characters. Additionally Potassco offers features like aggregates, cardinality constraints, choice rules and conditional literals. For further details we refer to the recent book by Gebser et al. [10]."
    }, {
      "heading" : "3 DIAMOND",
      "text" : "Our software system DIAMOND is a collection of answer set programming encodings and tools to compute the various models with respect to the semantics for a given ADF. The different encodings are designed around the Potsdam Answer Set Solving Collection (Potassco) [9] and the additional provided tools utilise clasp as solver, too. Note that the encodings for DIAMOND are built in a modular way. To compute the models of an ADF with respect to a semantics, different modules need to be grounded together to get the desired behaviour.\nDIAMOND is available for download and experimentation at the web page http://www.informatik.uni-leipzig.de/~ellmau/diamond. There we also provide further documentation on its usage. In short, DIAMOND is a Pythonscript,3 which can be invoked via the command line. Different switches are used to designate the desired semantics, and the input file is given as a file name or via the standard input. The options for the command line are as follows:\n2 Available at http://potassco.sourceforge.net 3 Python is available at http://www.python.org.\nusage: diamond.py [-h] [-cf] [-m] [-sm] [-g] [-c] [-a]\n[--transform pform | --transform prio] [-all] [--version] instance\npositional arguments:\ninstance File name of the ADF instance\noptional arguments:\n-h, --help show this help message and exit -cf, --conflict-free compute the conflict free sets -m, --model compute the two-valued models -sm, --stablemodel compute the stable models -g, --grounded compute the grounded model -c, --complete compute the complete models -a, --admissible compute the admissible models --transform pform transform a propositional formula ADF before the computation --transform prio transform a prioritized ADF before the computation -all, --all compute all sets and models --version prints the current version\nWe next describe how specific ADF instances are represented in DIAMOND."
    }, {
      "heading" : "3.1 Instance Representation",
      "text" : "In order to represent an ADF for DIAMOND its acceptance conditions need to be in the functional representation as given in Definition 1. The statements of an ADF are declared by the predicate s, and the links are represented by the binary predicate l, such that l(b,a) reflects that there is a link from b to a. The acceptance condition is modelled via the unary and tertiary predicates ci and co. Intuitively ci (resp. co) identifies the parents which need to be accepted, such that the acceptance condition maps to true (i.e. in) (resp. false (i.e. out)). To achieve a flat representation of each set of parent statements, we use an arbitrary third term in the predicate to identify them. To express what happens to a statement when none of the parents is accepted we use the unary versions of ci and co. Here is the DIAMOND representation of Example 1:\ns(a). s(b). s(c). l(b,a). l(a,b). l(b,c). co(a). ci(a,1,b). co(b). ci(b,1,a). ci(c). co(c,1,b).\nThe first line declares the statements and links. The second line expresses the acceptance conditions: statement a is out if b is out and in if b is; likewise b gets the same status as a; statement c is in if b is out , and c is out if b is in.\nAs a part of the DIAMOND software bundle, we also provide an ECLiPSe Prolog4 [11] program that transforms acceptance functions given as formulas into the functional representation used by DIAMOND.\nWe have chosen this functional representation of acceptance conditions for pragmatic reasons. An alternative would have been to represent acceptance conditions by propositional formulas. In this case, computing a single step of the operator would entail solving several NP-hard problems. The standard way to\n4 ECLiPSe is available at http://eclipseclp.org/.\nsolve these is the use of saturation [12], which however causes undesired sideeffects when employed together with meta-ASP [13]. Furthermore, other ADF semantics (e.g. preferred) utilise concepts like ⊆-minimality, which also require the use of meta-argumentation. We plan to extend DIAMOND to further semantics and therefore chose the functional representation of acceptance conditions to forestall potential implementation issues.\nDue to compatibility considerations, it is possible for DIAMOND to understand the propositional formula representation as well as a PADF. The propositional formula representation uses the unary predicate statement to identify statements. The binary predicate ac(s,φ) associates to each statement s one formula φ. Each formula φ is constructed in the usual inductive way, where atomic formulae are other statements and the truth constants (i.e. c(v) and c(f)) and the operators are written as functions. The allowed operators are neg, and, or, imp, and iff for their respective logical operators. To describe a PADF, we use the unary predicate s to describe the set of statements. In addition the support (i.e. L+) and attack (i.e. L−) links are represented by the binary predicates lp and lm (i.e. positive resp. negative links). To express a preference, such as a > b, we use the predicate pref(a,b). Note that DIAMOND provides a method to translate propositional formula ADFs and PADFs into ADFs with total functions and only computes the models using the functional representation.\nFor illustration, let us look at another, slightly more complicated example.\nExample 3. Consider the ADF D2 = (S2, L2, C2) with S2 = {a, b, c, d}, L2 = {(a, c), (b, b), (b, c), (b, d)}, and C2 = {ϕa = t, ϕb = b, ϕc = a ∧ b, ϕd = ¬b}.\na b\nc d\nϕa = t ϕb = b\nϕc = a ∧ b ϕd = ¬b\nFor this ADF there are\n– 16 admissible interpretations: ∅, {a}, {b}, {¬b}, {b,¬d}, {a, b}, {a,¬b}, {¬b, d}, {¬b,¬d}, {a, b, c}, {a, b,¬d}, {a,¬b, d}, {a,¬b,¬c}, {¬b,¬c, d}, {a, b, c,¬d}, {a,¬b,¬c, d} – three complete models: {a}, {a, b, c,¬d}, {a,¬b,¬c, d}; of these, {a} is the grounded model; – two models: {a, b, c,¬d}, {a,¬b,¬c, d}, of which one is stable: {a,¬b,¬c, d}. Its propositional formula representation for DIAMOND (inherited from ADFsys) is given by the following ASP code:\nstatement(a). statement(b). statement(c). statement(d). ac(a,c(v)). ac(b, b). ac(c, and(a,b)). ac(d, neg(b)).\nThe functional ASP representation of the same ADF looks thus:\ns(a). s(b). s(c). s(d). l(a,c). l(b,b). l(b,c). l(b,d). ci(a). co(b). ci(b,1,b). co(c). co(c,1,a). co(c,2,b). ci(c,3,a). ci(c,3,b). ci(d). co(d,1,b).\nArguably, the formula representation is easier to read for humans."
    }, {
      "heading" : "3.2 Implementation of ΓD",
      "text" : "Since all of the semantics are defined via the operator ΓD, we will now present how the implementation of the operator is done in DIAMOND. The unary predicate step with an arbitrary term is used to apply the operator several times. The input for the operator is given by the predicates in and out to represent mappings to t and f . The resulting interpretation can be read off the predicates valid and unsat. Predicates fp and nofp denote whether a fixpoint is reached or not. First, DIAMOND decides which of the mappings to t are still of interest (cii) (i.e. which of those can still be satisfied under the given interpretation):\nciui(S,J,I) :- lin(X,S,I), not ci(S,J,X), ci(S,J). ciui(S,J,I) :- lout(X,S,I), ci(S,J,X). cii(S,J,I) :- not ciui(S,J,I), ci(S,J), step(I).\nThe predicates lin and lout are those links between arguments which are already decided by the given three-valued interpretation. The binary predicate ci (resp. co) is just the projection of its tertiary version to express that at least one predicate with a specific statement occurs in a specific acceptance condition. The treatment of the interesting mappings to f (coi) is dual:\ncoui(S,J,I) :- lin(X,S,I), not co(S,J,X), co(S,J). coui(S,J,I) :- lout(X,S,I), co(S,J,X). coi(S,J,I) :- not coui(S,J,I), co(S,J), step(I).\nAfterwards it is checked whether there exist two-valued extensions of the given interpretation that are a model or not, which is denoted by the predicates pmodel (resp. imodel). Then a statement can be seen to be valid (resp. unsat) if there does not exist an interpretation which is not a model (is a model). The predicate verum (resp. falsum) represents that the acceptance condition is always true (resp. false).\npmodel(S,I) :- cii(S,J,I). pmodel(S,I) :- verum(S), step(I). pmodel(S,I) :- not lin(S,I), ci(S), step(I). pmodel(S,I) :- not lin(S,I), ci(S), step(I). valid(S,I) :- pmodel(S,I), not imodel(S,I).\nimodel(S,I) :- coi(S,J,I). imodel(S,I) :- falsum(S), step(I). imodel(S,I) :- not lin(S,I), co(S), step(I). unsat(S,I) :- imodel(S,I), not pmodel(S,I).\nAt last, either nofp or fp is deduced. To achieve this, DIAMOND checks whether the application of the operator resulted in an interpretation that is different from the given one.\nnofp(I) :- in(X,I), not valid(X,I), step(I). nofp(I) :- valid(X,I), not in(X,I), step(I). nofp(I) :- out(X,I), not unsat(X,I), step(I). nofp(I) :- unsat(X,I), not out(X,I), step(I). fp(I) :- not nofp(I), step(I)."
    }, {
      "heading" : "3.3 Semantics",
      "text" : "The admissible model is computed by the use of a guess and check approach. At first a three-valued interpretation is guessed, by an assignment of the statements to be in, out, or neither. The last two lines remove all guesses which violate the definition of the admissible model (i.e. check which guesses are right):\nstep(0). {in(S,0):s(S)}. {out(S,0):s(S)}. :- in(S,0), out(S,0). :- in(S), not valid(S,0). :- out(S), not unsat(S,0).\nThe complete model encoding uses the same concept as used for the admissible model. The only difference is that the guessed model needs to be a fixpoint. To this effect the last two rules of the above encoding are replaced by the constraint “:- nofp(0).”.\nTo compute the grounded model, we need to apply ΓD until a fixpoint is reached. This is done via a sequence of steps, where the result of one step is taken as the used given interpretation for the next step:\nmaxit(I) :- I:={s(S)}. step(0). in(S,I+1) :- valid(S,I). out(S,I+1) :- unsat(S,I). step(I+1) :- step(I), not maxit(I). in(S) :- fp(I), in(S,I). out(S) :- fp(I), out(S,I). udec(S) :- fp(I), s(S), not in(S), not out(S).\nNote that we use the number of statements as the upper bound on the number of operator applications as this is the maximal number of steps needed to reach a fixpoint.\nTo implement the model semantics, the operator is not essential: as the model is only two-valued, there do not remain undecided parts. So each variable is mapped to a truth-value and therefore every acceptance condition may only map to one value (i.e. t or f). The encoding just guesses a two-valued interpretation and checks whether the guessed interpretation agrees with the acceptance conditions of each statement or not. The stable model combines the encoding for models with the operator encoding to check for each model whether it is also the grounded extension of its reduced ADF or not."
    }, {
      "heading" : "4 Discussion and Future Work",
      "text" : "We presented the DIAMOND software system that uses answer set programming to compute models of abstract dialectical frameworks under various semantics. DIAMOND can be seen as a continuation of the trend to utilise ASP for implementing abstract argumentation. The most important existing tool in this line of work is the ASPARTIX system5 [14] for computing extensions of Dung argumentation frameworks.\nQuite recently, Ellmauthaler and Wallner presented their system ADFsys6 for determining the semantics of ADFs [15]. Since their system likewise uses answer set programming, it is natural to ask where the differences lie. For one, after the discovery of several examples where some original ADF semantics do not behave as intended, Brewka et al. [6] proposed revised and generalised versions of these semantics. The DIAMOND system implements the new semantics while ADFsys still computes the old versions. For another, ADFsys relies solely on the representation of acceptance conditions via propositional formulas, while DIAMOND can additionally deal with functional representations. Due to the new semantics it is not trivial to compare those two systems. In fact only the model and the grounded semantics have not changed. During preliminary tests, we used different methods to generate randomised ADF instances. Depending on the used generation method, DIAMOND could compete with ADFsys and even outperform it. Alas, there were also instances for which ADFsys outperformed DIAMOND. We consider it an important future task to determine specific classes of ADFs that distinguish the two systems, and to connect these ADF classes to possible real-world applications.\nTo adapt ADFsys to the new semantics, it would be needed to decide at each operation of ΓD which acceptance formulae are (under the given three-valued interpretation) irrefutable (resp. unsatisfiable). To solve such an embedded co-NP\n5 ASPARTIX is available at http://www.dbai.tuwien.ac.at/research/project/ argumentation/systempage/ 6 ADFsys is available at http://www.dbai.tuwien.ac.at/research/project/ argumentation/adfsys/\nproblem it would be necessary to use the saturation technique or similar concepts, which will make the use of disjunctive logic programs obligatory. Therefore there would also be issues with more complex semantics (like the preferred semantics). There the use of meta-ASP would conflict with the use of saturation in the disjunctive program.\nApart from the semantics implemented in this paper, there are also ADF semantics that DIAMOND cannot yet deal with – these remain for future work. For example, the preferred semantics is based on maximisation, and so we will need meta-ASP to implement that. In general, ADFs are a quite new formalism, and we expect that further ADF semantics will be defined in the future. Naturally, we plan to implement these new semantics using the infrastructure already available through DIAMOND.\nAnother future research interest concerns a possible practical application for ADFs: We intend to analyse discussions in social media, where opinions and viewpoints can be modelled by statements that are in some relation to each other. ADF semantics can guide the respective online community, for example as to what positions everybody can agree on, or how a group decision can be justified. Such an approach was proposed by Toni and Torroni [16] as a possible application of assumption-based argumentation frameworks [17]. However, assumption-based argumentation inherits the expressiveness limitations of abstract argumentation, that is, it can also express only attack relationships between statements. We expect that ADFs with their greater expressiveness are better suited to model online interactions in social media.\nA similar application of argumentation in online social communities is the approach by Snaith et al. [18]. They utilise their database for arguments in the Argument Interchange Format [19] to capture discussions via different bloggingsites and use their tool TOAST [20] to compute an acceptable consensus about the issues under discussion. Again we think that ADFs are more suitable for this application due to their expressiveness."
    } ],
    "references" : [ {
      "title" : "On the Acceptability of Arguments and its Fundamental Role in Nonmonotonic Reasoning, Logic Programming and n-Person Games",
      "author" : [ "P.M. Dung" ],
      "venue" : "Artificial Intelligence 77",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 1995
    }, {
      "title" : "A generalization of Dung’s abstract framework for argumentation: Arguing with sets of attacking arguments",
      "author" : [ "S.H. Nielsen", "S. Parsons" ],
      "venue" : "Argumentation in Multi-Agent Systems. Volume 4766 of LNCS., Springer",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "Reasoning about preferences in argumentation frameworks",
      "author" : [ "S. Modgil" ],
      "venue" : "Artif. Intell. 173(9-10)",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Meta-argumentation modelling I: Methodology and techniques",
      "author" : [ "G. Boella", "D.M. Gabbay", "L. van der Torre", "S. Villata" ],
      "venue" : "Studia Logica 93(2–3)",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Abstract Dialectical Frameworks",
      "author" : [ "G. Brewka", "S. Woltran" ],
      "venue" : "KR.",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Abstract Dialectical Frameworks Revisited",
      "author" : [ "G. Brewka", "S. Ellmauthaler", "H. Strass", "J.P. Wallner", "S. Woltran" ],
      "venue" : "IJCAI, AAAI Press",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2013
    }, {
      "title" : "On the acceptability of arguments in preference-based argumentation",
      "author" : [ "L. Amgoud", "C. Cayrol" ],
      "venue" : "UAI, Morgan Kaufmann",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 1998
    }, {
      "title" : "The stable model semantics for logic programming",
      "author" : [ "M. Gelfond", "V. Lifschitz" ],
      "venue" : "ICLP/SLP.",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 1988
    }, {
      "title" : "Potassco: The Potsdam answer set solving collection",
      "author" : [ "M. Gebser", "R. Kaminski", "B. Kaufmann", "M. Ostrowski", "T. Schaub", "M. Schneider" ],
      "venue" : "AI Communications 24(2)",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Answer Set Solving in Practice",
      "author" : [ "M. Gebser", "R. Kaminski", "B. Kaufmann", "T. Schaub" ],
      "venue" : "Synthesis Lectures on Artificial Intelligence and Machine Learning. Morgan and Claypool Publishers",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 2012
    }, {
      "title" : "ECLiPSe – from LP to CLP",
      "author" : [ "J. Schimpf", "K. Shen" ],
      "venue" : "CoRR abs/1012.4240",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "On the computational cost of disjunctive logic programming: Propositional case",
      "author" : [ "T. Eiter", "G. Gottlob" ],
      "venue" : "Annals of Mathematics and Artificial Intelligence 15(3–4)",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 1995
    }, {
      "title" : "Complex optimization in answer set programming",
      "author" : [ "M. Gebser", "R. Kaminski", "T. Schaub" ],
      "venue" : "Theory and Practice of Logic Programming 11(4–5)",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "Answer-set programming encodings for argumentation frameworks",
      "author" : [ "U. Egly", "S.A. Gaggl", "S. Woltran" ],
      "venue" : "Argument and Computation 1(2)",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2010
    }, {
      "title" : "Bottom-up argumentation",
      "author" : [ "F. Toni", "P. Torroni" ],
      "venue" : "In Modgil, S., Oren, N., Toni, F., eds.: TAFA. Volume 7132 of Lecture Notes in Computer Science., Springer",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2011
    }, {
      "title" : "An abstract, argumentation-theoretic approach to default reasoning",
      "author" : [ "A. Bondarenko", "P.M. Dung", "R.A. Kowalski", "F. Toni" ],
      "venue" : "Artificial Intelligence 93",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "The Argument Interchange Format",
      "author" : [ "I. Rahwan", "C. Reed" ],
      "venue" : "Argumentation in Artificial Intelligence. Springer",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Computational Models of Argument Proceedings of COMMA 2012, Vienna, Austria, September 10-12, 2012",
      "author" : [ "B. Verheij", "S. Szeider", "S. Woltran", "eds." ],
      "venue" : "In Verheij, B., Szeider, S., Woltran, S., eds.: COMMA. Volume 245 of Frontiers in Artificial Intelligence and Applications., IOS Press",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 2012
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "A particular, well-known formalism to model argumentation scenarios are Dung’s abstract argumentation frameworks [1].",
      "startOffset" : 113,
      "endOffset" : 116
    }, {
      "referenceID" : 1,
      "context" : "This leads to quite a number of extensions of Dung AFs, for example with attacks from sets of arguments [2], attacks on attacks [3] and meta-argumentation [4].",
      "startOffset" : 104,
      "endOffset" : 107
    }, {
      "referenceID" : 2,
      "context" : "This leads to quite a number of extensions of Dung AFs, for example with attacks from sets of arguments [2], attacks on attacks [3] and meta-argumentation [4].",
      "startOffset" : 128,
      "endOffset" : 131
    }, {
      "referenceID" : 3,
      "context" : "This leads to quite a number of extensions of Dung AFs, for example with attacks from sets of arguments [2], attacks on attacks [3] and meta-argumentation [4].",
      "startOffset" : 155,
      "endOffset" : 158
    }, {
      "referenceID" : 4,
      "context" : "Unifying these and other extensions to AFs, Brewka and Woltran [5] proposed a general model, abstract dialectical frameworks (ADFs).",
      "startOffset" : 63,
      "endOffset" : 66
    }, {
      "referenceID" : 4,
      "context" : "An abstract dialectical framework (ADF) [5] is a directed graph whose nodes represent statements or positions that can be accepted or not.",
      "startOffset" : 40,
      "endOffset" : 43
    }, {
      "referenceID" : 5,
      "context" : "In recent work [6], we redefined several standard ADF semantics and defined additional ones.",
      "startOffset" : 15,
      "endOffset" : 18
    }, {
      "referenceID" : 5,
      "context" : "[6].",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 4,
      "context" : "Brewka and Woltran [5] defined an operator ΓD over three-valued interpretations.",
      "startOffset" : 19,
      "endOffset" : 22
    }, {
      "referenceID" : 5,
      "context" : "[6] also defined an approach to handle preferences in ADFs.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 6,
      "context" : "The approach generalises the one for AFs from Amgoud and Cayrol [7].",
      "startOffset" : 64,
      "endOffset" : 67
    }, {
      "referenceID" : 7,
      "context" : "To allow rules with negative body atoms, Gelfond and Lifschitz [8] proposed the stable model semantics (also called answer set semantics).",
      "startOffset" : 63,
      "endOffset" : 66
    }, {
      "referenceID" : 8,
      "context" : "We use clasp from the Potsdam Answer Set Solving Collection Potassco [9] as the back-end answer set solver for our software system.",
      "startOffset" : 69,
      "endOffset" : 72
    }, {
      "referenceID" : 9,
      "context" : "[10].",
      "startOffset" : 0,
      "endOffset" : 4
    }, {
      "referenceID" : 8,
      "context" : "The different encodings are designed around the Potsdam Answer Set Solving Collection (Potassco) [9] and the additional provided tools utilise clasp as solver, too.",
      "startOffset" : 97,
      "endOffset" : 100
    }, {
      "referenceID" : 10,
      "context" : "As a part of the DIAMOND software bundle, we also provide an ECLPS Prolog [11] program that transforms acceptance functions given as formulas into the functional representation used by DIAMOND.",
      "startOffset" : 74,
      "endOffset" : 78
    }, {
      "referenceID" : 11,
      "context" : "solve these is the use of saturation [12], which however causes undesired sideeffects when employed together with meta-ASP [13].",
      "startOffset" : 37,
      "endOffset" : 41
    }, {
      "referenceID" : 12,
      "context" : "solve these is the use of saturation [12], which however causes undesired sideeffects when employed together with meta-ASP [13].",
      "startOffset" : 123,
      "endOffset" : 127
    }, {
      "referenceID" : 13,
      "context" : "The most important existing tool in this line of work is the ASPARTIX system [14] for computing extensions of Dung argumentation frameworks.",
      "startOffset" : 77,
      "endOffset" : 81
    }, {
      "referenceID" : 5,
      "context" : "[6] proposed revised and generalised versions of these semantics.",
      "startOffset" : 0,
      "endOffset" : 3
    }, {
      "referenceID" : 14,
      "context" : "Such an approach was proposed by Toni and Torroni [16] as a possible application of assumption-based argumentation frameworks [17].",
      "startOffset" : 50,
      "endOffset" : 54
    }, {
      "referenceID" : 15,
      "context" : "Such an approach was proposed by Toni and Torroni [16] as a possible application of assumption-based argumentation frameworks [17].",
      "startOffset" : 126,
      "endOffset" : 130
    }, {
      "referenceID" : 16,
      "context" : "They utilise their database for arguments in the Argument Interchange Format [19] to capture discussions via different bloggingsites and use their tool TOAST [20] to compute an acceptable consensus about the issues under discussion.",
      "startOffset" : 77,
      "endOffset" : 81
    } ],
    "year" : 2013,
    "abstractText" : "Abstract dialectical frameworks (ADFs) are a powerful generalisation of Dung’s abstract argumentation frameworks. In this paper we present an answer set programming based software system, called DIAMOND (DIAlectical MOdels eNcoDing). It translates ADFs into answer set programs whose stable models correspond to models of the ADF with respect to several semantics (i.e. admissible, complete, stable, grounded).",
    "creator" : "LaTeX with hyperref package"
  }
}