{
  "name" : "1606.08896.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Yi Wang" ],
    "emails" : [ "joolee@asu.edu", "ywang485@asu.edu" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n60 6.\n08 89\n6v 1\n[ cs\n.A I]\n2 8\nJu n\n20 16"
    }, {
      "heading" : "Introduction",
      "text" : "Statistical relational learning (SRL) is an emerging area in Artificial Intelligence that is concerned with combining logical and statistical AI. Markov Logic Networks (MLN) (Richardson and Domingos 2006) and Probabilistic Soft Logic (PSL) (Kimmig et al. 2012; Bach et al. 2015) are well-known formalisms in statistical relational learning, and have been successfully applied to a wide range of AI applications, such as natural language processing, entity resolution, collective classification, and social network modeling. Both of them combine logic and probabilistic graphical model in a single representation, where each formula is associated with a weight, and the probability distribution over possible worlds is derived from the weights of the formulas that are satisfied by the possible worlds. However, despite their resemblance to each other, the precise relationship between their semantics is not obvious. PSL is based on fuzzy interpretations that range over reals in [0, 1], and in this sense is more general than MLN. On the other hand, its syntax is restricted to formulas in clausal form, unlike MLN that allows any complex formulas. It is also not obvious how their models’ weights are related to each other due to the different ways that the weights are associated with models. Originating from the machine learning research, these formalisms\n1In Working Notes of the 6th International Workshop on Statistical Relational AI (StarAI 2016)\nare equipped with several efficient inference and learning algorithms, and some paper compares the suitability of one formalism over the other by experiments on specific applications (Beltagy, Erk, and Mooney 2014). On the other hand, the precise relationship between the two formalisms has not been formally stated.\nIn this paper, we present a precise semantic relationship between them. We observe that the relationship is analogous to the well-known relationship between fuzzy logic and classical logic. Moreover, despite the different ways that weights of models are defined in each formalism, it turns out that they are essentially of the same kind. Towards this end, we introduce a weighted fuzzy logic as a proper generalization of PSL, which is also interesting on its own as an extension of the standard fuzzy logic to incorporate weighted models. The weighted fuzzy logic uses the same weight scheme as PSL, but associates weights to arbitrary fuzzy formulas. This intermediate formalism facilitates the comparison between PSL and MLN. We observe that the same analogy between fuzzy logic and Boolean logic carries over to between PSL and MLN. Analogous to that fuzzy logic agrees with Boolean logic on crisp interpretations, PSL and MLN agree on crisp interpretations, where their weights are proportional to each other. However, their maximum a posteriori (MAP) estimates do not necessarily coincide due to the differences between many-valued vs. Boolean models.\nThe paper is organized as follows. We first review each of MLN, fuzzy propositional logic, and PSL. Then we define a weighted fuzzy logic as a generalization of PSL. Using this we study the semantic relationship between PSL and MLN."
    }, {
      "heading" : "Preliminaries",
      "text" : "Although both PSL and MLN allow atoms to contain variables, those variables are understood in terms of grounding over finite domains where a universally quantified sentence is turned into multiple conjunctions and an existentially quantified sentence is turned into multiple disjunctions, essentially resulting in propositional theories. For example, the ground atoms of the first-order signature σ = {p, a, b}, where p is a unary predicate constant and a, b are object constants, can be identified with the propositional atoms of the propositional signature {p(a), p(b)}. Thus for simplicity but without losing generality, we assume that the programs are\npropositional.2"
    }, {
      "heading" : "Review: Markov Logic Networks",
      "text" : "The following is a review of Markov Logic from (Richardson and Domingos 2006). A Markov Logic Network (MLN) L of a propositional signature σ is a finite set of pairs 〈w : F 〉, where F is a propositional formula of σ and w is a real number.\nFor any MLN L of signature σ, we define LI to be the set of weighted formulas w : F in L such that I |= F . The unnormalized weight of an interpretation I under L is defined as\nWL(I) = exp\n(\n∑\nw:F∈LI\nw\n)\n,\nand the normalized weight (a.k.a. probability) of I under L is defined as\nPL(I) = WL(I) ∑\nJ∈PW WL(J) ,\nwhere PW (“Possible Worlds”) is the set of all interpretations of σ.\nThe basic idea of Markov Logic is to allow formulas to be soft constrained, where a model does not have to satisfy all formulas, but is associated with the weight that is obtained from the satisfied formulas. An interpretation that does not satisfy certain formulas receives an “(indirect) penalty” because such formulas do not contribute to the weight of that interpretation."
    }, {
      "heading" : "Review: Fuzzy Propositional Formula",
      "text" : "The following is a review of fuzzy propositional formulas from (Hajek 1998). A fuzzy propositional signature σ is a set of symbols called fuzzy atoms. In addition, we assume the presence of a set CONJ of fuzzy conjunction symbols, a set DISJ of fuzzy disjunction symbols, a set NEG of fuzzy negation symbols, and a set IMPL of fuzzy implication symbols.\nA fuzzy (propositional) formula of σ is defined recursively as follows.\n• every fuzzy atom p ∈ σ is a fuzzy formula;\n• every numeric constant c, where c is a real number in [0, 1], is a fuzzy formula;\n• if F is a fuzzy formula, then ¬F is a fuzzy formula, where ¬ ∈ NEG;\n• if F and G are fuzzy formulas, then F ⊗ G, F ⊕G, and F → G are fuzzy formulas, where ⊗ ∈ CONJ, ⊕ ∈ DISJ, and → ∈ IMPL.\nThe models of a fuzzy formula are defined as follows. The fuzzy truth values are the real numbers in the range [0, 1]. A fuzzy interpretation I of σ is a mapping from σ into [0, 1].\n2Inference and learning algorithms in these languages indeed utilize the relational structure, but in terms of defining the semantics, the assumption simplifies the presentation without the need to refer to fuzzy predicate logic.\nThe fuzzy operators are functions mapping one or a pair of truth values into a truth value. Among the operators,¬ denotes a function from [0, 1] into [0, 1]; ⊗, ⊕, and → denote functions from [0, 1]× [0, 1] into [0, 1]. The actual mapping performed by each operator can be defined in many different ways, but all of them satisfy the properties that they are generalizations of the corresponding Boolean connectives. Figure 1 lists some examples of fuzzy operators.\nThe truth value of a fuzzy propositional formula F under I , denoted υI(F ), is defined recursively as follows: • for any atom p ∈ σ, υI(p) = I(p);\n• for any numeric constant c, υI(c) = c;\n• υI(¬F ) = ¬(υI(F ));\n• υI(F ⊙G) = ⊙(υI(F ), υI(G)) (⊙ ∈ {⊗,⊕,→}). (For simplicity, we identify the symbols for the fuzzy operators with the truth value functions represented by them.)\nDefinition 1 We say that a fuzzy interpretation I satisfies a fuzzy formula F if υI(F ) = 1, and denote it by I |= F . We call such I a fuzzy model of F .\nWe say that a fuzzy interpretation I is Boolean if I(p) is either 0 or 1 for each fuzzy atom p. Clearly, we may identify a Boolean fuzzy interpretation I with the classical propositional interpretation by identifying 1 with TRUE and 0 with FALSE.\nAny fuzzy propositional formula whose numeric constants are restricted to 0 and 1 can be identified with a classical propositional formula. For such a formula F , due to the fact that fuzzy operators are generalizations of their Boolean counterparts, it is clear that Boolean fuzzy models of F are precisely the Boolean models of F when F is viewed as a classical propositional formula."
    }, {
      "heading" : "Review: Probabilistic Soft Logic",
      "text" : "The following is a review of PSL from (Kimmig et al. 2012), but is stated using the terminology from fuzzy logic. A PSL program Π is a set of weighted formulas 〈w : R ˆk〉 where • w is a nonnegative real number,\n• R is a fuzzy propositional formula of the form 3\na ←l b1 ⊗l . . .⊗l bn (1) 3We understand G← F as an alternative notation for F → G.\nwhere n ≥ 0, each of a, b1, . . . , bn is a fuzzy atom possibly preceded by the standard negator, and\n• k ∈ {1, 2}.4\nFor each rule R of the form (1), the distance to satisfaction under interpretation I is defined as\ndR(I) = max{0, υI(b1 ⊗l · · · ⊗l bn)− υI(a)}. (2)\nGiven an interpretation I of Π, the unnormalized density function over I under Π is defined as\nf̂Π(I) = exp\n(\n− ∑\n〈w:Rˆk〉∈Π\nw · dR(I) k\n)\n,\nand the probability density function over I under Π is defined as\nfΠ(I) = f̂Π(I)\nZΠ ,\nwhere ZΠ is the normalization factor ∫\nI\nf̂Π(I).\nThe probability density function fΠ(I) is defined similar to the weight WL(I) in MLN. Different from MLN where the weight of an interpretation comes from the sum over the weights of all formulas that are satisfied (thus the penalty is implicit), in PSL, the probability density function of an interpretation is obtained from the sum over the “penalty” (i.e., the weight times the distance to satisfaction) from each formula, where the penalty is 0 when the formula is satisfied, and becomes bigger as the formula gets unsatisfied more (i.e., the fuzzy truth value of the body gets bigger than the fuzzy truth value of the head). When the formula is most unsatisfied (i.e., the body evaluates to 1 and the head evaluates to 0), the penalty is w, the maximum. A novel idea here is that each formula contributes to the penalty to a certain graded truth degree (including 0). Along with the restriction imposed on the syntax of fuzzy formulas (using the rule form (1)), MAP inference in PSL can be reduced to a convex optimization problem in continuous space, thereby enabling efficient computation."
    }, {
      "heading" : "Weighted Fuzzy Logic as a Generalization of PSL",
      "text" : ""
    }, {
      "heading" : "Weighted Fuzzy Logic",
      "text" : "Here we define a weighted fuzzy logic as a generalization of PSL. The idea is simple. We take the standard fuzzy logic and extend it by applying the log-linear weight scheme of PSL.\nA weighted propositional fuzzy logic theory Π is a set of weighted formulas〈w : Fˆk〉, where\n• w is a real number,\n• F is a fuzzy propositional formula, and\n4PSL also allows linear equality and inequality constraints, which is outside logical theories, and we omit here for simplicity. Interpretation I that violates any of them gets fΠ(I) = 0.\n• k ∈ {1, 2}.\nThe unnormalized density function of a fuzzy interpretation I under Π is defined as\nf̂Π(I) = exp\n(\n− ∑\n〈w:Fˆk〉∈Π\nw · (1− υI(F )) k\n)\n,\nand the probability density function of I under Π is defined as\nfΠ(I) = f̂Π(I)\nZΠ ,\nwhere ZΠ is the normalization factor ∫\nI\nf̂Π(I).\nNotice that 1 − υI(F ) represents the distance to satisfaction in the general case. It is 0 when I satisfies F , and becomes bigger as υI(F ) gets farther from 1. This notion of distance to satisfaction for an arbitrary formula is also used in Probabilistic Similarity Logic (Bröcheler, Mihalkova, and Getoor 2010), and indeed, the weighted fuzzy logic is very similar to Probabilistic Similarity Logic. Both of them employ arbitrary fuzzy operators, not restricted to the Lukasiewicz fuzzy operators. However, the languages are not the same. In Probabilistic Similarity Logic, atomic sentences are of the form called similarity statements, A s = B, where s is some similarity measure, and A, B are entities or sets that can even be represented in an object-oriented syntax. On the other hand, atomic sentences of the weighted logic is a fuzzy atom, same as in PSL. As we show below it is easy to view the weighted fuzzy logic as a generalization of PSL, and it serves as a convenient intermediate language to relate PSL and MLN.5"
    }, {
      "heading" : "Relation to PSL",
      "text" : "The following lemma tells us how the notions of distance to satisfaction in PSL and in the weighted fuzzy logic are related.\nLemma 1 For any rule R of the form (1) and any interpretation I ,\ndR(I) = 1− υI(R).\nProof.\n1− υI(R)\n= max{0, 1− υI(R)}\n= max{0, 1− υI(a←l b1 ⊗l . . .⊗l bn)}\n= max{0, 1−min{1− υI(b1 ⊗l · · · ⊗l bn) + υI(a), 1}}\n= max{0, υI(b1 ⊗l · · · ⊗l bn)− υI(a)})\n= dR(I).\nIn Lemma 1, it is essential that rules (1) use Lukasiewicz fuzzy operators. The lemma does not hold with an arbitrary selection of fuzzy operators as the following example indicates.\n5Although PSL and Probabilistic Similarity Logic seem to be closely related, the formal relationship between them has not been discussed in the literature to the best of our knowledge.\nExample 1 Consider Gödel t-norm ⊗m and its residual implicator →r. Let R be q ←r p and I an interpretation {(p, 0.6), (q, 0.4)}. dR(I) is 0.2, while 1 − υI(p →r q) is 1− 0.4 = 0.6.\nIt follows from Lemma 1 that PSL can be easily viewed as a special case of the weighted fuzzy logic.\nTheorem 1 Given any PSL program Π and any fuzzy interpretation I , the definition of fΠ(I) when Π is viewed as the weighted fuzzy logic coincides with the definition of fΠ(I) when Π is viewed as a PSL program.\nProof. Immediate from Lemma 1.\nDue to this theorem, we will call the weighted fuzzy logic also as generalized PSL (GPSL).\nViewing PSL as a special case of the weighted fuzzy logic allows us to apply the mathematical results known from fuzzy logic to the context of PSL. Here is one example, which tells us that the different versions of PSL defined in (Kimmig et al. 2012) and (Bach et al. 2015) are equivalent despite the different syntax adopted in each of them. To be precise, PSL in (Bach et al. 2015) is defined for clausal form only, such as (3) below, while in (Kimmig et al. 2012) it is defined for rule form (1) only.\nWhen L is either an atom A or ¬sA, by øL we denote a literal complementary to L, i.e., øL = ¬sA if L is A, and øL = A if L = ¬sA. The following equivalences are known from fuzzy logic.\nLemma 2 For any formulas F and G, and any literals Li (1 ≤ i ≤ n),\n(a) F →l G is equivalent to ¬sF ⊕l G. (b) ¬s(L1⊗l · · ·⊗lLn) is equivalent to (øL1⊕l · · ·⊕l øLn).\nThe following lemma tells us that the clausal form using Lukasiewicz t-conorm can be written in many different forms.\nLemma 3 For any literals Li (1 ≤ i ≤ n),\nL1 ⊕l · · · ⊕l Lm ⊕l Lm+1 ⊕l · · · ⊕l Ln (3)\nis equivalent to\nøL1 ⊗l · · · ⊗l øLm →l Lm+1 ⊕l · · · ⊕l Ln\nwhere n ≥ m ≥ 0.\nProof. By Lemma 2 (a), formula (3) is equivalent to\n¬s(L1 ⊕l · · · ⊕l Lm) →l Lm+1 ⊕l · · · ⊕l Ln\nand by Lemma 2 (b), the latter is equivalent to\nøL1 ⊗l · · · ⊗l øLm →l Lm+1 ⊕l · · · ⊕l Ln.\nIt follows from Lemma 1 that the probability density of an interpretation does not change when the formula is replaced with another equivalent formula. This tells us that PSL rules of the form (1) can be rewritten as any other equivalent formulas. For instance, PSL rule\nw : a ←l b⊗l c ˆ1 (4)\ncan be equivalently rewritten as any of the following ones.\nw : ¬sb ←l ¬sa⊗l c ˆ1, w : ¬sc ←l ¬sa⊗l b ˆ1, w : a⊕l ¬sb ←l c ˆ1, w : a⊕l ¬sc ←l b ˆ1, w : ¬sb⊕l ¬sc ←l ¬sa ˆ1, w : a⊕l ¬sb⊕l ¬sc ˆ1, w : 0 ←l ¬sa⊗l b⊗l c ˆ1. (5) As noted above, the syntax of PSL in (Bach et al. 2015) is clausal form only, such as the second to the last formula in (5), while the syntax of PSL in (Kimmig et al. 2012) is rule form such as (4). The result above tells us that the definitions of PSL defined in (Kimmig et al. 2012) and (Bach et al. 2015) are equivalent despite the different syntax adopted there.\nOn the other hand, similar rewriting using other t-norms and their derived operators may not necessarily yield an equivalent formula because not every selection of fuzzy operators satisfy Lemma 2 even if they are generalizations of the corresponding Boolean connectives.\nExample 2 Consider again Gödel t-norm ⊗m and its residual implicator →r. The negation ¬m induced from ¬mx = x →r 0 is\n¬mx =\n{\n1 if x = 0 0 if x > 0.\nFor the interpretation I = {(p, 0.4), (q, 0.5)}, we have υI(¬mp⊕m q) = 0⊕m 0.5 = 0.5, but υI(p →r q) = 1. In other words, ¬mp⊕m q is not equivalent to p →r q.\nIn the literature on PSL (Kimmig et al. 2012; Bach et al. 2015), the selection of Lukasiewicz t-norm is motivated by the computational efficiency gained by reducing MAP inferences to convex optimization problems. This section presents yet another justification of Lukasiewicz t-norm in PSL from the logical perspective."
    }, {
      "heading" : "GPSL : MLN = Fuzzy Logic : Boolean Logic",
      "text" : "Like fuzzy logic is a many-valued extension of Boolean logic, we may view GPSL as a many-valued extension of MLN.\nFor any classical propositional formula F , let F fuzzy be the fuzzy formula obtained from F by replacing⊥ with 0, ⊤ with 1, ¬ with any fuzzy negation symbol, ∧ with any fuzzy conjunction symbol, ∨ with any fuzzy disjunction symbol, and → with any fuzzy implication symbol.\nFor any GPSL program Π, by TWΠ (“total weight”) we denote\nexp\n\n\n∑\n〈w:Fˆk〉∈Π\nw\n\n .\nFor any MLN L, let ΠL be the GPSL program obtained from L by replacing each weighted formula w : F in L with w : F fuzzyˆk, where k is either 1 or 2. The following theorem tells us that, for any Boolean interpretation I , its weight under MLN L is proportional to the unnormalized probability density under the GPSL program ΠL.\nTheorem 2 For any MLN L and any Boolean interpretation I ,\nWL(I) = TWΠL · f̂ΠL(I).\nProof.\nWL(I) = exp\n(\n∑\n〈w,F 〉∈LI\nw\n)\n= exp\n(\n∑\n〈w,F 〉∈L\nw − ∑\n〈w,F 〉∈L\\LI\nw\n)\n= exp\n(\n∑\n〈w,F 〉∈L\nw\n)\n· exp\n(\n− ∑\n〈w,F 〉∈L\\LI\nw\n)\n= exp\n(\n∑\n〈w,F 〉∈L\nw\n)\n× exp\n\n−\n(\n∑\n〈w,F 〉∈L\\LI\n(w · 1) + ∑\n〈w,F 〉∈LI\n(w · 0)\n)\n\n .\n(6)\nNote that when I is Boolean, 1 − υI(F ) = 1 if I 6|= F , and 1− υI(F ) = 0 if I |= F . So (6) is equal to\nTWΠL · exp\n(\n− ∑\n〈w:F fuzzyˆk〉∈ΠL\nw · (1− υI(F fuzzy ))k\n)\n= TWΠL · f̂ΠL(I).\nThis theorem tells us that the problem of computing the weight of an interpretation in MLN can be reduced to computing the probability density of an interpretation in GPSL.\nBy Theorem 1, since PSL is a special case of GPSL, the following relation between PSL and MLN follows easily.\nCorollary 1 For any PSL program Π and any fuzzy Boolean interpretation I , let L be the MLN obtained from Π by replacing each fuzzy operator with its Boolean counterpart. We have\nf̂Π(I) = WL(I)\nTWΠ .\nExample 3 Let Π be the following PSL program\n1 : p ←l q ˆ1 2 : q ←l p ˆ1\nand let L be the corresponding MLN as described in Corollary 1.\nThe following table shows, for each Boolean interpretation I , its weight according to the MLN semantics (WL(I)) is TWΠ, which is e3, multiplied by its unnormalized probability density function (f̂Π(I)) according to the PSL semantics. (We identify a Boolean interpretation with the set of atoms that are true in it.)\nInterpretation (I) WL(I) f̂Π(I) ∅ e3 e0\n{p} e1 e−2 {q} e2 e−1\n{p, q} e3 e0\nHowever, MAP states in MLN and PSL can be different because most probable interpretations in PSL may be nonBoolean.\nExample 4 Consider the PSL program:\n1 : p ←l ¬sp ˆ1 1 : ¬sp ˆ1\n(7)\nand the corresponding MLN:\n1 : p ← ¬sp 1 : ¬sp\n(8)\nThe most probable Boolean interpretations for MLN (8) are I1 = ∅ and I2 = {p}, each with weight e1. Their unnormalized probability density for PSL program (7) is e−1. However, they are not the most probable interpretations according to the PSL semantics: I3 = {(p, 0.5)} has the largest unnormalized probability density e−0.5.\nThe difference can be closed by adding to the weighted propositional fuzzy logic theory a “crispifying” rule for each atom. For any atom p ∈ σ, let CRSP(p) be the formula defined as\nCRSP(p) = p⊕l p →l p.\nIt is easy to check that υI(p⊕lp →l p) = 1 iff υI(p) is either 0 or 1. Note that although this formula uses Lukasiewicz operators, it is not expressible in PSL because ⊕l occurs in the body of the rule.\nFor any MLN L of signature σ, let ΠL be the GPSL program obtained from L by replacing each weighted formula w : F in L with w : F fuzzyˆk where k could be either 1 or 2. Let CR be the GPSL program\n{〈α : CRSP(p)ˆ1〉 | p ∈ σ〉}.\nThe following theorem tells us that the most probable interpretations of MLN L coincides with the most probable interpretations of GPSL program ΠL ∪ CR.\nTheorem 3 For any MLN L, when α → ∞,\nargmaxI(WL(I)) = argmaxJ(f̂ΠL∪CR(J))\nwhere I ranges over all Boolean interpretations and J ranges over all fuzzy interpretations.\nProof. We first show that, when α → ∞, for any Boolean interpretation I and any non-Boolean interpretation J , we have f̂ΠL∪CR(J) < f̂ΠL∪CR(I), which implies that no nonBoolean interpretation can be the most probable interpretations.\nFirst, for any non-Boolean interpretation J , let\nWΠL(J) = − ∑\n〈w:Fˆk〉∈ΠL\n(\nw · (1− υJ(F )) k\n)\nand\nWCR(J) = − ∑\n〈w:Fˆ1〉∈CR\n(\nα · (1− υJ(F ))\n)\n.\nThen\nf̂ΠL∪CR(J) = exp(WΠL(J) +WCR(J))\n≤ exp(WCR(J)).\nSince J is not Boolean, there is at least one weighted formula α : p⊕l p →l p ˆ1 ∈ CR that is not satisfied by J , so that\nf̂ΠL∪CR(J) ≤ exp ( − α · ( 1− υJ(p⊕l p →l p) ))\nwhere 1− υJ(p⊕l p →l p) > 0. Notice that\nlim α→∞ f̂ΠL∪CR(J) ≤\nlim α→∞\nexp ( − α · ( 1− υJ (p⊕l p →l p) )) = 0.\nOn the other hand, for any Boolean interpretation I ,\nf̂ΠL∪CR(I) = exp(WΠL(I) +WCR(I)) = exp(WΠL(I)).\nSince exp(WΠL(I)) does not contain α, we have\nlim α→∞ f̂ΠL∪CR(I) > 0.\nThus we have f̂ΠL∪CR(J) < f̂ΠL∪CR(I) when α → ∞. It follows that any fuzzy interpretation K that satisfies argmaxJ(PΠL∪CR(J)) = K must be Boolean. By Theorem 2, for any Boolean interpretation I , we have\nf̂ΠL∪CR(I) = exp(|σ| · α)\nTWΠL∪CR ×WL(I).\nSince exp(|σ| · α)\nTWΠL∪CR is constant for all interpretations,\nf̂ΠL∪CR(I) ∝ WL(I). It follows that argmaxI(WL(I)) = argmaxJ(f̂ΠL∪CR(J)).\nExample 5 Consider the GPSL program:\n1 : p ←l ¬sp ˆ1 1 : ¬sp ˆ1 α : p ←l p⊕l p ˆ1.\nWhen α → ∞ the most probable fuzzy interpretations are Boolean, and they are the same as the most probable interpretations for the MLN (8).\nIt is known that the MAP problem in PSL can be solved in polynomial time (Bröcheler, Mihalkova, and Getoor 2010), while the same problem in MLN is #P-hard. The reduction from MLN to GPSL in Theorem 3 tells us that the MAP problem in GPSL is #P-hard as well. This implies that GPSL is strictly more expressive than PSL even when we restrict attention to Lukasiewicz operators.\nRelated to Theorem 3, relation between discrete and soft MAP states was also studied in (Bach, Huang, and Getoor 2015; Bach et al. 2015), but from a different, computational perspective. There, inference on discrete MAP states is viewed as an instance of MAX SAT problems, and then approximated by relaxation to linear programming with rounding guarantee of solutions. The result indirectly tells us how MAP states in PSL are related to MAP states in MLN, but this is different from Theorem 3, which completely closes the semantic gap between them via crispifying rules."
    }, {
      "heading" : "Conclusion",
      "text" : "In this note, we studied the two well-known formalisms in statistical relational learning from a logical perspective. Viewing PSL in terms of the weighted fuzzy logic gives us some useful insights known from fuzzy logic. Besides the reducibility to convex optimization problems, the restriction to the Lukasiewicz fuzzy operators in clausal form allows intuitive equivalent transformations resembling those from Boolean logic. On the other hand, it prohibits us from using some other intuitive fuzzy operators.\nIn our previous work (Lee and Wang 2014; Lee and Wang 2016a) we used fuzzy answer set programs to describe temporal projection in dynamic domains, where we had to use Gödel t-norm as well as Lukasiewicz t-norm.6 There, Gödel t-norm is necessary in expressing the commonsense law of inertia. For example,\nTrust(a, b, t)⊗m¬s¬sTrust(a, b, t+1) →r Trust(a, b, t+1), (9) expresses that the degree that a trusts b at time t+1 is equal to the degree at time t if it can be assumed without contradicting any of the facts that can be derived. 7 The fuzzy conjunction ⊗ used here needs to satisfy that ⊗(x, y) is equal to either x or y (otherwise the trust degree at next time step would change for no reason). Obviously Lukasiewicz t-norm does not satisfy the requirement: ⊗l(x, y) < x when y < 1. In other words, if we replace ⊗m with ⊗l, the trust degree at next time drops for no reason, which is unintuitive. The restriction to Lukasiewicz t-norm in PSL accounts for the difficulty in directly applying PSL to temporal reasoning problems like the above example. Indeed, most work on PSL has been limited to static domains.\nSince computing marginal probabilities in MLN can be reduced to computing marginal probabilities in GPSL as indicated by Theorem 2, computing marginal probabilities in GPSL is at least #P-hard. However, a sampling method could be used for such an inference. A naive sampling method is outlined below: suppose we are approximating the probability that the truth value of formula F falls into (l, u) for some 0 ≤ l ≤ u ≤ 1 (denoted as P (l ≤ F ≤ u)).\n1. Generate N interpretations at random;\n2. For each of the N interpretations, compute its probability density;\n3. Approximate P (l ≤ F ≤ u) by X N , where X is the number of interpretations I that satisfies l ≤ υI(F ) ≤ u among the N interpretations.\nIt can be shown that X N is the estimation of P (l ≤ F ≤ u) that maximizes the likelihood of the N samples.\nThe way that MLN extends propositional logic is similar to the way that PSL extends a restricted version of fuzzy propositional logic. GPSL is simply taking the fuzzy propositional logic in full generality and applying the log-linear weight scheme. In our recent work (Lee and Wang 2016b),\n6The main example was how the trust degree between people changes over time.\n7We refer the reader to (Lee and Wang 2016a) for the precise semantics of this language.\nwe adopted the similar weight scheme to answer set programs in order to overcome the deterministic nature of the stable model semantics providing ways to resolve inconsistencies in answer set programs, to rank stable models, to associate probability to stable models, and to apply statistical inference to computing weighted stable models. Perhaps this indicates the universality of the log-linear weight scheme first adopted in MLN, which provides a uniform method to turn the crisp logic (be it fuzzy logic, propositional logic, or answer set programs) “soft.”\nAcknowledgements We are grateful to Michael Bartholomew and the anonymous referees for their useful comments. This work was partially supported by the National Science Foundation under Grants IIS-1319794, IIS-1526301, and a gift funding from Robert Bosch LLC."
    } ],
    "references" : [ {
      "title" : "S",
      "author" : [ "Bach" ],
      "venue" : "H.; Broecheler, M.; Huang, B.; and Getoor, L.",
      "citeRegEx" : "Bach et al. 2015",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "S",
      "author" : [ "Bach" ],
      "venue" : "H.; Huang, B.; and Getoor, L.",
      "citeRegEx" : "Bach. Huang. and Getoor 2015",
      "shortCiteRegEx" : null,
      "year" : 2015
    }, {
      "title" : "Probabilistic soft logic for semantic textual similarity",
      "author" : [ "Erk Beltagy", "I. Mooney 2014] Beltagy", "K. Erk", "R. Mooney" ],
      "venue" : "Proceedings of Association for Computational Linguistics",
      "citeRegEx" : "Beltagy et al\\.,? \\Q2014\\E",
      "shortCiteRegEx" : "Beltagy et al\\.",
      "year" : 2014
    }, {
      "title" : "Probabilistic similarity logic",
      "author" : [ "Mihalkova Bröcheler", "M. Getoor 2010] Bröcheler", "L. Mihalkova", "L. Getoor" ],
      "venue" : "UAI",
      "citeRegEx" : "Bröcheler et al\\.,? \\Q2010\\E",
      "shortCiteRegEx" : "Bröcheler et al\\.",
      "year" : 2010
    }, {
      "title" : "A short introduction to probabilistic soft logic",
      "author" : [ "Kimmig" ],
      "venue" : "In Proceedings of the NIPS Workshop on Probabilistic Programming: Foundations and Applications,",
      "citeRegEx" : "Kimmig,? \\Q2012\\E",
      "shortCiteRegEx" : "Kimmig",
      "year" : 2012
    }, {
      "title" : "and Wang",
      "author" : [ "J. Lee" ],
      "venue" : "Y.",
      "citeRegEx" : "Lee and Wang 2014",
      "shortCiteRegEx" : null,
      "year" : 2014
    }, {
      "title" : "Fuzzy propositional formulas under the stable model semantics. the Special Issue on Logics for Reasoning about Preferences, Uncertainty and Vagueness of the IfCoLog",
      "author" : [ "Lee", "J. Wang 2016a] Lee", "Y. Wang" ],
      "venue" : "Journal of Logics and their Applications. To appear",
      "citeRegEx" : "Lee et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Lee et al\\.",
      "year" : 2016
    }, {
      "title" : "Weighted rules under the stable model semantics",
      "author" : [ "Lee", "J. Wang 2016b] Lee", "Y. Wang" ],
      "venue" : "In Proceedings of International Conference on Principles of Knowledge Representation and Reasoning (KR)",
      "citeRegEx" : "Lee et al\\.,? \\Q2016\\E",
      "shortCiteRegEx" : "Lee et al\\.",
      "year" : 2016
    }, {
      "title" : "and Domingos",
      "author" : [ "M. Richardson" ],
      "venue" : "P.",
      "citeRegEx" : "Richardson and Domingos 2006",
      "shortCiteRegEx" : null,
      "year" : 2006
    } ],
    "referenceMentions" : [ ],
    "year" : 2016,
    "abstractText" : "Markov Logic Networks (MLN) and Probabilistic Soft Logic (PSL) are widely applied formalisms in Statistical Relational Learning, an emerging area in Artificial Intelligence that is concerned with combining logical and statistical AI. Despite their resemblance, the relationship has not been formally stated. In this paper, we describe the precise semantic relationship between them from a logical perspective. This is facilitated by first extending fuzzy logic to allow weights, which can be also viewed as a generalization of PSL, and then relate that generalization to MLN. We observe that the relationship between PSL and MLN is analogous to the known relationship between fuzzy logic and Boolean logic, and furthermore the weight scheme of PSL is essentially a generalization of the weight scheme of MLN for the many-valued setting. Introduction Statistical relational learning (SRL) is an emerging area in Artificial Intelligence that is concerned with combining logical and statistical AI. Markov Logic Networks (MLN) (Richardson and Domingos 2006) and Probabilistic Soft Logic (PSL) (Kimmig et al. 2012; Bach et al. 2015) are well-known formalisms in statistical relational learning, and have been successfully applied to a wide range of AI applications, such as natural language processing, entity resolution, collective classification, and social network modeling. Both of them combine logic and probabilistic graphical model in a single representation, where each formula is associated with a weight, and the probability distribution over possible worlds is derived from the weights of the formulas that are satisfied by the possible worlds. However, despite their resemblance to each other, the precise relationship between their semantics is not obvious. PSL is based on fuzzy interpretations that range over reals in [0, 1], and in this sense is more general than MLN. On the other hand, its syntax is restricted to formulas in clausal form, unlike MLN that allows any complex formulas. It is also not obvious how their models’ weights are related to each other due to the different ways that the weights are associated with models. Originating from the machine learning research, these formalisms In Working Notes of the 6th International Workshop on Statistical Relational AI (StarAI 2016) are equipped with several efficient inference and learning algorithms, and some paper compares the suitability of one formalism over the other by experiments on specific applications (Beltagy, Erk, and Mooney 2014). On the other hand, the precise relationship between the two formalisms has not been formally stated. In this paper, we present a precise semantic relationship between them. We observe that the relationship is analogous to the well-known relationship between fuzzy logic and classical logic. Moreover, despite the different ways that weights of models are defined in each formalism, it turns out that they are essentially of the same kind. Towards this end, we introduce a weighted fuzzy logic as a proper generalization of PSL, which is also interesting on its own as an extension of the standard fuzzy logic to incorporate weighted models. The weighted fuzzy logic uses the same weight scheme as PSL, but associates weights to arbitrary fuzzy formulas. This intermediate formalism facilitates the comparison between PSL and MLN. We observe that the same analogy between fuzzy logic and Boolean logic carries over to between PSL and MLN. Analogous to that fuzzy logic agrees with Boolean logic on crisp interpretations, PSL and MLN agree on crisp interpretations, where their weights are proportional to each other. However, their maximum a posteriori (MAP) estimates do not necessarily coincide due to the differences between many-valued vs. Boolean models. The paper is organized as follows. We first review each of MLN, fuzzy propositional logic, and PSL. Then we define a weighted fuzzy logic as a generalization of PSL. Using this we study the semantic relationship between PSL and MLN.",
    "creator" : "LaTeX with hyperref package"
  }
}