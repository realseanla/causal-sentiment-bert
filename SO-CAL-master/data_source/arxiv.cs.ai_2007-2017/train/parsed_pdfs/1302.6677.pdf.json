{
  "name" : "1302.6677.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Taming the Curse of Dimensionality: Discrete Integration by Hashing and Optimization",
    "authors" : [ "Stefano Ermon", "Carla P. Gomes", "Ashish Sabharwal" ],
    "emails" : [ "ermonste@cs.cornell.edu", "gomes@cs.cornell.edu", "ashish.sabharwal@us.ibm.com", "selman@cs.cornell.edu" ],
    "sections" : [ {
      "heading" : "1 Introduction",
      "text" : "Computing integrals in very high dimensional spaces is a fundamental and largely unsolved problem of scientific computation [4, 7, 24], with numerous applications ranging from machine learning and statistics to biology and physics. As the volume grows exponentially in the dimensionality, the problem quickly becomes computationally intractable, a phenomenon traditionally known as the curse of dimensionality [2].\nWe revisit the problem of approximately computing discrete integrals, namely weighted sums over (extremely large) sets of items. This problem encompasses several important probabilistic inference tasks, such as computing marginals or normalization constants (partition function) in graphical models, which are in turn the cornerstones for parameter and structure learning [32]. Although we focus on the discrete case, the continuous case can in principle also be addressed, as it can be approximated by numerical integration. There are two common approaches to approximate these large discrete sums: sampling and variational methods. Variational methods [17, 32], often inspired by statistical physics, are very fast but do not provide guarantees on the quality of the results. Since sampling and counting can be reduced to each other [16], approximate techniques\nar X\niv :1\n30 2.\n66 77\nv1 [\ncs .L\nG ]\nbased on sampling are quite popular, but they suffer from similar issues because the number of samples required to obtain a statistically reliable estimate often grows exponentially in the problem size. Among sampling techniques, Markov Chain Monte Carlo (MCMC) methods are asymptotically accurate, but guarantees for practical applications exist only in a limited number of cases (fast mixing chains) [16, 18]. They are therefore often used in an heuristic manner. In practice, their performance crucially depends on the choice of the proposal distributions, which often must be domain-specific and expert-designed [9, 21].\nWe introduce a randomized scheme that computes with high probability (1− δ for any desired δ > 0) an approximately correct estimate (within a factor of 1 + for any desired > 0) for general weighted sums defined over exponentially large sets of items, such as the set of all possible variable assignments in a discrete probabilistic graphical model. From a computational complexity perspective, the counting problem we consider is complete for the #P complexity class [28], a set of problems encapsulating the entire Polynomial Hierarchy and believed to be significantly harder than NP.\nThe key idea is to reduce this #P problem to a small number (polynomial in the dimensionality) of instances of a (NP-hard) combinatorial optimization problem defined on the same space and subject to randomly generated “parity” constraints. The rationale behind this approach is that although combinatorial optimization is intractable in the worst case, it has witnessed great success in the past 50 years in fields such as Mixed Integer Programming (MIP) and propositional Satisfiability Testing (SAT). Problems such as computing a Maximum a Posteriori (MAP) assignment, although NP-hard, can in practice often be approximated [25] or solved exactly fairly efficiently [22, 23]. In fact, modern solvers can exploit structure in real-world problems and prune large portions of the search space, often dramatically reducing the runtime. In contrast, in a #P counting problem such as computing a marginal probability, one needs to consider contributions of an exponentially large number of items.\nOur algorithm, called Weighted-Integrals-And-Sums-By-Hashing (WISH), relies on randomized hashing techniques to “evenly cut” a high dimensional space. Such hashing was introduced by Valiant and Vazirani [29] to study the relationship between the number of solutions and the hardness of a combinatorial search. These techniques were also applied by Gomes et al. [11, 12] to obtain bounds on the number of solutions for the SAT problem. Our work is more general in that it can handle general weighted sums, such as the ones arising in probabilistic inference for graphical models. Our work is also closely related to recent work by Hazan and Jaakkola [14], who obtain a lower bound on the partition function by taking suitable expectations of a combination of MAP queries over randomly perturbed models. We improve upon this in two crucial aspects, namely, our estimate is a constant factor approximation of the true partition function (while their bounds have no tightness guarantee), and we provide a concentration result showing that our bounds hold not just in expectation but with high probability with a polynomial number of MAP queries. Note that this is consistent with known complexity results regarding #P and BPPNP; see Remark 1 below.\nWe demonstrate the practical efficacy of the WISH algorithm in the context of computing the partition function of random Clique-structured Ising models, Grid Ising models with known ground truth, and a challenging combinatorial application (Sudoku puzzle) completely out of reach of techniques such as Mean Field and Belief Propagation. We also consider the Model Selection problem in graphical models, specifically in the context of hand-written digit recognition. We show that our “anytime” and highly parallelizable algorithm can handle these problems at a level of accuracy and scale well beyond the current state of the art."
    }, {
      "heading" : "2 Problem Statement and Assumptions",
      "text" : "Let Σ be a (large) set of items. Let w : Σ→ R+ be a non-negative function that assigns a weight to each element of Σ. We wish to (approximately) compute the total weight of the set, defined as the following discrete integral or “partition function”\nW = ∑ σ∈Σ w(σ) (1)\nWe assume w is given as input and that it can be compactly represented, for instance in a factored form as the product of conditional probabilities tables. Note however that our results are more general and do not rely on a factored representation.\nAssumption: We assume to have access to an optimization oracle that can solve the following constrained optimization problem\nmax σ∈Σ w(σ)1{C}(σ) (2)\nwhere 1{C} : Σ → {0, 1} is an indicator function for a compactly represented subset C ⊆ Σ, i.e., 1{C}(σ) = 1 iff σ ∈ C. For concreteness, we discuss our setup and assumptions in the context probabilistic graphical models, which is our motivating application."
    }, {
      "heading" : "2.1 Inference in Graphical Models",
      "text" : "We consider a graphical model specified as a factor graph with N = |V | discrete random variables xi, i ∈ V where xi ∈ Xi. The global random vector x = {xs, s ∈ V } takes value in the cartesian product X = X1 × X2 × · · · × XN . We consider a probability distribution over x ∈ X (called configurations) p(x) = 1Z ∏ α∈I ψα({x}α) that factors into potentials or factors ψα : {x}α 7→ R+, where I is an index set and {x}α ⊆ V a subset of variables the factor ψα depends on, and Z is a normalization constant known as the partition function.\nGiven a graphical model, we let Σ = X be the set of all possible configurations (variable assignments). Define a weight function w : X → R+ that assigns to each configuration a score proportional to its probability: w(x) = ∏ α∈I ψα({x}α). Z may then be rewritten as\nZ = ∑ x∈X w(x) = ∑ x∈X ∏ α∈I ψα({x}α) (3)\nComputing Z is typically intractable because it involves a sum over an exponential number of configurations, and is often the most challenging inference task for many families of graphical models. Computing Z is however needed for many inference and learning tasks, such as evaluating the likelihood of data for a given model, computing marginal probabilities, and parameter estimation [32].\nIn the context of graphical models inference, we assume to have access to an optimization oracle that can answer Maximum a Posteriori (MAP) queries, namely, solve the following constrained optimization problem\narg max x∈X\np(x | C)\nthat is, we can find the most likely state (and its weight) given some evidence C. This is a strong assumption because MAP inference is known to be an NP-hard problem in general. Notice however that computing Z is a #P-complete problem, a complexity class believed to be even harder than NP."
    }, {
      "heading" : "2.2 Quadratures of Integrals",
      "text" : "Suppose we are given a quadrature for a continuous (multidimensional) integral of a function f : Rn → R+ over a high dimensional set S ⊆ Rn∫\nS f(x)dx ≈ ∑ x∈X w(x) = W\nwhere X is some discretization of S (e.g., grid based), and w(x) approximates the integral of f(x) over the corresponding element of volume. In this case, we require a compact representation for w and access to an oracle able to optimize the discretized function, subject to arbitrary constraints. See, e.g., Figure 1.\nFor simplicity, in the following we will restrict ourselves to the binary case, i.e., Σ = X = {0, 1}n. The general multinomial case where the sum is over X1×X2×· · ·×XN can be transformed into the former case using a binary representation, requiring dlog2 |Xi|e bits (binary variables) per dimension i."
    }, {
      "heading" : "3 Preliminaries",
      "text" : "We review some results on the construction and properties of universal hash functions; cf. [10, 27]. A reader already familiar with these results may skip to the next section.\nDefinition 1. A family of functions H = {h : {0, 1}n → {0, 1}m} is pairwise independent if the following two conditions hold when H ←R H is a function chosen uniformly at random from H. 1) ∀x ∈ {0, 1}n, the random variable H(x) is uniformly distributed in {0, 1}m. 2) ∀x1, x2 ∈ {0, 1}n x1 6= x2, the random variables H(x1) and H(x2) are independent.\nA simple way to construct such a function is to think about the family H of all possible functions {0, 1}n → {0, 1}m. This is a family of not only pairwise independent but fully independent functions. However, each function requires m2n bits to be represented, and is thus impractical in the typical case where n is large. On the other hand, pairwise independent hash functions can be constructed and represented in a much more compact way as follows; see Appendix for a proof.\nProposition 1. Let A ∈ {0, 1}m×n, b ∈ {0, 1}m. The family H = {hA,b(x) : {0, 1}n → {0, 1}m} where hA,b(x) = Ax+ b mod 2 is a family of pairwise independent hash functions.\nThe space C = {x : hA,b(x) = p} has a nice geometric interpretation as the translated nullspace of the random matrix A. It is therefore a finite dimensional vector space, with operations defined on the field F(2) (arithmetic modulo 2). We will refer to constraints in the form Ax = b mod 2 as parity constraints, as they can be rewritten in terms of XORs operations as Ai1x1 ⊕Ai2x2 ⊕ · · · ⊕Ainxn = bi.\n4 The WISH Algorithm\nWe start with the intuition behind our algorithm to approximate the value of W called WeightedIntegrals-And-Sums-By-Hashing (WISH).\nComputing W as defined in Equation (1) is challenging because the sum is defined over an exponentially large number of items, i.e., |Σ| = 2n when there are n binary variables. Let us define\nthe tail distribution of weights as G(u) , |{σ | w(σ) ≥ u}|. Note that G is a non-increasing step function, changing values at no more than 2n points. Then W may be rewritten as ∫ R+ G(u)du, i.e., the total area A under the G(u) vs. u curve. One way to approximate W is to (implicitly) divide this area A into either horizontal or vertical slices (see Figure 4), approximate the area in each slice, and sum up.\nSuppose we had an efficient procedure to estimate G(u) given any u. Then it is not hard to see that one could create enough slices by dividing up the x-axis, estimate G(u) at these points, and estimate the area A using quadrature. However, the natural way of doing this to any degree of accuracy would require a number of slices that grows at least logarithmically with the weight range on the x-axis, which is undesirable.\nAlternatively, one could split the y-axis, i.e., the G(u) value range [0, 2n], at geometrically growing values 1, 2, 4, · · · , 2n, i.e., into bins of sizes 1, 1, 2, 4, · · · , 2n−1. Let b0 ≥ b1 ≥ · · · ≥ bn be the weights of the configurations at the split points. In other words, bi is the 2\ni-th quantile of the weight distribution. Unfortunately, despite the monotonicity of G(u), the area in the horizontal slice defined by each bin is difficult to bound, as bi and bi+1 could be arbitrarily far from each other. However, the area in the vertical slice defined by bi and bi+1 must be bounded between 2\ni(bi−bi+1) and 2i+1(bi−bi+1), i.e., within a factor of 2. Thus, summing over the lower bound for all such slices and the left-most slice, the total area A must be within a factor of 2 of ∑n−1 i=0 2\ni(bi− bi+1) + 2nbn = b0 + ∑n i=1 2\ni−1bi. Of course, we don’t know bi. But if we could approximate each bi within a factor of p, we would get a 2p-approximation to the area A, i.e., to W .\nWISH provides an efficient way to realize this strategy, using a combination of randomized hash\nAlgorithm 1 WISH (w : Σ→ R+, n = log2 |Σ|, δ, α) T ← ⌈\nln(1/δ) α lnn ⌉ for i = 0, · · · , n do\nfor t = 1, · · · , T do Sample hash function hiA,b : Σ→ {0, 1}i, i.e. sample uniformly A ∈ {0, 1}i×n, b ∈ {0, 1}i\nwti ← maxσ w(σ) subject to Aσ = b mod 2 end for Mi ← Median(w1i , · · · , wTi )\nend for Return M0 + ∑n−1 i=0 Mi+12 i\nfunctions and an optimization oracle to approximate the bi values with high probability. Note that this method allows us to compute the partition function W (or the area A) by estimating weights bi at n+ 1 carefully chosen points, which is “only” an optimization problem.\nThe key insight to compute the bi values is as follows. Suppose we apply to configurations in Σ a randomly sampled pairwise independent hash function with 2m buckets and use an optimization oracle to compute the weight wm of a heaviest configuration in a fixed (arbitrary) bucket. If we repeat this process T times and consistently find that wm ≥ w∗, then we can infer by the properties of hashing that at least 2m configurations (globally) are likely to have weight at least w∗. By the same token, if there were in fact at least 2m+c configurations of a heavier weight ŵ > w∗ for some c > 0, there is a good chance that the optimization oracle will find wm ≥ ŵ and we would not underestimate the weight of the 2m-th heaviest configuration. As we will see shortly, this process, using pairwise independent hash functions to keep variance low, allows us to estimate bi accurately with only T = O(lnn) samples.\nThe pseudocode of WISH is shown as Algorithm 1. It is parameterized by the weight function w, the dimensionality n, a correctness parameter δ > 0, and a constant α > 0. Notice that the algorithm requires solving only Θ(n lnn ln 1/δ) optimization instances (MAP inference) to compute a sum defined over 2n items. In the following section, we formally prove that the output is a constant factor approximation of W with probability at least 1 − δ (probability over the choice of hash functions). Figure 1 shows the working of the algorithm. As more and more random parity constraints are added in the outer loop of the algorithm (“levels” increasing from 1 to n), the configuration space is (pairwise-uniformly) thinned out and the optimization oracle selects the heaviest (in red) of the surviving configurations. The final output is a weighted sum over the median of T such modes obtained at each level.\nRemark 1. The parity constraints Aσ = b mod 2 do not change the worst-case complexity of an NP-hard optimization problem. Our result is thus consistent with the fact that #P can be approximated in BPPNP, that is, one can approximately count the number of solutions with a randomized algorithm and a polynomial number of queries to an NP oracle [10].\nRemark 2. Although the parity constraints we impose are simple linear equations over a field, they can make the optimization harder. For instance, finding a configuration with the smallest Hamming weight satisfying a set of parity constraints is known to be NP-hard, i.e. equivalent to computing the minimum distance of a parity code [3, 30]. On the other hand, most low density parity check codes can be solved extremely fast in practice using heuristic methods such as message\npassing.\nRemark 3. Each of the optimization instances can be solved independently, allowing natural massive parallelization. We will also discuss how the algorithm can be used in an anytime fashion, and the implications of obtaining suboptimal solutions."
    }, {
      "heading" : "5 Analysis",
      "text" : "Since many configurations can have identical weight, it will help for the purposes of the analysis to fix, w.l.o.g., a weight-based ordering of the configurations, and a natural partition of the |Σ| = 2n configurations into n+ 1 bins that the ordering induces.\nDefinition 2. Fix an ordering σi, 1 ≤ i ≤ 2n, of the configurations in Σ such that for 1 ≤ j < 2n, w(σj) ≥ w(σj+1). For i ∈ {0, 1, · · · , n}, define bi , w(σ2i). Define a special bin B , {σ1} and, for i ∈ {0, 1, · · · , n− 1}, define bin Bi , {σ2i+1, σ2i+2, · · · , σ2i+1}.\nNote that bin Bi has precisely 2 i configurations. Further, for all σ ∈ Bi, it follows from the definition of the ordering that w(σ) ∈ [bi+1, bi]. This allows us to bound the sum of the weights of configurations in Bi (the “horizontal” slices) between 2 ibi+1 and 2 ibi."
    }, {
      "heading" : "5.1 Estimating the Total Weight",
      "text" : "Our main theorem is that Algorithm 1 provides a constant factor approximation to the partition function.\nTheorem 1. For any δ > 0 and positive constant α ≤ 0.0042, Algorithm 1 makes Θ(n lnn ln 1/δ) MAP queries and, with probability at least (1−δ), outputs a 16-approximation of W = ∑ σ∈Σw(σ).\nThe proof relies on two intermediate results whose proofs may be found in the Appendix.\nLemma 1. Let Mi = Median(w 1 i , · · · , wTi ) be defined as in Algorithm 1 and bi as in Definition 2. Then, for all c ≥ 2, there exists an α∗(c) > 0 such that for 0 < α ≤ α∗(c),\nPr [ Mi ∈ [bmin{i+c,n}, bmax{i−c,0}] ] ≥ 1− exp(−αT )\nLemma 2. Let L′ , b0 + ∑n−1 i=0 bmin{i+c+1,n}2 i and U ′ , b0 + ∑n−1 i=0 bmax{i+1−c,0}2\ni. Then U ′ ≤ 22cL′.\nProof of Theorem 1. It is clear from the pseudocode of Algorithm 1 that it makes Θ(n lnn ln 1/δ) MAP queries. For accuracy analysis, we can write W as:\nW , 2n∑ j=1 w(σj) = w(σ1) + n−1∑ i=0 ∑ σ∈Bi w(σ)\n∈ [ b0 +\nn−1∑ i=0 bi+12 i, b0 + n−1∑ i=0 bi2 i\n] , [L,U ]\nNote that U ≤ 2L because 2L = 2b0 + ∑n−1 i=0 bi+12 i+1 = 2b0 + ∑n `=1 b`2 ` = b0 + ∑n `=0 b`2 ` ≥ U . Hence, if we had access to the true values of all bi, we could obtain a 2-approximation to W .\nWe do not know true bi values, but Lemma 1 shows that the Mi values computed by Algorithm 1 are sufficiently close to bi with high probability. Recall that Mi is the median of MAP values computed by adding i random parity constraints and repeating the process T times. Specifically, for c ≥ 2, it follows from Lemma 1 that for 0 < α ≤ α∗(c),\nPr [ n⋂ i=0 ( Mi ∈ [bmin{i+c,n}, bmax{i−c,0}] )] ≥ 1− n exp(−αT ) ≥ (1− δ)\nfor T = log(1/δ)α log n, and M0 = b0. Thus, with probability at least (1− δ) the output of Algorithm 1, M0 + ∑n−1 i=0 Mi+12\ni, lies in the range:[ b0 +\nn−1∑ i=0 bmin{i+c+1,n}2 i, b0 + n−1∑ i=0 bmax{i+1−c,0}2 i\n]\nLet us denote this range [L′, U ′]. By monotonicity of bi, L ′ ≤ L ≤ U ≤ U ′. Hence, W ∈ [L′, U ′].\nApplying Lemma 2, we have U ′ ≤ 22cL′, which implies that with probability at least 1− δ the output of Algorithm 1 is a 22c approximation of W . For c = 2, observing that α∗(2) ≥ 0.0042 (see proof of Lemma 1), we obtain a 16-approximation for 0 < α ≤ 0.0042."
    }, {
      "heading" : "5.2 Estimating the Tail Distribution",
      "text" : "We can also estimate the entire tail distribution of the weights, defined as G(u) , |{σ | w(σ) ≥ u}|.\nTheorem 2. Let Mi be defined as in Algorithm 1, u ∈ R+, and q(u) be the maximum i such that ∀j ∈ {0, · · · , i},Mj ≥ u. Then, for any δ > 0, with probability ≥ (1−δ), 2q(u) is an 8-approximation of G(u) computed using O(n lnn ln 1/δ) MAP queries.\nWhile this is an interesting result in its own right, if the goal is to estimate the total weight W , then the scheme in Section 5.1, requiring a total of only Θ(n lnn ln 1/δ) MAP queries, is more efficient than first estimating the tail distribution for several values of u."
    }, {
      "heading" : "5.3 Improving the Approximation Factor",
      "text" : "Given a κ-approximation algorithm such as Algorithm 1 and any > 0, we can design a (1 + )- approximation algorithm with the following construction. Let ` = log1+ κ. Define a new set of configurations Σ` = Σ × Σ × · · · × Σ, and a new weight function w′ : Σ` → R as w′(σ1, · · · , σ`) = w(σ1)w(σ2) · · ·w(σ`).\nProposition 2. Let Ŵ be a κ-approximation of ∑\nσ′∈Σ` w ′(σ′). Then Ŵ 1/` is a κ1/`-approximation of ∑\nσ∈Σw(σ). To see why this holds, observe that W ′ = ∑\nσ′∈Σ` w ′(σ′) = (∑ σ∈Σw(σ) )` = W `. Since 1κW\n′ ≤ Ŵ ≤ κW ′, we obtain that Ŵ 1/` must be a κ1/` = 1 + approximation of W .\nNote that this construction requires running Algorithm 1 on an enlarged problem with ` times more variables. Although the number of optimization queries grows polynomially with `, increasing the number of variables might significantly increase the runtime."
    }, {
      "heading" : "5.4 Further Approximations",
      "text" : "When the instances defined in the inner loop are not solved to optimality, Algorithm 1 still provides approximate lower bounds on W with high probability.\nTheorem 3. Let w̃ti be suboptimal solutions for the optimization problems in Algorithm 1, i.e., w̃ti ≤ wti. Let W̃ be the output of Algorithm 1 with these suboptimal solutions. Then, for any δ > 0, with probability at least 1− δ, W̃16 ≤W .\nFurther, if w̃ti ≥ 1Lw t i for some L > 0, then with probability at least 1 − δ, W̃ is a 16L-\napproximation to W .\nThe output is always an approximate lower bound, even if the optimization is stopped early. The lower bound is monotonically non-decreasing over time, and is guaranteed to eventually reach within a constant factor of W . We thus have an anytime algorithm."
    }, {
      "heading" : "6 Experimental Evaluation",
      "text" : "We implemented WISH using the open source solver ToulBar2 [1] to solve the MAP inference problem. ToulBar2 is a complete solver (i.e., given enough time, it will find an optimal solution and provide an optimality certificate), and it was one of the winning algorithms in the UAI-2010 inference competition. We augmented ToulBar2 with the IBM ILOG CPLEX CP Optimizer 12.3 based techniques borrowed from Gomes et al. [13] to efficiently handle the random parity constraints. Specifically, the set of equations Ax = b mod 2 are linear equations over the field F(2) and thus allow for efficient propagation and domain filtering using Gaussian Elimination.\nFor our experiments, we run WISH in parallel using a compute cluster with 642 cores. We assign each optimization instance in the inner loop to one core, and finally process the results when all optimization instances have been solved or have reached a timeout.\nFor comparison, we consider Tree Reweighted Belief Propagation [31] which provides an upper bound on Z, Mean Field [32] which provides a lower bound, and Loopy Belief Propagation [20] which provides an estimate with no guarantees. We use the implementations of these algorithms available in the LibDAI library [19]."
    }, {
      "heading" : "6.1 Provably Accurate Approximations",
      "text" : "For our first experiment, we consider the problem of computing the partition function, Z (cf. Eqn. (3)), of random Clique-structured Ising models on n binary variables xi ∈ {0, 1} for i ∈ {1, · · · , n}. The interaction between xi and xj is defined as ψij(xi, xj) = exp(−wij) when xi 6= xj , and 1 otherwise, where wij is uniformly sampled from [0, w √ |i− j| ] and w is a parameter set to 0.2. We further inject some structure by introducing a closed chain of strong repulsive interactions uniformly sampled from [−10w, 0]. We consider models with n ranging from 10 to 60. These models have treewidth n and can be solved exactly (by brute force) only up to about n = 25 variables.\nFigure 4(a) shows the results using various methods for varying problem size. We also computed ground truth for n ≤ 25 by brute force enumeration. While other methods start to diverge from the ground truth at around n = 25, our estimate, as predicted by Theorem 1, remains very accurate, visually overlapping in the plot. The actual estimation error is much smaller than the worst-case factor of 16 guaranteed by Theorem 1, as in practice over- and under-estimation errors tend to\ncancel out. For n > 25 we don’t have ground truth, but other methods fall well outside the provable interval provided by WISH, reported as an error bar that is very small compared to the magnitude of errors made by the other methods.\nAll optimization instances generated by WISH for n ≤ 60 were solved (in parallel) to optimality within a timeout of 8 hours, resulting in high confidence tight approximations of the partition function. We are not aware of any other practical method that can provide such guarantees for counting problems of this size, i.e., a weighted sum defined over 260 items."
    }, {
      "heading" : "6.2 Anytime Usage with Suboptimal Solutions",
      "text" : "Next, we investigate the quality of our results when not all of the optimization instances can be solved to optimality because of timeouts, so that the strong theoretical guarantees of Theorem 1 do not apply (although Theorem 3 still applies). We consider 10 × 10 binary Grid Ising models, for which ground truth can be computed using the junction tree method [32]. We use the same experimental setup as Hazan and Jaakkola [14], who also use random MAP queries to derive bounds (without a tightness guarantee) on the partition function. Specifically, we have n = 100 binary variables xi ∈ {−1, 1} with interaction ψij(xi, xj) = exp(wijxixj). For the attractive case, we draw wij from [0, w]; for the mixed case, from [−w,w]. The “local field” is ψij(xi) = exp(fixi) where fi, the strength at site i, is sampled uniformly from [−f, f ], where f is a parameter with value 0.1 or 1.0.\nFigure 3 reports the estimation error for the log-partition function, when using a timeout of 15 minutes. We see that WISH provides accurate estimates for a wide range of weights, often improving over all other methods. The slight performance drop of WISH for coupling strengths w ≈ 1 appears to occur because in that weight range the terms corresponding to i ≈ n/2 parity constraints are the most significant in the output sum M0 + ∑n−1 i=0 Mi+12\ni. Empirically, optimization instances with roughly n/2 parity constraints are often the hardest to solve, resulting in possibly a significant underestimation of the value of W = Z when a timeout occurs. We do not directly compare with the work of Hazan and Jaakkola [14] as we did not have access to their code. However, a visual look at their plots suggests that WISH would provide an improvement in accuracy, although with longer runtime."
    }, {
      "heading" : "6.3 Hard Combinatorial Structures",
      "text" : "An interesting and combinatorially challenging graphical model arises from Sudoku, which is a popular number-placement puzzle where the goal is to fill a 9× 9 grid (see Figure 4(b)) with digits from {1, · · · , 9} so that the entries in each row, column, and 3×3 block composing the grid, are all distinct. The puzzle can be encoded as a graphical model with 81 discrete variables with domain {1, · · · , 9}, with potentials ψα({x}α) = 1 if and only if all variables in {x}α are different, and α ∈ I where I is an index set containing the subsets of variables in each row, column, and block. This defines a uniform probability distribution over all valid complete Sudoku grids (a non-valid grid has probability zero), and the normalization constant Zs equals the total number of valid grids. It is known that Zs = 6.671 × 1021. This number was computed exactly with a combination of computer enumeration and clever exploitation of properties of the symmetry group [8]. Here, we attempt to approximately compute this number using the general-purpose scheme WISH.\nFirst, following Felgenhauer and Jarvis [8], we simplify the problem by fixing the first block as in Figure 4(b), obtaining a new problem over 72 variables whose normalization constant is\nZ ′ = Zs/9! ≈ 254. Next, since we are dealing with a feasibility rather than optimization problem, we replace ToulBar2 with CryptoMiniSAT [26], a SAT solver designed for unweighted cryptographic problems and which natively supports parity constraints. We observed that WISH can consistently find solutions (60% of the times) after adding 52 random parity constraints, while for 53 constraints the success rate drops below 0.5, at 45%. Therefore Mi = 1 in Algorithm 1 for i ≤ 52 and there should thus be at least 252 · 9! ≈ 1.634 × 1021 solutions to the Sudoku puzzle. Although Theorem 1 cannot be applied due to timeouts for larger values of i, this estimate is clearly very close to the known true count. In contrast, the simple “local reasoning” done by variational methods is not powerful enough to find even a single solution. Mean Field and Belief Propagation report an estimated solution count of exp(−237.921) and exp(−119.307), resp., on a relaxed problem where violating a constraint gives a penalty exp(−10)."
    }, {
      "heading" : "6.4 Model Selection",
      "text" : "Many inference and learning tasks require computing the normalization constant of graphical models. For instance, it is needed to evaluate the likelihood of observed data for a given model. This is necessary for Model Selection, i.e., to rank candidate models, or to trigger early stopping during training when the likelihood of a validation set starts to decrease, in order to avoid overfitting [6].\nWe train Restricted Boltzmann Machines (RBM) [15] using Contrastive Divergence (CD) [5, 33] on MNIST hand-written digits dataset. In an RBM there is a layer of nh hidden binary variables h = h1, · · · , hnh and a layer of nv binary visible units v = v1, · · · , vnv . The joint probability distribution is given by P (h, v) = 1Z exp(b\n′v + c′h + h′Wv). We use nh = 50 hidden units and nv = 196 visible units. We learn the parameters b, c,W using CD-k for k ∈ {1, 10, 15}, where k denotes the number of Gibbs sampling steps used in the inference phase, with 15 training epochs and minibatches of size 20.\nFigure 4(c) depicts confabulations (samples generated with Gibbs sampling) from the three learned models. To evaluate the loglikelihood of the data and determine which model is the best, one needs to compute Z. We use WISH to estimate this quantity, with a timeout of 10 minutes, and then rank the models according to the average loglikelihood of the data. The scores we obtain are −41.70,−40.35,−40.01 for k = 1, 10, 15, respectively (larger scores means higher likelihood). In this case ToulBar2 was not able to prove optimality for all instances, so only Theorem 3 applies to these results. Although we do not have ground truth, it can be seen that the ranking of the models is consistent with what visually appears closer to a large collection of hand-written digits in Figure 4(c). Note that k = 1 is clearly not a good representative, because of the highly uneven distribution of digit occurrences. The ranking of WISH is also consistent with the fact that using more Gibbs sampling steps in the inference phase should provide better gradient estimates and therefore a better learned model. In contrast, Mean Field results in scores −35.47,−36.08,−36.84, resp., and would thus rank the models in reverse order of what is visually the most representative order."
    }, {
      "heading" : "7 Conclusion",
      "text" : "We introduced WISH, a randomized algorithm that, with high probability, gives a constant-factor approximation of a general discrete integral defined over an exponentially large set. WISH reduces the intractable counting problem to a small number of instances of a combinatorial optimization problem subject to parity constraints used as a hash function. In the context of graphical models, we showed how to approximately compute the normalization constant, or partition function, using a small number of MAP queries. Using state-of-the-art combinatorial optimization tools, we are thus able to provide discrete integral or partition function estimates with approximation guarantees at a scale that could till now be handled only heuristically. Finally, our method is a massively parallelizable and anytime algorithm which can also be stopped early to obtain empirically accurate estimates that provide lower bounds with a high probability."
    }, {
      "heading" : "Acknowledgments",
      "text" : "Supported by NSF Expeditions in Computing grant on Computational Sustainability #0832782 and NSF Computing Research Infrastructure grant #1059284."
    }, {
      "heading" : "A Appendix: Proofs",
      "text" : "Proof of Proposition 1. Immediately follows from Lemma 3.\nLemma 3 (pairwise independent hash functions construction). Let a ∈ {0, 1}n, b ∈ {0, 1}. Then the family H = {ha,b(x) : {0, 1}n → {0, 1}} where ha,b(x) = a · x+ b mod 2 is a family of pairwise independent hash functions. The function ha,b(x) can be alternatively rewritten in terms of XORs operations ⊕, i.e. ha,b(x) = a1x1 ⊕ a2x2 ⊕ · · · ⊕ anxn ⊕ b.\nProof. Uniformity is clear because it is the sum of uniform Bernoulli random variables over the field F(2) (arithmetic modulo 2). For pairwise independence, given any two configurations x1, x2 ∈ {0, 1}n, consider the sets of indexes S1 = {i : x1(i) = 1}, S2 = {i : x2(i) = 1}. Then\nH(x1) = ∑\ni∈S1∩S2\nai ⊕ ∑\ni∈S1\\S2\nai ⊕ b\n= R(S1 ∩ S2)⊕R(S1 \\ S2)⊕ b H(x2) = R(S1 ∩ S2)⊕R(S2 \\ S1)⊕ b\nNote that R(S1 ∩ S2), R(S1 \\ S2), R(S2 \\ S1) and b are independent as they depend on disjoint subsets of independent variables. When x1 6= x2, this implies that (H(x1), H(x2)) takes each value in {0, 1}2 with probability 1/4.\nAs pairwise independent random variables are fundamental tools for derandomization of algorithms, more complicated constructions based larger finite fields generated by a prime power F(qk) where q is a prime number are known [27]. These constructions require a smaller number of random bits as input, and would therefore reduce the variance of our algorithm (which is deterministic except for the randomized hash function use).\nProof of Lemma 1. The cases where i + c > n or i − c < 0 are obvious. For the other cases, let’s define the set of the 2j heaviest configurations as in Definition 2:\nXj = {σ1, σ2, · · · , σ2j}\nDefine the following random variable\nSj(h i A,b) , ∑ σ∈Xj 1{Aσ=b mod 2}\nwhich gives the number of elements of Xj satisfying i random parity constraints. The randomness is over the choice of A and b, which are uniformly sampled in {0, 1}i×n and {0, 1}i respectively. By Proposition 1, hiA,b : Σ→ {0, 1}i is sampled from a family of pairwise independent hash functions. Therefore, from the uniformity property in Definition 1, for any σ the random variable 1{Aσ=b mod 2} is Bernoulli with probability 1/2i. By linearity of expectation,\nE[Sj(h i A,b)] = |Xj | 2i = 2j 2i\nFurther, from the pairwise independence property in Definition 1,\nV ar[Sj(h i A,b)] = ∑ σ∈Xj V ar [ 1{Aσ=b mod 2} ] = 2j\n2i\n( 1− 1\n2i ) Applying Chebychev Inequality, we get that for any k > 0,\nPr [∣∣∣∣Sj(hiA,b)− 2j2i ∣∣∣∣ > k √ 2j 2i ( 1− 1 2i )] ≤ 1 k2\nRecall the definition of the random variable wi = maxσ w(σ) subject to Aσ = b mod 2 (the randomness is over the choice of A and b). Then\nPr[wi ≥ bj ] = Pr[wi ≥ w(σ2j )] ≥ Pr[Sj(hiA,b) ≥ 1]\nwhich is the probability that at least one configuration from Xj “survives” after adding i parity constraints.\nTo ensure that the probability bound 1/k2 provided by Chebychev Inequality is smaller than a 1/2, we need k > √ 2. We use k = 3/2 for the rest of this proof, exploiting the following simple observations which hold for k = 3/2 and any c ≥ 2:\nk √ 2c ≤ 2c − 1\nk √ 2−c ≤ 1− 2−c\nFor j = i+ c and k and c as above, we have that\nPr[wi ≥ bi+c] ≥ Pr[Si+c(hiA,b) ≥ 1] ≥ Pr [ |Si+c(hi)− 2c| ≤ 2c − 1 ] ≥\nPr [ |Si+c(hi)− 2c| ≤ k √ 2c ] ≥\nPr [∣∣Si+c(hiA,b)− 2c∣∣ ≤ k √ 2c (\n1− 1 2i\n)] ≥\n1− 1 k2 = 5/9 > 1/2\nSimilarly, for j = i− c and k and c as above, we have Pr[wi ≤ bi−c] ≥ 5/9 > 1/2. Finally, using Chernoff inequality (since w1i , · · · , wTi are i.i.d. realizations of wi)\nPr [Mi ≤ bi−c] ≥ 1− exp(−α′(c)T ) (4) Pr [Mi ≥ bi+c] ≥ 1− exp(−α′(c)T ) (5)\nwhere α′(2) = 2(5/9− 1/2)2, which gives the desired result\nPr [bi+c ≤Mi ≤ bi−c] ≥ 1− 2 exp(α′(c)T ) = 1− exp(−α∗(c)T )\nwhere α∗(2) = ln 2α′(2) = 2(5/9− 1/2)2 ln 2 > 0.0042\nProof of Lemma 2. Observe that we may rewrite L′ as follows:\nL′ = b0 + n−1∑\ni=n−c−1 bn2 i + n−c−2∑ i=0 bi+c+12 i =\nb0 + n−1∑\ni=n−c−1 bn2 i + n−1∑ j=c+1 bj2 j−c−1\nSimilarly,\nU ′ = b0 + c−1∑ i=0 b02 i + n−1∑ i=c bi+1−c2 i =\nb0 + c−1∑ i=0 b02 i + n−c∑ j=1 bj2 j+c−1 = 2cb0 + 2 c n−c∑ j=1 bj2 j−1 =\n2cb0 + 2 c  c∑ j=1 bj2 j−1 + n−c∑ j=c+1 bj2 j−1  ≤ 2cb0 + 2 c\n c∑ j=1 b02 j−1 + n−c∑ j=c+1 bj2 j−1  = 22cb0 + 2\n2c n−c∑ j=c+1 bj2 j−1−c ≤\n22c b0 + n−1∑ i=n−c−1 bn2 i + n−1∑ j=c+1 bj2 j−c−1  = 22cL′ This finishes the proof.\nProof of Theorem 2. As in the proof of Lemma 1, define the random variable\nSu(h i A,b) , ∑ σ∈{σ|w(σ)≥u} 1{Aσ=b mod 2}\nthat gives the number of configurations with weight at least u satisfying i random parity constraints. Then for i ≤ blogG(u)c− c ≤ logG(u)− c using Chebychev and Chernoff inequalities as in Lemma 1\nPr [Mi ≥ u] ≥ 1− exp(−α′T )\nFor i ≥ dlogG(u)e+ c ≥ logG(u) + c, using Chebychev and Chernoff inequalities as in Lemma 1\nPr[Mi < u] ≥ 1− exp(−α′T )\nTherefore,\nPr\n[ 1\n2c+1 2q(u) ≤ G(u) ≤ 2c+12q(u)\n] ≥\nPr blog2G(u)c−c⋂ i=0 (Mi ≥ u) ⋂( Mdlog2G(u)e+c < u ) ≥\n1− n exp(−α′T ) ≥ 1− δ\nThis finishes the proof.\nProof of Theorem 3. If w̃ti ≤ wti , from Theorem 1 with probability at least 1 − δ we have W̃ ≤ M0 + ∑n−1 i=0 Mi+12 i ≤ UB′. Since UB′ 22c ≤ LB′ ≤W ≤ UB′, it follows that with probability at least 1− δ, W̃ 22c ≤W .\nIf wti ≥ w̃ti ≥ 1Lw t i , then from Theorem 1 with probability at least 1− δ the output is 1LLB ′ ≤ W̃ ≤ UB′, and LB′ ≤W ≤ UB′."
    } ],
    "references" : [ ],
    "referenceMentions" : [ ],
    "year" : 2013,
    "abstractText" : "<lb>Integration is affected by the curse of dimensionality and quickly becomes intractable as<lb>the dimensionality of the problem grows. We propose a randomized algorithm that, with high<lb>probability, gives a constant-factor approximation of a general discrete integral defined over an<lb>exponentially large set. This algorithm relies on solving only a small number of instances of a<lb>discrete combinatorial optimization problem subject to randomly generated parity constraints<lb>used as a hash function. As an application, we demonstrate that with a small number of MAP<lb>queries we can efficiently approximate the partition function of discrete graphical models, which<lb>can in turn be used, for instance, for marginal computation or model selection.",
    "creator" : "LaTeX with hyperref package"
  }
}