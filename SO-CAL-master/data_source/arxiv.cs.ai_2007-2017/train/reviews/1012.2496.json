{"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Dec-2010", "title": "On the Implementation of GNU Prolog", "abstract": "GNU Prolog is a general-purpose implementation of the Prolog language, which distinguishes itself from most other systems by being, above all else, a native-code compiler which produces standalone executables which don't rely on any byte-code emulator or meta-interpreter. Other aspects which stand out include the explicit organization of the Prolog system as a multipass compiler, where intermediate representations are materialized, in Unix compiler tradition. GNU Prolog also includes an extensible and high-performance finite domain constraint solver, integrated with the Prolog language but implemented using independent lower-level mechanisms. This article discusses the main issues involved in designing and implementing GNU Prolog: requirements, system organization, performance and portability issues as well as its position with respect to other Prolog system implementations and the ISO standardization initiative.", "histories": [["v1", "Sat, 11 Dec 2010 23:23:11 GMT  (152kb,D)", "https://arxiv.org/abs/1012.2496v1", "30 pages, 3 figures, To appear in Theory and Practice of Logic Programming (TPLP); Keywords: Prolog, logic programming system, GNU, ISO, WAM, native code compilation, Finite Domain constraints"], ["v2", "Wed, 15 Dec 2010 15:07:58 GMT  (148kb,D)", "http://arxiv.org/abs/1012.2496v2", "30 pages, 3 figures, To appear in Theory and Practice of Logic Programming (TPLP); Keywords: Prolog, logic programming system, GNU, ISO, WAM, native code compilation, Finite Domain constraints"]], "COMMENTS": "30 pages, 3 figures, To appear in Theory and Practice of Logic Programming (TPLP); Keywords: Prolog, logic programming system, GNU, ISO, WAM, native code compilation, Finite Domain constraints", "reviews": [], "SUBJECTS": "cs.PL cs.AI", "authors": ["daniel diaz", "salvador abreu", "philippe codognet"], "accepted": false, "id": "1012.2496"}
