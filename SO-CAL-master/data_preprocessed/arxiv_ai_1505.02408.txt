The/DT most/RBS successful/JJ parallel/JJ SAT/NN and/CC MaxSAT/NN solvers/NNS follow/VBP a/DT portfolio/NN approach/NN ,/, where/WRB each/DT thread/NN applies/VBZ a/DT different/JJ algorithm/NN (/-LRB- or/CC the/DT same/JJ algorithm/NN configured/VBD differently/RB )/-RRB- to/TO solve/VB a/DT given/VBN problem/NN instance/NN ./.
The/DT main/JJ goal/NN of/IN building/VBG a/DT portfolio/NN is/VBZ to/TO diversify/VB the/DT search/NN process/NN being/VBG carried/VBN out/RP by/IN each/DT thread/NN ./.
As/RB soon/RB as/IN one/CD thread/NN finishes/NNS ,/, the/DT instance/NN can/MD be/VB deemed/VBN solved/VBN ./.
In/IN this/DT paper/NN we/PRP present/VBP a/DT new/JJ open/JJ source/NN distributed/VBN solver/NN for/IN MaxSAT/NNP solving/VBG that/IN addresses/NNS two/CD issues/NNS commonly/RB found/VBN in/IN multicore/NN parallel/JJ solvers/NNS ,/, namely/RB memory/NN contention/NN and/CC scalability/NN ./.
Preliminary/JJ results/NNS show/VBP that/IN our/PRP$ non-portfolio/JJ distributed/VBN MaxSAT/NN solver/NN outperforms/VBZ its/PRP$ sequential/JJ version/NN and/CC is/VBZ able/JJ to/TO solve/VB more/JJR instances/NNS as/IN the/DT number/NN of/IN processes/NNS increases/NNS ./.
